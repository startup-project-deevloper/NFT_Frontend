{
  "address": "0x809390ED08D827aa39981c05d1e4466491585a7A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "randomConsumerAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "validatorAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "BuybackPriceUpdateRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prediction",
          "type": "uint256"
        }
      ],
      "name": "CoinFlipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prediction",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomResult",
          "type": "uint256"
        }
      ],
      "name": "FlipProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jotAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAddedToQuickswap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jotAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemovedFromQuickswap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "VerificationRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "originalCollection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "syntheticCollection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        }
      ],
      "name": "VerifyResponseReceived",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUCTION_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AuctionsManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RANDOM_ORACLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_ORACLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityToFuturePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityToQuickswap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToBuy_",
          "type": "uint256"
        }
      ],
      "name": "buyJotTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buybackPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buybackRequiredAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buybackAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundingLeft",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jotsLeft",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "syntheticId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newOriginalId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "change",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "changeNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimLiquidityTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "decreaseSellingSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToDeposit_",
          "type": "uint256"
        }
      ],
      "name": "depositJotTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc721address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "exchangeOwnerJot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "prediction",
          "type": "uint64"
        }
      ],
      "name": "flipJot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAccruedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAvailableJotsForBuyback",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalJots",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFunding",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getJotAmountLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyAmount",
          "type": "uint256"
        }
      ],
      "name": "getSalePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "increaseSellingSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "jotAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "originalCollectionAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "erc721address_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "auctionManagerAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocol_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jotPool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redemptionPool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidityCalculatorAddress_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isAllowedToFlip",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isSyntheticNFTCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isSyntheticNFTFractionalised",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jotAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jotPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "lockedNFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "originalCollectionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownersByNonce",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perpetualPoolLiteAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "buybackPrice_",
          "type": "uint256"
        }
      ],
      "name": "processBuybackPriceResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "processFlipResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "originalCollection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "syntheticCollection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "enum State",
              "name": "previousState",
              "type": "uint8"
            }
          ],
          "internalType": "struct VerifyRequest",
          "name": "requestData",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        }
      ],
      "name": "processVerifyResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "reassignNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "recoverToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyToKeep_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceFraction_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftOwner_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadata_",
          "type": "string"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "syntheticId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityFromPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setFlip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "setMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "perpetualPoolLiteAddress_",
          "type": "address"
        }
      ],
      "name": "setPerpetualPoolLiteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticProtocolRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "originalTokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ownerSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellingSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "soldSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquiditySold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fractionPrices",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastFlipTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityTokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perpetualFuturesLShares",
          "type": "uint256"
        },
        {
          "internalType": "enum State",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateBuybackPrice",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newFractionPrice_",
          "type": "uint256"
        }
      ],
      "name": "updatePriceFraction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFundingTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToWithdraw_",
          "type": "uint256"
        }
      ],
      "name": "withdrawJotTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLiquidityFromFuturePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLiquidityFromQuickswap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3182e324f6a57c4f8b26ac2f38ee91842581c723c8c9737b9eabb8166f56da8",
  "receipt": {
    "to": null,
    "from": "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
    "contractAddress": "0x809390ED08D827aa39981c05d1e4466491585a7A",
    "transactionIndex": 3,
    "gasUsed": "5383038",
    "logsBloom": "0x
    "blockHash": "0xd0bc6a1e861a4c3fb838863ba520d2fc9dea34fe1742cda69cb037304ed57890",
    "transactionHash": "0xa3182e324f6a57c4f8b26ac2f38ee91842581c723c8c9737b9eabb8166f56da8",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 21130533,
        "transactionHash": "0xa3182e324f6a57c4f8b26ac2f38ee91842581c723c8c9737b9eabb8166f56da8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000005f9f25f607c2c00000000000000000000000000000000000000000000000002277e0e19ce97b86000000000000000000000000000000000000000000000000018e90290dcc5498000000000000000000000000000000000000000000000000221841bba6e1b8c600000000000000000000000000000000000000000000000001ee2f4f03d41758",
        "logIndex": 8,
        "blockHash": "0xd0bc6a1e861a4c3fb838863ba520d2fc9dea34fe1742cda69cb037304ed57890"
      }
    ],
    "blockNumber": 21130533,
    "cumulativeGasUsed": "5631939",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc1cFda38f5c2c05D268E86D219521A64Ff0aE4Ff",
    "0xCd5a62a7aD9b2e19aa3386b654728EE9B1e75cCF"
  ],
  "solcInputHash": "34885e7a093b1857f8bf3aa939a3910e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"randomConsumerAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"BuybackPriceUpdateRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prediction\",\"type\":\"uint256\"}],\"name\":\"CoinFlipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prediction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomResult\",\"type\":\"uint256\"}],\"name\":\"FlipProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jotAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAddedToQuickswap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jotAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemovedFromQuickswap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"VerificationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalCollection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"syntheticCollection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"VerifyResponseReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AuctionsManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RANDOM_ORACLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_ORACLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityToFuturePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityToQuickswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToBuy_\",\"type\":\"uint256\"}],\"name\":\"buyJotTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buybackRequiredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buybackAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jotsLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"syntheticId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newOriginalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"change\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"changeNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimLiquidityTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"decreaseSellingSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToDeposit_\",\"type\":\"uint256\"}],\"name\":\"depositJotTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchangeOwnerJot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"prediction\",\"type\":\"uint64\"}],\"name\":\"flipJot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAccruedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAvailableJotsForBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalJots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFunding\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getJotAmountLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"name\":\"getSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"increaseSellingSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jotAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originalCollectionAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc721address_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionManagerAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocol_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jotPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redemptionPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityCalculatorAddress_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isAllowedToFlip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isSyntheticNFTCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isSyntheticNFTFractionalised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jotAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jotPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lockedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originalCollectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownersByNonce\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perpetualPoolLiteAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"buybackPrice_\",\"type\":\"uint256\"}],\"name\":\"processBuybackPriceResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"processFlipResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"originalCollection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum State\",\"name\":\"previousState\",\"type\":\"uint8\"}],\"internalType\":\"struct VerifyRequest\",\"name\":\"requestData\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"processVerifyResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"reassignNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyToKeep_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceFraction_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftOwner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata_\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"syntheticId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFlip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"perpetualPoolLiteAddress_\",\"type\":\"address\"}],\"name\":\"setPerpetualPoolLiteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticProtocolRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"originalTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fractionPrices\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastFlipTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perpetualFuturesLShares\",\"type\":\"uint256\"},{\"internalType\":\"enum State\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateBuybackPrice\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFractionPrice_\",\"type\":\"uint256\"}],\"name\":\"updatePriceFraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFundingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw_\",\"type\":\"uint256\"}],\"name\":\"withdrawJotTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidityFromFuturePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidityFromQuickswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"priviprotocol\",\"kind\":\"dev\",\"methods\":{\"buyJotTokens(uint256,uint256)\":{\"params\":{\"amountToBuy_\":\"the amount of jots to buy\",\"tokenId_\":\"the id of the synthetic nft\"}},\"constructor\":{\"details\":\"initializes some immutable variables and lock the implementation contract      for further initializations (with the initializer modifier)\",\"params\":{\"randomConsumerAddress_\":\"the address of the vrf Chainlink node\",\"validatorAddress_\":\"the address of the polygon validator Chainlink node\"}},\"decreaseSellingSupply(uint256,uint256)\":{\"details\":\"caller must be the owner of the NFT\",\"params\":{\"amount_\":\"the amount of jots to transfer to supply\",\"tokenId_\":\"the id of the synthetic nft\"}},\"depositJotTokens(uint256,uint256)\":{\"params\":{\"amountToDeposit_\":\"the amount of jots to deposit\",\"tokenId_\":\"the id of the synthetic nft\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseSellingSupply(uint256,uint256)\":{\"details\":\"caller must be the owner of the NFT\",\"params\":{\"amount_\":\"the amount of jots to transfer from supply\",\"tokenId_\":\"the id of the synthetic nft\"}},\"initialize(address,address,address,address,address,address,address,address,address)\":{\"details\":\"initialize the proxy contract\",\"params\":{\"auctionManagerAddress_\":\"the auctions manager fabric address\",\"erc721address_\":\"the address of the synthetic erc721 contract handled by this\",\"jotAddress_\":\"the address of the jot contract for this collection\",\"jotPool_\":\"the address of the corresponding jot pool\",\"originalCollectionAddress_\":\"the original collection address\",\"protocol_\":\"the address of the protocol parameters contract (governance parameters)\",\"redemptionPool_\":\"the address of the corresponding redemption pool\",\"swapAddress_\":\"the address of the uniswapV2Pair\"}},\"processBuybackPriceResponse(bytes32,uint256)\":{\"details\":\"processes the oracle response for buyback price updates\",\"params\":{\"buybackPrice_\":\"the new buyback price\",\"requestId_\":\"the id of the Chainlink request\"}},\"reassignNFT(uint256,address)\":{\"details\":\"allows the callback after finishing an auction to reassign the NFT to the winner\",\"params\":{\"newOwner_\":\"the winner of the auction account\",\"nftId_\":\"the id of the auctioned synthetic token\"}},\"register(uint256,uint256,uint256,address,string)\":{\"details\":\"through this the router can register tokens\",\"params\":{\"metadata_\":\"the metadata (the ipfs url) of the nft\",\"nftOwner_\":\"the owner of the synthetic nft\",\"priceFraction_\":\"the price fraction for buying\",\"supplyToKeep_\":\"the supply that the owner decides to keep\",\"tokenId_\":\"the original token id\"},\"returns\":{\"syntheticId\":\"the id of the newly registered token\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updatePriceFraction(uint256,uint256)\":{\"details\":\"caller must be the owner of the NFT\",\"params\":{\"newFractionPrice_\":\"the new value of the fraction price\",\"tokenId_\":\"the id of the synthetic nft\"}}},\"stateVariables\":{\"_flips\":{\"details\":\"mapping the request id from Chainlink with the flip input data\"},\"changeNonces\":{\"details\":\"nonce to count the changes of an original collection token id      in order to avoid double change (with the second one keeping the synthetic playing)\"},\"nonces\":{\"details\":\"the nonce to avoid double verification (quantity of exits for original token id)\"}},\"title\":\"synthetic collection abstraction contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"AUCTION_MANAGER()\":{\"notice\":\"role of the auctions manager fabric contract\"},\"AuctionsManagerAddress()\":{\"notice\":\"the address of the auctions manager fabric contract\"},\"RANDOM_ORACLE()\":{\"notice\":\"role of the vrf chainlink oracle\"},\"ROUTER()\":{\"notice\":\"role of the router contract\"},\"VALIDATOR_ORACLE()\":{\"notice\":\"role of the polygon validator chainlink oracle for verifications\"},\"addLiquidityToFuturePool(uint256,uint256)\":{\"notice\":\"add available liquidity to Perpetual Pool\"},\"addLiquidityToQuickswap(uint256,uint256)\":{\"notice\":\"add available liquidity for a given token to UniSwap pool\"},\"buyJotTokens(uint256,uint256)\":{\"notice\":\"allows the caller to buy jots using the funding token\"},\"buyback(uint256)\":{\"notice\":\"Buy token back. Caller needs to pre-approve a transaction worth the amount returned by the getRequiredFundingForBuyback(uint256 tokenId) function\"},\"change(uint256,uint256,string,address)\":{\"notice\":\"change an NFT for another one of the same collection\"},\"claimLiquidityTokens(uint256,uint256)\":{\"notice\":\"Claim Liquidity Tokens\"},\"decreaseSellingSupply(uint256,uint256)\":{\"notice\":\"decrease selling supply for a given NFT\"},\"depositJotTokens(uint256,uint256)\":{\"notice\":\"allows the caller to deposit jots\"},\"erc721address()\":{\"notice\":\"Synthetic NFT Address  for this collection\"},\"fundingTokenAddress()\":{\"notice\":\"funding token address\"},\"getAccruedReward(uint256)\":{\"notice\":\"returns the accrued reward by QuickSwap pool LP for a given fractionalization\"},\"getAvailableJotsForBuyback(uint256)\":{\"notice\":\"returns funds owned by token, in Jots and Funding, in contract and in UniSwap\"},\"increaseSellingSupply(uint256,uint256)\":{\"notice\":\"increase selling supply for a given NFT\"},\"isSyntheticNFTCreated(uint256)\":{\"notice\":\"public function. Checks if an NFT has been already fractionalized\"},\"isSyntheticNFTFractionalised(uint256)\":{\"notice\":\"public function. Checks if an NFT has been already fractionalised.\"},\"jotAddress()\":{\"notice\":\"jot Address for this collection\"},\"originalCollectionAddress()\":{\"notice\":\"address of the original collection\"},\"poolAddress()\":{\"notice\":\"returns the Quickswap pool address\"},\"syntheticProtocolRouterAddress()\":{\"notice\":\"the address of the protocol router\"},\"tokens(uint256)\":{\"notice\":\"data for each token\"},\"updateBuybackPrice()\":{\"notice\":\"allows users to update buyback price for buyback\"},\"updatePriceFraction(uint256,uint256)\":{\"notice\":\"update the price of a fraction for a given NFT\"},\"verify(uint256)\":{\"notice\":\"this method calls chainlink oracle and         verifies if the NFT has been locked on NFTVaultManager. In addition         gets the metadata of the NFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/implementations/SyntheticCollectionManager.sol\":\"SyntheticCollectionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf98cb1651a90d20ef77d8c1dd10d5fce4954e747603e5672a8292bd4368120dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/polygon/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\n\\r\\ninterface ISyntheticCollectionManager {\\r\\n    function reassignNFT(uint256 nftId_, address newOwner_) external;\\r\\n\\r\\n    function isVerified(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function originalCollectionAddress() external view returns (address);\\r\\n\\r\\n    function removeLiquidityFromPool(uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ninterface IAuctionsManager {\\r\\n    function whitelistNFT(uint256 nftId_) external;\\r\\n\\r\\n    function blacklistNFT(uint256 nftId_) external;\\r\\n\\r\\n    function isRecoverable(uint256 nftId_) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IRandomNumberConsumer {\\r\\n    function getRandomNumber() external returns (bytes32 requestId);\\r\\n}\\r\\n\\r\\ninterface IPolygonValidatorOracle {\\r\\n    function verifyTokenInCollection(\\r\\n        address ethereumCollection,\\r\\n        uint256 tokenId,\\r\\n        uint256 currentState,\\r\\n        uint256 nonce\\r\\n    ) external returns (bytes32 requestId);\\r\\n\\r\\n    function updateBuybackPrice(address) external returns (bytes32 requestId);\\r\\n}\\r\\n\\r\\ninterface IFlipCoinGenerator {\\r\\n    function generateRandom() external view returns (uint8);\\r\\n}\\r\\n\\r\\ninterface ISyntheticNFT is IERC721Metadata {\\r\\n    function setMetadata(uint256 tokenId, string memory metadata) external;\\r\\n\\r\\n    function isVerified(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function exists(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function safeMint(address to, string memory metadata) external returns (uint256);\\r\\n\\r\\n    function safeBurn(uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ninterface ICollectionManagerFactory {\\r\\n    function deploy(\\r\\n        address originalCollectionAddress_,\\r\\n        string memory name_,\\r\\n        string memory symbol_\\r\\n    ) external returns (address);\\r\\n}\\r\\n\\r\\ninterface IJot is IERC20 {\\r\\n    function uniswapV2Pair() external view returns (address);\\r\\n\\r\\n    function safeMint(address account, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IOwnable {\\r\\n    event ChangeController(address oldController, address newController);\\r\\n\\r\\n    function controller() external view returns (address);\\r\\n\\r\\n    function setNewController(address newController) external;\\r\\n\\r\\n    function claimNewController() external;\\r\\n}\\r\\n\\r\\ninterface IMigratable is IOwnable {\\r\\n    event PrepareMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    event ExecuteMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    function migrationTimestamp() external view returns (uint256);\\r\\n\\r\\n    function migrationDestination() external view returns (address);\\r\\n\\r\\n    function prepareMigration(address target, uint256 graceDays) external;\\r\\n\\r\\n    function approveMigration() external;\\r\\n\\r\\n    function executeMigration(address source) external;\\r\\n}\\r\\n\\r\\ninterface IPerpetualPoolLite {\\r\\n    // struct SymbolInfo {\\r\\n    //         uint256 symbolId;\\r\\n    //         string symbol;\\r\\n    //         address oracleAddress;\\r\\n    //         int256 multiplier;\\r\\n    //         int256 feeRatio;\\r\\n    //         int256 fundingRateCoefficient;\\r\\n    //         int256 price;\\r\\n    //         int256 cumulativeFundingRate;\\r\\n    //         int256 tradersNetVolume;\\r\\n    //         int256 tradersNetCost;\\r\\n    //     }\\r\\n\\r\\n    struct SymbolInfo {\\r\\n        int256 price;\\r\\n        int256 cumulativeFundingRate;\\r\\n        int256 tradersNetVolume;\\r\\n        int256 tradersNetCost;\\r\\n    }\\r\\n\\r\\n    struct SignedPrice {\\r\\n        uint256 timestamp;\\r\\n        uint256 price;\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n    }\\r\\n\\r\\n    event AddLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event RemoveLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event AddMargin(address indexed account, uint256 bAmount);\\r\\n\\r\\n    event RemoveMargin(address indexed account, uint256 bAmount);\\r\\n\\r\\n    event Trade(address indexed account, int256 tradeVolume, uint256 price);\\r\\n\\r\\n    event Liquidate(address indexed account, address indexed liquidator, uint256 reward);\\r\\n\\r\\n    event ProtocolFeeCollection(address indexed collector, uint256 amount);\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            int256 minPoolMarginRatio,\\r\\n            int256 minInitialMarginRatio,\\r\\n            int256 minMaintenanceMarginRatio,\\r\\n            int256 minLiquidationReward,\\r\\n            int256 maxLiquidationReward,\\r\\n            int256 liquidationCutRatio,\\r\\n            int256 protocolFeeCollectRatio\\r\\n        );\\r\\n\\r\\n    function getAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address bTokenAddress,\\r\\n            address lTokenAddress,\\r\\n            address pTokenAddress,\\r\\n            address liquidatorQualifierAddress,\\r\\n            address protocolFeeCollector,\\r\\n            address underlyingAddress,\\r\\n            address protocolAddress\\r\\n        );\\r\\n\\r\\n    function getSymbol() external view returns (SymbolInfo memory);\\r\\n\\r\\n    function getLiquidity() external view returns (int256);\\r\\n\\r\\n    function getLastUpdateBlock() external view returns (uint256);\\r\\n\\r\\n    function getProtocolFeeAccrued() external view returns (int256);\\r\\n\\r\\n    function collectProtocolFee() external;\\r\\n\\r\\n    function addLiquidity(uint256 bAmount) external;\\r\\n\\r\\n    function addLiquidityGetlShares(uint256 bAmount) external returns (uint256);\\r\\n\\r\\n    function removeLiquidity(uint256 lShares) external;\\r\\n\\r\\n    function addMargin(uint256 bAmount) external;\\r\\n\\r\\n    function removeMargin(uint256 bAmount) external;\\r\\n\\r\\n    function trade(int256 tradeVolume) external;\\r\\n\\r\\n    function liquidate(address account) external;\\r\\n\\r\\n    function addLiquidity(uint256 bAmount, SignedPrice memory price) external;\\r\\n\\r\\n    function removeLiquidity(uint256 lShares, SignedPrice memory price) external;\\r\\n\\r\\n    function addMargin(uint256 bAmount, SignedPrice memory price) external;\\r\\n\\r\\n    function removeMargin(uint256 bAmount, SignedPrice memory price) external;\\r\\n\\r\\n    function trade(int256 tradeVolume, SignedPrice memory price) external;\\r\\n\\r\\n    function liquidate(address account, SignedPrice memory price) external;\\r\\n}\\r\\n\\r\\ninterface IPTokenLite is IERC721 {\\r\\n    struct Position {\\r\\n        // position volume, long is positive and short is negative\\r\\n        int256 volume;\\r\\n        // the cost the establish this position\\r\\n        int256 cost;\\r\\n        // the last cumulativeFundingRate since last funding settlement for this position\\r\\n        // the overflow for this value in intended\\r\\n        int256 lastCumulativeFundingRate;\\r\\n    }\\r\\n\\r\\n    event UpdateMargin(address indexed owner, int256 amount);\\r\\n\\r\\n    event UpdatePosition(address indexed owner, int256 volume, int256 cost, int256 lastCumulativeFundingRate);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function totalMinted() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function getNumPositionHolders() external view returns (uint256);\\r\\n\\r\\n    function exists(address owner) external view returns (bool);\\r\\n\\r\\n    function getMargin(address owner) external view returns (int256);\\r\\n\\r\\n    function updateMargin(address owner, int256 margin) external;\\r\\n\\r\\n    function addMargin(address owner, int256 delta) external;\\r\\n\\r\\n    function getPosition(address owner) external view returns (Position memory);\\r\\n\\r\\n    function updatePosition(address owner, Position memory position) external;\\r\\n\\r\\n    function mint(address owner) external;\\r\\n\\r\\n    function burn(address owner) external;\\r\\n}\\r\\n\\r\\ninterface ILiquidatorQualifier {\\r\\n    function isQualifiedLiquidator(address liquidator) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface ILTokenLite is IERC20 {\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    function mint(address account, uint256 amount) external;\\r\\n\\r\\n    function burn(address account, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface IOracle {\\r\\n    function getPrice() external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IOracleWithUpdate {\\r\\n    function getPrice() external returns (uint256);\\r\\n\\r\\n    function updatePrice(\\r\\n        address address_,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe79c85819a593205c461eb96f60555c6caa8e9502c1fc68ca3bda0d3c6e4411a\",\"license\":\"MIT\"},\"contracts/polygon/chainlink/OracleStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../implementations/Enums.sol\\\";\\n\\nstruct APIOracleInfo {\\n    address linkToken;\\n    address chainlinkNode;\\n    string jobId;\\n    string uintJobId;\\n    uint256 nodeFee;\\n}\\n\\nstruct VRFOracleInfo {\\n    address vrfCoordinator;\\n    address linkToken;\\n    bytes32 keyHash;\\n    uint256 vrfFee;\\n}\\n\\nstruct VerifyRequest {\\n    address originalCollection;\\n    address syntheticCollection;\\n    uint256 tokenId;\\n    State previousState;\\n}\\n\\nstruct UpdateRequest {\\n    address syntheticCollection;\\n}\\n\",\"keccak256\":\"0x61a8b541bb087fb846430ca6aebbc2eb65a9a85296a305953bc2f541b0d798cd\",\"license\":\"MIT\"},\"contracts/polygon/extensions/IERC20ManagedAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev allows to send funds from a managed account (infinite allowance)\\n */\\ninterface IERC20ManagedAccounts {\\n    function transferFromManaged(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x353fe2e73379fe78ed6aa9923e36307018a515cd792a22d3e7a9a0dacc6edffc\",\"license\":\"MIT\"},\"contracts/polygon/governance/ProtocolParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title parameters controlled by governance\\n * @notice the owner of this contract is the timelock controller of the governance feature\\n */\\ncontract ProtocolParameters is Ownable {\\n    // interval in seconds between the one flip to another in one lock contract\\n    uint256 public flippingInterval;\\n\\n    // amount of reward that the flipper gets if he is right on the outcome\\n    uint256 public flippingReward;\\n\\n    // amount of jots into play in each flip\\n    uint256 public flippingAmount;\\n\\n    // the duration of an NFT auction in seconds\\n    uint256 public auctionDuration;\\n\\n    // the period of grace to recover the nft after reaching 0 owner supply\\n    uint256 public recoveryThreshold;\\n\\n    // Address of the funding token for new manager\\n    address public fundingTokenAddress;\\n\\n    uint256 public stakerShare;\\n\\n    uint256 public liquidityPerpetualPercentage;\\n\\n    uint256 public liquidityUniswapPercentage;\\n\\n    event FlippingIntervalUpdated(uint256 from, uint256 to);\\n    event FlippingRewardUpdated(uint256 from, uint256 to);\\n    event FlippingAmountUpdated(uint256 from, uint256 to);\\n    event AuctionDurationUpdated(uint256 from, uint256 to);\\n    event RecoveryThresholdUpdated(uint256 from, uint256 to);\\n    event FundingTokenAddressUpdated(address from, address to);\\n    event StakerShareUpdated(uint256 from, uint256 to);\\n    event LiquidityPercentagesUpdated(\\n        uint256 perpetualFrom,\\n        uint256 uniswapFrom,\\n        uint256 perpetualTo,\\n        uint256 uniswapTo\\n    );\\n\\n    /**\\n     * @dev sets the default (initial) values of the parameters\\n     *      also transfers the ownership to the governance\\n     */\\n    constructor(\\n        uint256 flippingInterval_,\\n        uint256 flippingReward_,\\n        uint256 flippingAmount_,\\n        uint256 auctionDuration_,\\n        address governanceContractAddress_,\\n        address fundingTokenAddress_,\\n        uint256 liquidityPerpetualPercentage_,\\n        uint256 liquidityUniswapPercentage_\\n    ) {\\n        require(flippingReward_ > 0, \\\"Invalid Reward\\\");\\n        require(flippingAmount_ > 0, \\\"Invalid Amount\\\");\\n        require(flippingReward_ < flippingAmount_, \\\"Reward should be lower than Amount\\\");\\n        require(flippingInterval_ > 15 minutes, \\\"Flipping Interval should be greater than 15 minutes\\\");\\n        require(auctionDuration_ > 1 hours, \\\"Auction duration should be greater than 1 hour\\\");\\n        require(fundingTokenAddress_ != address(0), \\\"Funding token address can't be zero\\\");\\n        require(\\n            (liquidityPerpetualPercentage_ + liquidityUniswapPercentage_ == 100),\\n            \\\"uniswap and perpetual percentages must sum 100\\\"\\n        );\\n\\n        flippingInterval = flippingInterval_;\\n        flippingReward = flippingReward_;\\n        flippingAmount = flippingAmount_;\\n        auctionDuration = auctionDuration_;\\n        fundingTokenAddress = fundingTokenAddress_;\\n        liquidityPerpetualPercentage = liquidityPerpetualPercentage_;\\n        liquidityUniswapPercentage = liquidityUniswapPercentage_;\\n        stakerShare = 1e16;\\n\\n        // transfer ownership\\n        transferOwnership(governanceContractAddress_);\\n    }\\n\\n    function setFlippingInterval(uint256 flippingInterval_) external onlyOwner {\\n        require(flippingInterval_ > 15 minutes, \\\"Flipping Interval should be greater than 15 minutes\\\");\\n        emit FlippingIntervalUpdated(flippingInterval, flippingInterval_);\\n        flippingInterval = flippingInterval_;\\n    }\\n\\n    function setFlippingReward(uint256 flippingReward_) external onlyOwner {\\n        require(flippingReward_ > 0, \\\"Invalid Reward\\\");\\n        require(flippingReward_ < flippingAmount, \\\"Reward should be lower than Amount\\\");\\n        emit FlippingRewardUpdated(flippingReward, flippingReward_);\\n        flippingReward = flippingReward_;\\n    }\\n\\n    function setFlippingAmount(uint256 flippingAmount_) external onlyOwner {\\n        require(flippingAmount_ > 0, \\\"Invalid Amount\\\");\\n        require(flippingReward < flippingAmount_, \\\"Reward should be lower than Amount\\\");\\n        emit FlippingAmountUpdated(flippingAmount, flippingAmount_);\\n        flippingAmount = flippingAmount_;\\n    }\\n\\n    function setAuctionDuration(uint256 auctionDuration_) external onlyOwner {\\n        require(auctionDuration_ > 1 hours, \\\"Auction duration should be greater than 1 hour\\\");\\n        emit AuctionDurationUpdated(auctionDuration, auctionDuration_);\\n        auctionDuration = auctionDuration_;\\n    }\\n\\n    function setRecoveryThreshold(uint256 recoveryThreshold_) external onlyOwner {\\n        require(recoveryThreshold_ > 1 hours, \\\"Recovery threshold should be greater than 1 hour\\\");\\n        emit RecoveryThresholdUpdated(recoveryThreshold, recoveryThreshold_);\\n        recoveryThreshold = recoveryThreshold_;\\n    }\\n\\n    function setFundingTokenAddress(address fundingTokenAddress_) external onlyOwner {\\n        require(fundingTokenAddress_ != address(0), \\\"Funding token address can't be zero\\\");\\n        emit FundingTokenAddressUpdated(fundingTokenAddress, fundingTokenAddress_);\\n        fundingTokenAddress = fundingTokenAddress_;\\n    }\\n\\n    function setStakerShare(uint256 stakerShare_) external onlyOwner {\\n        require(stakerShare_ > 0, \\\"Staker share can't be 0\\\");\\n        require(stakerShare_ <= 1e18, \\\"Staker share too high\\\");\\n        emit StakerShareUpdated(stakerShare, stakerShare_);\\n        stakerShare = stakerShare_;\\n    }\\n\\n    function setLiquidityPercentages(\\n        uint256 liquidityUniswapPercentage_,\\n        uint256 liquidityPerpetualPercentage_\\n    ) external onlyOwner {\\n        require((liquidityUniswapPercentage_ + liquidityPerpetualPercentage_) == 100, \\\"Values must sum 100\\\");\\n\\n        emit LiquidityPercentagesUpdated(\\n            liquidityPerpetualPercentage,\\n            liquidityUniswapPercentage,\\n            liquidityPerpetualPercentage_,\\n            liquidityUniswapPercentage_\\n        );\\n\\n        liquidityPerpetualPercentage = liquidityPerpetualPercentage_;\\n        liquidityUniswapPercentage = liquidityUniswapPercentage_;\\n    }\\n}\\n\",\"keccak256\":\"0x5e3f2fddaf4863c67b1e7a246ebd0a7fc27db4ac0ccca8517049415e8eaa1db8\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Enums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nenum State {\\n    NEW,\\n    VERIFYING,\\n    VERIFIED,\\n    CHANGING\\n}\\n\",\"keccak256\":\"0x3d143a1f6fa319fd3b749bc8b9c36d00db0f51f6d301e812b62927df25fb487c\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Jot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../extensions/IERC20ManagedAccounts.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\n\\r\\ncontract Jot is ERC20, IERC20ManagedAccounts, ERC20Burnable, AccessControl, Initializable {\\r\\n    bytes32 public constant ROUTER = keccak256(\\\"ROUTER\\\");\\r\\n    bytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\r\\n\\r\\n    // proxied values for the erc20 attributes\\r\\n    string private _proxiedName;\\r\\n    string private _proxiedSymbol;\\r\\n\\r\\n    /**\\r\\n     * @notice *swap address\\r\\n     */\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n\\r\\n    /**\\r\\n     * @notice pair address\\r\\n     */\\r\\n    address public uniswapV2Pair;\\r\\n\\r\\n    mapping(address => address) private _managers;\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    constructor() ERC20(\\\"Privi Jot Token Implementation\\\", \\\"pJOTI\\\") {}\\r\\n\\r\\n    function initialize(\\r\\n        string calldata _name,\\r\\n        string calldata _symbol,\\r\\n        address swapAddress,\\r\\n        address fundingTokenAddress\\r\\n    ) external initializer {\\r\\n        _proxiedName = _name;\\r\\n        _proxiedSymbol = _symbol;\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(ROUTER, msg.sender);\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(swapAddress);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), fundingTokenAddress);\\r\\n\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(\\r\\n            address(this),\\r\\n            fundingTokenAddress\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function mint(address account, uint256 amount) public onlyRole(MINTER) {\\r\\n        _mint(account, amount);\\r\\n    }\\r\\n\\r\\n    function burn(address account, uint256 amount) public onlyRole(MINTER) {\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev allows to send funds from a managed account (infinite allowance)\\r\\n     */\\r\\n    function transferFromManaged(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external virtual override {\\r\\n        require(_managers[sender] == msg.sender, \\\"The caller is not the manager of this account\\\");\\r\\n        _transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function setManager(address manager, address account) external onlyRole(ROUTER) {\\r\\n        _managers[account] = manager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _proxiedName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _proxiedSymbol;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9e72f55d150a30bfa0807d43e5a9ac2d5d69ce2361e23ffc4cbe0d59d0d32f2b\",\"license\":\"MIT\"},\"contracts/polygon/implementations/JotPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\r\\nimport \\\"../libraries/ProtocolConstants.sol\\\";\\r\\n\\r\\ncontract JotPool is ERC721, Initializable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    ProtocolParameters private immutable protocol;\\r\\n\\r\\n    struct Position {\\r\\n        uint256 id;\\r\\n        uint256 liquidity;\\r\\n        uint256 stake;\\r\\n        uint256 totalShares;\\r\\n    }\\r\\n\\r\\n    address public jot;\\r\\n    address public fundingToken;\\r\\n    uint256 public totalLiquidity;\\r\\n\\r\\n    uint256 public lastReward;\\r\\n    uint256 public cumulativeRevenue;\\r\\n    uint256 public totalShares;\\r\\n    uint256 public totalStaked;\\r\\n\\r\\n    string private _proxyName;\\r\\n    string private _proxySymbol;\\r\\n\\r\\n    Counters.Counter private idGen;\\r\\n\\r\\n    mapping(address => Position) private positions;\\r\\n\\r\\n    event LiquidityAdded(address provider, uint256 amount, uint256 mintedLiquidity);\\r\\n    event LiquidityRemoved(address provider, uint256 amount, uint256 liquidityBurnt);\\r\\n    event Staked(address staker, uint256 amount, uint256 positionId);\\r\\n    event Unstaked(address recipient, uint256 amount, uint256 reward);\\r\\n    event RewardsClaimed(address recipient, uint256 reward);\\r\\n\\r\\n    constructor(address _protocol) ERC721(\\\"\\\", \\\"\\\") {\\r\\n        require(_protocol != address(0), \\\"Invalid protocol address\\\");\\r\\n        protocol = ProtocolParameters(_protocol);\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _jot,\\r\\n        address _fundingToken,\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) external initializer {\\r\\n        require(_jot != address(0), \\\"Invalid Jot token\\\");\\r\\n        require(_fundingToken != address(0), \\\"Invalid funding token\\\");\\r\\n        jot = _jot;\\r\\n        fundingToken = _fundingToken;\\r\\n        _proxyName = _name;\\r\\n        _proxySymbol = _symbol;\\r\\n    }\\r\\n\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _proxyName;\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _proxySymbol;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n        \\r\\n        uint256 mintedLiquidity = (totalLiquidity > 0 && IERC20(jot).balanceOf(address(this)) > 0)\\r\\n             ? (totalLiquidity * amount) / IERC20(jot).balanceOf(address(this))\\r\\n             : 100;\\r\\n\\r\\n        positions[msg.sender].liquidity += mintedLiquidity;\\r\\n        totalLiquidity += mintedLiquidity;\\r\\n\\r\\n        emit LiquidityAdded(msg.sender, amount, mintedLiquidity);\\r\\n\\r\\n        _stake(msg.sender, amount);\\r\\n\\r\\n        IERC20(jot).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(uint256 amount) external {\\r\\n        require(positions[msg.sender].liquidity >= amount, \\\"Remove amount exceeds balance\\\");\\r\\n        uint256 liquidityBurnt = (IERC20(jot).balanceOf(address(this)) * amount) / totalLiquidity;\\r\\n        positions[msg.sender].liquidity -= amount;\\r\\n        totalLiquidity -= amount;\\r\\n\\r\\n        emit LiquidityRemoved(msg.sender, amount, liquidityBurnt);\\r\\n\\r\\n        _unstake(msg.sender, liquidityBurnt);\\r\\n\\r\\n        IERC20(jot).safeTransfer(msg.sender, liquidityBurnt);\\r\\n    }\\r\\n\\r\\n    function getLiquidityValue(uint256 amount) external view returns (uint256) {\\r\\n        return _getLiquidityValue(amount);\\r\\n    }\\r\\n\\r\\n    function getTotalLiquidityValue(address owner) external view returns (uint256) {\\r\\n        return _getLiquidityValue(positions[owner].liquidity);\\r\\n    }\\r\\n\\r\\n    function _getLiquidityValue(uint256 amount) internal view returns (uint256) {\\r\\n        if (amount > 0 && totalLiquidity > 0) {\\r\\n            return (IERC20(jot).balanceOf(address(this)) * amount) / totalLiquidity;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getPosition() external view returns (Position memory) {\\r\\n        return positions[msg.sender];\\r\\n    }\\r\\n\\r\\n    function stakeShares(uint256 amount) external {\\r\\n        require(IERC20(jot).balanceOf(msg.sender) >= amount, \\\"Insufficient Jot balance\\\");\\r\\n        address to = msg.sender;\\r\\n        _stake(to, amount);\\r\\n        IERC20(jot).safeTransferFrom(to, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function _stake(address to, uint256 amount) internal {\\r\\n        (uint256 ftBalance, uint256 x) = _sync();\\r\\n        cumulativeRevenue += x;\\r\\n        lastReward = ftBalance;\\r\\n        totalStaked += amount;\\r\\n\\r\\n        uint256 id = positions[to].id;\\r\\n        if (id == 0) {\\r\\n            idGen.increment();\\r\\n            id = idGen.current();\\r\\n            positions[to].id = id;\\r\\n            _mint(to, id);\\r\\n        }\\r\\n\\r\\n        positions[to].stake += amount;\\r\\n        positions[to].totalShares = totalShares;\\r\\n\\r\\n        emit Staked(msg.sender, amount, id);\\r\\n    }\\r\\n\\r\\n    function _sync() internal returns (uint256, uint256) {\\r\\n        uint256 ftBalance = IERC20(fundingToken).balanceOf(address(this));\\r\\n        uint256 x = ftBalance - lastReward;\\r\\n\\r\\n        if (totalStaked != 0) {\\r\\n            totalShares += (x * protocol.stakerShare()) / totalStaked;\\r\\n        }\\r\\n\\r\\n        return (ftBalance, x);\\r\\n    }\\r\\n\\r\\n    function unstakeShares(uint256 amount) external {\\r\\n        _unstake(msg.sender, amount);\\r\\n        IERC20(jot).transfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function _unstake(address to, uint256 amount) internal {\\r\\n        require(positions[to].stake >= amount, \\\"Insufficient stake balance\\\");\\r\\n        (uint256 ftBalance, ) = _sync();\\r\\n\\r\\n        uint256 reward = _getReward(to);\\r\\n        lastReward = ftBalance - reward;\\r\\n\\r\\n        if (amount == positions[to].stake) {\\r\\n            _burn(positions[to].id);\\r\\n            delete positions[to];\\r\\n        } else {\\r\\n            positions[to].stake -= amount;\\r\\n            positions[to].totalShares = totalShares;\\r\\n        }\\r\\n        totalStaked -= amount;\\r\\n\\r\\n        emit Unstaked(msg.sender, amount, reward);\\r\\n\\r\\n        IERC20(fundingToken).transfer(msg.sender, reward);\\r\\n    }\\r\\n\\r\\n    function claimRewards() external {\\r\\n        (uint256 ftBalance, ) = _sync();\\r\\n\\r\\n        address owner = msg.sender;\\r\\n        uint256 reward = _getReward(owner);\\r\\n        lastReward = ftBalance - reward;\\r\\n        positions[owner].totalShares = totalShares;\\r\\n\\r\\n        emit RewardsClaimed(msg.sender, reward);\\r\\n\\r\\n        IERC20(fundingToken).transfer(msg.sender, reward);\\r\\n    }\\r\\n\\r\\n    function getReward() external view returns (uint256 reward) {\\r\\n        reward = _getReward(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _getReward(address owner) internal view returns (uint256 reward) {\\r\\n        reward = ((totalShares - positions[owner].totalShares) * positions[owner].stake) / 10**18;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdd5ba9f09fc5c7df40160f9b38a0f8174fa1559571c929d13a43f7a5dedcd825\",\"license\":\"MIT\"},\"contracts/polygon/implementations/LiquidityCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\r\\nimport \\\"./Structs.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\nimport \\\"./SyntheticCollectionManager.sol\\\";\\r\\n\\r\\ncontract LiquidityCalculator is AccessControl, Initializable {\\r\\n\\r\\n    /// @notice role of the manager contract\\r\\n    bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\r\\n\\r\\n    address private _managerAddress;\\r\\n    address private _swapAddress;\\r\\n    address private _perpetualPoolLiteAddress;\\r\\n    address private _fundingTokenAddress;\\r\\n    address private _jotAddress;\\r\\n\\r\\n    ProtocolParameters public protocol;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function initialize(\\r\\n        address managerAddress_,\\r\\n        address swapAddress_,\\r\\n        address protocol_,\\r\\n        address perpetualPoolLiteAddress_,\\r\\n        address fundingTokenAddress_,\\r\\n        address jotAddress_\\r\\n    ) external initializer {\\r\\n        _managerAddress = managerAddress_;\\r\\n        _swapAddress = swapAddress_;\\r\\n        _perpetualPoolLiteAddress = perpetualPoolLiteAddress_;\\r\\n        _fundingTokenAddress = fundingTokenAddress_;\\r\\n        _jotAddress = jotAddress_;\\r\\n        protocol = ProtocolParameters(protocol_);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getAvailableFundingPerpetual(TokenData memory token) external view returns(uint256) {\\r\\n\\r\\n        // Perpetual Pool and Uniswap liquidity percentages\\r\\n        uint256 liquidityPerpetualPercentage = protocol.liquidityPerpetualPercentage();\\r\\n        // Token funding tokens owned by nft owner\\r\\n        uint256 liquiditySold = token.liquiditySold;\\r\\n        // Amount in Funding that will go to PerpetualPoolLite\\r\\n        uint256 perpetualFundingLiquidity = liquiditySold / 100 * liquidityPerpetualPercentage;\\r\\n\\r\\n        return perpetualFundingLiquidity;\\r\\n    }\\r\\n\\r\\n    function getAccruedReward(address pairAddress, uint256 liquidityTokenBalance) external view returns(uint256 token0Reward, uint256 token1Reward) {\\r\\n        IUniswapV2Pair uniswapV2Pair = IUniswapV2Pair(pairAddress);\\r\\n        \\r\\n        (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            \\r\\n        ) =  uniswapV2Pair.getReserves();\\r\\n\\r\\n        uint256 totalSupply = uniswapV2Pair.totalSupply();\\r\\n\\r\\n        if (totalSupply == 0) {\\r\\n            return (0, 0);\\r\\n        }\\r\\n\\r\\n        if (reserve0 == 0) {\\r\\n            token0Reward = 0;\\r\\n        } else {\\r\\n            token0Reward = uint256(reserve0) / totalSupply * liquidityTokenBalance;\\r\\n        }\\r\\n\\r\\n        if(reserve1 == 0) {\\r\\n            token1Reward = 0;\\r\\n        } else {\\r\\n            token1Reward = uint256(reserve1) / totalSupply * liquidityTokenBalance;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev helper for the execute buyback function\\r\\n     */\\r\\n    function getFundingLeftAndBuybackAmount(uint256 total_, uint256 fundingLiquidity_, uint256 JOT_SUPPLY, uint256 buybackPrice)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 jotsLeft,\\r\\n            uint256 fundingLeft,\\r\\n            uint256 buybackAmount\\r\\n        )\\r\\n    {\\r\\n        // Starting funding left\\r\\n        fundingLeft = fundingLiquidity_;\\r\\n\\r\\n        // If owner has enough balance buybackAmount is zero\\r\\n\\r\\n        if (total_ > JOT_SUPPLY) {\\r\\n            buybackAmount = 0;\\r\\n            jotsLeft = total_ - JOT_SUPPLY;\\r\\n        } else {\\r\\n            // If owner has some funding tokens left\\r\\n            if (fundingLeft > 0) {\\r\\n                // How many jots you can buy with the funding tokens\\r\\n                uint256 fundingToJots = (fundingLeft * buybackPrice) / 10**18;\\r\\n                // if there's enough funding for buyback\\r\\n                // then return 0 as buybackAmount and the remaining funding\\r\\n                if ((fundingToJots + total_) > JOT_SUPPLY) {\\r\\n                    uint256 remainingJots = JOT_SUPPLY - total_;\\r\\n                    uint256 requiredFunding = (remainingJots * buybackPrice) / 10**18;\\r\\n                    fundingLeft -= requiredFunding;\\r\\n                    buybackAmount = 0;\\r\\n                }\\r\\n                // if there isn't enough funding for buyback\\r\\n                else {\\r\\n                    buybackAmount = (JOT_SUPPLY - total_ - fundingToJots);\\r\\n                    fundingLeft = 0;\\r\\n                }\\r\\n            } else {\\r\\n                buybackAmount = ((JOT_SUPPLY - total_) * buybackPrice) / 10**18;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x68b58200928d36072bfbc3fe5a83c3a93023562d86e34bdac752f349c80e2cd7\",\"license\":\"MIT\"},\"contracts/polygon/implementations/RedemptionPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./Jot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice funds paid by owners on buyback events are sent to this contract\\r\\n * @author priviprotocol\\r\\n */\\r\\ncontract RedemptionPool is Initializable, AccessControl {\\r\\n    // the role for the corresponding synthetic collection manager\\r\\n    bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\r\\n\\r\\n    /// @notice the address of the jot corresponding token\\r\\n    address public jotAddress;\\r\\n\\r\\n    /// @notice the address of the funding token used\\r\\n    address public fundingTokenAddress;\\r\\n\\r\\n    /// @notice the address of the synthetic collection\\r\\n    address public managerAddress;\\r\\n\\r\\n    /// @notice the total value in funding token available to redeem\\r\\n    uint256 public totalLiquidityToRedeeem;\\r\\n\\r\\n    /// @notice the total value in jots available to redeem\\r\\n    uint256 public jotsToRedeem;\\r\\n\\r\\n    /// @dev the initializer modifier is to lock the implementation initialization\\r\\n    constructor() initializer {} // solhint-disable-line\\r\\n\\r\\n    /**\\r\\n     * @dev initialize the proxy contract\\r\\n     * @param jot_ the address of the jot corresponding token\\r\\n     * @param fundingToken_ the address of the funding token\\r\\n     */\\r\\n    function initialize(\\r\\n        address jot_,\\r\\n        address fundingToken_,\\r\\n        address syntheticCollection_\\r\\n    ) external initializer {\\r\\n        require(jot_ != address(0), \\\"Invalid Jot token\\\");\\r\\n        require(fundingToken_ != address(0), \\\"Invalid funding token\\\");\\r\\n\\r\\n        jotAddress = jot_;\\r\\n        fundingTokenAddress = fundingToken_;\\r\\n        managerAddress = syntheticCollection_;\\r\\n\\r\\n        // setup the roles for the access control\\r\\n        _setupRole(MANAGER, syntheticCollection_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev setter for redeemable values updates (only from collection manager)\\r\\n     * @param liquidity_ the increase on redeemable liquidity\\r\\n     * @param jots_ the increase on redeemable jots\\r\\n     */\\r\\n    function addRedemableBalance(uint256 liquidity_, uint256 jots_) external onlyRole(MANAGER) {\\r\\n        totalLiquidityToRedeeem += liquidity_;\\r\\n        jotsToRedeem += jots_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows to retrieve funding token from jots, to burn the supply left\\r\\n     *         by buyback calls without enough owner supply\\r\\n     *\\r\\n     *         the user should approve the jots to be burned before calling this function\\r\\n     *\\r\\n     * @param amountOfJots_ the amount of jots to burn\\r\\n     */\\r\\n    function redeem(uint256 amountOfJots_) external {\\r\\n        require(amountOfJots_ > 0, \\\"Amount should be greater than 0\\\");\\r\\n        require(jotsToRedeem >= amountOfJots_, \\\"Not enough tokens left\\\");\\r\\n\\r\\n        uint256 amountToGive = (totalLiquidityToRedeeem * amountOfJots_) / jotsToRedeem;\\r\\n\\r\\n        totalLiquidityToRedeeem -= amountToGive;\\r\\n        jotsToRedeem -= amountOfJots_;\\r\\n\\r\\n        // transfer the funds and burn the jots\\r\\n        IERC20(fundingTokenAddress).transfer(msg.sender, amountToGive);\\r\\n        Jot(jotAddress).burnFrom(msg.sender, amountOfJots_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5b81d7e2b96846376fcf0c3f81fcae3391fe8f8fd004864e1627c7641d60eb3d\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Enums.sol\\\";\\n\\nstruct TokenData {\\n    uint256 originalTokenID;\\n    uint256 ownerSupply;\\n    uint256 sellingSupply;\\n    uint256 soldSupply;\\n    uint256 liquiditySold;\\n    uint256 fractionPrices;\\n    uint256 lastFlipTime;\\n    uint256 liquidityTokenBalance;\\n    uint256 perpetualFuturesLShares;\\n    State state;\\n}\\n\\nstruct Flip {\\n    uint256 tokenId;\\n    uint64 prediction;\\n    address player;\\n}\\n\\nstruct ChangeNonce {\\n    uint256 nonce;\\n    uint256 newTokenId;\\n    address owner;\\n}\\n\",\"keccak256\":\"0x5f29fd951cc9526f1277ef310f4c36ad0714985f2e923835acedc8429483c3ed\",\"license\":\"MIT\"},\"contracts/polygon/implementations/SyntheticCollectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LiquidityCalculator.sol\\\";\\nimport \\\"../libraries/SyntheticTokenLibrary.sol\\\";\\nimport \\\"../extensions/IERC20ManagedAccounts.sol\\\";\\nimport \\\"../chainlink/OracleStructs.sol\\\";\\nimport \\\"../libraries/ProtocolConstants.sol\\\";\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\nimport \\\"../Interfaces.sol\\\";\\nimport \\\"./Jot.sol\\\";\\nimport \\\"./JotPool.sol\\\";\\nimport \\\"./RedemptionPool.sol\\\";\\nimport \\\"./Structs.sol\\\";\\nimport \\\"./Enums.sol\\\";\\n\\n/**\\n * @title synthetic collection abstraction contract\\n * @author priviprotocol\\n */\\ncontract SyntheticCollectionManager is AccessControl, Initializable {\\n    using SafeERC20 for IERC20;\\n    using SyntheticTokenLibrary for TokenData;\\n\\n    /// @notice role of the router contract\\n    bytes32 public constant ROUTER = keccak256(\\\"ROUTER\\\");\\n\\n    /// @notice role of the auctions manager fabric contract\\n    bytes32 public constant AUCTION_MANAGER = keccak256(\\\"AUCTION_MANAGER\\\");\\n\\n    /// @notice role of the vrf chainlink oracle\\n    bytes32 public constant RANDOM_ORACLE = keccak256(\\\"RANDOM_ORACLE\\\");\\n\\n    /// @notice role of the polygon validator chainlink oracle for verifications\\n    bytes32 public constant VALIDATOR_ORACLE = keccak256(\\\"VALIDATOR_ORACLE\\\");\\n\\n    // address of the vrf chainlink oracle contract\\n    address private immutable _randomConsumerAddress;\\n\\n    // address of the polygon validator chainlink oracle contract\\n    address private immutable _validatorAddress;\\n\\n    /// @notice the address of the auctions manager fabric contract\\n    address public AuctionsManagerAddress;\\n\\n    /// @notice the address of the protocol router\\n    address public syntheticProtocolRouterAddress;\\n\\n    address public perpetualPoolLiteAddress;\\n\\n    address private _swapAddress;\\n\\n    address private _liquidityCalculatorAddress;\\n\\n    /// @dev mapping the request id from Chainlink with the flip input data\\n    mapping(bytes32 => Flip) private _flips;\\n\\n    mapping(uint256 => uint256) private _originalToSynthetic;\\n\\n    mapping(uint256 => bool) private canFlip;\\n\\n    address public protocol;\\n\\n    /// @notice address of the original collection\\n    address public originalCollectionAddress;\\n\\n    /// @notice jot Address for this collection\\n    address public jotAddress;\\n\\n    /// @notice funding token address\\n    address public fundingTokenAddress;\\n\\n    uint256 public buybackPrice;\\n    uint256 private _buybackPriceLastUpdate;\\n\\n    /// @notice data for each token\\n    mapping(uint256 => TokenData) public tokens;\\n\\n    /// @dev the nonce to avoid double verification (quantity of exits for original token id)\\n    mapping(uint256 => uint256) public nonces;\\n\\n    /**\\n     * @dev nonce to count the changes of an original collection token id\\n     *      in order to avoid double change (with the second one keeping the synthetic playing)\\n     */\\n    mapping(uint256 => ChangeNonce) public changeNonces;\\n\\n    mapping(uint256 => mapping(uint256 => address)) public ownersByNonce;\\n\\n    /// @notice Synthetic NFT Address  for this collection\\n    address public erc721address;\\n\\n    address public jotPool;\\n    address public redemptionPool;\\n\\n    event CoinFlipped(\\n        bytes32 indexed requestId,\\n        address indexed player,\\n        uint256 indexed tokenId,\\n        uint256 prediction\\n    );\\n\\n    event FlipProcessed(\\n        bytes32 indexed requestId,\\n        uint256 indexed tokenId,\\n        uint256 prediction,\\n        uint256 randomResult\\n    );\\n\\n    event VerificationRequested(bytes32 indexed requestId, address from, uint256 tokenId);\\n\\n    event VerifyResponseReceived(\\n        bytes32 indexed requestId,\\n        address originalCollection,\\n        address syntheticCollection,\\n        uint256 tokenId,\\n        bool verified\\n    );\\n\\n    //event TokenReassigned(uint256 tokenID, address newOwner);\\n\\n    event BuybackPriceUpdateRequested(bytes32 requestId);\\n    //event BuybackPriceUpdated(bytes32 requestId, uint256 price);\\n\\n    //event LiquidityAddedToFuturePool(uint256 tokenId, uint256 fundingSent, uint256 lShares);\\n\\n    event LiquidityAddedToQuickswap(\\n        uint256 tokenId,\\n        uint256 jotAmount,\\n        uint256 fundingAmount,\\n        uint256 liquidity\\n    );\\n\\n    //event LiquidityRemovedFromFuturePool(uint256 tokenId, uint256 fundingReceived, uint256 lShares);\\n\\n    event LiquidityRemovedFromQuickswap(\\n        uint256 tokenId,\\n        uint256 jotAmount,\\n        uint256 fundingAmount,\\n        uint256 liquidity\\n    );\\n\\n    /**\\n     * @dev initializes some immutable variables and lock the implementation contract\\n     *      for further initializations (with the initializer modifier)\\n     *\\n     * @param randomConsumerAddress_ the address of the vrf Chainlink node\\n     * @param validatorAddress_ the address of the polygon validator Chainlink node\\n     */\\n    constructor(address randomConsumerAddress_, address validatorAddress_) initializer {\\n        _randomConsumerAddress = randomConsumerAddress_;\\n        _validatorAddress = validatorAddress_;\\n    }\\n\\n    /**\\n     * @dev initialize the proxy contract\\n     * @param jotAddress_ the address of the jot contract for this collection\\n     * @param originalCollectionAddress_ the original collection address\\n     * @param erc721address_ the address of the synthetic erc721 contract handled by this\\n     * @param auctionManagerAddress_ the auctions manager fabric address\\n     * @param protocol_ the address of the protocol parameters contract (governance parameters)\\n     * @param jotPool_ the address of the corresponding jot pool\\n     * @param redemptionPool_ the address of the corresponding redemption pool\\n     * @param swapAddress_ the address of the uniswapV2Pair\\n     */\\n    function initialize(\\n        address jotAddress_,\\n        address originalCollectionAddress_,\\n        address erc721address_,\\n        address auctionManagerAddress_,\\n        address protocol_,\\n        address jotPool_,\\n        address redemptionPool_,\\n        address swapAddress_,\\n        address liquidityCalculatorAddress_\\n    ) external initializer {\\n        jotAddress = jotAddress_;\\n        erc721address = erc721address_;\\n        originalCollectionAddress = originalCollectionAddress_;\\n        syntheticProtocolRouterAddress = msg.sender;\\n        AuctionsManagerAddress = auctionManagerAddress_;\\n        protocol = protocol_;\\n        jotPool = jotPool_;\\n        redemptionPool = redemptionPool_;\\n\\n        _swapAddress = swapAddress_;\\n\\n        _liquidityCalculatorAddress = liquidityCalculatorAddress_;\\n\\n        // we need to initialize this member here because we need to continue using this if governance changes it\\n        fundingTokenAddress = ProtocolParameters(protocol_).fundingTokenAddress();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(ROUTER, msg.sender);\\n        _setupRole(AUCTION_MANAGER, auctionManagerAddress_);\\n    }\\n\\n    /**\\n     * @dev allows the callback after finishing an auction to reassign the NFT to the winner\\n     * @param nftId_ the id of the auctioned synthetic token\\n     * @param newOwner_ the winner of the auction account\\n     */\\n    function reassignNFT(uint256 nftId_, address newOwner_) external onlyRole(AUCTION_MANAGER) {\\n        string memory metadata = ISyntheticNFT(erc721address).tokenURI(nftId_);\\n\\n        TokenData storage token = tokens[nftId_];\\n\\n        // Get original token ID\\n        uint256 originalID = token.originalTokenID;\\n\\n        // Burn synthetic NFT\\n        ISyntheticNFT(erc721address).safeBurn(nftId_);\\n\\n        // Mint new one\\n        uint256 newSyntheticID = ISyntheticNFT(erc721address).safeMint(newOwner_, metadata);\\n\\n        // Update original to synthetic mapping\\n        _originalToSynthetic[originalID] = newSyntheticID;\\n\\n        // Empty previous id\\n        tokens[nftId_] = TokenData(0, 0, 0, 0, 0, 0, 0, 0, 0, State.NEW);\\n\\n        // Fill new ID\\n        tokens[newSyntheticID] = TokenData(\\n            originalID,\\n            ProtocolConstants.JOT_SUPPLY,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            State.VERIFIED\\n        );\\n\\n        //emit TokenReassigned(newSyntheticID, newOwner_);\\n    }\\n\\n    /**\\n     * @dev through this the router can register tokens\\n     * @param tokenId_ the original token id\\n     * @param supplyToKeep_ the supply that the owner decides to keep\\n     * @param priceFraction_ the price fraction for buying\\n     * @param nftOwner_ the owner of the synthetic nft\\n     * @param metadata_ the metadata (the ipfs url) of the nft\\n     * @return syntheticId the id of the newly registered token\\n     */\\n    function register(\\n        uint256 tokenId_,\\n        uint256 supplyToKeep_,\\n        uint256 priceFraction_,\\n        address nftOwner_,\\n        string memory metadata_\\n    ) public onlyRole(ROUTER) returns (uint256 syntheticId) {\\n        require(!isSyntheticNFTCreated(tokenId_), \\\"Synthetic NFT already generated!\\\");\\n\\n        syntheticId = ISyntheticNFT(erc721address).safeMint(nftOwner_, metadata_);\\n        uint256 sellingSupply = ProtocolConstants.JOT_SUPPLY - supplyToKeep_;\\n\\n        TokenData memory data = TokenData({\\n            originalTokenID: tokenId_,\\n            ownerSupply: supplyToKeep_,\\n            sellingSupply: sellingSupply,\\n            soldSupply: 0,\\n            liquiditySold: 0,\\n            fractionPrices: priceFraction_,\\n            lastFlipTime: 0,\\n            liquidityTokenBalance: 0,\\n            perpetualFuturesLShares: 0,\\n            state: State.NEW\\n        });\\n\\n        tokens[syntheticId] = data;\\n\\n        // lock the nft and make it auctionable\\n        if (supplyToKeep_ == 0) {\\n            IAuctionsManager(AuctionsManagerAddress).whitelistNFT(syntheticId);\\n        }\\n\\n        canFlip[syntheticId] = true;\\n    }\\n\\n    /**\\n     * @notice allows the caller to buy jots using the funding token\\n     * @param tokenId_ the id of the synthetic nft\\n     * @param amountToBuy_ the amount of jots to buy\\n     */\\n    function buyJotTokens(uint256 tokenId_, uint256 amountToBuy_) external {\\n        TokenData storage token = tokens[tokenId_];\\n        require(ISyntheticNFT(erc721address).exists(tokenId_), \\\"Token not registered\\\");\\n\\n        uint256 amountToPay = token.buyJotTokens(amountToBuy_);\\n\\n        // make the transfers\\n        IERC20(fundingTokenAddress).transferFrom(msg.sender, address(this), amountToPay);\\n        IJot(jotAddress).transfer(msg.sender, amountToBuy_);\\n    }\\n\\n    function withdrawFundingTokens(uint256 tokenId, uint256 amount) external {\\n        TokenData storage token = tokens[tokenId];\\n        require(!lockedNFT(tokenId), \\\"Token is locked!\\\");\\n        require(isOwner(tokenId, msg.sender), \\\"Only owner can withdraw\\\");\\n\\n        require(amount <= token.liquiditySold, \\\"Not enough balance\\\");\\n\\n        IERC20(fundingTokenAddress).transfer(msg.sender, amount);\\n\\n        token.liquiditySold -= amount;\\n    }\\n\\n    /**\\n     * @notice allows the caller to deposit jots\\n     * @param tokenId_ the id of the synthetic nft\\n     * @param amountToDeposit_ the amount of jots to deposit\\n     */\\n    function depositJotTokens(uint256 tokenId_, uint256 amountToDeposit_) external {\\n        TokenData storage token = tokens[tokenId_];\\n        require(isOwner(tokenId_, msg.sender), \\\"Only owner can deposit\\\");\\n\\n        token.depositJotTokens(amountToDeposit_);\\n\\n        // transfer the balance (the Jot is ours, don't need to check)\\n        IJot(jotAddress).transferFrom(msg.sender, address(this), amountToDeposit_);\\n    }\\n\\n    function withdrawJotTokens(uint256 tokenId_, uint256 amountToWithdraw_) public {\\n        TokenData storage token = tokens[tokenId_];\\n        require(!lockedNFT(tokenId_), \\\"Token is locked!\\\");\\n        require(isOwner(tokenId_, msg.sender), \\\"Only owner can withdraw\\\");\\n\\n        console.log('token.ownerSupply', token.ownerSupply);\\n        require(amountToWithdraw_ <= token.ownerSupply, \\\"Not enough balance\\\");\\n        token.ownerSupply -= amountToWithdraw_;\\n\\n        IJot(jotAddress).transfer(msg.sender, amountToWithdraw_);\\n        if (token.ownerSupply == 0) {\\n            IAuctionsManager(AuctionsManagerAddress).whitelistNFT(tokenId_);\\n        }\\n    }\\n\\n    /**\\n     * @notice increase selling supply for a given NFT\\n     * @dev caller must be the owner of the NFT\\n     * @param tokenId_ the id of the synthetic nft\\n     * @param amount_ the amount of jots to transfer from supply\\n     */\\n    function increaseSellingSupply(uint256 tokenId_, uint256 amount_) public {\\n        require(ISyntheticNFT(erc721address).ownerOf(tokenId_) == msg.sender, \\\"Only owner can increase\\\");\\n\\n        // delegate to the external library\\n        tokens[tokenId_].increaseSellingSupply(amount_);\\n\\n        // lock the nft and make it auctionable\\n        if (tokens[tokenId_].ownerSupply == 0) {\\n            IAuctionsManager(AuctionsManagerAddress).whitelistNFT(tokenId_);\\n        }\\n    }\\n\\n    /**\\n     * @notice decrease selling supply for a given NFT\\n     * @dev caller must be the owner of the NFT\\n     * @param tokenId_ the id of the synthetic nft\\n     * @param amount_ the amount of jots to transfer to supply\\n     */\\n    function decreaseSellingSupply(uint256 tokenId_, uint256 amount_) public {\\n        require(ISyntheticNFT(erc721address).ownerOf(tokenId_) == msg.sender, \\\"Only owner allowed\\\");\\n\\n        tokens[tokenId_].decreaseSellingSupply(amount_);\\n    }\\n\\n    /**\\n     * @notice update the price of a fraction for a given NFT\\n     * @dev caller must be the owner of the NFT\\n     * @param tokenId_ the id of the synthetic nft\\n     * @param newFractionPrice_ the new value of the fraction price\\n     */\\n    function updatePriceFraction(uint256 tokenId_, uint256 newFractionPrice_) public {\\n        require(ISyntheticNFT(erc721address).ownerOf(tokenId_) == msg.sender, \\\"Only owner allowed\\\");\\n        tokens[tokenId_].updatePriceFraction(newFractionPrice_);\\n    }\\n\\n    /**\\n     * @notice add available liquidity to Perpetual Pool\\n     */\\n    function addLiquidityToFuturePool(uint256 tokenId, uint256 amount) public {\\n        require(IERC721(erc721address).ownerOf(tokenId) == msg.sender, \\\"Should own NFT\\\");\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(amount <= tokens[tokenId].liquiditySold, \\\"Amount is greater than available funding\\\");\\n\\n        IERC20(fundingTokenAddress).approve(perpetualPoolLiteAddress, amount);\\n        uint256 lShares = IPerpetualPoolLite(perpetualPoolLiteAddress).addLiquidityGetlShares(amount);\\n        tokens[tokenId].liquiditySold -= amount;\\n        tokens[tokenId].perpetualFuturesLShares += lShares;\\n\\n        //emit LiquidityAddedToFuturePool(tokenId, amount, lShares);\\n    }\\n\\n    /**\\n     * @notice add available liquidity for a given token to UniSwap pool\\n     */\\n    function addLiquidityToQuickswap(uint256 tokenId, uint256 amount) public {\\n        TokenData storage token = tokens[tokenId];\\n        require(IERC721(erc721address).ownerOf(tokenId) == msg.sender, \\\"Should own NFT\\\");\\n        require(token.soldSupply > 0, \\\"soldSupply is zero\\\");\\n        require(amount <= token.liquiditySold, \\\"Amount is greater than available funding\\\");\\n\\n        IUniswapV2Pair uniswapV2Pair = IUniswapV2Pair(poolAddress());\\n\\n        (uint112 jotReserves, uint112 fundingReserves, ) = uniswapV2Pair.getReserves();\\n\\n        require(jotReserves > 0 && fundingReserves > 0, \\\"No reserves available!\\\");\\n\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_swapAddress);\\n\\n        // Approve Uniswap address\\n        IJot(jotAddress).approve(_swapAddress, token.ownerSupply);\\n        IERC20(fundingTokenAddress).approve(_swapAddress, amount);\\n\\n\\n        // add the liquidity to Uniswapp\\n        (uint256 amountA, uint256 amountB, uint256 liquidity) = uniswapV2Router.addLiquidity(\\n            jotAddress,\\n            fundingTokenAddress,\\n            token.ownerSupply,\\n            amount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this),\\n            block.timestamp // solhint-disable-line\\n        );\\n\\n        // Update balances\\n        token.ownerSupply -= amountA;\\n        token.liquiditySold -= amountB;\\n        token.liquidityTokenBalance += liquidity;\\n    }\\n\\n    function removeLiquidityFromPool(uint256 tokenId) external onlyRole(AUCTION_MANAGER) {\\n        uint256 lShares = tokens[tokenId].perpetualFuturesLShares;\\n        if(lShares > 0) {\\n            _withdrawLiquidityFromFuturePool(tokenId, lShares);\\n        }\\n        \\n        uint256 liquidityAvailable = tokens[tokenId].liquidityTokenBalance;\\n        if(liquidityAvailable > 0) {\\n            _withdrawLiquidityFromQuickswap(tokenId, liquidityAvailable);\\n        }\\n    }\\n\\n    function withdrawLiquidityFromFuturePool(uint256 tokenId, uint256 amount) external {\\n        require(IERC721(erc721address).ownerOf(tokenId) == msg.sender, \\\"Should own NFT\\\");\\n        _withdrawLiquidityFromFuturePool(tokenId, amount);\\n    }\\n\\n    function _withdrawLiquidityFromFuturePool(uint256 tokenId, uint256 amount) internal {\\n        require(amount > 0, \\\"Amount can't be zero\\\");\\n        \\n        require(amount <= tokens[tokenId].perpetualFuturesLShares, \\\"Not enough balance\\\");\\n\\n        uint256 balanceBefore = IERC20(fundingTokenAddress).balanceOf(address(this));\\n\\n        IPerpetualPoolLite(perpetualPoolLiteAddress).removeLiquidity(amount);\\n\\n        uint256 balanceAfter = IERC20(fundingTokenAddress).balanceOf(address(this));\\n\\n        tokens[tokenId].liquiditySold += (balanceAfter - balanceBefore);\\n        tokens[tokenId].perpetualFuturesLShares -= amount;\\n\\n        //emit LiquidityRemovedFromFuturePool(tokenId, (balanceAfter - balanceBefore), amount);\\n    }\\n\\n    function withdrawLiquidityFromQuickswap(uint256 tokenId, uint256 amount) external {\\n        require(IERC721(erc721address).ownerOf(tokenId) == msg.sender, \\\"Should own NFT\\\");\\n        _withdrawLiquidityFromQuickswap(tokenId, amount);\\n    }\\n\\n    function _withdrawLiquidityFromQuickswap(uint256 tokenId, uint256 amount)\\n        internal\\n        returns (uint256 jotAmountExecuted, uint256 fundingAmountExecuted)\\n    {\\n        TokenData storage token = tokens[tokenId];\\n\\n        if (amount == 0) {\\n            return (0,0);\\n        }\\n        require(token.liquidityTokenBalance >= amount, \\\"There's not enough liquidity available\\\");\\n\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_swapAddress);\\n        IUniswapV2Pair uniswapV2Pair = IUniswapV2Pair(poolAddress());\\n\\n        uniswapV2Pair.approve(_swapAddress, amount);\\n\\n        (address token0, address token1) = jotAddress < fundingTokenAddress ? (jotAddress, fundingTokenAddress) : (fundingTokenAddress, jotAddress);\\n\\n        (uint256 amount0, uint256 amount1) = uniswapV2Router.removeLiquidity(\\n            token0,\\n            token1,\\n            amount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp // solhint-disable-line\\n        );\\n\\n        (jotAmountExecuted, fundingAmountExecuted) = jotAddress < fundingTokenAddress ? (amount0, amount1) : (amount1, amount0);\\n\\n        // Update balances\\n        token.ownerSupply += jotAmountExecuted;\\n        token.liquiditySold += fundingAmountExecuted;\\n        token.liquidityTokenBalance += amount;\\n\\n        //emit LiquidityRemovedFromQuickswap(tokenId, jotAmountExecuted, fundingAmountExecuted, amount);\\n    }\\n\\n    /**\\n     * @notice Claim Liquidity Tokens\\n     */\\n    function claimLiquidityTokens(uint256 tokenId, uint256 amount) public {\\n        require(isOwner(tokenId, msg.sender), \\\"You are not the owner\\\");\\n\\n        uint256 availableAmount = tokens[tokenId].liquidityTokenBalance;\\n        require(amount <= availableAmount, \\\"Not enough liquidity available\\\");\\n\\n        tokens[tokenId].liquidityTokenBalance -= amount;\\n\\n        IUniswapV2Pair(poolAddress()).transfer(msg.sender, amount);\\n    }\\n\\n    function flipJot(uint256 tokenId, uint64 prediction) external {\\n        \\n        TokenData storage token = tokens[tokenId];\\n\\n        require(isAllowedToFlip(tokenId), \\\"Flip is not allowed yet\\\");\\n        require(!lockedNFT(tokenId), \\\"Token is locked!\\\");\\n\\n        token.lastFlipTime = block.timestamp; // solhint-disable-line\\n\\n        bytes32 requestId = IRandomNumberConsumer(_randomConsumerAddress).getRandomNumber();\\n        _flips[requestId] = Flip({tokenId: tokenId, prediction: prediction, player: msg.sender});\\n\\n        emit CoinFlipped(requestId, msg.sender, tokenId, prediction);\\n        \\n    }\\n\\n    function processFlipResult(uint256 randomNumber, bytes32 requestId) external onlyRole(RANDOM_ORACLE) {\\n        \\n        uint256 poolAmount;\\n        uint256 fAmount = ProtocolParameters(protocol).flippingAmount();\\n        uint256 fReward = ProtocolParameters(protocol).flippingReward();\\n\\n        Flip memory flip = _flips[requestId];\\n        TokenData storage token = tokens[flip.tokenId];\\n        uint256 ownerSupply = token.ownerSupply;\\n\\n        // avoid underflow in math operations\\n        if (fAmount > ownerSupply) {\\n            fAmount = ownerSupply;\\n        }\\n        if (fReward > fAmount) {\\n            fReward = fAmount;\\n        }\\n\\n        if (randomNumber == 0) {\\n            token.ownerSupply -= fAmount;\\n            if (randomNumber != flip.prediction) {\\n                poolAmount = fAmount;\\n            } else {\\n                poolAmount = fAmount - fReward;\\n                IERC20(jotAddress).safeTransfer(_flips[requestId].player, fReward);\\n            }\\n            if (poolAmount > 0) {\\n                IERC20(jotAddress).safeTransfer(jotPool, poolAmount);\\n            }\\n        } else {\\n            if (randomNumber != flip.prediction) {\\n                poolAmount = fAmount;\\n            } else {\\n                poolAmount = fAmount - fReward;\\n                IERC20ManagedAccounts(jotAddress).transferFromManaged(\\n                    jotPool,\\n                    _flips[requestId].player,\\n                    fReward\\n                );\\n            }\\n            if (poolAmount > 0) {\\n                token.ownerSupply += poolAmount;\\n                IERC20ManagedAccounts(jotAddress).transferFromManaged(jotPool, address(this), poolAmount);\\n            }\\n        }\\n\\n        // lock the nft and make it auctionable\\n        if (token.ownerSupply == 0) {\\n            IAuctionsManager(AuctionsManagerAddress).whitelistNFT(flip.tokenId);\\n        }\\n\\n        emit FlipProcessed(requestId, flip.tokenId, flip.prediction, randomNumber);\\n    }\\n\\n    function recoverToken(uint256 tokenId) external {\\n        require(IAuctionsManager(AuctionsManagerAddress).isRecoverable(tokenId), \\\"Token is not recoverable\\\");\\n        require(isOwner(tokenId, msg.sender), \\\"Only owner allowed\\\");\\n\\n        // reverts on failure\\n        IERC20(jotAddress).safeTransferFrom(msg.sender, address(this), ProtocolConstants.JOT_SUPPLY);\\n\\n        tokens[tokenId].ownerSupply = ProtocolConstants.JOT_SUPPLY;\\n\\n        IAuctionsManager(AuctionsManagerAddress).blacklistNFT(tokenId);\\n    }\\n\\n    /**\\n     * @notice this method calls chainlink oracle and\\n     *         verifies if the NFT has been locked on NFTVaultManager. In addition\\n     *         gets the metadata of the NFT\\n     */\\n    function verify(uint256 tokenId) external {\\n        TokenData storage token = tokens[tokenId];\\n        require(ISyntheticNFT(erc721address).exists(tokenId), \\\"Token not registered\\\");\\n        require(token.state != State.VERIFIED, \\\"Token already verified\\\");\\n\\n        token.state = State.VERIFYING;\\n\\n        bytes32 requestId = IPolygonValidatorOracle(_validatorAddress).verifyTokenInCollection(\\n            originalCollectionAddress,\\n            tokenId,\\n            uint256(token.state),\\n            nonces[token.originalTokenID]\\n        );\\n\\n        emit VerificationRequested(requestId, msg.sender, tokenId);\\n    }\\n\\n    function processVerifyResponse(\\n        bytes32 requestId,\\n        VerifyRequest memory requestData,\\n        bool verified\\n    ) external onlyRole(VALIDATOR_ORACLE) {\\n        TokenData storage token = tokens[requestData.tokenId];\\n\\n        if (verified) {\\n            token.state = State.VERIFIED;\\n\\n            // mint the jots after verification\\n            Jot(jotAddress).mint(address(this), ProtocolConstants.JOT_SUPPLY);\\n        } else {\\n            token.state = requestData.previousState;\\n        }\\n\\n        emit VerifyResponseReceived(\\n            requestId,\\n            requestData.originalCollection,\\n            requestData.syntheticCollection,\\n            requestData.tokenId,\\n            verified\\n        );\\n    }\\n\\n    /**\\n     * @notice change an NFT for another one of the same collection\\n     */\\n    function change(\\n        uint256 syntheticId,\\n        uint256 newOriginalId,\\n        string memory metadata,\\n        address caller\\n    ) public onlyRole(ROUTER) {\\n        TokenData storage token = tokens[syntheticId];\\n\\n        // only can change tokens with supply\\n        require(token.ownerSupply > 0, \\\"Can't be changed\\\");\\n\\n        // should be verified\\n        require(token.state == State.VERIFIED, \\\"Token not verified\\\");\\n\\n        // caller must be token owner\\n        require(IERC721(erc721address).ownerOf(syntheticId) == caller, \\\"Should own NFT\\\");\\n\\n        // updates the nonce for change\\n        ChangeNonce storage cn = changeNonces[token.originalTokenID];\\n        cn.nonce += 1;\\n        cn.newTokenId = newOriginalId;\\n        cn.owner = caller;\\n\\n        token.state = State.CHANGING;\\n        delete _originalToSynthetic[token.originalTokenID];\\n        token.originalTokenID = newOriginalId;\\n        _originalToSynthetic[newOriginalId] = syntheticId;\\n\\n        ISyntheticNFT(erc721address).setMetadata(syntheticId, metadata);\\n    }\\n\\n    /**\\n     * @notice allows users to update buyback price for buyback\\n     */\\n    function updateBuybackPrice() external returns (bytes32 requestId) {\\n        requestId = IPolygonValidatorOracle(_validatorAddress).updateBuybackPrice(originalCollectionAddress);\\n\\n        emit BuybackPriceUpdateRequested(requestId);\\n    }\\n\\n    /**\\n     * @dev processes the oracle response for buyback price updates\\n     * @param requestId_ the id of the Chainlink request\\n     * @param buybackPrice_ the new buyback price\\n     */\\n    function processBuybackPriceResponse(bytes32 requestId_, uint256 buybackPrice_)\\n        external\\n        onlyRole(VALIDATOR_ORACLE)\\n    {\\n        buybackPrice = buybackPrice_;\\n        _buybackPriceLastUpdate = block.timestamp; // solhint-disable-line\\n\\n        //emit BuybackPriceUpdated(requestId_, buybackPrice_);\\n    }\\n\\n    /**\\n     * @notice returns funds owned by token, in Jots and Funding, in contract and in UniSwap\\n     */\\n    function getAvailableJotsForBuyback(uint256 tokenId)\\n        public\\n        view\\n        returns (uint256 totalJots, uint256 totalFunding)\\n    {\\n        TokenData storage token = tokens[tokenId];\\n\\n        IUniswapV2Pair uniswapV2Pair = IUniswapV2Pair(poolAddress());\\n\\n        uint256 liquidity = token.liquidityTokenBalance;\\n\\n        (uint112 jotReserves, uint112 fundingReserves, ) = uniswapV2Pair.getReserves();\\n\\n        uint256 totalSupply = uniswapV2Pair.totalSupply();\\n\\n        uint256 jotLiquidity;\\n\\n        if (totalSupply > 0) {\\n            jotLiquidity = (liquidity * jotReserves) / totalSupply;\\n            // the funding liquidity is the total funding\\n            totalFunding = (liquidity * fundingReserves) / totalSupply;\\n        } else {\\n            totalFunding = fundingReserves;\\n        }\\n\\n        totalJots = token.ownerSupply + token.sellingSupply + jotLiquidity;\\n    }\\n\\n    function buybackRequiredAmount(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            uint256 buybackAmount,\\n            uint256 fundingLeft,\\n            uint256 jotsLeft\\n        )\\n    {\\n        require(!lockedNFT(tokenId), \\\"Token is locked!\\\");\\n\\n        (uint256 total, uint256 fundingLiquidity) = getAvailableJotsForBuyback(tokenId);\\n\\n        (jotsLeft, fundingLeft, buybackAmount) = LiquidityCalculator(\\n            _liquidityCalculatorAddress\\n        ).getFundingLeftAndBuybackAmount(total, fundingLiquidity, ProtocolConstants.JOT_SUPPLY, buybackPrice);\\n    }\\n\\n    /**\\n     * @notice Buy token back.\\n     * Caller needs to pre-approve a transaction worth the amount\\n     * returned by the getRequiredFundingForBuyback(uint256 tokenId) function\\n     */\\n    function buyback(uint256 tokenId) public {\\n        // solhint-disable-next-line\\n        require(block.timestamp < _buybackPriceLastUpdate + 5 minutes, \\\"Buyback price update required\\\");\\n        require(isOwner(tokenId, msg.sender), \\\"Only owner allowed\\\");\\n        require(!lockedNFT(tokenId), \\\"Token is locked!\\\");\\n\\n        // execute the buyback if needed and remove the liquidity\\n        _executeBuyback(tokenId);\\n\\n        // exit the protocol\\n        _exitProtocol(tokenId);\\n    }\\n\\n    /**\\n     * @dev helper for the buyback function\\n     */\\n    function _executeBuyback(uint256 tokenId) internal {\\n        TokenData storage token = tokens[tokenId];\\n\\n        // get available liquidity (owner + selling + liquidity + uniswap ))\\n        (, uint256 fundingLiquidity) = _withdrawLiquidityFromQuickswap(tokenId, token.liquidityTokenBalance);\\n        // TODO: get PerpetualPoolLite.getLiquidity\\n        //uint256 perpetualPoolLiteLiquidity;\\n\\n        uint256 total = token.ownerSupply + token.sellingSupply;\\n\\n        (uint256 jotsLeft, uint256 fundingLeft, uint256 buybackAmount) = LiquidityCalculator(\\n            _liquidityCalculatorAddress\\n        ).getFundingLeftAndBuybackAmount(\\n            total,\\n            fundingLiquidity,\\n            ProtocolConstants.JOT_SUPPLY,\\n            buybackPrice\\n        );\\n\\n        uint256 burned = total < ProtocolConstants.JOT_SUPPLY ? total : ProtocolConstants.JOT_SUPPLY;\\n\\n        // burn the jots\\n        Jot(jotAddress).burn(burned);\\n\\n        if (buybackAmount > 0) {\\n            // increase allowance to burn\\n            Jot(jotAddress).increaseAllowance(redemptionPool, ProtocolConstants.JOT_SUPPLY - burned);\\n\\n            // update redemption pool balance trackers\\n            RedemptionPool(redemptionPool).addRedemableBalance(buybackAmount, (buybackAmount / buybackPrice));\\n\\n            IERC20(fundingTokenAddress).transferFrom(msg.sender, redemptionPool, buybackAmount);\\n        }\\n\\n        if (fundingLeft > 0) {\\n            IERC20(fundingTokenAddress).transfer(msg.sender, fundingLeft);\\n        }\\n\\n        if (jotsLeft > 0) {\\n            IJot(jotAddress).transfer(msg.sender, jotsLeft);\\n        }\\n    }\\n\\n    /**\\n     * @dev allows to exit the protocol (retrieve the token)\\n     */\\n    function _exitProtocol(uint256 tokenId) internal {\\n        TokenData storage token = tokens[tokenId];\\n\\n        // increase nonce to avoid double verification\\n        uint256 currentNonce = nonces[token.originalTokenID];\\n        ownersByNonce[token.originalTokenID][currentNonce] = msg.sender;\\n        nonces[token.originalTokenID] = currentNonce + 1;\\n\\n        // Burn synthetic token\\n        safeBurn(tokenId);\\n\\n        // free space and get refunds\\n        delete _originalToSynthetic[token.originalTokenID];\\n        delete tokens[tokenId];\\n    }\\n\\n    /**\\n     * @dev burn a token\\n     */\\n    function safeBurn(uint256 tokenId) private {\\n        ISyntheticNFT(erc721address).safeBurn(tokenId);\\n    }\\n\\n    function setMetadata(uint256 tokenId, string memory metadata) public {\\n        TokenData storage token = tokens[tokenId];\\n        require(token.state != State.VERIFIED, \\\"Can't change metadata after verify\\\");\\n        require(token.state != State.VERIFYING, \\\"Can't change metadata while verifying\\\");\\n\\n        address tokenOwner = IERC721(erc721address).ownerOf(tokenId);\\n        require(msg.sender == tokenOwner, \\\"You are not the owner of the NFT!\\\");\\n        ISyntheticNFT(erc721address).setMetadata(tokenId, metadata);\\n    }\\n\\n    function exchangeOwnerJot(uint256 tokenId, uint256 amount) external {\\n        require(tokens[tokenId].ownerSupply >= amount, \\\"Exchange amount exceeds balance\\\");\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_swapAddress);\\n        address[] memory path = new address[](2);\\n        path[0] = jotAddress;\\n        path[1] = fundingTokenAddress;\\n\\n        tokens[tokenId].ownerSupply -= amount;\\n        if (tokens[tokenId].ownerSupply == 0) {\\n            IAuctionsManager(AuctionsManagerAddress).whitelistNFT(tokenId);\\n        }\\n\\n        uniswapV2Router.swapExactTokensForTokens(\\n            amount,\\n            0, //we don't care about slippage\\n            path,\\n            msg.sender,\\n            // solhint-disable-next-line\\n            block.timestamp\\n        );\\n    }\\n\\n    function setPerpetualPoolLiteAddress(address perpetualPoolLiteAddress_) external onlyRole(ROUTER) {\\n        perpetualPoolLiteAddress = perpetualPoolLiteAddress_;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /*function isVerified(uint256 tokenId) public view returns (bool) {\\n        return (tokens[tokenId].state == State.VERIFIED);\\n    }*/\\n\\n    /*function getOriginalID(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].originalTokenID;\\n    }*/\\n\\n    /*function getTokenURI(uint256 tokenId) public view returns (string memory) {\\n        return ISyntheticNFT(erc721address).tokenURI(tokenId);\\n    }*/\\n\\n    /**\\n     * @notice get the owner of the NFT\\n     * @param tokenId_ the id of the NFT\\n     */\\n    /*function getSyntheticNFTOwner(uint256 tokenId_) public view returns (address) {\\n        return IERC721(erc721address).ownerOf(tokenId_);\\n    }*/\\n\\n    /**\\n     * @notice returns the Quickswap pool address\\n     */\\n    function poolAddress() public view returns (address) {\\n        //TODO: check if pool is initiated\\n        return IJot(jotAddress).uniswapV2Pair();\\n    }\\n\\n    /**\\n     * @notice public function. Checks if an NFT has\\n     * been already fractionalized\\n     */\\n    function isSyntheticNFTCreated(uint256 tokenId) public view returns (bool) {\\n        return _originalToSynthetic[tokenId] != 0;\\n    }\\n\\n    /**\\n     * @notice public function. Checks if an NFT has\\n     * been already fractionalised.\\n     */\\n    function isSyntheticNFTFractionalised(uint256 tokenId) public view returns (bool) {\\n        return tokens[tokenId].originalTokenID != 0;\\n    }\\n\\n    /*function getOwnerSupply(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].ownerSupply;\\n    }\\n\\n    function getSellingSupply(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].sellingSupply;\\n    }\\n\\n    function getSoldSupply(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].soldSupply;\\n    }\\n\\n    function getJotFractionPrice(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].fractionPrices;\\n    }*/\\n\\n    function getJotAmountLeft(uint256 tokenId) public view returns (uint256) {\\n        TokenData storage token = tokens[tokenId];\\n        return token.sellingSupply - token.soldSupply;\\n    }\\n\\n    function getSalePrice(uint256 tokenId, uint256 buyAmount) public view returns (uint256) {\\n        uint256 amount = (buyAmount * tokens[tokenId].fractionPrices);\\n        return amount;\\n    }\\n\\n    function lockedNFT(uint256 tokenId) public view returns (bool) {\\n        TokenData storage token = tokens[tokenId];\\n        return token.state != State.VERIFIED || token.ownerSupply == 0;\\n    }\\n\\n    /**\\n     * @notice returns the accrued reward by QuickSwap pool LP for a given fractionalization\\n     */\\n    function getAccruedReward(uint256 tokenId) public view returns (uint256, uint256) {\\n        return\\n            LiquidityCalculator(_liquidityCalculatorAddress).getAccruedReward(\\n                poolAddress(),\\n                tokens[tokenId].liquidityTokenBalance\\n            );\\n    }\\n\\n    function isAllowedToFlip(uint256 tokenId) public view returns (bool) {\\n        return\\n            canFlip[tokenId] &&\\n            ISyntheticNFT(erc721address).exists(tokenId) &&\\n            block.timestamp - tokens[tokenId].lastFlipTime >= ProtocolParameters(protocol).flippingInterval() && // solhint-disable-line\\n            IERC20(jotAddress).balanceOf(jotPool) > ProtocolParameters(protocol).flippingAmount() &&\\n            isSyntheticNFTFractionalised(tokenId);\\n    }\\n\\n    /*function getliquiditySold(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].liquiditySold;\\n    }\\n\\n    function getLiquidityTokens(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].liquidityTokenBalance;\\n    }*/\\n\\n    function isOwner(uint256 tokenId, address caller) public view returns (bool) {\\n        return ISyntheticNFT(erc721address).ownerOf(tokenId) == caller;\\n    }\\n\\n    function setFlip(uint256 tokenId, bool value) public {\\n        require(isOwner(tokenId, msg.sender), \\\"Only owner can change flip\\\");\\n        canFlip[tokenId] = value;\\n    }\\n\\n    /*function getLtoken(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].perpetualFuturesLShares;\\n    }*/\\n}\\n\",\"keccak256\":\"0x1e7c38e52c3816943f405c4a63fd361f02eb85684358dff7c25e6416e7ada93f\",\"license\":\"MIT\"},\"contracts/polygon/libraries/ProtocolConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary ProtocolConstants {\\r\\n    uint256 public constant JOT_SUPPLY = 10000000000000000000000;\\r\\n    uint256 public constant STAKER_SHARE_DENOMINATOR = 1000;\\r\\n}\\r\\n\",\"keccak256\":\"0x3bd7d711cca69e49c9380c0c0ebc64ca24d043f34f7c2f525b75082573759491\",\"license\":\"MIT\"},\"contracts/polygon/libraries/SyntheticTokenLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\nimport \\\"../implementations/Structs.sol\\\";\\nimport \\\"./ProtocolConstants.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title helpers for synthetic token operations\\n * @author priviprotocol\\n */\\nlibrary SyntheticTokenLibrary {\\n    /**\\n     * @dev helper for increase selling supply\\n     * @param amount the quantity of supply to increase\\n     */\\n    function increaseSellingSupply(TokenData storage token, uint256 amount) external {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n        require(token.ownerSupply >= amount, \\\"You do not have enough tokens left\\\");\\n\\n        token.ownerSupply -= amount;\\n        token.sellingSupply += amount;\\n    }\\n\\n    /**\\n     * @dev helper for decrease selling supply\\n     * @param amount the quantity of supply to decrease\\n     */\\n    function decreaseSellingSupply(TokenData storage token, uint256 amount) external {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n\\n        require(token.sellingSupply >= amount, \\\"You do not have enough selling supply left\\\");\\n\\n        token.ownerSupply += amount;\\n        token.sellingSupply -= amount;\\n    }\\n\\n    /**\\n     * @dev helper for update price fraction\\n     * @param newFractionPrice the quantity of supply to increase\\n     */\\n    function updatePriceFraction(TokenData storage token, uint256 newFractionPrice) external {\\n        require(newFractionPrice > 0, \\\"Fraction price must be greater than zero\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n\\n        token.fractionPrices = newFractionPrice;\\n    }\\n\\n    /**\\n     * @dev helper for buy jot tokens\\n     * @param amount the quantity of jots to buy\\n     */\\n    function buyJotTokens(TokenData storage token, uint256 amount) external returns (uint256 amountToPay) {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n\\n        // calculate amount left\\n        uint256 amountLeft = token.sellingSupply;\\n\\n        require(amountLeft > 0, \\\"No available tokens for sale\\\");\\n        require(amount <= amountLeft, \\\"Not enough available tokens\\\");\\n\\n        amountToPay = (amount * token.fractionPrices) / 10**18;\\n\\n        // Can't sell zero tokens\\n        require(amountToPay > 0, \\\"No tokens left!\\\");\\n\\n        //Increase sold supply (amount in token) and liquidity sold (amount in ether)\\n        token.sellingSupply -= amount;\\n        token.soldSupply += amount;\\n        token.liquiditySold += amountToPay;\\n    }\\n\\n    /**\\n     * @dev helper for deposit jot tokens\\n     * @param amount the quantity of jots to deposit\\n     */\\n    function depositJotTokens(TokenData storage token, uint256 amount) external {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n\\n        // save gas through memory\\n        uint256 ownerSupply = token.ownerSupply;\\n\\n        require(!isLocked(token.state, ownerSupply), \\\"Token is locked!\\\");\\n\\n        uint256 result = ownerSupply + amount;\\n        require(result <= ProtocolConstants.JOT_SUPPLY, \\\"You can't deposit more than the Jot Supply limit\\\");\\n\\n        token.ownerSupply += amount;\\n    }\\n\\n    function isLocked(State state, uint256 ownerSupply) internal pure returns (bool) {\\n        return state != State.VERIFIED || ownerSupply == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xfdcd99b1647623429d17293bce7e0c0b54e5e23b1cdc5cd8a40876b85ec1ee09\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620061813803806200618183398101604081905262000034916200012c565b600154610100900460ff16806200004e575060015460ff16155b620000b65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600154610100900460ff16158015620000d9576001805461ffff19166101011790555b6001600160601b0319606084811b821660805283901b1660a052801562000106576001805461ff00191690555b50505062000163565b80516001600160a01b03811681146200012757600080fd5b919050565b600080604083850312156200013f578182fd5b6200014a836200010f565b91506200015a602084016200010f565b90509250929050565b60805160601c60a05160601c615feb62000196600039600081816117660152612b04015260006115b90152615feb6000f3fe608060405234801561001057600080fd5b50600436106103e65760003560e01c806379a9fa1c1161020a578063a03bf2b311610125578063cd87eb52116100b8578063e445a50211610087578063e445a502146109c0578063ecf70d37146109d3578063ee2af58d146109f5578063f0b3825014610a08578063f5e95acb14610a3c57600080fd5b8063cd87eb5214610965578063d3c4ea9214610987578063d547741f1461099a578063e028ba7f146109ad57600080fd5b8063b1da4db7116100f4578063b1da4db714610919578063b49538371461092c578063c700395b1461093f578063cb1a233d1461095257600080fd5b8063a03bf2b3146108c4578063a217fddf146108d7578063ab8f2b1b146108df578063abacac25146108f257600080fd5b80638aab42741161019d5780638f2e5b021161016c5780638f2e5b021461088257806391d14854146108955780639c76a6ac146108a85780639d806b54146108b157600080fd5b80638aab4274146108365780638c7a6661146108495780638ce744261461085c5780638d49d4641461086f57600080fd5b80638753367f116101d95780638753367f146107d55780638810cf5f146107e8578063886747cd1461081057806389736a901461082357600080fd5b806379a9fa1c146107405780637c4950c7146107535780637e0aa10c1461076657806383a13100146107c257600080fd5b806336b64fc21161030557806357841014116102985780635c920736116102675780635c920736146106e15780635ea172d0146106f45780636332fb8b146107075780636e26115c1461071a57806373233ea61461072d57600080fd5b8063578410141461066657806358e8bcb714610694578063593aa283146106bb5780635a5d096c146106ce57600080fd5b80634c4e03f9116102d45780634c4e03f9146105b55780634c538fde146105c85780634d81bea1146105db5780634f64b2be146105ee57600080fd5b806336b64fc21461056757806339fb284e1461057a5780634bc4d5991461058f5780634c4b206b146105a257600080fd5b80631c06b6ba1161037d5780632f2ff15d1161034c5780632f2ff15d1461052457806330218c301461053757806332fe7b261461053f57806336568abe1461055457600080fd5b80631c06b6ba146104c8578063248a9ca3146104db57806326964e51146104fe57806326aa143b1461051157600080fd5b8063141a468c116103b9578063141a468c146104665780631755ff21146104945780631a179a511461049c5780631bfc2357146104af57600080fd5b806301ffc9a7146103eb57806302d7965214610413578063072ac5f3146104285780630f1203d01461043b575b600080fd5b6103fe6103f9366004615846565b610a4f565b60405190151581526020015b60405180910390f35b61042661042136600461574c565b610a60565b005b610426610436366004615825565b610e5b565b60025461044e906001600160a01b031681565b6040516001600160a01b03909116815260200161040a565b61048661047436600461571c565b60106020526000908152604090205481565b60405190815260200161040a565b61044e6112a9565b60035461044e906001600160a01b031681565b60015461044e906201000090046001600160a01b031681565b6104266104d6366004615825565b61132b565b6104866104e936600461571c565b60009081526020819052604090206001015490565b61042661050c366004615ab0565b611523565b61048661051f36600461571c565b6116f2565b61042661053236600461574c565b61171b565b610486611741565b610486600080516020615f9683398151915281565b61042661056236600461574c565b611820565b610426610575366004615566565b61189e565b610486600080516020615f7683398151915281565b600b5461044e906001600160a01b031681565b60135461044e906001600160a01b031681565b6104266105c3366004615825565b6118da565b600c5461044e906001600160a01b031681565b6104266105e936600461592e565b611b48565b6106506105fc36600461571c565b600f6020526000908152604090208054600182015460028301546003840154600485015460058601546006870154600788015460088901546009909901549798969795969495939492939192909160ff168a565b60405161040a9a99989796959493929190615dad565b61067961067436600461571c565b611bbe565b6040805193845260208401929092529082015260600161040a565b6104867fe87beaa2684453d25a1f0e3e7002e109b34fc4f132f115c9a7707901e792751381565b6104266106c9366004615952565b611ca5565b6103fe6106dc36600461574c565b611f05565b6104266106ef366004615825565b611f98565b610486610702366004615a46565b6121d8565b61042661071536600461577b565b612499565b6104266107283660046159b9565b6125fe565b6103fe61073b36600461571c565b612860565b61042661074e36600461571c565b6128aa565b60155461044e906001600160a01b031681565b61079e61077436600461571c565b6011602052600090815260409020805460018201546002909201549091906001600160a01b031683565b6040805193845260208401929092526001600160a01b03169082015260600161040a565b600a5461044e906001600160a01b031681565b6104266107e336600461571c565b612968565b6107fb6107f636600461571c565b612bc2565b6040805192835260208301919091520161040a565b61042661081e366004615825565b612d5b565b610426610831366004615825565b612eae565b610486610844366004615825565b612fcf565b610426610857366004615825565b612ff5565b60095461044e906001600160a01b031681565b61042661087d366004615825565b61302b565b6107fb61089036600461571c565b61346f565b6103fe6108a336600461574c565b61351a565b610486600d5481565b6104266108bf366004615825565b613543565b6104266108d2366004615825565b61364f565b610486600081565b6104266108ed366004615825565b61379a565b6104867f747c8a75243ae2ca1d188aaaeab610daf9d97e45b6513baed451ebf0b9ec74fd81565b60145461044e906001600160a01b031681565b61042661093a366004615825565b61388b565b61042661094d366004615825565b613937565b61042661096036600461571c565b613ba8565b6103fe61097336600461571c565b6000908152600f6020526040902054151590565b61042661099536600461571c565b613d3b565b6104266109a836600461574c565b613d98565b6104266109bb366004615825565b613dbe565b6103fe6109ce36600461571c565b613e6a565b6103fe6109e136600461571c565b600090815260076020526040902054151590565b610426610a03366004615825565b6140d6565b61044e610a16366004615825565b60126020908152600092835260408084209091529082529020546001600160a01b031681565b610426610a4a36600461559e565b61429a565b6000610a5a826144c1565b92915050565b600080516020615f76833981519152610a7981336144f6565b60135460405163c87b56dd60e01b8152600481018590526000916001600160a01b03169063c87b56dd9060240160006040518083038186803b158015610abe57600080fd5b505afa158015610ad2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610afa919081019061586e565b6000858152600f6020526040908190208054601354925163dbf5132560e01b815260048101899052939450909290916001600160a01b03169063dbf5132590602401600060405180830381600087803b158015610b5657600080fd5b505af1158015610b6a573d6000803e3d6000fd5b5050601354604051636902622f60e11b8152600093506001600160a01b03909116915063d204c45e90610ba39089908890600401615bc0565b602060405180830381600087803b158015610bbd57600080fd5b505af1158015610bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf59190615734565b905080600760008481526020019081526020016000208190555060405180610140016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006003811115610c7b57634e487b7160e01b600052602160045260246000fd5b815250600f6000898152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff02191690836003811115610d2557634e487b7160e01b600052602160045260246000fd5b021790555090505060405180610140016040528083815260200169021e19e0c9bab240000081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160026003811115610da157634e487b7160e01b600052602160045260246000fd5b815250600f6000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff02191690836003811115610e4b57634e487b7160e01b600052602160045260246000fd5b0217905550505050505050505050565b7fe87beaa2684453d25a1f0e3e7002e109b34fc4f132f115c9a7707901e7927513610e8681336144f6565b600080600960009054906101000a90046001600160a01b03166001600160a01b031663b94d25ce6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed757600080fd5b505afa158015610eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0f9190615734565b90506000600960009054906101000a90046001600160a01b03166001600160a01b0316631861779d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6157600080fd5b505afa158015610f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f999190615734565b6000868152600660209081526040808320815160608101835281548082526001928301546001600160401b03811683870152600160401b90046001600160a01b0316828501528552600f9093529220918201549293509180851115610ffc578094505b84841115611008578493505b886110aa57848260010160008282546110219190615ecc565b909155505060208301516001600160401b0316891461104257849550611082565b61104c8486615ecc565b600089815260066020526040902060010154600b54919750611082916001600160a01b0390811691600160401b9004168661455a565b85156110a557601454600b546110a5916001600160a01b0391821691168861455a565b6111e2565b82602001516001600160401b031689146110c657849550611158565b6110d08486615ecc565b600b5460145460008b815260066020526040908190206001015490516311c9479960e21b81529399506001600160a01b03928316936347251e649361112593811692600160401b900416908990600401615b9c565b600060405180830381600087803b15801561113f57600080fd5b505af1158015611153573d6000803e3d6000fd5b505050505b85156111e257858260010160008282546111729190615e75565b9091555050600b546014546040516311c9479960e21b81526001600160a01b03928316926347251e64926111af9291169030908b90600401615b9c565b600060405180830381600087803b1580156111c957600080fd5b505af11580156111dd573d6000803e3d6000fd5b505050505b60018201546112525760015483516040516316bfb45760e11b81526004810191909152620100009091046001600160a01b031690632d7f68ae90602401600060405180830381600087803b15801561123957600080fd5b505af115801561124d573d6000803e3d6000fd5b505050505b8251602080850151604080516001600160401b0390921682529181018c90528a917f10c2415cd62b00f83e15c907a08b12444e71bcc1645322f97a631df735fe49e3910160405180910390a3505050505050505050565b600b54604080516324dead2f60e11b815290516000926001600160a01b0316916349bd5a5e916004808301926020929190829003018186803b1580156112ee57600080fd5b505afa158015611302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113269190615582565b905090565b6000828152600f6020526040902061134283612860565b156113685760405162461bcd60e51b815260040161135f90615cfa565b60405180910390fd5b6113728333611f05565b6113b85760405162461bcd60e51b81526020600482015260176024820152764f6e6c79206f776e65722063616e20776974686472617760481b604482015260640161135f565b6113ef60405180604001604052806011815260200170746f6b656e2e6f776e6572537570706c7960781b81525082600101546145b0565b80600101548211156114135760405162461bcd60e51b815260040161135f90615c32565b818160010160008282546114279190615ecc565b9091555050600b5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061145e9033908690600401615be4565b602060405180830381600087803b15801561147857600080fd5b505af115801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190615700565b50600181015461151e576001546040516316bfb45760e11b815260048101859052620100009091046001600160a01b031690632d7f68ae90602401600060405180830381600087803b15801561150557600080fd5b505af1158015611519573d6000803e3d6000fd5b505050505b505050565b6000828152600f6020526040902061153a83613e6a565b6115865760405162461bcd60e51b815260206004820152601760248201527f466c6970206973206e6f7420616c6c6f77656420796574000000000000000000604482015260640161135f565b61158f83612860565b156115ac5760405162461bcd60e51b815260040161135f90615cfa565b42816006018190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dbdff2c16040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561161257600080fd5b505af1158015611626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164a9190615734565b604080516060810182528681526001600160401b038681166020808401828152338587018181526000898152600685528890209651875591516001909601805492516001600160a01b0316600160401b026001600160e01b031990931696909516959095171790925592519283529293508692909184917ff3430182a8f4149cb1910574795295555b8119134718716b9f3e5024189a64a5910160405180910390a450505050565b6000818152600f60205260408120600381015460028201546117149190615ecc565b9392505050565b60008281526020819052604090206001015461173781336144f6565b61151e83836145f5565b600a54604051630502c73b60e41b81526001600160a01b0391821660048201526000917f0000000000000000000000000000000000000000000000000000000000000000169063502c73b090602401602060405180830381600087803b1580156117aa57600080fd5b505af11580156117be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e29190615734565b90507fbe2b5ab4e879a268995b8af0c68a310c39e8c1573b4c283ef80e3c64125499b98160405161181591815260200190565b60405180910390a190565b6001600160a01b03811633146118905760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161135f565b61189a8282614679565b5050565b600080516020615f968339815191526118b781336144f6565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152600f6020526040908190206013549151634f558e7960e01b81526004810185905290916001600160a01b031690634f558e799060240160206040518083038186803b15801561192d57600080fd5b505afa158015611941573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119659190615700565b6119a85760405162461bcd60e51b8152602060048201526014602482015273151bdad95b881b9bdd081c9959da5cdd195c995960621b604482015260640161135f565b60405163d52cb9cb60e01b8152600481018290526024810183905260009073697bB9ED8fa7fc8bf6cCFF12cf1FB64027A2E5B59063d52cb9cb9060440160206040518083038186803b1580156119fd57600080fd5b505af4158015611a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a359190615734565b600c546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90611a6a90339030908690600401615b9c565b602060405180830381600087803b158015611a8457600080fd5b505af1158015611a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abc9190615700565b50600b5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611aef9033908790600401615be4565b602060405180830381600087803b158015611b0957600080fd5b505af1158015611b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b419190615700565b5050505050565b611b528233611f05565b611b9e5760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f776e65722063616e206368616e676520666c6970000000000000604482015260640161135f565b600091825260086020526040909120805460ff1916911515919091179055565b6000806000611bcc84612860565b15611be95760405162461bcd60e51b815260040161135f90615cfa565b600080611bf586612bc2565b600554600d5460405163cfcbe04560e01b8152600481018590526024810184905269021e19e0c9bab2400000604482015260648101919091529294509092506001600160a01b03169063cfcbe0459060840160606040518083038186803b158015611c5f57600080fd5b505afa158015611c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c979190615a19565b989097509095509350505050565b6000828152600f602052604090206002600982015460ff166003811115611cdc57634e487b7160e01b600052602160045260246000fd5b1415611d355760405162461bcd60e51b815260206004820152602260248201527f43616e2774206368616e6765206d657461646174612061667465722076657269604482015261667960f01b606482015260840161135f565b6001600982015460ff166003811115611d5e57634e487b7160e01b600052602160045260246000fd5b1415611dba5760405162461bcd60e51b815260206004820152602560248201527f43616e2774206368616e6765206d65746164617461207768696c6520766572696044820152646679696e6760d81b606482015260840161135f565b6013546040516331a9108f60e11b8152600481018590526000916001600160a01b031690636352211e9060240160206040518083038186803b158015611dff57600080fd5b505afa158015611e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e379190615582565b9050336001600160a01b03821614611e9b5760405162461bcd60e51b815260206004820152602160248201527f596f7520617265206e6f7420746865206f776e6572206f6620746865204e46546044820152602160f81b606482015260840161135f565b60135460405163593aa28360e01b81526001600160a01b039091169063593aa28390611ecd9087908790600401615d94565b600060405180830381600087803b158015611ee757600080fd5b505af1158015611efb573d6000803e3d6000fd5b5050505050505050565b6013546040516331a9108f60e11b8152600481018490526000916001600160a01b0384811692911690636352211e9060240160206040518083038186803b158015611f4f57600080fd5b505afa158015611f63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f879190615582565b6001600160a01b0316149392505050565b6000828152600f6020526040902060010154811115611ff95760405162461bcd60e51b815260206004820152601f60248201527f45786368616e676520616d6f756e7420657863656564732062616c616e636500604482015260640161135f565b6004546040805160028082526060820183526001600160a01b03909316926000926020830190803683375050600b5482519293506001600160a01b03169183915060009061205757634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600c5482519116908290600190811061209657634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091018201526000858152600f9091526040812060010180548592906120ce908490615ecc565b90915550506000848152600f602052604090206001015461214d576001546040516316bfb45760e11b815260048101869052620100009091046001600160a01b031690632d7f68ae90602401600060405180830381600087803b15801561213457600080fd5b505af1158015612148573d6000803e3d6000fd5b505050505b6040516338ed173960e01b81526001600160a01b038316906338ed173990612182908690600090869033904290600401615d24565b600060405180830381600087803b15801561219c57600080fd5b505af11580156121b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b419190810190615659565b6000600080516020615f968339815191526121f381336144f6565b6000878152600760205260409020541561224f5760405162461bcd60e51b815260206004820181905260248201527f53796e746865746963204e465420616c72656164792067656e65726174656421604482015260640161135f565b601354604051636902622f60e11b81526001600160a01b039091169063d204c45e906122819087908790600401615bc0565b602060405180830381600087803b15801561229b57600080fd5b505af11580156122af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d39190615734565b915060006122eb8769021e19e0c9bab2400000615ecc565b905060006040518061014001604052808a815260200189815260200183815260200160008152602001600081526020018881526020016000815260200160008152602001600081526020016000600381111561235757634e487b7160e01b600052602160045260246000fd5b815250905080600f6000868152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff0219169083600381111561240457634e487b7160e01b600052602160045260246000fd5b0217905550505087612474576001546040516316bfb45760e11b815260048101869052620100009091046001600160a01b031690632d7f68ae90602401600060405180830381600087803b15801561245b57600080fd5b505af115801561246f573d6000803e3d6000fd5b505050505b5050506000818152600860205260409020805460ff1916600117905595945050505050565b7f747c8a75243ae2ca1d188aaaeab610daf9d97e45b6513baed451ebf0b9ec74fd6124c481336144f6565b6040808401516000908152600f60205220821561255d5760098101805460ff19166002179055600b546040516340c10f1960e01b81526001600160a01b03909116906340c10f199061252690309069021e19e0c9bab240000090600401615be4565b600060405180830381600087803b15801561254057600080fd5b505af1158015612554573d6000803e3d6000fd5b50505050612594565b606084015160098201805460ff1916600183600381111561258e57634e487b7160e01b600052602160045260246000fd5b02179055505b835160208086015160408088015181516001600160a01b039586168152949092169284019290925290820152831515606082015285907fcf5cb568c779c24ae423fed9236ba737105872c7e0b13ebb2fd578233747825a9060800160405180910390a25050505050565b600080516020615f9683398151915261261781336144f6565b6000858152600f6020526040902060018101546126695760405162461bcd60e51b815260206004820152601060248201526f10d85b89dd0818994818da185b99d95960821b604482015260640161135f565b6002600982015460ff16600381111561269257634e487b7160e01b600052602160045260246000fd5b146126d45760405162461bcd60e51b8152602060048201526012602482015271151bdad95b881b9bdd081d995c9a599a595960721b604482015260640161135f565b6013546040516331a9108f60e11b8152600481018890526001600160a01b03858116921690636352211e9060240160206040518083038186803b15801561271a57600080fd5b505afa15801561272e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127529190615582565b6001600160a01b0316146127785760405162461bcd60e51b815260040161135f90615cd2565b805460009081526011602052604081208054909160019183919061279d908490615e75565b9091555050600181018690556002810180546001600160a01b038681166001600160a01b03199092169190911790915560098301805460ff19166003179055825460009081526007602052604080822082905588855588825290819020899055601354905163593aa28360e01b815291169063593aa28390612825908a908990600401615d94565b600060405180830381600087803b15801561283f57600080fd5b505af1158015612853573d6000803e3d6000fd5b5050505050505050505050565b6000818152600f602052604081206002600982015460ff16600381111561289757634e487b7160e01b600052602160045260246000fd5b1415806117145750600101541592915050565b600e546128b99061012c615e75565b42106129075760405162461bcd60e51b815260206004820152601d60248201527f4275796261636b20707269636520757064617465207265717569726564000000604482015260640161135f565b6129118133611f05565b61292d5760405162461bcd60e51b815260040161135f90615c5e565b61293681612860565b156129535760405162461bcd60e51b815260040161135f90615cfa565b61295c816146de565b61296581614b16565b50565b6000818152600f6020526040908190206013549151634f558e7960e01b81526004810184905290916001600160a01b031690634f558e799060240160206040518083038186803b1580156129bb57600080fd5b505afa1580156129cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f39190615700565b612a365760405162461bcd60e51b8152602060048201526014602482015273151bdad95b881b9bdd081c9959da5cdd195c995960621b604482015260640161135f565b6002600982015460ff166003811115612a5f57634e487b7160e01b600052602160045260246000fd5b1415612aa65760405162461bcd60e51b8152602060048201526016602482015275151bdad95b88185b1c9958591e481d995c9a599a595960521b604482015260640161135f565b60098101805460ff19166001908117909155600a54825460009081526010602090815260408083205481516345b0ce7560e11b81526001600160a01b03958616600482015260248101899052604481019690965260648601525191937f000000000000000000000000000000000000000000000000000000000000000090931692638b619cea926084808301939282900301818787803b158015612b4957600080fd5b505af1158015612b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b819190615734565b9050807faf92676e6ce91b92427009a49e22fa6d354ed418db8d0965bca4232dcf3e658f3385604051612bb5929190615be4565b60405180910390a2505050565b6000818152600f60205260408120819081612bdb6112a9565b9050600082600701549050600080836001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612c2257600080fd5b505afa158015612c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5a91906158e0565b50915091506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c9a57600080fd5b505afa158015612cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd29190615734565b905060008115612d215781612cf06001600160701b03861687615ead565b612cfa9190615e8d565b905081612d106001600160701b03851687615ead565b612d1a9190615e8d565b9750612d2e565b826001600160701b031697505b8087600201548860010154612d439190615e75565b612d4d9190615e75565b985050505050505050915091565b6000828152600f60205260409020612d738333611f05565b612db85760405162461bcd60e51b815260206004820152601660248201527513db9b1e481bdddb995c8818d85b8819195c1bdcda5d60521b604482015260640161135f565b604051630654881960e51b8152600481018290526024810183905273697bB9ED8fa7fc8bf6cCFF12cf1FB64027A2E5B59063ca9103209060440160006040518083038186803b158015612e0a57600080fd5b505af4158015612e1e573d6000803e3d6000fd5b5050600b546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd9150612e5690339030908790600401615b9c565b602060405180830381600087803b158015612e7057600080fd5b505af1158015612e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea89190615700565b50505050565b6013546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b158015612ef257600080fd5b505afa158015612f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2a9190615582565b6001600160a01b031614612f505760405162461bcd60e51b815260040161135f90615c5e565b6000828152600f6020526040908190209051630451aa3960e11b815260048101919091526024810182905273697bB9ED8fa7fc8bf6cCFF12cf1FB64027A2E5B5906308a35472906044015b60006040518083038186803b158015612fb357600080fd5b505af4158015612fc7573d6000803e3d6000fd5b505050505050565b6000828152600f60205260408120600501548190612fed9084615ead565b949350505050565b7f747c8a75243ae2ca1d188aaaeab610daf9d97e45b6513baed451ebf0b9ec74fd61302081336144f6565b50600d555042600e55565b6000828152600f60205260409081902060135491516331a9108f60e11b815260048101859052909133916001600160a01b0390911690636352211e9060240160206040518083038186803b15801561308257600080fd5b505afa158015613096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ba9190615582565b6001600160a01b0316146130e05760405162461bcd60e51b815260040161135f90615cd2565b60008160030154116131295760405162461bcd60e51b8152602060048201526012602482015271736f6c64537570706c79206973207a65726f60701b604482015260640161135f565b806004015482111561314d5760405162461bcd60e51b815260040161135f90615c8a565b60006131576112a9565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561319557600080fd5b505afa1580156131a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cd91906158e0565b50915091506000826001600160701b03161180156131f457506000816001600160701b0316115b6132395760405162461bcd60e51b81526020600482015260166024820152754e6f20726573657276657320617661696c61626c652160501b604482015260640161135f565b60048054600b54600187015460405163095ea7b360e01b81526001600160a01b0393841694929093169263095ea7b392613277928692909101615be4565b602060405180830381600087803b15801561329157600080fd5b505af11580156132a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c99190615700565b50600c546004805460405163095ea7b360e01b81526001600160a01b039384169363095ea7b39361330093909116918b9101615be4565b602060405180830381600087803b15801561331a57600080fd5b505af115801561332e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133529190615700565b50600b54600c54600187015460405162e8e33760e81b81526001600160a01b039384166004820152918316602483015260448201526064810188905260006084820181905260a482018190523060c48301524260e4830152918291829185169063e8e337009061010401606060405180830381600087803b1580156133d657600080fd5b505af11580156133ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061340e9190615a19565b925092509250828860010160008282546134289190615ecc565b92505081905550818860040160008282546134439190615ecc565b925050819055508088600701600082825461345e9190615e75565b909155505050505050505050505050565b60055460009081906001600160a01b031663f4e5ff0d61348d6112a9565b6000868152600f6020526040908190206007015490516001600160e01b031960e085901b1681526134c2929190600401615be4565b604080518083038186803b1580156134d957600080fd5b505afa1580156134ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135119190615996565b91509150915091565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61354d8233611f05565b6135915760405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103a34329037bbb732b960591b604482015260640161135f565b6000828152600f6020526040902060070154808211156135f35760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420656e6f756768206c697175696469747920617661696c61626c650000604482015260640161135f565b6000838152600f602052604081206007018054849290613614908490615ecc565b9091555061362290506112a9565b6001600160a01b031663a9059cbb33846040518363ffffffff1660e01b8152600401612e56929190615be4565b6000828152600f6020526040902061366683612860565b156136835760405162461bcd60e51b815260040161135f90615cfa565b61368d8333611f05565b6136d35760405162461bcd60e51b81526020600482015260176024820152764f6e6c79206f776e65722063616e20776974686472617760481b604482015260640161135f565b80600401548211156136f75760405162461bcd60e51b815260040161135f90615c32565b600c5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906137299033908690600401615be4565b602060405180830381600087803b15801561374357600080fd5b505af1158015613757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377b9190615700565b50818160040160008282546137909190615ecc565b9091555050505050565b6013546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b1580156137de57600080fd5b505afa1580156137f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138169190615582565b6001600160a01b03161461383c5760405162461bcd60e51b815260040161135f90615c5e565b6000828152600f6020526040908190209051630c66c75560e21b815260048101919091526024810182905273697bB9ED8fa7fc8bf6cCFF12cf1FB64027A2E5B59063319b1d5490604401612f9b565b6013546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b1580156138cf57600080fd5b505afa1580156138e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139079190615582565b6001600160a01b03161461392d5760405162461bcd60e51b815260040161135f90615cd2565b61189a8282614bdc565b6013546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b15801561397b57600080fd5b505afa15801561398f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b39190615582565b6001600160a01b0316146139d95760405162461bcd60e51b815260040161135f90615cd2565b60008111613a215760405162461bcd60e51b8152602060048201526015602482015274416d6f756e742063616e2774206265207a65726f2160581b604482015260640161135f565b6000828152600f6020526040902060040154811115613a525760405162461bcd60e51b815260040161135f90615c8a565b600c5460035460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392613a88929116908590600401615be4565b602060405180830381600087803b158015613aa257600080fd5b505af1158015613ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ada9190615700565b5060035460405163366996df60e11b8152600481018390526000916001600160a01b031690636cd32dbe90602401602060405180830381600087803b158015613b2257600080fd5b505af1158015613b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b5a9190615734565b905081600f60008581526020019081526020016000206004016000828254613b829190615ecc565b90915550506000838152600f602052604081206008018054839290613790908490615e75565b600154604051637b5f398960e01b815260048101839052620100009091046001600160a01b031690637b5f39899060240160206040518083038186803b158015613bf157600080fd5b505afa158015613c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c299190615700565b613c755760405162461bcd60e51b815260206004820152601860248201527f546f6b656e206973206e6f74207265636f76657261626c650000000000000000604482015260640161135f565b613c7f8133611f05565b613c9b5760405162461bcd60e51b815260040161135f90615c5e565b600b54613cbd906001600160a01b0316333069021e19e0c9bab2400000614e0b565b6000818152600f60205260409081902069021e19e0c9bab2400000600191820155549051630532ab5d60e11b815260048101839052620100009091046001600160a01b031690630a6556ba906024015b600060405180830381600087803b158015613d2757600080fd5b505af1158015611b41573d6000803e3d6000fd5b600080516020615f76833981519152613d5481336144f6565b6000828152600f60205260409020600801548015613d7657613d768382614bdc565b6000838152600f60205260409020600701548015612ea857612fc78482614e2c565b600082815260208190526040902060010154613db481336144f6565b61151e8383614679565b6013546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b158015613e0257600080fd5b505afa158015613e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e3a9190615582565b6001600160a01b031614613e605760405162461bcd60e51b815260040161135f90615cd2565b612ea88282614e2c565b60008181526008602052604081205460ff168015613eff5750601354604051634f558e7960e01b8152600481018490526001600160a01b0390911690634f558e799060240160206040518083038186803b158015613ec757600080fd5b505afa158015613edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eff9190615700565b8015613fab5750600960009054906101000a90046001600160a01b03166001600160a01b031663766873326040518163ffffffff1660e01b815260040160206040518083038186803b158015613f5457600080fd5b505afa158015613f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8c9190615734565b6000838152600f6020526040902060060154613fa89042615ecc565b10155b80156140b95750600960009054906101000a90046001600160a01b03166001600160a01b031663b94d25ce6040518163ffffffff1660e01b815260040160206040518083038186803b15801561400057600080fd5b505afa158015614014573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140389190615734565b600b546014546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b15801561407f57600080fd5b505afa158015614093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140b79190615734565b115b8015610a5a57506000828152600f60205260409020541515610a5a565b6013546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b15801561411a57600080fd5b505afa15801561412e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141529190615582565b6001600160a01b0316146141a85760405162461bcd60e51b815260206004820152601760248201527f4f6e6c79206f776e65722063616e20696e637265617365000000000000000000604482015260640161135f565b6000828152600f6020526040908190209051633e8626f560e11b815260048101919091526024810182905273697bB9ED8fa7fc8bf6cCFF12cf1FB64027A2E5B590637d0c4dea9060440160006040518083038186803b15801561420a57600080fd5b505af415801561421e573d6000803e3d6000fd5b5050506000838152600f60205260409020600101541515905061189a576001546040516316bfb45760e11b815260048101849052620100009091046001600160a01b031690632d7f68ae90602401600060405180830381600087803b15801561428657600080fd5b505af1158015612fc7573d6000803e3d6000fd5b600154610100900460ff16806142b3575060015460ff16155b6143165760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161135f565b600154610100900460ff16158015614338576001805461ffff19166101011790555b600b80546001600160a01b03199081166001600160a01b038d8116919091179092556013805482168b8416179055600a805482168c841617905560028054339083161790556001805462010000600160b01b031916620100008b851602179055600980548216898416908117909155601480548316898516179055601580548316888516179055600480548316878516178155600580549093169386169390931790915560408051632629c7ef60e11b815290519192634c538fde928282019260209290829003018186803b15801561441057600080fd5b505afa158015614424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144489190615582565b600c80546001600160a01b0319166001600160a01b03929092169190911790556144736000336150d4565b61448b600080516020615f96833981519152336150d4565b6144a3600080516020615f76833981519152886150d4565b80156144b5576001805461ff00191690555b50505050505050505050565b60006001600160e01b03198216637965db0b60e01b1480610a5a57506301ffc9a760e01b6001600160e01b0319831614610a5a565b614500828261351a565b61189a57614518816001600160a01b031660146150de565b6145238360206150de565b604051602001614534929190615b27565b60408051601f198184030181529082905262461bcd60e51b825261135f91600401615bfd565b61151e8363a9059cbb60e01b8484604051602401614579929190615be4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526152bf565b61189a82826040516024016145c6929190615c10565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052615391565b6145ff828261351a565b61189a576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556146353390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b614683828261351a565b1561189a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000818152600f6020526040812060078101549091906146ff908490614e2c565b9150506000826002015483600101546147189190615e75565b600554600d5460405163cfcbe04560e01b8152600481018490526024810186905269021e19e0c9bab240000060448201526064810191909152919250600091829182916001600160a01b039091169063cfcbe0459060840160606040518083038186803b15801561478857600080fd5b505afa15801561479c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147c09190615a19565b925092509250600069021e19e0c9bab240000085106147e95769021e19e0c9bab24000006147eb565b845b600b54604051630852cd8d60e31b8152600481018390529192506001600160a01b0316906342966c6890602401600060405180830381600087803b15801561483257600080fd5b505af1158015614846573d6000803e3d6000fd5b5050505060008211156149f557600b546015546001600160a01b0391821691633950935191166148808469021e19e0c9bab2400000615ecc565b6040518363ffffffff1660e01b815260040161489d929190615be4565b602060405180830381600087803b1580156148b757600080fd5b505af11580156148cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148ef9190615700565b50601554600d546001600160a01b0390911690635ff44eb99084906149149082615e8d565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b15801561495257600080fd5b505af1158015614966573d6000803e3d6000fd5b5050600c546015546040516323b872dd60e01b81526001600160a01b0392831694506323b872dd93506149a192339216908790600401615b9c565b602060405180830381600087803b1580156149bb57600080fd5b505af11580156149cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149f39190615700565b505b8215614a8157600c5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90614a2d9033908790600401615be4565b602060405180830381600087803b158015614a4757600080fd5b505af1158015614a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a7f9190615700565b505b8315611efb57600b5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90614ab99033908890600401615be4565b602060405180830381600087803b158015614ad357600080fd5b505af1158015614ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b0b9190615700565b505050505050505050565b6000818152600f6020908152604080832080548452601083528184205460128452828520818652909352922080546001600160a01b03191633179055614b5d816001615e75565b8254600090815260106020526040902055614b77836153b2565b50546000908152600760208181526040808420849055938352600f90529181208181556001810182905560028101829055600381018290556004810182905560058101829055600681018290559182018190556008820155600901805460ff19169055565b60008111614c235760405162461bcd60e51b8152602060048201526014602482015273416d6f756e742063616e2774206265207a65726f60601b604482015260640161135f565b6000828152600f6020526040902060080154811115614c545760405162461bcd60e51b815260040161135f90615c32565b600c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015614c9857600080fd5b505afa158015614cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cd09190615734565b600354604051639c8f9f2360e01b8152600481018590529192506001600160a01b031690639c8f9f2390602401600060405180830381600087803b158015614d1757600080fd5b505af1158015614d2b573d6000803e3d6000fd5b5050600c546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015614d7557600080fd5b505afa158015614d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614dad9190615734565b9050614db98282615ecc565b6000858152600f602052604081206004018054909190614dda908490615e75565b90915550506000848152600f602052604081206008018054859290614e00908490615ecc565b909155505050505050565b612ea8846323b872dd60e01b85858560405160240161457993929190615b9c565b6000828152600f60205260408120819083614e4e5760008092509250506150cd565b8381600701541015614eb15760405162461bcd60e51b815260206004820152602660248201527f54686572652773206e6f7420656e6f756768206c697175696469747920617661604482015265696c61626c6560d01b606482015260840161135f565b6004546001600160a01b03166000614ec76112a9565b6004805460405163095ea7b360e01b81529293506001600160a01b038085169363095ea7b393614efd93909216918b9101615be4565b602060405180830381600087803b158015614f1757600080fd5b505af1158015614f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f4f9190615700565b50600c54600b5460009182916001600160a01b03918216911610614f8557600c54600b546001600160a01b039182169116614f99565b600b54600c546001600160a01b0391821691165b604051635d5155ef60e11b81526001600160a01b0380841660048301528083166024830152604482018c9052600060648301819052608483018190523060a48401524260c4840152939550919350829187169063baa2abde9060e4016040805180830381600087803b15801561500e57600080fd5b505af1158015615022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150469190615996565b600c54600b549294509092506001600160a01b0390811691161061506b57808261506e565b81815b809950819a5050508887600101600082825461508a9190615e75565b92505081905550878760040160008282546150a59190615e75565b92505081905550898760070160008282546150c09190615e75565b9091555050505050505050505b9250929050565b61189a82826145f5565b606060006150ed836002615ead565b6150f8906002615e75565b6001600160401b0381111561511d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015615147576020820181803683370190505b509050600360fc1b8160008151811061517057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106151ad57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006151d1846002615ead565b6151dc906001615e75565b90505b6001811115615270576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061521e57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061524257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361526981615f0f565b90506151df565b5083156117145760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161135f565b6000615314826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166153e39092919063ffffffff16565b80519091501561151e57808060200190518101906153329190615700565b61151e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161135f565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60135460405163dbf5132560e01b8152600481018390526001600160a01b039091169063dbf5132590602401613d0d565b6060612fed848460008585843b61543c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161135f565b600080866001600160a01b031685876040516154589190615b0b565b60006040518083038185875af1925050503d8060008114615495576040519150601f19603f3d011682016040523d82523d6000602084013e61549a565b606091505b50915091506154aa8282866154b5565b979650505050505050565b606083156154c4575081611714565b8251156154d45782518084602001fd5b8160405162461bcd60e51b815260040161135f9190615bfd565b80356154f981615f67565b919050565b600082601f83011261550e578081fd5b813561552161551c82615e4e565b615e1e565b818152846020838601011115615535578283fd5b816020850160208301379081016020019190915292915050565b80516001600160701b03811681146154f957600080fd5b600060208284031215615577578081fd5b813561171481615f52565b600060208284031215615593578081fd5b815161171481615f52565b60008060008060008060008060006101208a8c0312156155bc578485fd5b89356155c781615f52565b985060208a01356155d781615f52565b975060408a01356155e781615f52565b965060608a01356155f781615f52565b955060808a013561560781615f52565b945060a08a013561561781615f52565b935060c08a013561562781615f52565b925060e08a013561563781615f52565b91506101008a013561564881615f52565b809150509295985092959850929598565b6000602080838503121561566b578182fd5b82516001600160401b0380821115615681578384fd5b818501915085601f830112615694578384fd5b8151818111156156a6576156a6615f3c565b8060051b91506156b7848301615e1e565b8181528481019084860184860187018a10156156d1578788fd5b8795505b838610156156f35780518352600195909501949186019186016156d5565b5098975050505050505050565b600060208284031215615711578081fd5b815161171481615f67565b60006020828403121561572d578081fd5b5035919050565b600060208284031215615745578081fd5b5051919050565b6000806040838503121561575e578182fd5b82359150602083013561577081615f52565b809150509250929050565b600080600083850360c0811215615790578182fd5b843593506080601f19820112156157a5578182fd5b50604051608081018181106001600160401b03821117156157c8576157c8615f3c565b60405260208501356157d981615f52565b815260408501356157e981615f52565b602082015260608501356040820152608085013560048110615809578283fd5b6060820152915061581c60a085016154ee565b90509250925092565b60008060408385031215615837578182fd5b50508035926020909101359150565b600060208284031215615857578081fd5b81356001600160e01b031981168114611714578182fd5b60006020828403121561587f578081fd5b81516001600160401b03811115615894578182fd5b8201601f810184136158a4578182fd5b80516158b261551c82615e4e565b8181528560208385010111156158c6578384fd5b6158d7826020830160208601615ee3565b95945050505050565b6000806000606084860312156158f4578081fd5b6158fd8461554f565b925061590b6020850161554f565b9150604084015163ffffffff81168114615923578182fd5b809150509250925092565b60008060408385031215615940578182fd5b82359150602083013561577081615f67565b60008060408385031215615964578182fd5b8235915060208301356001600160401b03811115615980578182fd5b61598c858286016154fe565b9150509250929050565b600080604083850312156159a8578182fd5b505080516020909101519092909150565b600080600080608085870312156159ce578182fd5b843593506020850135925060408501356001600160401b038111156159f1578283fd5b6159fd878288016154fe565b9250506060850135615a0e81615f52565b939692955090935050565b600080600060608486031215615a2d578081fd5b8351925060208401519150604084015190509250925092565b600080600080600060a08688031215615a5d578283fd5b8535945060208601359350604086013592506060860135615a7d81615f52565b915060808601356001600160401b03811115615a97578182fd5b615aa3888289016154fe565b9150509295509295909350565b60008060408385031215615ac2578182fd5b8235915060208301356001600160401b0381168114615770578182fd5b60008151808452615af7816020860160208601615ee3565b601f01601f19169290920160200192915050565b60008251615b1d818460208701615ee3565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615b5f816017850160208801615ee3565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615b90816028840160208801615ee3565b01602801949350505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0383168152604060208201819052600090612fed90830184615adf565b6001600160a01b03929092168252602082015260400190565b6020815260006117146020830184615adf565b604081526000615c236040830185615adf565b90508260208301529392505050565b6020808252601290820152714e6f7420656e6f7567682062616c616e636560701b604082015260600190565b60208082526012908201527113db9b1e481bdddb995c88185b1b1bddd95960721b604082015260600190565b60208082526028908201527f416d6f756e742069732067726561746572207468616e20617661696c61626c656040820152672066756e64696e6760c01b606082015260800190565b6020808252600e908201526d14da1bdd5b19081bdddb8813919560921b604082015260600190565b60208082526010908201526f546f6b656e206973206c6f636b65642160801b604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015615d735784516001600160a01b031683529383019391830191600101615d4e565b50506001600160a01b03969096166060850152505050608001529392505050565b828152604060208201526000612fed6040830184615adf565b6000610140820190508b82528a60208301528960408301528860608301528760808301528660a08301528560c08301528460e08301528361010083015260048310615e0857634e487b7160e01b600052602160045260246000fd5b826101208301529b9a5050505050505050505050565b604051601f8201601f191681016001600160401b0381118282101715615e4657615e46615f3c565b604052919050565b60006001600160401b03821115615e6757615e67615f3c565b50601f01601f191660200190565b60008219821115615e8857615e88615f26565b500190565b600082615ea857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615615ec757615ec7615f26565b500290565b600082821015615ede57615ede615f26565b500390565b60005b83811015615efe578181015183820152602001615ee6565b83811115612ea85750506000910152565b600081615f1e57615f1e615f26565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461296557600080fd5b801515811461296557600080fdfec55a74c743a5d6aff6a82963adf054e2367242c4a636870f26b8ee90910968d0eb4fd9f47c063b511700e1c8e94e2fa4088ffca1fdcef1e60edf1beecd1b2e64a2646970667358221220e7265aaafa69bda3f3532a60535d36b5259f1e9f063049677c8ba3906b0161b664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103e65760003560e01c806379a9fa1c1161020a578063a03bf2b311610125578063cd87eb52116100b8578063e445a50211610087578063e445a502146109c0578063ecf70d37146109d3578063ee2af58d146109f5578063f0b3825014610a08578063f5e95acb14610a3c57600080fd5b8063cd87eb5214610965578063d3c4ea9214610987578063d547741f1461099a578063e028ba7f146109ad57600080fd5b8063b1da4db7116100f4578063b1da4db714610919578063b49538371461092c578063c700395b1461093f578063cb1a233d1461095257600080fd5b8063a03bf2b3146108c4578063a217fddf146108d7578063ab8f2b1b146108df578063abacac25146108f257600080fd5b80638aab42741161019d5780638f2e5b021161016c5780638f2e5b021461088257806391d14854146108955780639c76a6ac146108a85780639d806b54146108b157600080fd5b80638aab4274146108365780638c7a6661146108495780638ce744261461085c5780638d49d4641461086f57600080fd5b80638753367f116101d95780638753367f146107d55780638810cf5f146107e8578063886747cd1461081057806389736a901461082357600080fd5b806379a9fa1c146107405780637c4950c7146107535780637e0aa10c1461076657806383a13100146107c257600080fd5b806336b64fc21161030557806357841014116102985780635c920736116102675780635c920736146106e15780635ea172d0146106f45780636332fb8b146107075780636e26115c1461071a57806373233ea61461072d57600080fd5b8063578410141461066657806358e8bcb714610694578063593aa283146106bb5780635a5d096c146106ce57600080fd5b80634c4e03f9116102d45780634c4e03f9146105b55780634c538fde146105c85780634d81bea1146105db5780634f64b2be146105ee57600080fd5b806336b64fc21461056757806339fb284e1461057a5780634bc4d5991461058f5780634c4b206b146105a257600080fd5b80631c06b6ba1161037d5780632f2ff15d1161034c5780632f2ff15d1461052457806330218c301461053757806332fe7b261461053f57806336568abe1461055457600080fd5b80631c06b6ba146104c8578063248a9ca3146104db57806326964e51146104fe57806326aa143b1461051157600080fd5b8063141a468c116103b9578063141a468c146104665780631755ff21146104945780631a179a511461049c5780631bfc2357146104af57600080fd5b806301ffc9a7146103eb57806302d7965214610413578063072ac5f3146104285780630f1203d01461043b575b600080fd5b6103fe6103f9366004615846565b610a4f565b60405190151581526020015b60405180910390f35b61042661042136600461574c565b610a60565b005b610426610436366004615825565b610e5b565b60025461044e906001600160a01b031681565b6040516001600160a01b03909116815260200161040a565b61048661047436600461571c565b60106020526000908152604090205481565b60405190815260200161040a565b61044e6112a9565b60035461044e906001600160a01b031681565b60015461044e906201000090046001600160a01b031681565b6104266104d6366004615825565b61132b565b6104866104e936600461571c565b60009081526020819052604090206001015490565b61042661050c366004615ab0565b611523565b61048661051f36600461571c565b6116f2565b61042661053236600461574c565b61171b565b610486611741565b610486600080516020615f9683398151915281565b61042661056236600461574c565b611820565b610426610575366004615566565b61189e565b610486600080516020615f7683398151915281565b600b5461044e906001600160a01b031681565b60135461044e906001600160a01b031681565b6104266105c3366004615825565b6118da565b600c5461044e906001600160a01b031681565b6104266105e936600461592e565b611b48565b6106506105fc36600461571c565b600f6020526000908152604090208054600182015460028301546003840154600485015460058601546006870154600788015460088901546009909901549798969795969495939492939192909160ff168a565b60405161040a9a99989796959493929190615dad565b61067961067436600461571c565b611bbe565b6040805193845260208401929092529082015260600161040a565b6104867fe87beaa2684453d25a1f0e3e7002e109b34fc4f132f115c9a7707901e792751381565b6104266106c9366004615952565b611ca5565b6103fe6106dc36600461574c565b611f05565b6104266106ef366004615825565b611f98565b610486610702366004615a46565b6121d8565b61042661071536600461577b565b612499565b6104266107283660046159b9565b6125fe565b6103fe61073b36600461571c565b612860565b61042661074e36600461571c565b6128aa565b60155461044e906001600160a01b031681565b61079e61077436600461571c565b6011602052600090815260409020805460018201546002909201549091906001600160a01b031683565b6040805193845260208401929092526001600160a01b03169082015260600161040a565b600a5461044e906001600160a01b031681565b6104266107e336600461571c565b612968565b6107fb6107f636600461571c565b612bc2565b6040805192835260208301919091520161040a565b61042661081e366004615825565b612d5b565b610426610831366004615825565b612eae565b610486610844366004615825565b612fcf565b610426610857366004615825565b612ff5565b60095461044e906001600160a01b031681565b61042661087d366004615825565b61302b565b6107fb61089036600461571c565b61346f565b6103fe6108a336600461574c565b61351a565b610486600d5481565b6104266108bf366004615825565b613543565b6104266108d2366004615825565b61364f565b610486600081565b6104266108ed366004615825565b61379a565b6104867f747c8a75243ae2ca1d188aaaeab610daf9d97e45b6513baed451ebf0b9ec74fd81565b60145461044e906001600160a01b031681565b61042661093a366004615825565b61388b565b61042661094d366004615825565b613937565b61042661096036600461571c565b613ba8565b6103fe61097336600461571c565b6000908152600f6020526040902054151590565b61042661099536600461571c565b613d3b565b6104266109a836600461574c565b613d98565b6104266109bb366004615825565b613dbe565b6103fe6109ce36600461571c565b613e6a565b6103fe6109e136600461571c565b600090815260076020526040902054151590565b610426610a03366004615825565b6140d6565b61044e610a16366004615825565b60126020908152600092835260408084209091529082529020546001600160a01b031681565b610426610a4a36600461559e565b61429a565b6000610a5a826144c1565b92915050565b600080516020615f76833981519152610a7981336144f6565b60135460405163c87b56dd60e01b8152600481018590526000916001600160a01b03169063c87b56dd9060240160006040518083038186803b158015610abe57600080fd5b505afa158015610ad2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610afa919081019061586e565b6000858152600f6020526040908190208054601354925163dbf5132560e01b815260048101899052939450909290916001600160a01b03169063dbf5132590602401600060405180830381600087803b158015610b5657600080fd5b505af1158015610b6a573d6000803e3d6000fd5b5050601354604051636902622f60e11b8152600093506001600160a01b03909116915063d204c45e90610ba39089908890600401615bc0565b602060405180830381600087803b158015610bbd57600080fd5b505af1158015610bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf59190615734565b905080600760008481526020019081526020016000208190555060405180610140016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006003811115610c7b57634e487b7160e01b600052602160045260246000fd5b815250600f6000898152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff02191690836003811115610d2557634e487b7160e01b600052602160045260246000fd5b021790555090505060405180610140016040528083815260200169021e19e0c9bab240000081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160026003811115610da157634e487b7160e01b600052602160045260246000fd5b815250600f6000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff02191690836003811115610e4b57634e487b7160e01b600052602160045260246000fd5b0217905550505050505050505050565b7fe87beaa2684453d25a1f0e3e7002e109b34fc4f132f115c9a7707901e7927513610e8681336144f6565b600080600960009054906101000a90046001600160a01b03166001600160a01b031663b94d25ce6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed757600080fd5b505afa158015610eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0f9190615734565b90506000600960009054906101000a90046001600160a01b03166001600160a01b0316631861779d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6157600080fd5b505afa158015610f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f999190615734565b6000868152600660209081526040808320815160608101835281548082526001928301546001600160401b03811683870152600160401b90046001600160a01b0316828501528552600f9093529220918201549293509180851115610ffc578094505b84841115611008578493505b886110aa57848260010160008282546110219190615ecc565b909155505060208301516001600160401b0316891461104257849550611082565b61104c8486615ecc565b600089815260066020526040902060010154600b54919750611082916001600160a01b0390811691600160401b9004168661455a565b85156110a557601454600b546110a5916001600160a01b0391821691168861455a565b6111e2565b82602001516001600160401b031689146110c657849550611158565b6110d08486615ecc565b600b5460145460008b815260066020526040908190206001015490516311c9479960e21b81529399506001600160a01b03928316936347251e649361112593811692600160401b900416908990600401615b9c565b600060405180830381600087803b15801561113f57600080fd5b505af1158015611153573d6000803e3d6000fd5b505050505b85156111e257858260010160008282546111729190615e75565b9091555050600b546014546040516311c9479960e21b81526001600160a01b03928316926347251e64926111af9291169030908b90600401615b9c565b600060405180830381600087803b1580156111c957600080fd5b505af11580156111dd573d6000803e3d6000fd5b505050505b60018201546112525760015483516040516316bfb45760e11b81526004810191909152620100009091046001600160a01b031690632d7f68ae90602401600060405180830381600087803b15801561123957600080fd5b505af115801561124d573d6000803e3d6000fd5b505050505b8251602080850151604080516001600160401b0390921682529181018c90528a917f10c2415cd62b00f83e15c907a08b12444e71bcc1645322f97a631df735fe49e3910160405180910390a3505050505050505050565b600b54604080516324dead2f60e11b815290516000926001600160a01b0316916349bd5a5e916004808301926020929190829003018186803b1580156112ee57600080fd5b505afa158015611302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113269190615582565b905090565b6000828152600f6020526040902061134283612860565b156113685760405162461bcd60e51b815260040161135f90615cfa565b60405180910390fd5b6113728333611f05565b6113b85760405162461bcd60e51b81526020600482015260176024820152764f6e6c79206f776e65722063616e20776974686472617760481b604482015260640161135f565b6113ef60405180604001604052806011815260200170746f6b656e2e6f776e6572537570706c7960781b81525082600101546145b0565b80600101548211156114135760405162461bcd60e51b815260040161135f90615c32565b818160010160008282546114279190615ecc565b9091555050600b5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061145e9033908690600401615be4565b602060405180830381600087803b15801561147857600080fd5b505af115801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190615700565b50600181015461151e576001546040516316bfb45760e11b815260048101859052620100009091046001600160a01b031690632d7f68ae90602401600060405180830381600087803b15801561150557600080fd5b505af1158015611519573d6000803e3d6000fd5b505050505b505050565b6000828152600f6020526040902061153a83613e6a565b6115865760405162461bcd60e51b815260206004820152601760248201527f466c6970206973206e6f7420616c6c6f77656420796574000000000000000000604482015260640161135f565b61158f83612860565b156115ac5760405162461bcd60e51b815260040161135f90615cfa565b42816006018190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dbdff2c16040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561161257600080fd5b505af1158015611626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164a9190615734565b604080516060810182528681526001600160401b038681166020808401828152338587018181526000898152600685528890209651875591516001909601805492516001600160a01b0316600160401b026001600160e01b031990931696909516959095171790925592519283529293508692909184917ff3430182a8f4149cb1910574795295555b8119134718716b9f3e5024189a64a5910160405180910390a450505050565b6000818152600f60205260408120600381015460028201546117149190615ecc565b9392505050565b60008281526020819052604090206001015461173781336144f6565b61151e83836145f5565b600a54604051630502c73b60e41b81526001600160a01b0391821660048201526000917f0000000000000000000000000000000000000000000000000000000000000000169063502c73b090602401602060405180830381600087803b1580156117aa57600080fd5b505af11580156117be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e29190615734565b90507fbe2b5ab4e879a268995b8af0c68a310c39e8c1573b4c283ef80e3c64125499b98160405161181591815260200190565b60405180910390a190565b6001600160a01b03811633146118905760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161135f565b61189a8282614679565b5050565b600080516020615f968339815191526118b781336144f6565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152600f6020526040908190206013549151634f558e7960e01b81526004810185905290916001600160a01b031690634f558e799060240160206040518083038186803b15801561192d57600080fd5b505afa158015611941573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119659190615700565b6119a85760405162461bcd60e51b8152602060048201526014602482015273151bdad95b881b9bdd081c9959da5cdd195c995960621b604482015260640161135f565b60405163d52cb9cb60e01b8152600481018290526024810183905260009073__$56fc4e5f3f11a8c61fa94696167f06073e$$56fc4e5f3f11a8c61fa94696167f06073e$__9063ca9103209060440160006040518083038186803b158015612e0a57600080fd5b505af4158015612e1e573d6000803e3d6000fd5b5050600b546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd9150612e5690339030908790600401615b9c565b602060405180830381600087803b158015612e7057600080fd5b505af1158015612e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea89190615700565b50505050565b6013546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b158015612ef257600080fd5b505afa158015612f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2a9190615582565b6001600160a01b031614612f505760405162461bcd60e51b815260040161135f90615c5e565b6000828152600f6020526040908190209051630451aa3960e11b815260048101919091526024810182905273__$56fc4e5f3f11a8c61fa94696167f06073e$__906308a35472906044015b60006040518083038186803b158015612fb357600080fd5b505af4158015612fc7573d6000803e3d6000fd5b505050505050565b6000828152600f60205260408120600501548190612fed9084615ead565b949350505050565b7f747c8a75243ae2ca1d188aaaeab610daf9d97e45b6513baed451ebf0b9ec74fd61302081336144f6565b50600d555042600e55565b6000828152600f60205260409081902060135491516331a9108f60e11b815260048101859052909133916001600160a01b0390911690636352211e9060240160206040518083038186803b15801561308257600080fd5b505afa158015613096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ba9190615582565b6001600160a01b0316146130e05760405162461bcd60e51b815260040161135f90615cd2565b60008160030154116131295760405162461bcd60e51b8152602060048201526012602482015271736f6c64537570706c79206973207a65726f60701b604482015260640161135f565b806004015482111561314d5760405162461bcd60e51b815260040161135f90615c8a565b60006131576112a9565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561319557600080fd5b505afa1580156131a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cd91906158e0565b50915091506000826001600160701b03161180156131f457506000816001600160701b0316115b6132395760405162461bcd60e51b81526020600482015260166024820152754e6f20726573657276657320617661696c61626c652160501b604482015260640161135f565b60048054600b54600187015460405163095ea7b360e01b81526001600160a01b0393841694929093169263095ea7b392613277928692909101615be4565b602060405180830381600087803b15801561329157600080fd5b505af11580156132a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c99190615700565b50600c546004805460405163095ea7b360e01b81526001600160a01b039384169363095ea7b39361330093909116918b9101615be4565b602060405180830381600087803b15801561331a57600080fd5b505af115801561332e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133529190615700565b50600b54600c54600187015460405162e8e33760e81b81526001600160a01b039384166004820152918316602483015260448201526064810188905260006084820181905260a482018190523060c48301524260e4830152918291829185169063e8e337009061010401606060405180830381600087803b1580156133d657600080fd5b505af11580156133ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061340e9190615a19565b925092509250828860010160008282546134289190615ecc565b92505081905550818860040160008282546134439190615ecc565b925050819055508088600701600082825461345e9190615e75565b909155505050505050505050505050565b60055460009081906001600160a01b031663f4e5ff0d61348d6112a9565b6000868152600f6020526040908190206007015490516001600160e01b031960e085901b1681526134c2929190600401615be4565b604080518083038186803b1580156134d957600080fd5b505afa1580156134ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135119190615996565b91509150915091565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61354d8233611f05565b6135915760405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103a34329037bbb732b960591b604482015260640161135f565b6000828152600f6020526040902060070154808211156135f35760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420656e6f756768206c697175696469747920617661696c61626c650000604482015260640161135f565b6000838152600f602052604081206007018054849290613614908490615ecc565b9091555061362290506112a9565b6001600160a01b031663a9059cbb33846040518363ffffffff1660e01b8152600401612e56929190615be4565b6000828152600f6020526040902061366683612860565b156136835760405162461bcd60e51b815260040161135f90615cfa565b61368d8333611f05565b6136d35760405162461bcd60e51b81526020600482015260176024820152764f6e6c79206f776e65722063616e20776974686472617760481b604482015260640161135f565b80600401548211156136f75760405162461bcd60e51b815260040161135f90615c32565b600c5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906137299033908690600401615be4565b602060405180830381600087803b15801561374357600080fd5b505af1158015613757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377b9190615700565b50818160040160008282546137909190615ecc565b9091555050505050565b6013546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b1580156137de57600080fd5b505afa1580156137f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138169190615582565b6001600160a01b03161461383c5760405162461bcd60e51b815260040161135f90615c5e565b6000828152600f6020526040908190209051630c66c75560e21b815260048101919091526024810182905273__$56fc4e5f3f11a8c61fa94696167f06073e$__9063319b1d5490604401612f9b565b6013546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b1580156138cf57600080fd5b505afa1580156138e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139079190615582565b6001600160a01b03161461392d5760405162461bcd60e51b815260040161135f90615cd2565b61189a8282614bdc565b6013546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b15801561397b57600080fd5b505afa15801561398f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b39190615582565b6001600160a01b0316146139d95760405162461bcd60e51b815260040161135f90615cd2565b60008111613a215760405162461bcd60e51b8152602060048201526015602482015274416d6f756e742063616e2774206265207a65726f2160581b604482015260640161135f565b6000828152600f6020526040902060040154811115613a525760405162461bcd60e51b815260040161135f90615c8a565b600c5460035460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392613a88929116908590600401615be4565b602060405180830381600087803b158015613aa257600080fd5b505af1158015613ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ada9190615700565b5060035460405163366996df60e11b8152600481018390526000916001600160a01b031690636cd32dbe90602401602060405180830381600087803b158015613b2257600080fd5b505af1158015613b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b5a9190615734565b905081600f60008581526020019081526020016000206004016000828254613b829190615ecc565b90915550506000838152600f602052604081206008018054839290613790908490615e75565b600154604051637b5f398960e01b815260048101839052620100009091046001600160a01b031690637b5f39899060240160206040518083038186803b158015613bf157600080fd5b505afa158015613c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c299190615700565b613c755760405162461bcd60e51b815260206004820152601860248201527f546f6b656e206973206e6f74207265636f76657261626c650000000000000000604482015260640161135f565b613c7f8133611f05565b613c9b5760405162461bcd60e51b815260040161135f90615c5e565b600b54613cbd906001600160a01b0316333069021e19e0c9bab2400000614e0b565b6000818152600f60205260409081902069021e19e0c9bab2400000600191820155549051630532ab5d60e11b815260048101839052620100009091046001600160a01b031690630a6556ba906024015b600060405180830381600087803b158015613d2757600080fd5b505af1158015611b41573d6000803e3d6000fd5b600080516020615f76833981519152613d5481336144f6565b6000828152600f60205260409020600801548015613d7657613d768382614bdc565b6000838152600f60205260409020600701548015612ea857612fc78482614e2c565b600082815260208190526040902060010154613db481336144f6565b61151e8383614679565b6013546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b158015613e0257600080fd5b505afa158015613e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e3a9190615582565b6001600160a01b031614613e605760405162461bcd60e51b815260040161135f90615cd2565b612ea88282614e2c565b60008181526008602052604081205460ff168015613eff5750601354604051634f558e7960e01b8152600481018490526001600160a01b0390911690634f558e799060240160206040518083038186803b158015613ec757600080fd5b505afa158015613edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eff9190615700565b8015613fab5750600960009054906101000a90046001600160a01b03166001600160a01b031663766873326040518163ffffffff1660e01b815260040160206040518083038186803b158015613f5457600080fd5b505afa158015613f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8c9190615734565b6000838152600f6020526040902060060154613fa89042615ecc565b10155b80156140b95750600960009054906101000a90046001600160a01b03166001600160a01b031663b94d25ce6040518163ffffffff1660e01b815260040160206040518083038186803b15801561400057600080fd5b505afa158015614014573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140389190615734565b600b546014546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b15801561407f57600080fd5b505afa158015614093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140b79190615734565b115b8015610a5a57506000828152600f60205260409020541515610a5a565b6013546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e9060240160206040518083038186803b15801561411a57600080fd5b505afa15801561412e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141529190615582565b6001600160a01b0316146141a85760405162461bcd60e51b815260206004820152601760248201527f4f6e6c79206f776e65722063616e20696e637265617365000000000000000000604482015260640161135f565b6000828152600f6020526040908190209051633e8626f560e11b815260048101919091526024810182905273__$56fc4e5f3f11a8c61fa94696167f06073e$__90637d0c4dea9060440160006040518083038186803b15801561420a57600080fd5b505af415801561421e573d6000803e3d6000fd5b5050506000838152600f60205260409020600101541515905061189a576001546040516316bfb45760e11b815260048101849052620100009091046001600160a01b031690632d7f68ae90602401600060405180830381600087803b15801561428657600080fd5b505af1158015612fc7573d6000803e3d6000fd5b600154610100900460ff16806142b3575060015460ff16155b6143165760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161135f565b600154610100900460ff16158015614338576001805461ffff19166101011790555b600b80546001600160a01b03199081166001600160a01b038d8116919091179092556013805482168b8416179055600a805482168c841617905560028054339083161790556001805462010000600160b01b031916620100008b851602179055600980548216898416908117909155601480548316898516179055601580548316888516179055600480548316878516178155600580549093169386169390931790915560408051632629c7ef60e11b815290519192634c538fde928282019260209290829003018186803b15801561441057600080fd5b505afa158015614424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144489190615582565b600c80546001600160a01b0319166001600160a01b03929092169190911790556144736000336150d4565b61448b600080516020615f96833981519152336150d4565b6144a3600080516020615f76833981519152886150d4565b80156144b5576001805461ff00191690555b50505050505050505050565b60006001600160e01b03198216637965db0b60e01b1480610a5a57506301ffc9a760e01b6001600160e01b0319831614610a5a565b614500828261351a565b61189a57614518816001600160a01b031660146150de565b6145238360206150de565b604051602001614534929190615b27565b60408051601f198184030181529082905262461bcd60e51b825261135f91600401615bfd565b61151e8363a9059cbb60e01b8484604051602401614579929190615be4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526152bf565b61189a82826040516024016145c6929190615c10565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052615391565b6145ff828261351a565b61189a576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556146353390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b614683828261351a565b1561189a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000818152600f6020526040812060078101549091906146ff908490614e2c565b9150506000826002015483600101546147189190615e75565b600554600d5460405163cfcbe04560e01b8152600481018490526024810186905269021e19e0c9bab240000060448201526064810191909152919250600091829182916001600160a01b039091169063cfcbe0459060840160606040518083038186803b15801561478857600080fd5b505afa15801561479c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147c09190615a19565b925092509250600069021e19e0c9bab240000085106147e95769021e19e0c9bab24000006147eb565b845b600b54604051630852cd8d60e31b8152600481018390529192506001600160a01b0316906342966c6890602401600060405180830381600087803b15801561483257600080fd5b505af1158015614846573d6000803e3d6000fd5b5050505060008211156149f557600b546015546001600160a01b0391821691633950935191166148808469021e19e0c9bab2400000615ecc565b6040518363ffffffff1660e01b815260040161489d929190615be4565b602060405180830381600087803b1580156148b757600080fd5b505af11580156148cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148ef9190615700565b50601554600d546001600160a01b0390911690635ff44eb99084906149149082615e8d565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b15801561495257600080fd5b505af1158015614966573d6000803e3d6000fd5b5050600c546015546040516323b872dd60e01b81526001600160a01b0392831694506323b872dd93506149a192339216908790600401615b9c565b602060405180830381600087803b1580156149bb57600080fd5b505af11580156149cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149f39190615700565b505b8215614a8157600c5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90614a2d9033908790600401615be4565b602060405180830381600087803b158015614a4757600080fd5b505af1158015614a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a7f9190615700565b505b8315611efb57600b5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90614ab99033908890600401615be4565b602060405180830381600087803b158015614ad357600080fd5b505af1158015614ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b0b9190615700565b505050505050505050565b6000818152600f6020908152604080832080548452601083528184205460128452828520818652909352922080546001600160a01b03191633179055614b5d816001615e75565b8254600090815260106020526040902055614b77836153b2565b50546000908152600760208181526040808420849055938352600f90529181208181556001810182905560028101829055600381018290556004810182905560058101829055600681018290559182018190556008820155600901805460ff19169055565b60008111614c235760405162461bcd60e51b8152602060048201526014602482015273416d6f756e742063616e2774206265207a65726f60601b604482015260640161135f565b6000828152600f6020526040902060080154811115614c545760405162461bcd60e51b815260040161135f90615c32565b600c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015614c9857600080fd5b505afa158015614cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cd09190615734565b600354604051639c8f9f2360e01b8152600481018590529192506001600160a01b031690639c8f9f2390602401600060405180830381600087803b158015614d1757600080fd5b505af1158015614d2b573d6000803e3d6000fd5b5050600c546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015614d7557600080fd5b505afa158015614d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614dad9190615734565b9050614db98282615ecc565b6000858152600f602052604081206004018054909190614dda908490615e75565b90915550506000848152600f602052604081206008018054859290614e00908490615ecc565b909155505050505050565b612ea8846323b872dd60e01b85858560405160240161457993929190615b9c565b6000828152600f60205260408120819083614e4e5760008092509250506150cd565b8381600701541015614eb15760405162461bcd60e51b815260206004820152602660248201527f54686572652773206e6f7420656e6f756768206c697175696469747920617661604482015265696c61626c6560d01b606482015260840161135f565b6004546001600160a01b03166000614ec76112a9565b6004805460405163095ea7b360e01b81529293506001600160a01b038085169363095ea7b393614efd93909216918b9101615be4565b602060405180830381600087803b158015614f1757600080fd5b505af1158015614f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f4f9190615700565b50600c54600b5460009182916001600160a01b03918216911610614f8557600c54600b546001600160a01b039182169116614f99565b600b54600c546001600160a01b0391821691165b604051635d5155ef60e11b81526001600160a01b0380841660048301528083166024830152604482018c9052600060648301819052608483018190523060a48401524260c4840152939550919350829187169063baa2abde9060e4016040805180830381600087803b15801561500e57600080fd5b505af1158015615022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150469190615996565b600c54600b549294509092506001600160a01b0390811691161061506b57808261506e565b81815b809950819a5050508887600101600082825461508a9190615e75565b92505081905550878760040160008282546150a59190615e75565b92505081905550898760070160008282546150c09190615e75565b9091555050505050505050505b9250929050565b61189a82826145f5565b606060006150ed836002615ead565b6150f8906002615e75565b6001600160401b0381111561511d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015615147576020820181803683370190505b509050600360fc1b8160008151811061517057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106151ad57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006151d1846002615ead565b6151dc906001615e75565b90505b6001811115615270576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061521e57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061524257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361526981615f0f565b90506151df565b5083156117145760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161135f565b6000615314826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166153e39092919063ffffffff16565b80519091501561151e57808060200190518101906153329190615700565b61151e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161135f565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60135460405163dbf5132560e01b8152600481018390526001600160a01b039091169063dbf5132590602401613d0d565b6060612fed848460008585843b61543c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161135f565b600080866001600160a01b031685876040516154589190615b0b565b60006040518083038185875af1925050503d8060008114615495576040519150601f19603f3d011682016040523d82523d6000602084013e61549a565b606091505b50915091506154aa8282866154b5565b979650505050505050565b606083156154c4575081611714565b8251156154d45782518084602001fd5b8160405162461bcd60e51b815260040161135f9190615bfd565b80356154f981615f67565b919050565b600082601f83011261550e578081fd5b813561552161551c82615e4e565b615e1e565b818152846020838601011115615535578283fd5b816020850160208301379081016020019190915292915050565b80516001600160701b03811681146154f957600080fd5b600060208284031215615577578081fd5b813561171481615f52565b600060208284031215615593578081fd5b815161171481615f52565b60008060008060008060008060006101208a8c0312156155bc578485fd5b89356155c781615f52565b985060208a01356155d781615f52565b975060408a01356155e781615f52565b965060608a01356155f781615f52565b955060808a013561560781615f52565b945060a08a013561561781615f52565b935060c08a013561562781615f52565b925060e08a013561563781615f52565b91506101008a013561564881615f52565b809150509295985092959850929598565b6000602080838503121561566b578182fd5b82516001600160401b0380821115615681578384fd5b818501915085601f830112615694578384fd5b8151818111156156a6576156a6615f3c565b8060051b91506156b7848301615e1e565b8181528481019084860184860187018a10156156d1578788fd5b8795505b838610156156f35780518352600195909501949186019186016156d5565b5098975050505050505050565b600060208284031215615711578081fd5b815161171481615f67565b60006020828403121561572d578081fd5b5035919050565b600060208284031215615745578081fd5b5051919050565b6000806040838503121561575e578182fd5b82359150602083013561577081615f52565b809150509250929050565b600080600083850360c0811215615790578182fd5b843593506080601f19820112156157a5578182fd5b50604051608081018181106001600160401b03821117156157c8576157c8615f3c565b60405260208501356157d981615f52565b815260408501356157e981615f52565b602082015260608501356040820152608085013560048110615809578283fd5b6060820152915061581c60a085016154ee565b90509250925092565b60008060408385031215615837578182fd5b50508035926020909101359150565b600060208284031215615857578081fd5b81356001600160e01b031981168114611714578182fd5b60006020828403121561587f578081fd5b81516001600160401b03811115615894578182fd5b8201601f810184136158a4578182fd5b80516158b261551c82615e4e565b8181528560208385010111156158c6578384fd5b6158d7826020830160208601615ee3565b95945050505050565b6000806000606084860312156158f4578081fd5b6158fd8461554f565b925061590b6020850161554f565b9150604084015163ffffffff81168114615923578182fd5b809150509250925092565b60008060408385031215615940578182fd5b82359150602083013561577081615f67565b60008060408385031215615964578182fd5b8235915060208301356001600160401b03811115615980578182fd5b61598c858286016154fe565b9150509250929050565b600080604083850312156159a8578182fd5b505080516020909101519092909150565b600080600080608085870312156159ce578182fd5b843593506020850135925060408501356001600160401b038111156159f1578283fd5b6159fd878288016154fe565b9250506060850135615a0e81615f52565b939692955090935050565b600080600060608486031215615a2d578081fd5b8351925060208401519150604084015190509250925092565b600080600080600060a08688031215615a5d578283fd5b8535945060208601359350604086013592506060860135615a7d81615f52565b915060808601356001600160401b03811115615a97578182fd5b615aa3888289016154fe565b9150509295509295909350565b60008060408385031215615ac2578182fd5b8235915060208301356001600160401b0381168114615770578182fd5b60008151808452615af7816020860160208601615ee3565b601f01601f19169290920160200192915050565b60008251615b1d818460208701615ee3565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615b5f816017850160208801615ee3565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615b90816028840160208801615ee3565b01602801949350505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0383168152604060208201819052600090612fed90830184615adf565b6001600160a01b03929092168252602082015260400190565b6020815260006117146020830184615adf565b604081526000615c236040830185615adf565b90508260208301529392505050565b6020808252601290820152714e6f7420656e6f7567682062616c616e636560701b604082015260600190565b60208082526012908201527113db9b1e481bdddb995c88185b1b1bddd95960721b604082015260600190565b60208082526028908201527f416d6f756e742069732067726561746572207468616e20617661696c61626c656040820152672066756e64696e6760c01b606082015260800190565b6020808252600e908201526d14da1bdd5b19081bdddb8813919560921b604082015260600190565b60208082526010908201526f546f6b656e206973206c6f636b65642160801b604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015615d735784516001600160a01b031683529383019391830191600101615d4e565b50506001600160a01b03969096166060850152505050608001529392505050565b828152604060208201526000612fed6040830184615adf565b6000610140820190508b82528a60208301528960408301528860608301528760808301528660a08301528560c08301528460e08301528361010083015260048310615e0857634e487b7160e01b600052602160045260246000fd5b826101208301529b9a5050505050505050505050565b604051601f8201601f191681016001600160401b0381118282101715615e4657615e46615f3c565b604052919050565b60006001600160401b03821115615e6757615e67615f3c565b50601f01601f191660200190565b60008219821115615e8857615e88615f26565b500190565b600082615ea857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615615ec757615ec7615f26565b500290565b600082821015615ede57615ede615f26565b500390565b60005b83811015615efe578181015183820152602001615ee6565b83811115612ea85750506000910152565b600081615f1e57615f1e615f26565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461296557600080fd5b801515811461296557600080fdfec55a74c743a5d6aff6a82963adf054e2367242c4a636870f26b8ee90910968d0eb4fd9f47c063b511700e1c8e94e2fa4088ffca1fdcef1e60edf1beecd1b2e64a2646970667358221220e7265aaafa69bda3f3532a60535d36b5259f1e9f063049677c8ba3906b0161b664736f6c63430008040033",
  "libraries": {
    "SyntheticTokenLibrary": "0x697bB9ED8fa7fc8bf6cCFF12cf1FB64027A2E5B5"
  },
  "devdoc": {
    "author": "priviprotocol",
    "kind": "dev",
    "methods": {
      "buyJotTokens(uint256,uint256)": {
        "params": {
          "amountToBuy_": "the amount of jots to buy",
          "tokenId_": "the id of the synthetic nft"
        }
      },
      "constructor": {
        "details": "initializes some immutable variables and lock the implementation contract      for further initializations (with the initializer modifier)",
        "params": {
          "randomConsumerAddress_": "the address of the vrf Chainlink node",
          "validatorAddress_": "the address of the polygon validator Chainlink node"
        }
      },
      "decreaseSellingSupply(uint256,uint256)": {
        "details": "caller must be the owner of the NFT",
        "params": {
          "amount_": "the amount of jots to transfer to supply",
          "tokenId_": "the id of the synthetic nft"
        }
      },
      "depositJotTokens(uint256,uint256)": {
        "params": {
          "amountToDeposit_": "the amount of jots to deposit",
          "tokenId_": "the id of the synthetic nft"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseSellingSupply(uint256,uint256)": {
        "details": "caller must be the owner of the NFT",
        "params": {
          "amount_": "the amount of jots to transfer from supply",
          "tokenId_": "the id of the synthetic nft"
        }
      },
      "initialize(address,address,address,address,address,address,address,address,address)": {
        "details": "initialize the proxy contract",
        "params": {
          "auctionManagerAddress_": "the auctions manager fabric address",
          "erc721address_": "the address of the synthetic erc721 contract handled by this",
          "jotAddress_": "the address of the jot contract for this collection",
          "jotPool_": "the address of the corresponding jot pool",
          "originalCollectionAddress_": "the original collection address",
          "protocol_": "the address of the protocol parameters contract (governance parameters)",
          "redemptionPool_": "the address of the corresponding redemption pool",
          "swapAddress_": "the address of the uniswapV2Pair"
        }
      },
      "processBuybackPriceResponse(bytes32,uint256)": {
        "details": "processes the oracle response for buyback price updates",
        "params": {
          "buybackPrice_": "the new buyback price",
          "requestId_": "the id of the Chainlink request"
        }
      },
      "reassignNFT(uint256,address)": {
        "details": "allows the callback after finishing an auction to reassign the NFT to the winner",
        "params": {
          "newOwner_": "the winner of the auction account",
          "nftId_": "the id of the auctioned synthetic token"
        }
      },
      "register(uint256,uint256,uint256,address,string)": {
        "details": "through this the router can register tokens",
        "params": {
          "metadata_": "the metadata (the ipfs url) of the nft",
          "nftOwner_": "the owner of the synthetic nft",
          "priceFraction_": "the price fraction for buying",
          "supplyToKeep_": "the supply that the owner decides to keep",
          "tokenId_": "the original token id"
        },
        "returns": {
          "syntheticId": "the id of the newly registered token"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updatePriceFraction(uint256,uint256)": {
        "details": "caller must be the owner of the NFT",
        "params": {
          "newFractionPrice_": "the new value of the fraction price",
          "tokenId_": "the id of the synthetic nft"
        }
      }
    },
    "stateVariables": {
      "_flips": {
        "details": "mapping the request id from Chainlink with the flip input data"
      },
      "changeNonces": {
        "details": "nonce to count the changes of an original collection token id      in order to avoid double change (with the second one keeping the synthetic playing)"
      },
      "nonces": {
        "details": "the nonce to avoid double verification (quantity of exits for original token id)"
      }
    },
    "title": "synthetic collection abstraction contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "AUCTION_MANAGER()": {
        "notice": "role of the auctions manager fabric contract"
      },
      "AuctionsManagerAddress()": {
        "notice": "the address of the auctions manager fabric contract"
      },
      "RANDOM_ORACLE()": {
        "notice": "role of the vrf chainlink oracle"
      },
      "ROUTER()": {
        "notice": "role of the router contract"
      },
      "VALIDATOR_ORACLE()": {
        "notice": "role of the polygon validator chainlink oracle for verifications"
      },
      "addLiquidityToFuturePool(uint256,uint256)": {
        "notice": "add available liquidity to Perpetual Pool"
      },
      "addLiquidityToQuickswap(uint256,uint256)": {
        "notice": "add available liquidity for a given token to UniSwap pool"
      },
      "buyJotTokens(uint256,uint256)": {
        "notice": "allows the caller to buy jots using the funding token"
      },
      "buyback(uint256)": {
        "notice": "Buy token back. Caller needs to pre-approve a transaction worth the amount returned by the getRequiredFundingForBuyback(uint256 tokenId) function"
      },
      "change(uint256,uint256,string,address)": {
        "notice": "change an NFT for another one of the same collection"
      },
      "claimLiquidityTokens(uint256,uint256)": {
        "notice": "Claim Liquidity Tokens"
      },
      "decreaseSellingSupply(uint256,uint256)": {
        "notice": "decrease selling supply for a given NFT"
      },
      "depositJotTokens(uint256,uint256)": {
        "notice": "allows the caller to deposit jots"
      },
      "erc721address()": {
        "notice": "Synthetic NFT Address  for this collection"
      },
      "fundingTokenAddress()": {
        "notice": "funding token address"
      },
      "getAccruedReward(uint256)": {
        "notice": "returns the accrued reward by QuickSwap pool LP for a given fractionalization"
      },
      "getAvailableJotsForBuyback(uint256)": {
        "notice": "returns funds owned by token, in Jots and Funding, in contract and in UniSwap"
      },
      "increaseSellingSupply(uint256,uint256)": {
        "notice": "increase selling supply for a given NFT"
      },
      "isSyntheticNFTCreated(uint256)": {
        "notice": "public function. Checks if an NFT has been already fractionalized"
      },
      "isSyntheticNFTFractionalised(uint256)": {
        "notice": "public function. Checks if an NFT has been already fractionalised."
      },
      "jotAddress()": {
        "notice": "jot Address for this collection"
      },
      "originalCollectionAddress()": {
        "notice": "address of the original collection"
      },
      "poolAddress()": {
        "notice": "returns the Quickswap pool address"
      },
      "syntheticProtocolRouterAddress()": {
        "notice": "the address of the protocol router"
      },
      "tokens(uint256)": {
        "notice": "data for each token"
      },
      "updateBuybackPrice()": {
        "notice": "allows users to update buyback price for buyback"
      },
      "updatePriceFraction(uint256,uint256)": {
        "notice": "update the price of a fraction for a given NFT"
      },
      "verify(uint256)": {
        "notice": "this method calls chainlink oracle and         verifies if the NFT has been locked on NFTVaultManager. In addition         gets the metadata of the NFT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3872,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3867_storage)"
      },
      {
        "astId": 7665,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 7668,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 24963,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "AuctionsManagerAddress",
        "offset": 2,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 24966,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "syntheticProtocolRouterAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 24968,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "perpetualPoolLiteAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 24970,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "_swapAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 24972,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "_liquidityCalculatorAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 24978,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "_flips",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Flip)24895_storage)"
      },
      {
        "astId": 24982,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "_originalToSynthetic",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 24986,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "canFlip",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 24988,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "protocol",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 24991,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "originalCollectionAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 24994,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "jotAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 24997,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "fundingTokenAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 24999,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "buybackPrice",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 25001,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "_buybackPriceLastUpdate",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 25007,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "tokens",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(TokenData)24888_storage)"
      },
      {
        "astId": 25012,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "nonces",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 25018,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "changeNonces",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(ChangeNonce)24902_storage)"
      },
      {
        "astId": 25024,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "ownersByNonce",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 25027,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "erc721address",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 25029,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "jotPool",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 25031,
        "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
        "label": "redemptionPool",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(State)23374": {
        "encoding": "inplace",
        "label": "enum State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Flip)24895_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Flip)",
        "numberOfBytes": "32",
        "value": "t_struct(Flip)24895_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3867_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3867_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_struct(ChangeNonce)24902_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ChangeNonce)",
        "numberOfBytes": "32",
        "value": "t_struct(ChangeNonce)24902_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenData)24888_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)24888_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ChangeNonce)24902_storage": {
        "encoding": "inplace",
        "label": "struct ChangeNonce",
        "members": [
          {
            "astId": 24897,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "nonce",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24899,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "newTokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24901,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Flip)24895_storage": {
        "encoding": "inplace",
        "label": "struct Flip",
        "members": [
          {
            "astId": 24890,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24892,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "prediction",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 24894,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "player",
            "offset": 8,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)3867_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 3864,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3866,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenData)24888_storage": {
        "encoding": "inplace",
        "label": "struct TokenData",
        "members": [
          {
            "astId": 24868,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "originalTokenID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24870,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "ownerSupply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24872,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "sellingSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 24874,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "soldSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 24876,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "liquiditySold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 24878,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "fractionPrices",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 24880,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "lastFlipTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 24882,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "liquidityTokenBalance",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 24884,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "perpetualFuturesLShares",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 24887,
            "contract": "contracts/polygon/implementations/SyntheticCollectionManager.sol:SyntheticCollectionManager",
            "label": "state",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(State)23374"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}