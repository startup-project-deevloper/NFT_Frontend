{
  "address": "0x8d82EBB3fED62BeeA28a192eD9047DDf26d76fB3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[2]",
          "name": "addresses",
          "type": "address[2]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "AddMargin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeCollection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveMargin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "tradeVolume",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SignedPrice",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SignedPrice",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "addMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "addMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "bTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidatorQualifierAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolFeeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlyingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidity",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParameters",
      "outputs": [
        {
          "internalType": "int256",
          "name": "minPoolMarginRatio",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "minInitialMarginRatio",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "minMaintenanceMarginRatio",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "minLiquidationReward",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "maxLiquidationReward",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "liquidationCutRatio",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "protocolFeeCollectRatio",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeeAccrued",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSymbol",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cumulativeFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "tradersNetVolume",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "tradersNetCost",
              "type": "int256"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SymbolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSymbolPriceAndMultiplier",
      "outputs": [
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "multiplier",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTraderPortfolio",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "volume",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cost",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lastCumulativeFundingRate",
              "type": "int256"
            }
          ],
          "internalType": "struct IPTokenLite.Position",
          "name": "position",
          "type": "tuple"
        },
        {
          "internalType": "int256",
          "name": "margin",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[6]",
          "name": "addresses",
          "type": "address[6]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SignedPrice",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lShares",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lShares",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SignedPrice",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SignedPrice",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "removeMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "removeMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "tradeVolume",
          "type": "int256"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "tradeVolume",
          "type": "int256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SignedPrice",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc736c009655ff41521ad04a281d151612accdd2242ebf1420ea5a9e5ed725237",
  "receipt": {
    "to": null,
    "from": "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
    "contractAddress": "0x8d82EBB3fED62BeeA28a192eD9047DDf26d76fB3",
    "transactionIndex": 0,
    "gasUsed": "3290368",
    "logsBloom": "0x
    "blockHash": "0x8f1f64429de88e752ab33da7a21845a8963b4ac5c1a9046dc1aaedaf72548f66",
    "transactionHash": "0xc736c009655ff41521ad04a281d151612accdd2242ebf1420ea5a9e5ed725237",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19896526,
        "transactionHash": "0xc736c009655ff41521ad04a281d151612accdd2242ebf1420ea5a9e5ed725237",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002311b77f76000000000000000000000000000000000000000000000000000082316620f11dd261000000000000000000000000000000000000000000000000019ce481733bc000000000000000000000000000000000000000000000000000820e546971a7d26100000000000000000000000000000000000000000000000001bff638f2b1c000",
        "logIndex": 0,
        "blockHash": "0x8f1f64429de88e752ab33da7a21845a8963b4ac5c1a9046dc1aaedaf72548f66"
      }
    ],
    "blockNumber": 19896526,
    "cumulativeGasUsed": "3290368",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x7485C5B724C99475411721CE070116102665F99C",
      "0x5723B0c53eD5564A15c215A349445029B2dd902f"
    ]
  ],
  "solcInputHash": "0888e3889ad071ad55e914a3879924fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"addresses\",\"type\":\"address[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidatorQualifierAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"minPoolMarginRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minInitialMarginRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minLiquidationReward\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maxLiquidationReward\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"liquidationCutRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"protocolFeeCollectRatio\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeAccrued\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cumulativeFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"internalType\":\"struct IPerpetualPoolLite.SymbolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbolPriceAndMultiplier\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"multiplier\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTraderPortfolio\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumulativeFundingRate\",\"type\":\"int256\"}],\"internalType\":\"struct IPTokenLite.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"margin\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[6]\",\"name\":\"addresses\",\"type\":\"address[6]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"removeMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"removeMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/perpetual_futures/PerpetualPoolLite.sol\":\"PerpetualPoolLite\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/perpetual_futures/PerpetualPoolLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../polygon/Interfaces.sol\\\";\\n//import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./library/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../polygon/governance/FuturesProtocolParameters.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\ncontract PerpetualPoolLite is IPerpetualPoolLite, Initializable {\\n    using SafeMath for uint256;\\n    using SafeMath for int256;\\n    using SafeERC20 for IERC20;\\n\\n    int256 private constant ONE = 10**18;\\n\\n    uint256 private _decimals;\\n\\n    address private _bTokenAddress;\\n    address private _lTokenAddress;\\n    address private _pTokenAddress;\\n    address private _liquidatorQualifierAddress;\\n    address private _protocolFeeCollector;\\n    address private _underlyingAddress;\\n    address private immutable _protocolAddress;\\n    FuturesProtocolParameters private immutable _protocolParameters;\\n\\n    int256 private _liquidity;\\n\\n    uint256 private _lastUpdateBlock;\\n    int256 private _protocolFeeAccrued;\\n\\n    // symbolId => SymbolInfo\\n    SymbolInfo private _symbol;\\n\\n    bool private _mutex;\\n    modifier _lock_() {\\n        require(!_mutex, \\\"reentry\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    constructor(address[2] memory addresses) {\\n        _protocolAddress = addresses[0];\\n        _protocolParameters = FuturesProtocolParameters(addresses[0]);\\n    }\\n\\n    function initialize(address[6] memory addresses) external initializer {\\n        _bTokenAddress = addresses[0];\\n        _lTokenAddress = addresses[1];\\n        _pTokenAddress = addresses[2];\\n        _liquidatorQualifierAddress = addresses[3];\\n        _protocolFeeCollector = addresses[4];\\n        _underlyingAddress = addresses[5];\\n\\n        _decimals = 6;\\n    }\\n\\n    function getSymbolPriceAndMultiplier() external view returns (int256 price, int256 multiplier) {\\n        return (_symbol.price, _protocolParameters.futuresMultiplier());\\n    }\\n\\n    function getParameters()\\n        external\\n        view\\n        override\\n        returns (\\n            int256 minPoolMarginRatio,\\n            int256 minInitialMarginRatio,\\n            int256 minMaintenanceMarginRatio,\\n            int256 minLiquidationReward,\\n            int256 maxLiquidationReward,\\n            int256 liquidationCutRatio,\\n            int256 protocolFeeCollectRatio\\n        )\\n    {\\n        return (\\n            _protocolParameters.minPoolMarginRatio(),\\n            _protocolParameters.minInitialMarginRatio(),\\n            _protocolParameters.minMaintenanceMarginRatio(),\\n            _protocolParameters.minLiquidationReward(),\\n            _protocolParameters.maxLiquidationReward(),\\n            _protocolParameters.liquidationCutRatio(),\\n            _protocolParameters.protocolFeeCollectRatio()\\n        );\\n    }\\n\\n    function getAddresses()\\n        external\\n        view\\n        override\\n        returns (\\n            address bTokenAddress,\\n            address lTokenAddress,\\n            address pTokenAddress,\\n            address liquidatorQualifierAddress,\\n            address protocolFeeCollector,\\n            address underlyingAddress,\\n            address protocolAddress\\n        )\\n    {\\n        return (\\n            _bTokenAddress,\\n            _lTokenAddress,\\n            _pTokenAddress,\\n            _liquidatorQualifierAddress,\\n            _protocolFeeCollector,\\n            _underlyingAddress,\\n            _protocolAddress\\n        );\\n    }\\n\\n    function getSymbol() external view override returns (SymbolInfo memory) {\\n        return _symbol;\\n    }\\n\\n    function getLiquidity() external view override returns (int256) {\\n        return _liquidity;\\n    }\\n\\n    function getLastUpdateBlock() external view override returns (uint256) {\\n        return _lastUpdateBlock;\\n    }\\n\\n    function getProtocolFeeAccrued() external view override returns (int256) {\\n        return _protocolFeeAccrued;\\n    }\\n\\n    function collectProtocolFee() external override {\\n        uint256 balance = IERC20(_bTokenAddress).balanceOf(address(this)).rescale(_decimals, 18);\\n        uint256 amount = _protocolFeeAccrued.itou();\\n        if (amount > balance) amount = balance;\\n        _protocolFeeAccrued -= amount.utoi();\\n        _transferOut(_protocolFeeCollector, amount);\\n        emit ProtocolFeeCollection(_protocolFeeCollector, amount);\\n    }\\n\\n    //================================================================================\\n    // Interactions with onchain oracles\\n    //================================================================================\\n\\n    function addLiquidity(uint256 bAmount) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _addLiquidity(msg.sender, bAmount);\\n    }\\n\\n    function removeLiquidity(uint256 lShares) external override {\\n        require(lShares > 0, \\\"PerpetualPool: 0 lShares\\\");\\n        _removeLiquidity(msg.sender, lShares);\\n    }\\n\\n    function addMargin(uint256 bAmount) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _addMargin(msg.sender, bAmount);\\n    }\\n\\n    function removeMargin(uint256 bAmount) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _removeMargin(msg.sender, bAmount);\\n    }\\n\\n    function trade(int256 tradeVolume) external override {\\n        require(\\n            tradeVolume != 0 && (tradeVolume / ONE) * ONE == tradeVolume,\\n            \\\"PerpetualPool: invalid tradeVolume\\\"\\n        );\\n        _trade(msg.sender, tradeVolume);\\n    }\\n\\n    function liquidate(address account) external override {\\n        address liquidator = msg.sender;\\n        require(\\n            _liquidatorQualifierAddress == address(0) ||\\n                ILiquidatorQualifier(_liquidatorQualifierAddress).isQualifiedLiquidator(liquidator),\\n            \\\"PerpetualPool: not qualified liquidator\\\"\\n        );\\n        _liquidate(liquidator, account);\\n    }\\n\\n    //================================================================================\\n    // Interactions with offchain oracles\\n    //================================================================================\\n\\n    function addLiquidity(uint256 bAmount, SignedPrice memory price) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _updateSymbolOracles(price);\\n        _addLiquidity(msg.sender, bAmount);\\n    }\\n\\n    function removeLiquidity(uint256 lShares, SignedPrice memory price) external override {\\n        require(lShares > 0, \\\"PerpetualPool: 0 lShares\\\");\\n        _updateSymbolOracles(price);\\n        _removeLiquidity(msg.sender, lShares);\\n    }\\n\\n    function addMargin(uint256 bAmount, SignedPrice memory price) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _updateSymbolOracles(price);\\n        _addMargin(msg.sender, bAmount);\\n    }\\n\\n    function removeMargin(uint256 bAmount, SignedPrice memory price) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _updateSymbolOracles(price);\\n        _removeMargin(msg.sender, bAmount);\\n    }\\n\\n    function trade(int256 tradeVolume, SignedPrice memory price) external override {\\n        require(\\n            tradeVolume != 0 && (tradeVolume / ONE) * ONE == tradeVolume,\\n            \\\"PerpetualPool: invalid tradeVolume\\\"\\n        );\\n        _updateSymbolOracles(price);\\n        _trade(msg.sender, tradeVolume);\\n    }\\n\\n    function liquidate(address account, SignedPrice memory price) external override {\\n        address liquidator = msg.sender;\\n        require(\\n            _liquidatorQualifierAddress == address(0) ||\\n                ILiquidatorQualifier(_liquidatorQualifierAddress).isQualifiedLiquidator(liquidator),\\n            \\\"PerpetualPool: not qualified liquidator\\\"\\n        );\\n        _updateSymbolOracles(price);\\n        _liquidate(liquidator, account);\\n    }\\n\\n    //================================================================================\\n    // Core logics\\n    //================================================================================\\n\\n    function _addLiquidity(address account, uint256 bAmount) internal _lock_ {\\n        (int256 totalDynamicEquity, ) = _updateSymbolPricesAndFundingRates();\\n        bAmount = _transferIn(account, bAmount);\\n        ILTokenLite lToken = ILTokenLite(_lTokenAddress);\\n\\n        uint256 totalSupply = lToken.totalSupply();\\n        uint256 lShares;\\n        if (totalSupply == 0) {\\n            lShares = bAmount;\\n        } else {\\n            lShares = (bAmount * totalSupply) / totalDynamicEquity.itou();\\n        }\\n\\n        lToken.mint(account, lShares);\\n        _liquidity += bAmount.utoi();\\n\\n        emit AddLiquidity(account, lShares, bAmount);\\n    }\\n\\n    function _removeLiquidity(address account, uint256 lShares) internal _lock_ {\\n        (int256 totalDynamicEquity, int256 totalAbsCost) = _updateSymbolPricesAndFundingRates();\\n        ILTokenLite lToken = ILTokenLite(_lTokenAddress);\\n\\n        uint256 totalSupply = lToken.totalSupply();\\n        uint256 bAmount = (lShares * totalDynamicEquity.itou()) / totalSupply;\\n\\n        _liquidity -= bAmount.utoi();\\n\\n        require(\\n            totalAbsCost == 0 ||\\n                ((totalDynamicEquity - bAmount.utoi()) * ONE) / totalAbsCost >=\\n                _protocolParameters.minPoolMarginRatio(),\\n            \\\"PerpetualPool: pool insufficient margin\\\"\\n        );\\n\\n        lToken.burn(account, lShares);\\n        _transferOut(account, bAmount);\\n\\n        emit RemoveLiquidity(account, lShares, bAmount);\\n    }\\n\\n    function _addMargin(address account, uint256 bAmount) internal _lock_ {\\n        bAmount = _transferIn(account, bAmount);\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\n        if (!pToken.exists(account)) pToken.mint(account);\\n        pToken.addMargin(account, bAmount.utoi());\\n        emit AddMargin(account, bAmount);\\n    }\\n\\n    function _removeMargin(address account, uint256 bAmount) internal _lock_ {\\n        _updateSymbolPricesAndFundingRates();\\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\\n\\n        int256 amount = bAmount.utoi();\\n        if (amount >= margin) {\\n            amount = margin;\\n            bAmount = amount.itou();\\n            margin = 0;\\n        } else {\\n            margin -= amount;\\n        }\\n\\n        require(\\n            _getTraderMarginRatio(position, margin) >= _protocolParameters.minInitialMarginRatio(),\\n            \\\"PerpetualPool: insufficient margin\\\"\\n        );\\n\\n        _updateTraderPortfolio(account, position, margin);\\n        _transferOut(account, bAmount);\\n\\n        emit RemoveMargin(account, bAmount);\\n    }\\n\\n    // struct for temp use in trade function, to prevent stack too deep error\\n    struct TradeParams {\\n        int256 tradersNetVolume;\\n        int256 price;\\n        int256 multiplier;\\n        int256 curCost;\\n        int256 fee;\\n        int256 realizedCost;\\n        int256 protocolFee;\\n    }\\n\\n    function _trade(address account, int256 tradeVolume) internal _lock_ {\\n        (int256 totalDynamicEquity, int256 totalAbsCost) = _updateSymbolPricesAndFundingRates();\\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\\n\\n        TradeParams memory params;\\n\\n        params.tradersNetVolume = _symbol.tradersNetVolume;\\n        params.price = _symbol.price;\\n        params.multiplier = _protocolParameters.futuresMultiplier();\\n        params.curCost = (((tradeVolume * params.price) / ONE) * params.multiplier) / ONE;\\n        params.fee = (params.curCost.abs() * _protocolParameters.futuresFeeRatio()) / ONE;\\n\\n        if (!(position.volume >= 0 && tradeVolume >= 0) && !(position.volume <= 0 && tradeVolume <= 0)) {\\n            int256 absVolume = position.volume.abs();\\n            int256 absTradeVolume = tradeVolume.abs();\\n            if (absVolume <= absTradeVolume) {\\n                // previous position is totally closed\\n                params.realizedCost = (params.curCost * absVolume) / absTradeVolume + position.cost;\\n            } else {\\n                // previous position is partially closed\\n                params.realizedCost = (position.cost * absTradeVolume) / absVolume + params.curCost;\\n            }\\n        }\\n\\n        // adjust totalAbsCost after trading\\n        totalAbsCost +=\\n            (((((params.tradersNetVolume + tradeVolume).abs() - params.tradersNetVolume.abs()) *\\n                params.price) / ONE) * params.multiplier) /\\n            ONE;\\n\\n        position.volume += tradeVolume;\\n        position.cost += params.curCost - params.realizedCost;\\n        position.lastCumulativeFundingRate = _symbol.cumulativeFundingRate;\\n        margin -= params.fee + params.realizedCost;\\n\\n        _symbol.tradersNetVolume += tradeVolume;\\n        _symbol.tradersNetCost += params.curCost - params.realizedCost;\\n        params.protocolFee = (params.fee * _protocolParameters.protocolFeeCollectRatio()) / ONE;\\n        _protocolFeeAccrued += params.protocolFee;\\n        _liquidity += params.fee - params.protocolFee + params.realizedCost;\\n\\n        require(\\n            totalAbsCost == 0 ||\\n                (totalDynamicEquity * ONE) / totalAbsCost >= _protocolParameters.minPoolMarginRatio(),\\n            \\\"PerpetualPool: insufficient liquidity\\\"\\n        );\\n        require(\\n            _getTraderMarginRatio(position, margin) >= _protocolParameters.minInitialMarginRatio(),\\n            \\\"PerpetualPool: insufficient margin\\\"\\n        );\\n\\n        _updateTraderPortfolio(account, position, margin);\\n\\n        emit Trade(account, tradeVolume, params.price.itou());\\n    }\\n\\n    function _liquidate(address liquidator, address account) internal _lock_ {\\n        _updateSymbolPricesAndFundingRates();\\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\\n        require(\\n            _getTraderMarginRatio(position, margin) < _protocolParameters.minMaintenanceMarginRatio(),\\n            \\\"PerpetualPool: cannot liquidate\\\"\\n        );\\n\\n        int256 netEquity = margin;\\n        if (position.volume != 0) {\\n            _symbol.tradersNetVolume -= position.volume;\\n            _symbol.tradersNetCost -= position.cost;\\n            netEquity +=\\n                (((position.volume * _symbol.price) / ONE) * _protocolParameters.futuresMultiplier()) /\\n                ONE -\\n                position.cost;\\n        }\\n\\n        int256 reward;\\n        int256 minLiquidationReward = _protocolParameters.minLiquidationReward();\\n        int256 maxLiquidationReward = _protocolParameters.maxLiquidationReward();\\n        if (netEquity <= minLiquidationReward) {\\n            reward = minLiquidationReward;\\n        } else if (netEquity >= maxLiquidationReward) {\\n            reward = maxLiquidationReward;\\n        } else {\\n            reward =\\n                ((netEquity - minLiquidationReward) * _protocolParameters.liquidationCutRatio()) /\\n                ONE +\\n                minLiquidationReward;\\n        }\\n\\n        _liquidity += margin - reward;\\n        IPTokenLite(_pTokenAddress).burn(account);\\n        _transferOut(liquidator, reward.itou());\\n\\n        emit Liquidate(account, liquidator, reward.itou());\\n    }\\n\\n    //================================================================================\\n    // Helpers\\n    //================================================================================\\n\\n    function _updateSymbolOracles(SignedPrice memory price) internal {\\n        IOracleWithUpdate(_protocolParameters.futuresOracleAddress()).updatePrice(\\n            _underlyingAddress,\\n            price.timestamp,\\n            price.price,\\n            price.v,\\n            price.r,\\n            price.s\\n        );\\n    }\\n\\n    function _updateSymbolPricesAndFundingRates()\\n        internal\\n        returns (int256 totalDynamicEquity, int256 totalAbsCost)\\n    {\\n        uint256 preBlockNumber = _lastUpdateBlock;\\n        uint256 curBlockNumber = block.number;\\n        totalDynamicEquity = _liquidity;\\n\\n        if (curBlockNumber > preBlockNumber) {\\n            _symbol.price = IOracle(_protocolParameters.futuresOracleAddress()).getPrice().utoi();\\n        }\\n        if (_symbol.tradersNetVolume != 0) {\\n            int256 cost = (((_symbol.tradersNetVolume * _symbol.price) / ONE) *\\n                _protocolParameters.futuresMultiplier()) / ONE;\\n            totalDynamicEquity -= cost - _symbol.tradersNetCost;\\n            totalAbsCost += cost.abs();\\n        }\\n\\n        if (curBlockNumber > preBlockNumber) {\\n            if (_symbol.tradersNetVolume != 0) {\\n                int256 ratePerBlock = (((((((((_symbol.tradersNetVolume * _symbol.price) / ONE) *\\n                    _symbol.price) / ONE) * _protocolParameters.futuresMultiplier()) / ONE) *\\n                    _protocolParameters.futuresMultiplier()) / ONE) *\\n                    _protocolParameters.futuresFundingRateCoefficient()) / totalDynamicEquity;\\n                int256 delta = ratePerBlock * int256(curBlockNumber - preBlockNumber);\\n                unchecked {\\n                    _symbol.cumulativeFundingRate += delta;\\n                }\\n            }\\n        }\\n\\n        _lastUpdateBlock = curBlockNumber;\\n    }\\n\\n    function getTraderPortfolio(address account)\\n        public\\n        view\\n        returns (IPTokenLite.Position memory position, int256 margin)\\n    {\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\n        position = pToken.getPosition(account);\\n        margin = pToken.getMargin(account);\\n    }\\n\\n    function _updateTraderPortfolio(\\n        address account,\\n        IPTokenLite.Position memory position,\\n        int256 margin\\n    ) internal {\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\n        pToken.updatePosition(account, position);\\n        pToken.updateMargin(account, margin);\\n    }\\n\\n    function _settleTraderFundingFee(address account)\\n        internal\\n        returns (IPTokenLite.Position memory position, int256 margin)\\n    {\\n        (position, margin) = getTraderPortfolio(account);\\n        int256 funding;\\n        if (position.volume != 0) {\\n            int256 cumulativeFundingRate = _symbol.cumulativeFundingRate;\\n            int256 delta;\\n            unchecked {\\n                delta = cumulativeFundingRate - position.lastCumulativeFundingRate;\\n            }\\n            funding += (position.volume * delta) / ONE;\\n\\n            position.lastCumulativeFundingRate = cumulativeFundingRate;\\n        }\\n        if (funding != 0) {\\n            margin -= funding;\\n            _liquidity += funding;\\n        }\\n    }\\n\\n    function _getTraderMarginRatio(IPTokenLite.Position memory position, int256 margin)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 totalDynamicEquity = margin;\\n        int256 totalAbsCost;\\n        if (position.volume != 0) {\\n            int256 cost = (((position.volume * _symbol.price) / ONE) *\\n                _protocolParameters.futuresMultiplier()) / ONE;\\n            totalDynamicEquity += cost - position.cost;\\n            totalAbsCost += cost.abs();\\n        }\\n        return totalAbsCost == 0 ? type(int256).max : (totalDynamicEquity * ONE) / totalAbsCost;\\n    }\\n\\n    function _deflationCompatibleSafeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 bAmount\\n    ) internal returns (uint256) {\\n        IERC20 bToken = IERC20(_bTokenAddress);\\n        uint256 balance1 = bToken.balanceOf(to);\\n        bToken.safeTransferFrom(from, to, bAmount);\\n        uint256 balance2 = bToken.balanceOf(to);\\n        return balance2 - balance1;\\n    }\\n\\n    function _transferIn(address from, uint256 bAmount) internal returns (uint256) {\\n        uint256 amount = _deflationCompatibleSafeTransferFrom(\\n            from,\\n            address(this),\\n            bAmount.rescale(18, _decimals)\\n        );\\n        return amount.rescale(_decimals, 18);\\n    }\\n\\n    function _transferOut(address to, uint256 bAmount) internal {\\n        uint256 amount = bAmount.rescale(18, _decimals);\\n        uint256 leftover = bAmount - amount.rescale(_decimals, 18);\\n        // leftover due to decimal precision is accrued to _protocolFeeAccrued\\n        _protocolFeeAccrued += leftover.utoi();\\n        IERC20(_bTokenAddress).safeTransfer(to, amount);\\n    }\\n\\n    // function migrationTimestamp() external view override returns (uint256) {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function migrationDestination() external view override returns (address) {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function prepareMigration(address target, uint256 graceDays) external override {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function approveMigration() external override {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function executeMigration(address source) override external {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function controller() external view override returns (address) {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function setNewController(address newController) external override {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function claimNewController() external override {\\n    //     // TODO: Implement\\n    // }\\n}\\n\",\"keccak256\":\"0xa3c060768e43b061de248225ae288832f20e5b6af92131322d73679e1e436074\",\"license\":\"MIT\"},\"contracts/perpetual_futures/library/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SafeMath {\\n    uint256 internal constant UMAX = 2**255 - 1;\\n    int256 internal constant IMIN = -2**255;\\n\\n    /// convert uint256 to int256\\n    function utoi(uint256 a) internal pure returns (int256) {\\n        require(a <= UMAX, \\\"UIO\\\");\\n        return int256(a);\\n    }\\n\\n    /// convert int256 to uint256\\n    function itou(int256 a) internal pure returns (uint256) {\\n        require(a >= 0, \\\"IUO\\\");\\n        return uint256(a);\\n    }\\n\\n    /// take abs of int256\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != IMIN, \\\"AO\\\");\\n        return a >= 0 ? a : -a;\\n    }\\n\\n    /// rescale a uint256 from base 10**decimals1 to 10**decimals2\\n    function rescale(\\n        uint256 a,\\n        uint256 decimals1,\\n        uint256 decimals2\\n    ) internal pure returns (uint256) {\\n        return decimals1 == decimals2 ? a : (a * (10**decimals2)) / (10**decimals1);\\n    }\\n\\n    /// rescale a int256 from base 10**decimals1 to 10**decimals2\\n    function rescale(\\n        int256 a,\\n        uint256 decimals1,\\n        uint256 decimals2\\n    ) internal pure returns (int256) {\\n        return decimals1 == decimals2 ? a : (a * utoi(10**decimals2)) / utoi(10**decimals1);\\n    }\\n\\n    /// reformat a uint256 to be a valid 10**decimals base value\\n    /// the reformatted value is still in 10**18 base\\n    function reformat(uint256 a, uint256 decimals) internal pure returns (uint256) {\\n        return decimals == 18 ? a : rescale(rescale(a, 18, decimals), decimals, 18);\\n    }\\n\\n    /// reformat a int256 to be a valid 10**decimals base value\\n    /// the reformatted value is still in 10**18 base\\n    function reformat(int256 a, uint256 decimals) internal pure returns (int256) {\\n        return decimals == 18 ? a : rescale(rescale(a, 18, decimals), decimals, 18);\\n    }\\n\\n    /// ceiling value away from zero, return a valid 10**decimals base value, but still in 10**18 based\\n    function ceil(int256 a, uint256 decimals) internal pure returns (int256) {\\n        if (reformat(a, decimals) == a) {\\n            return a;\\n        } else {\\n            int256 b = rescale(a, 18, decimals);\\n            b += a > 0 ? int256(1) : int256(-1);\\n            return rescale(b, decimals, 18);\\n        }\\n    }\\n\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 quotient = a / b;\\n        uint256 remainder = a - quotient * b;\\n        if (remainder > 0) {\\n            return quotient + 1;\\n        } else {\\n            return quotient;\\n        }\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = x / 2 + 1;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a <= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x3153674ee1bd4c7d5368abdcfab3b213a1adece4a8eb75c412df6fbbe63bd81c\",\"license\":\"MIT\"},\"contracts/polygon/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\n\\r\\ninterface IFlipCoinGenerator {\\r\\n    function generateRandom() external view returns (uint8);\\r\\n}\\r\\n\\r\\ninterface ISyntheticNFT is IERC721Metadata {\\r\\n\\r\\n    function setMetadata(uint256 tokenId,string memory metadata) external;\\r\\n\\r\\n    function isVerified(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function exists(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        string memory metadata\\r\\n    ) external;\\r\\n\\r\\n    function safeBurn(uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ninterface ICollectionManagerFactory {\\r\\n    function deploy(\\r\\n        address originalCollectionAddress_,\\r\\n        string memory name_,\\r\\n        string memory symbol_\\r\\n    ) external returns (address);\\r\\n}\\r\\n\\r\\ninterface IJot is IERC20 {\\r\\n    function uniswapV2Pair() external view returns (address);\\r\\n\\r\\n    function safeMint(address account, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IOwnable {\\r\\n    event ChangeController(address oldController, address newController);\\r\\n\\r\\n    function controller() external view returns (address);\\r\\n\\r\\n    function setNewController(address newController) external;\\r\\n\\r\\n    function claimNewController() external;\\r\\n}\\r\\n\\r\\ninterface IMigratable is IOwnable {\\r\\n    event PrepareMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    event ExecuteMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    function migrationTimestamp() external view returns (uint256);\\r\\n\\r\\n    function migrationDestination() external view returns (address);\\r\\n\\r\\n    function prepareMigration(address target, uint256 graceDays) external;\\r\\n\\r\\n    function approveMigration() external;\\r\\n\\r\\n    function executeMigration(address source) external;\\r\\n}\\r\\n\\r\\ninterface IPerpetualPoolLite {\\r\\n// struct SymbolInfo {\\r\\n//         uint256 symbolId;\\r\\n//         string symbol;\\r\\n//         address oracleAddress;\\r\\n//         int256 multiplier;\\r\\n//         int256 feeRatio;\\r\\n//         int256 fundingRateCoefficient;\\r\\n//         int256 price;\\r\\n//         int256 cumulativeFundingRate;\\r\\n//         int256 tradersNetVolume;\\r\\n//         int256 tradersNetCost;\\r\\n//     }\\r\\n\\r\\n    struct SymbolInfo {\\r\\n        int256 price;\\r\\n        int256 cumulativeFundingRate;\\r\\n        int256 tradersNetVolume;\\r\\n        int256 tradersNetCost;\\r\\n    }\\r\\n\\r\\n    struct SignedPrice {\\r\\n        uint256 timestamp;\\r\\n        uint256 price;\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n    }\\r\\n\\r\\n    event AddLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event RemoveLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event AddMargin(address indexed account, uint256 bAmount);\\r\\n\\r\\n    event RemoveMargin(address indexed account, uint256 bAmount);\\r\\n\\r\\n    event Trade(address indexed account, int256 tradeVolume, uint256 price);\\r\\n\\r\\n    event Liquidate(address indexed account, address indexed liquidator, uint256 reward);\\r\\n\\r\\n    event ProtocolFeeCollection(address indexed collector, uint256 amount);\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            int256 minPoolMarginRatio,\\r\\n            int256 minInitialMarginRatio,\\r\\n            int256 minMaintenanceMarginRatio,\\r\\n            int256 minLiquidationReward,\\r\\n            int256 maxLiquidationReward,\\r\\n            int256 liquidationCutRatio,\\r\\n            int256 protocolFeeCollectRatio\\r\\n        );\\r\\n\\r\\n    function getAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address bTokenAddress,\\r\\n            address lTokenAddress,\\r\\n            address pTokenAddress,\\r\\n            address liquidatorQualifierAddress,\\r\\n            address protocolFeeCollector,\\r\\n            address underlyingAddress,\\r\\n            address protocolAddress\\r\\n        );\\r\\n\\r\\n    function getSymbol() external view returns (SymbolInfo memory);\\r\\n\\r\\n    function getLiquidity() external view returns (int256);\\r\\n\\r\\n    function getLastUpdateBlock() external view returns (uint256);\\r\\n\\r\\n    function getProtocolFeeAccrued() external view returns (int256);\\r\\n\\r\\n    function collectProtocolFee() external;\\r\\n\\r\\n    function addLiquidity(uint256 bAmount) external;\\r\\n\\r\\n    function removeLiquidity(uint256 lShares) external;\\r\\n\\r\\n    function addMargin(uint256 bAmount) external;\\r\\n\\r\\n    function removeMargin(uint256 bAmount) external;\\r\\n\\r\\n    function trade(int256 tradeVolume) external;\\r\\n\\r\\n    function liquidate(address account) external;\\r\\n\\r\\n    function addLiquidity(uint256 bAmount, SignedPrice memory price) external;\\r\\n\\r\\n    function removeLiquidity(uint256 lShares, SignedPrice memory price) external;\\r\\n\\r\\n    function addMargin(uint256 bAmount, SignedPrice memory price) external;\\r\\n\\r\\n    function removeMargin(uint256 bAmount, SignedPrice memory price) external;\\r\\n\\r\\n    function trade(int256 tradeVolume, SignedPrice memory price) external;\\r\\n\\r\\n    function liquidate(address account, SignedPrice memory price) external;\\r\\n}\\r\\n\\r\\ninterface IPTokenLite is IERC721 {\\r\\n    struct Position {\\r\\n        // position volume, long is positive and short is negative\\r\\n        int256 volume;\\r\\n        // the cost the establish this position\\r\\n        int256 cost;\\r\\n        // the last cumulativeFundingRate since last funding settlement for this position\\r\\n        // the overflow for this value in intended\\r\\n        int256 lastCumulativeFundingRate;\\r\\n    }\\r\\n\\r\\n    event UpdateMargin(address indexed owner, int256 amount);\\r\\n\\r\\n    event UpdatePosition(address indexed owner, int256 volume, int256 cost, int256 lastCumulativeFundingRate);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function totalMinted() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function getNumPositionHolders() external view returns (uint256);\\r\\n\\r\\n    function exists(address owner) external view returns (bool);\\r\\n\\r\\n    function getMargin(address owner) external view returns (int256);\\r\\n\\r\\n    function updateMargin(address owner, int256 margin) external;\\r\\n\\r\\n    function addMargin(address owner, int256 delta) external;\\r\\n\\r\\n    function getPosition(address owner) external view returns (Position memory);\\r\\n\\r\\n    function updatePosition(address owner, Position memory position) external;\\r\\n\\r\\n    function mint(address owner) external;\\r\\n\\r\\n    function burn(address owner) external;\\r\\n}\\r\\n\\r\\ninterface ILiquidatorQualifier {\\r\\n    function isQualifiedLiquidator(address liquidator) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface ILTokenLite is IERC20 {\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    function mint(address account, uint256 amount) external;\\r\\n\\r\\n    function burn(address account, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface IOracle {\\r\\n    function getPrice() external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IOracleWithUpdate {\\r\\n    function getPrice() external returns (uint256);\\r\\n\\r\\n    function updatePrice(\\r\\n        address address_,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x80dd67aa8df65a607f12713995e20046d316c52a8ba8a430f77591ff9a2d6ae8\",\"license\":\"MIT\"},\"contracts/polygon/governance/FuturesProtocolParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\n// ! TODO: EMIT THE EVENTS AND ADD VALIDATIONS\\n\\n/**\\n * @title future parameters controlled by governance\\n * @notice the owner of this contract is the timelock controller of the governance feature\\n */\\ncontract FuturesProtocolParameters is Ownable {\\n    int256 public minPoolMarginRatio;\\n    int256 public minInitialMarginRatio;\\n    int256 public minMaintenanceMarginRatio;\\n    int256 public minLiquidationReward;\\n    int256 public maxLiquidationReward;\\n    int256 public liquidationCutRatio;\\n    int256 public protocolFeeCollectRatio;\\n    address public futuresOracleAddress;\\n    int256 public futuresMultiplier;\\n    int256 public futuresFeeRatio;\\n    int256 public futuresFundingRateCoefficient;\\n    uint256 public oracleDelay;\\n\\n    event MinPoolMarginRatioUpdated(address value);\\n    event MinInitialMarginRatioUpdated(address value);\\n    event MinMaintenanceMarginRatioUpdated(address value);\\n    event MinLiquidationRewardUpdated(address value);\\n    event MaxLiquidationRewardUpdated(address value);\\n    event LiquidationCutRatioUpdated(address value);\\n    event ProtocolFeeCollectRatioUpdated(address value);\\n    event OracleDelayUpdated(address value);\\n    event FuturesOracleAddressUpdated(address value);\\n    event FuturesMultiplierUpdated(int256 value);\\n    event FuturesFeeRatioUpdated(int256 value);\\n    event FuturesFundingRateCoefficientUpdated(int256 value);\\n\\n    /**\\n     * @dev set initial state of the data\\n     */\\n    constructor(\\n        MainParams memory mainParams,\\n        address _futuresOracleAddress,\\n        int256 _futuresMultiplier,\\n        int256 _futuresFeeRatio,\\n        int256 _futuresFundingRateCoefficient,\\n        uint256 _oracleDelay,\\n        address _governanceContractAddress\\n    ) {\\n        require(_futuresOracleAddress != address(0), \\\"Oracle address can't be zero\\\");\\n        require(_futuresMultiplier > 0, \\\"Invalid futures multiplier\\\");\\n        require(_futuresFeeRatio > 0, \\\"Invalid futures fee ratio\\\");\\n        require(_futuresFundingRateCoefficient > 0, \\\"Invalid futures funding rate coefficient\\\");\\n\\n        minPoolMarginRatio = mainParams.minPoolMarginRatio;\\n        minInitialMarginRatio = mainParams.minInitialMarginRatio;\\n        minMaintenanceMarginRatio = mainParams.minMaintenanceMarginRatio;\\n        minLiquidationReward = mainParams.minLiquidationReward;\\n        maxLiquidationReward = mainParams.maxLiquidationReward;\\n        liquidationCutRatio = mainParams.liquidationCutRatio;\\n        protocolFeeCollectRatio = mainParams.protocolFeeCollectRatio;\\n        futuresOracleAddress = _futuresOracleAddress;\\n        futuresMultiplier = _futuresMultiplier;\\n        futuresFeeRatio = _futuresFeeRatio;\\n        futuresFundingRateCoefficient = _futuresFundingRateCoefficient;\\n        oracleDelay = _oracleDelay;\\n\\n        // transfer ownership\\n        transferOwnership(_governanceContractAddress);\\n    }\\n\\n    function setMinPoolMarginRatio(int256 _minPoolMarginRatio) external onlyOwner {\\n        minPoolMarginRatio = _minPoolMarginRatio;\\n    }\\n\\n    function setMinInitialMarginRatio(int256 _minInitialMarginRatio) external onlyOwner {\\n        minInitialMarginRatio = _minInitialMarginRatio;\\n    }\\n\\n    function setMinMaintenanceMarginRatio(int256 _minMaintenanceMarginRatio) external onlyOwner {\\n        minMaintenanceMarginRatio = _minMaintenanceMarginRatio;\\n    }\\n\\n    function setMinLiquidationReward(int256 _minLiquidationReward) external onlyOwner {\\n        minLiquidationReward = _minLiquidationReward;\\n    }\\n\\n    function setMaxLiquidationReward(int256 _maxLiquidationReward) external onlyOwner {\\n        maxLiquidationReward = _maxLiquidationReward;\\n    }\\n\\n    function setLiquidationCutRatio(int256 _liquidationCutRatio) external onlyOwner {\\n        liquidationCutRatio = _liquidationCutRatio;\\n    }\\n\\n    function setProtocolFeeCollectRatio(int256 _protocolFeeCollectRatio) external onlyOwner {\\n        protocolFeeCollectRatio = _protocolFeeCollectRatio;\\n    }\\n\\n    function setFuturesOracleAddress(address futuresOracleAddress_) external onlyOwner {\\n        require(futuresOracleAddress_ != address(0), \\\"Oracle address can't be zero\\\");\\n        futuresOracleAddress = futuresOracleAddress_;\\n        emit FuturesOracleAddressUpdated(futuresOracleAddress_);\\n    }\\n\\n    function setFuturesMultiplier(int256 futuresMultiplier_) external onlyOwner {\\n        require(futuresMultiplier_ > 1 hours, \\\"Invalid futures multiplier\\\");\\n        futuresMultiplier = futuresMultiplier_;\\n        emit FuturesMultiplierUpdated(futuresMultiplier_);\\n    }\\n\\n    function setFuturesFeeRatio(int256 futuresFeeRatio_) external onlyOwner {\\n        require(futuresFeeRatio_ > 1 hours, \\\"Invalid futures fee ratio\\\");\\n        futuresFeeRatio = futuresFeeRatio_;\\n        emit FuturesFeeRatioUpdated(futuresFeeRatio_);\\n    }\\n\\n    function setFuturesFundingRateCoefficient(int256 futuresFundingRateCoefficient_) external onlyOwner {\\n        require(futuresFundingRateCoefficient_ > 1 hours, \\\"Invalid futures funding rate coefficient\\\");\\n        futuresFundingRateCoefficient = futuresFundingRateCoefficient_;\\n        emit FuturesFundingRateCoefficientUpdated(futuresFundingRateCoefficient_);\\n    }\\n\\n    function setOracleDelay(uint256 _oracleDelay) external onlyOwner {\\n        oracleDelay = _oracleDelay;\\n    }\\n}\\n\",\"keccak256\":\"0xd3f796ece8ad60835d27c94ea9e048c7b2351ab3e89f4cbd761ebfb7cd672996\",\"license\":\"MIT\"},\"contracts/polygon/governance/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct MainParams {\\n    int256 minPoolMarginRatio;\\n    int256 minInitialMarginRatio;\\n    int256 minMaintenanceMarginRatio;\\n    int256 minLiquidationReward;\\n    int256 maxLiquidationReward;\\n    int256 liquidationCutRatio;\\n    int256 protocolFeeCollectRatio;\\n}\\n\",\"keccak256\":\"0x8121a2f034679ec2a98fe3d5906979582191b29ce6f15343e3096591cb06bb69\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003c9738038062003c97833981016040819052620000349162000074565b80516001600160601b0319606091821b81166080529151901b1660a0526200011f565b80516001600160a01b03811681146200006f57600080fd5b919050565b60006040828403121562000086578081fd5b82601f83011262000095578081fd5b604080519081016001600160401b0381118282101715620000ba57620000ba62000109565b8060405250808385604086011115620000d1578384fd5b835b6002811015620000fe57620000e88262000057565b83526020928301929190910190600101620000d3565b509195945050505050565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160601c613a9662000201600039600081816107b401528181610845015281816108d601528181610967015281816109f801528181610a8901528181610b1a01528181610e140152818161105e0152818161120b01528181611377015281816114ad0152818161158e01528181611623015281816116de0152818161194801528181611a1701528181611cc101528181611dca01528181611ed5015281816124cd015281816127ee0152818161290d01528181612a1b01528181612ab501528181612b4f0152612d4e015260006102880152613a966000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063a39fac12116100b8578063d608c07d1161007c578063d608c07d14610322578063de61838c1461032a578063dfd198981461033d578063f11f854f1461035a578063f12c9f0e1461036d578063fcd33b51146103a757600080fd5b8063a39fac121461023b578063a43be948146102b7578063a5ea11da146102ca578063b5d4034514610307578063caa4b46a1461031a57600080fd5b80633dc07fda1161010a5780633dc07fda146101c957806351c6590a146101dc5780635756e84c146101ef57806375fe9c7f146102025780637a2e87aa146102155780639c8f9f231461022857600080fd5b806307e2ee0f146101475780630910a5101461015e57806314e841b914610166578063150704011461017b5780632f865568146101b6575b600080fd5b6009545b6040519081526020015b60405180910390f35b60085461014b565b61017961017436600461353c565b6103ba565b005b6101836103fa565b60405161015591908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6101796101c43660046133f3565b610452565b6101796101d736600461350c565b61050a565b6101796101ea36600461350c565b61055d565b6101796101fd36600461353c565b610587565b61017961021036600461353c565b6105ba565b610179610223366004613460565b6105ed565b61017961023636600461350c565b610728565b600254600354600454600554600654600754604080516001600160a01b039788168152958716602087015293861693850193909352908416606084015283166080830152821660a08201527f000000000000000000000000000000000000000000000000000000000000000090911660c082015260e001610155565b6101796102c536600461350c565b61077d565b6102d26107a7565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610155565b61017961031536600461353c565b610bbf565b610179610c1d565b600a5461014b565b61017961033836600461342b565b610d43565b610345610e09565b60408051928352602083019190915201610155565b61017961036836600461350c565b610eab565b61038061037b3660046133f3565b610ed5565b60408051835181526020808501519082015292810151908301526060820152608001610155565b6101796103b536600461353c565b611003565b600082116103e35760405162461bcd60e51b81526004016103da9061367c565b60405180910390fd5b6103ec8161105c565b6103f63383611188565b5050565b6104256040518060800160405280600081526020016000815260200160008152602001600081525090565b5060408051608081018252600b548152600c546020820152600d5491810191909152600e54606082015290565b60055433906001600160a01b031615806104e457506005546040516337c203bd60e21b81526001600160a01b0383811660048301529091169063df080ef49060240160206040518083038186803b1580156104ac57600080fd5b505afa1580156104c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e491906134ec565b6105005760405162461bcd60e51b81526004016103da906136b3565b6103f6818361132b565b8015801590610534575080670de0b6b3a7640000610528818361379e565b61053291906138cb565b145b6105505760405162461bcd60e51b81526004016103da9061363a565b61055a338261188e565b50565b6000811161057d5760405162461bcd60e51b81526004016103da9061367c565b61055a3382611ffc565b600082116105a75760405162461bcd60e51b81526004016103da9061367c565b6105b08161105c565b6103f633836121d9565b600082116105da5760405162461bcd60e51b81526004016103da9061367c565b6105e38161105c565b6103f63383611ffc565b600054610100900460ff1680610606575060005460ff16155b6106695760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103da565b600054610100900460ff1615801561068b576000805461ffff19166101011790555b8151600280546001600160a01b03199081166001600160a01b0393841617909155602084015160038054831691841691909117905560408401516004805483169184169190911790556060840151600580548316918416919091179055608084015160068054831691841691909117815560a085015160078054909316931692909217905560015580156103f6576000805461ff00191690555050565b600081116107735760405162461bcd60e51b815260206004820152601860248201527750657270657475616c506f6f6c3a2030206c53686172657360401b60448201526064016103da565b61055a33826123bf565b6000811161079d5760405162461bcd60e51b81526004016103da9061367c565b61055a33826121d9565b60008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c42243c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561080b57600080fd5b505afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190613524565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638ac848ca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561089c57600080fd5b505afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d49190613524565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630adf8e926040518163ffffffff1660e01b815260040160206040518083038186803b15801561092d57600080fd5b505afa158015610941573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109659190613524565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddd18d306040518163ffffffff1660e01b815260040160206040518083038186803b1580156109be57600080fd5b505afa1580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f69190613524565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab78ace46040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4f57600080fd5b505afa158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a879190613524565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166346d2d2d86040518163ffffffff1660e01b815260040160206040518083038186803b158015610ae057600080fd5b505afa158015610af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b189190613524565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94835646040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7157600080fd5b505afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190613524565b959d949c50929a50909850965094509092509050565b60008211610c0a5760405162461bcd60e51b815260206004820152601860248201527750657270657475616c506f6f6c3a2030206c53686172657360401b60448201526064016103da565b610c138161105c565b6103f633836123bf565b6001546002546040516370a0823160e01b8152306004820152600092610cac9290916012916001600160a01b0316906370a082319060240160206040518083038186803b158015610c6d57600080fd5b505afa158015610c81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca59190613524565b9190612699565b90506000610cbb600a546126dd565b905081811115610cc85750805b610cd181612719565b600a6000828254610ce2919061396d565b9091555050600654610cfd906001600160a01b031682612758565b6006546040518281526001600160a01b03909116907fdc9b9c7c232fac9d635ce55b58e41cca2c16aa6ad39a73973ce276d479ad6f2d9060200160405180910390a25050565b60055433906001600160a01b03161580610dd557506005546040516337c203bd60e21b81526001600160a01b0383811660048301529091169063df080ef49060240160206040518083038186803b158015610d9d57600080fd5b505afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd591906134ec565b610df15760405162461bcd60e51b81526004016103da906136b3565b610dfa8261105c565b610e04818461132b565b505050565b600080600b600001547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6b57600080fd5b505afa158015610e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea39190613524565b915091509091565b60008111610ecb5760405162461bcd60e51b81526004016103da9061367c565b61055a3382611188565b610ef960405180606001604052806000815260200160008152602001600081525090565b600480546040516316c1973960e01b81526001600160a01b03858116938201939093526000929091169081906316c197399060240160606040518083038186803b158015610f4657600080fd5b505afa158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e919061355f565b604051637c27c4d160e11b81526001600160a01b0386811660048301529194509082169063f84f89a29060240160206040518083038186803b158015610fc357600080fd5b505afa158015610fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffb9190613524565b915050915091565b811580159061102d575081670de0b6b3a7640000611021818361379e565b61102b91906138cb565b145b6110495760405162461bcd60e51b81526004016103da9061363a565b6110528161105c565b6103f6338361188e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636bb9e4cb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b557600080fd5b505afa1580156110c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ed919061340f565b6007548251602084015160408086015160608701516080880151925162da15e960e71b81526001600160a01b0396871660048201526024810195909552604485019390935260ff166064840152608483019190915260a4820152911690636d0af4809060c401600060405180830381600087803b15801561116d57600080fd5b505af1158015611181573d6000803e3d6000fd5b5050505050565b600f5460ff16156111ab5760405162461bcd60e51b81526004016103da9061373c565b600f805460ff191660011790556111c06127d6565b50506000806111ce84612c82565b9150915060006111dd84612719565b90508181126111fc5750806111f1816126dd565b935060009150611209565b611206818361396d565b91505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638ac848ca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561126257600080fd5b505afa158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190613524565b6112a48484612d33565b12156112c25760405162461bcd60e51b81526004016103da906136fa565b6112cd858484612e84565b6112d78585612758565b846001600160a01b03167f318a9cd646c737e6331915189b674d6d06ae71b28df0f50e7a6dfe101a1293878560405161131291815260200190565b60405180910390a25050600f805460ff19169055505050565b600f5460ff161561134e5760405162461bcd60e51b81526004016103da9061373c565b600f805460ff191660011790556113636127d6565b505060008061137183612c82565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630adf8e926040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ce57600080fd5b505afa1580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114069190613524565b6114108383612d33565b1261145d5760405162461bcd60e51b815260206004820152601f60248201527f50657270657475616c506f6f6c3a2063616e6e6f74206c69717569646174650060448201526064016103da565b8151819015611589578251600d805460009061147a90849061396d565b90915550506020830151600e805460009061149690849061396d565b925050819055508260200151670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b15801561150457600080fd5b505afa158015611518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153c9190613524565b600b548651670de0b6b3a764000091611554916138cb565b61155e919061379e565b61156891906138cb565b611572919061379e565b61157c919061396d565b611586908261375d565b90505b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddd18d306040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e557600080fd5b505afa1580156115f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161d9190613524565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab78ace46040518163ffffffff1660e01b815260040160206040518083038186803b15801561167a57600080fd5b505afa15801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b29190613524565b90508184136116c357819250611798565b8084126116d257809250611798565b81670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166346d2d2d86040518163ffffffff1660e01b815260040160206040518083038186803b15801561173557600080fd5b505afa158015611749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176d9190613524565b611777858861396d565b61178191906138cb565b61178b919061379e565b611795919061375d565b92505b6117a2838661396d565b600860008282546117b3919061375d565b90915550506004805460405163226bf2d160e21b81526001600160a01b038a8116938201939093529116906389afcb4490602401600060405180830381600087803b15801561180157600080fd5b505af1158015611815573d6000803e3d6000fd5b5050505061182b88611826856126dd565b612758565b876001600160a01b0316876001600160a01b03167faef3faf684172084346f7dc2cc3bb1328d1cc23caec12dd9a82d4a4e56c00b17611869866126dd565b60405190815260200160405180910390a35050600f805460ff19169055505050505050565b600f5460ff16156118b15760405162461bcd60e51b81526004016103da9061373c565b600f805460ff191660011790556000806118c96127d6565b915091506000806118d986612c82565b9150915061191d6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600d548152600b54602080830191909152604080516333f359d160e21b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263cfcd67449260048082019391829003018186803b15801561198a57600080fd5b505afa15801561199e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c29190613524565b604082018190526020820151670de0b6b3a7640000919082906119e5908a6138cb565b6119ef919061379e565b6119f991906138cb565b611a03919061379e565b816060018181525050670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638b3415b96040518163ffffffff1660e01b815260040160206040518083038186803b158015611a6e57600080fd5b505afa158015611a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa69190613524565b611ab38360600151612f51565b611abd91906138cb565b611ac7919061379e565b60808201528251600013801590611adf575060008612155b158015611afc57508251600012801590611afa575060008613155b155b15611b8d576000611b108460000151612f51565b90506000611b1d88612f51565b9050808213611b5a57846020015181838560600151611b3c91906138cb565b611b46919061379e565b611b50919061375d565b60a0840152611b8a565b826060015182828760200151611b7091906138cb565b611b7a919061379e565b611b84919061375d565b60a08401525b50505b670de0b6b3a76400008160400151670de0b6b3a76400008360200151611bb68560000151612f51565b8551611bcc90611bc7908d9061375d565b612f51565b611bd6919061396d565b611be091906138cb565b611bea919061379e565b611bf491906138cb565b611bfe919061379e565b611c08908561375d565b93508583600001818151611c1c919061375d565b90525060a08101516060820151611c33919061396d565b83602001818151611c44919061375d565b905250600c54604084015260a08101516080820151611c63919061375d565b611c6d908361396d565b915085600b6002016000828254611c84919061375d565b909155505060a08101516060820151611c9d919061396d565b600e8054600090611caf90849061375d565b92505081905550670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94835646040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1857600080fd5b505afa158015611d2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d509190613524565b8260800151611d5f91906138cb565b611d69919061379e565b60c08201819052600a8054600090611d8290849061375d565b909155505060a081015160c08201516080830151611da0919061396d565b611daa919061375d565b60086000828254611dbb919061375d565b9091555050831580611e7957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c42243c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611e2157600080fd5b505afa158015611e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e599190613524565b84611e6c670de0b6b3a7640000886138cb565b611e76919061379e565b12155b611ed35760405162461bcd60e51b815260206004820152602560248201527f50657270657475616c506f6f6c3a20696e73756666696369656e74206c697175604482015264696469747960d81b60648201526084016103da565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638ac848ca6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f2c57600080fd5b505afa158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f649190613524565b611f6e8484612d33565b1215611f8c5760405162461bcd60e51b81526004016103da906136fa565b611f97878484612e84565b866001600160a01b03167fe9b9a6b9b3b7df275a3b89328628d89ee68f326bff47da3b67e7e56a5eeead9f87611fd084602001516126dd565b604080519283526020830191909152015b60405180910390a25050600f805460ff191690555050505050565b600f5460ff161561201f5760405162461bcd60e51b81526004016103da9061373c565b600f805460ff1916600117905560006120366127d6565b5090506120438383612f9e565b91506000600360009054906101000a90046001600160a01b031690506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561209a57600080fd5b505afa1580156120ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d29190613524565b90506000816120e2575083612102565b6120eb846126dd565b6120f5838761394e565b6120ff91906137cc565b90505b6040516340c10f1960e01b81526001600160a01b038781166004830152602482018390528416906340c10f1990604401600060405180830381600087803b15801561214c57600080fd5b505af1158015612160573d6000803e3d6000fd5b5050505061216d85612719565b6008600082825461217e919061375d565b909155505060408051828152602081018790526001600160a01b038816917f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca910160405180910390a25050600f805460ff1916905550505050565b600f5460ff16156121fc5760405162461bcd60e51b81526004016103da9061373c565b600f805460ff191660011790556122138282612f9e565b60048054604051637b51e92760e11b81526001600160a01b03868116938201939093529293501690819063f6a3d24e9060240160206040518083038186803b15801561225e57600080fd5b505afa158015612272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229691906134ec565b6122f6576040516335313c2160e11b81526001600160a01b038481166004830152821690636a62784290602401600060405180830381600087803b1580156122dd57600080fd5b505af11580156122f1573d6000803e3d6000fd5b505050505b806001600160a01b031663ac2681c68461230f85612719565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561235557600080fd5b505af1158015612369573d6000803e3d6000fd5b50505050826001600160a01b03167f278e696bd0cd4a7d1260ced26c40cd01c2b088f441889e4148240ac81069b348836040516123a891815260200190565b60405180910390a25050600f805460ff1916905550565b600f5460ff16156123e25760405162461bcd60e51b81526004016103da9061373c565b600f805460ff191660011790556000806123fa6127d6565b600354604080516318160ddd60e01b815290519395509193506001600160a01b03169160009183916318160ddd91600480820192602092909190829003018186803b15801561244857600080fd5b505afa15801561245c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124809190613524565b905060008161248e866126dd565b612498908861394e565b6124a291906137cc565b90506124ad81612719565b600860008282546124be919061396d565b909155505083158061259057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c42243c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561252457600080fd5b505afa158015612538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255c9190613524565b84670de0b6b3a764000061256f84612719565b612579908961396d565b61258391906138cb565b61258d919061379e565b12155b6125ec5760405162461bcd60e51b815260206004820152602760248201527f50657270657475616c506f6f6c3a20706f6f6c20696e73756666696369656e746044820152661036b0b933b4b760c91b60648201526084016103da565b604051632770a7eb60e21b81526001600160a01b03888116600483015260248201889052841690639dc29fac90604401600060405180830381600087803b15801561263657600080fd5b505af115801561264a573d6000803e3d6000fd5b505050506126588782612758565b60408051878152602081018390526001600160a01b038916917f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e89101611fe1565b60008183146126d1576126ad83600a613823565b6126b883600a613823565b6126c2908661394e565b6126cc91906137cc565b6126d3565b835b90505b9392505050565b6000808212156127155760405162461bcd60e51b815260206004820152600360248201526249554f60e81b60448201526064016103da565b5090565b60006001600160ff1b038211156127155760405162461bcd60e51b815260206004820152600360248201526255494f60e81b60448201526064016103da565b60006127726012600154846126999092919063ffffffff16565b9050600061278e6001546012846126999092919063ffffffff16565b61279890846139ac565b90506127a381612719565b600a60008282546127b4919061375d565b90915550506002546127d0906001600160a01b03168584612fde565b50505050565b6009546008549060009043818111156128f8576128f47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636bb9e4cb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561284557600080fd5b505afa158015612859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287d919061340f565b6001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156128b757600080fd5b505af11580156128cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ef9190613524565b612719565b600b555b600d5415612a06576000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b15801561296457600080fd5b505afa158015612978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299c9190613524565b600b54600d54670de0b6b3a7640000916129b5916138cb565b6129bf919061379e565b6129c991906138cb565b6129d3919061379e565b600e549091506129e3908261396d565b6129ed908661396d565b94506129f881612f51565b612a02908561375d565b9350505b81811115612c7a57600d5415612c7a576000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e7a06ffe6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a7257600080fd5b505afa158015612a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aaa9190613524565b670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b158015612b0c57600080fd5b505afa158015612b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b449190613524565b670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b158015612ba657600080fd5b505afa158015612bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bde9190613524565b600b54600d54670de0b6b3a764000091908290612bfc9083906138cb565b612c06919061379e565b612c1091906138cb565b612c1a919061379e565b612c2491906138cb565b612c2e919061379e565b612c3891906138cb565b612c42919061379e565b612c4c91906138cb565b612c56919061379e565b90506000612c6484846139ac565b612c6e90836138cb565b600c8054909101905550505b600955509091565b612ca660405180606001604052806000815260200160008152602001600081525090565b6000612cb183610ed5565b8151919350915060009015612d0357600c546040840151845190820390670de0b6b3a764000090612ce39083906138cb565b612ced919061379e565b612cf7908461375d565b60408601929092525090505b8015612d2d57612d13818361396d565b91508060086000828254612d27919061375d565b90915550505b50915091565b81516000908290829015612e48576000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b158015612da557600080fd5b505afa158015612db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddd9190613524565b600b548851670de0b6b3a764000091612df5916138cb565b612dff919061379e565b612e0991906138cb565b612e13919061379e565b9050856020015181612e25919061396d565b612e2f908461375d565b9250612e3a81612f51565b612e44908361375d565b9150505b8015612e705780612e61670de0b6b3a7640000846138cb565b612e6b919061379e565b612e79565b6001600160ff1b035b925050505b92915050565b600480546040516388f74d0960e01b81526001600160a01b039091169182916388f74d0991612eb79188918891016135d6565b600060405180830381600087803b158015612ed157600080fd5b505af1158015612ee5573d6000803e3d6000fd5b5050604051631a9c941f60e01b81526001600160a01b0387811660048301526024820186905284169250631a9c941f9150604401600060405180830381600087803b158015612f3357600080fd5b505af1158015612f47573d6000803e3d6000fd5b5050505050505050565b6000600160ff1b821415612f8c5760405162461bcd60e51b8152602060048201526002602482015261414f60f01b60448201526064016103da565b600082121561271557612e7e826139ef565b600080612fc38430612fbe6012600154886126999092919063ffffffff16565b613041565b600154909150612fd69082906012612699565b949350505050565b6040516001600160a01b038316602482015260448101829052610e0490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261316e565b6002546040516370a0823160e01b81526001600160a01b0384811660048301526000921690829082906370a082319060240160206040518083038186803b15801561308b57600080fd5b505afa15801561309f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c39190613524565b90506130da6001600160a01b038316878787613240565b6040516370a0823160e01b81526001600160a01b038681166004830152600091908416906370a082319060240160206040518083038186803b15801561311f57600080fd5b505afa158015613133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131579190613524565b905061316382826139ac565b979650505050505050565b60006131c3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132789092919063ffffffff16565b805190915015610e0457808060200190518101906131e191906134ec565b610e045760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103da565b6040516001600160a01b03808516602483015283166044820152606481018290526127d09085906323b872dd60e01b9060840161300a565b60606126d3848460008585843b6132d15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103da565b600080866001600160a01b031685876040516132ed91906135ba565b60006040518083038185875af1925050503d806000811461332a576040519150601f19603f3d011682016040523d82523d6000602084013e61332f565b606091505b5091509150613163828286606083156133495750816126d6565b8251156133595782518084602001fd5b8160405162461bcd60e51b81526004016103da9190613607565b600060a08284031215613384578081fd5b60405160a0810181811067ffffffffffffffff821117156133a7576133a7613a35565b80604052508091508235815260208301356020820152604083013560ff811681146133d157600080fd5b8060408301525060608301356060820152608083013560808201525092915050565b600060208284031215613404578081fd5b81356126d681613a4b565b600060208284031215613420578081fd5b81516126d681613a4b565b60008060c0838503121561343d578081fd5b823561344881613a4b565b91506134578460208501613373565b90509250929050565b600060c08284031215613471578081fd5b82601f83011261347f578081fd5b60405160c0810181811067ffffffffffffffff821117156134a2576134a2613a35565b604052808360c081018610156134b6578384fd5b835b60068110156134e15781356134cc81613a4b565b835260209283019291909101906001016134b8565b509195945050505050565b6000602082840312156134fd578081fd5b815180151581146126d6578182fd5b60006020828403121561351d578081fd5b5035919050565b600060208284031215613535578081fd5b5051919050565b60008060c0838503121561354e578182fd5b823591506134578460208501613373565b600060608284031215613570578081fd5b6040516060810181811067ffffffffffffffff8211171561359357613593613a35565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600082516135cc8184602087016139c3565b9190910192915050565b6001600160a01b0383168152608081016126d660208301848051825260208082015190830152604090810151910152565b60208152600082518060208401526136268160408501602087016139c3565b601f01601f19169190910160400192915050565b60208082526022908201527f50657270657475616c506f6f6c3a20696e76616c6964207472616465566f6c756040820152616d6560f01b606082015260800190565b60208082526018908201527f50657270657475616c506f6f6c3a20302062416d6f756e740000000000000000604082015260600190565b60208082526027908201527f50657270657475616c506f6f6c3a206e6f74207175616c6966696564206c69716040820152663ab4b230ba37b960c91b606082015260800190565b60208082526022908201527f50657270657475616c506f6f6c3a20696e73756666696369656e74206d61726760408201526134b760f11b606082015260800190565b6020808252600790820152667265656e74727960c81b604082015260600190565b600080821280156001600160ff1b038490038513161561377f5761377f613a09565b600160ff1b839003841281161561379857613798613a09565b50500190565b6000826137ad576137ad613a1f565b600160ff1b8214600019841416156137c7576137c7613a09565b500590565b6000826137db576137db613a1f565b500490565b600181815b8085111561381b57816000190482111561380157613801613a09565b8085161561380e57918102915b93841c93908002906137e5565b509250929050565b60006126d6838360008261383957506001612e7e565b8161384657506000612e7e565b816001811461385c576002811461386657613882565b6001915050612e7e565b60ff84111561387757613877613a09565b50506001821b612e7e565b5060208310610133831016604e8410600b84101617156138a5575081810a612e7e565b6138af83836137e0565b80600019048211156138c3576138c3613a09565b029392505050565b60006001600160ff1b03818413828413808216868404861116156138f1576138f1613a09565b600160ff1b8487128281168783058912161561390f5761390f613a09565b85871292508782058712848416161561392a5761392a613a09565b8785058712818416161561394057613940613a09565b505050929093029392505050565b600081600019048311821515161561396857613968613a09565b500290565b60008083128015600160ff1b85018412161561398b5761398b613a09565b6001600160ff1b03840183138116156139a6576139a6613a09565b50500390565b6000828210156139be576139be613a09565b500390565b60005b838110156139de5781810151838201526020016139c6565b838111156127d05750506000910152565b6000600160ff1b821415613a0557613a05613a09565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461055a57600080fdfea2646970667358221220d2d0aa2881065336d815e889f2048a62fce2f26cf62fc39cca1b9e352c7394f664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c8063a39fac12116100b8578063d608c07d1161007c578063d608c07d14610322578063de61838c1461032a578063dfd198981461033d578063f11f854f1461035a578063f12c9f0e1461036d578063fcd33b51146103a757600080fd5b8063a39fac121461023b578063a43be948146102b7578063a5ea11da146102ca578063b5d4034514610307578063caa4b46a1461031a57600080fd5b80633dc07fda1161010a5780633dc07fda146101c957806351c6590a146101dc5780635756e84c146101ef57806375fe9c7f146102025780637a2e87aa146102155780639c8f9f231461022857600080fd5b806307e2ee0f146101475780630910a5101461015e57806314e841b914610166578063150704011461017b5780632f865568146101b6575b600080fd5b6009545b6040519081526020015b60405180910390f35b60085461014b565b61017961017436600461353c565b6103ba565b005b6101836103fa565b60405161015591908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6101796101c43660046133f3565b610452565b6101796101d736600461350c565b61050a565b6101796101ea36600461350c565b61055d565b6101796101fd36600461353c565b610587565b61017961021036600461353c565b6105ba565b610179610223366004613460565b6105ed565b61017961023636600461350c565b610728565b600254600354600454600554600654600754604080516001600160a01b039788168152958716602087015293861693850193909352908416606084015283166080830152821660a08201527f000000000000000000000000000000000000000000000000000000000000000090911660c082015260e001610155565b6101796102c536600461350c565b61077d565b6102d26107a7565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610155565b61017961031536600461353c565b610bbf565b610179610c1d565b600a5461014b565b61017961033836600461342b565b610d43565b610345610e09565b60408051928352602083019190915201610155565b61017961036836600461350c565b610eab565b61038061037b3660046133f3565b610ed5565b60408051835181526020808501519082015292810151908301526060820152608001610155565b6101796103b536600461353c565b611003565b600082116103e35760405162461bcd60e51b81526004016103da9061367c565b60405180910390fd5b6103ec8161105c565b6103f63383611188565b5050565b6104256040518060800160405280600081526020016000815260200160008152602001600081525090565b5060408051608081018252600b548152600c546020820152600d5491810191909152600e54606082015290565b60055433906001600160a01b031615806104e457506005546040516337c203bd60e21b81526001600160a01b0383811660048301529091169063df080ef49060240160206040518083038186803b1580156104ac57600080fd5b505afa1580156104c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e491906134ec565b6105005760405162461bcd60e51b81526004016103da906136b3565b6103f6818361132b565b8015801590610534575080670de0b6b3a7640000610528818361379e565b61053291906138cb565b145b6105505760405162461bcd60e51b81526004016103da9061363a565b61055a338261188e565b50565b6000811161057d5760405162461bcd60e51b81526004016103da9061367c565b61055a3382611ffc565b600082116105a75760405162461bcd60e51b81526004016103da9061367c565b6105b08161105c565b6103f633836121d9565b600082116105da5760405162461bcd60e51b81526004016103da9061367c565b6105e38161105c565b6103f63383611ffc565b600054610100900460ff1680610606575060005460ff16155b6106695760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103da565b600054610100900460ff1615801561068b576000805461ffff19166101011790555b8151600280546001600160a01b03199081166001600160a01b0393841617909155602084015160038054831691841691909117905560408401516004805483169184169190911790556060840151600580548316918416919091179055608084015160068054831691841691909117815560a085015160078054909316931692909217905560015580156103f6576000805461ff00191690555050565b600081116107735760405162461bcd60e51b815260206004820152601860248201527750657270657475616c506f6f6c3a2030206c53686172657360401b60448201526064016103da565b61055a33826123bf565b6000811161079d5760405162461bcd60e51b81526004016103da9061367c565b61055a33826121d9565b60008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c42243c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561080b57600080fd5b505afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190613524565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638ac848ca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561089c57600080fd5b505afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d49190613524565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630adf8e926040518163ffffffff1660e01b815260040160206040518083038186803b15801561092d57600080fd5b505afa158015610941573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109659190613524565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddd18d306040518163ffffffff1660e01b815260040160206040518083038186803b1580156109be57600080fd5b505afa1580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f69190613524565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab78ace46040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4f57600080fd5b505afa158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a879190613524565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166346d2d2d86040518163ffffffff1660e01b815260040160206040518083038186803b158015610ae057600080fd5b505afa158015610af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b189190613524565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94835646040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7157600080fd5b505afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190613524565b959d949c50929a50909850965094509092509050565b60008211610c0a5760405162461bcd60e51b815260206004820152601860248201527750657270657475616c506f6f6c3a2030206c53686172657360401b60448201526064016103da565b610c138161105c565b6103f633836123bf565b6001546002546040516370a0823160e01b8152306004820152600092610cac9290916012916001600160a01b0316906370a082319060240160206040518083038186803b158015610c6d57600080fd5b505afa158015610c81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca59190613524565b9190612699565b90506000610cbb600a546126dd565b905081811115610cc85750805b610cd181612719565b600a6000828254610ce2919061396d565b9091555050600654610cfd906001600160a01b031682612758565b6006546040518281526001600160a01b03909116907fdc9b9c7c232fac9d635ce55b58e41cca2c16aa6ad39a73973ce276d479ad6f2d9060200160405180910390a25050565b60055433906001600160a01b03161580610dd557506005546040516337c203bd60e21b81526001600160a01b0383811660048301529091169063df080ef49060240160206040518083038186803b158015610d9d57600080fd5b505afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd591906134ec565b610df15760405162461bcd60e51b81526004016103da906136b3565b610dfa8261105c565b610e04818461132b565b505050565b600080600b600001547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6b57600080fd5b505afa158015610e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea39190613524565b915091509091565b60008111610ecb5760405162461bcd60e51b81526004016103da9061367c565b61055a3382611188565b610ef960405180606001604052806000815260200160008152602001600081525090565b600480546040516316c1973960e01b81526001600160a01b03858116938201939093526000929091169081906316c197399060240160606040518083038186803b158015610f4657600080fd5b505afa158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e919061355f565b604051637c27c4d160e11b81526001600160a01b0386811660048301529194509082169063f84f89a29060240160206040518083038186803b158015610fc357600080fd5b505afa158015610fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffb9190613524565b915050915091565b811580159061102d575081670de0b6b3a7640000611021818361379e565b61102b91906138cb565b145b6110495760405162461bcd60e51b81526004016103da9061363a565b6110528161105c565b6103f6338361188e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636bb9e4cb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b557600080fd5b505afa1580156110c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ed919061340f565b6007548251602084015160408086015160608701516080880151925162da15e960e71b81526001600160a01b0396871660048201526024810195909552604485019390935260ff166064840152608483019190915260a4820152911690636d0af4809060c401600060405180830381600087803b15801561116d57600080fd5b505af1158015611181573d6000803e3d6000fd5b5050505050565b600f5460ff16156111ab5760405162461bcd60e51b81526004016103da9061373c565b600f805460ff191660011790556111c06127d6565b50506000806111ce84612c82565b9150915060006111dd84612719565b90508181126111fc5750806111f1816126dd565b935060009150611209565b611206818361396d565b91505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638ac848ca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561126257600080fd5b505afa158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190613524565b6112a48484612d33565b12156112c25760405162461bcd60e51b81526004016103da906136fa565b6112cd858484612e84565b6112d78585612758565b846001600160a01b03167f318a9cd646c737e6331915189b674d6d06ae71b28df0f50e7a6dfe101a1293878560405161131291815260200190565b60405180910390a25050600f805460ff19169055505050565b600f5460ff161561134e5760405162461bcd60e51b81526004016103da9061373c565b600f805460ff191660011790556113636127d6565b505060008061137183612c82565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630adf8e926040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ce57600080fd5b505afa1580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114069190613524565b6114108383612d33565b1261145d5760405162461bcd60e51b815260206004820152601f60248201527f50657270657475616c506f6f6c3a2063616e6e6f74206c69717569646174650060448201526064016103da565b8151819015611589578251600d805460009061147a90849061396d565b90915550506020830151600e805460009061149690849061396d565b925050819055508260200151670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b15801561150457600080fd5b505afa158015611518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153c9190613524565b600b548651670de0b6b3a764000091611554916138cb565b61155e919061379e565b61156891906138cb565b611572919061379e565b61157c919061396d565b611586908261375d565b90505b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddd18d306040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e557600080fd5b505afa1580156115f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161d9190613524565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab78ace46040518163ffffffff1660e01b815260040160206040518083038186803b15801561167a57600080fd5b505afa15801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b29190613524565b90508184136116c357819250611798565b8084126116d257809250611798565b81670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166346d2d2d86040518163ffffffff1660e01b815260040160206040518083038186803b15801561173557600080fd5b505afa158015611749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176d9190613524565b611777858861396d565b61178191906138cb565b61178b919061379e565b611795919061375d565b92505b6117a2838661396d565b600860008282546117b3919061375d565b90915550506004805460405163226bf2d160e21b81526001600160a01b038a8116938201939093529116906389afcb4490602401600060405180830381600087803b15801561180157600080fd5b505af1158015611815573d6000803e3d6000fd5b5050505061182b88611826856126dd565b612758565b876001600160a01b0316876001600160a01b03167faef3faf684172084346f7dc2cc3bb1328d1cc23caec12dd9a82d4a4e56c00b17611869866126dd565b60405190815260200160405180910390a35050600f805460ff19169055505050505050565b600f5460ff16156118b15760405162461bcd60e51b81526004016103da9061373c565b600f805460ff191660011790556000806118c96127d6565b915091506000806118d986612c82565b9150915061191d6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600d548152600b54602080830191909152604080516333f359d160e21b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263cfcd67449260048082019391829003018186803b15801561198a57600080fd5b505afa15801561199e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c29190613524565b604082018190526020820151670de0b6b3a7640000919082906119e5908a6138cb565b6119ef919061379e565b6119f991906138cb565b611a03919061379e565b816060018181525050670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638b3415b96040518163ffffffff1660e01b815260040160206040518083038186803b158015611a6e57600080fd5b505afa158015611a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa69190613524565b611ab38360600151612f51565b611abd91906138cb565b611ac7919061379e565b60808201528251600013801590611adf575060008612155b158015611afc57508251600012801590611afa575060008613155b155b15611b8d576000611b108460000151612f51565b90506000611b1d88612f51565b9050808213611b5a57846020015181838560600151611b3c91906138cb565b611b46919061379e565b611b50919061375d565b60a0840152611b8a565b826060015182828760200151611b7091906138cb565b611b7a919061379e565b611b84919061375d565b60a08401525b50505b670de0b6b3a76400008160400151670de0b6b3a76400008360200151611bb68560000151612f51565b8551611bcc90611bc7908d9061375d565b612f51565b611bd6919061396d565b611be091906138cb565b611bea919061379e565b611bf491906138cb565b611bfe919061379e565b611c08908561375d565b93508583600001818151611c1c919061375d565b90525060a08101516060820151611c33919061396d565b83602001818151611c44919061375d565b905250600c54604084015260a08101516080820151611c63919061375d565b611c6d908361396d565b915085600b6002016000828254611c84919061375d565b909155505060a08101516060820151611c9d919061396d565b600e8054600090611caf90849061375d565b92505081905550670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94835646040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1857600080fd5b505afa158015611d2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d509190613524565b8260800151611d5f91906138cb565b611d69919061379e565b60c08201819052600a8054600090611d8290849061375d565b909155505060a081015160c08201516080830151611da0919061396d565b611daa919061375d565b60086000828254611dbb919061375d565b9091555050831580611e7957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c42243c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611e2157600080fd5b505afa158015611e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e599190613524565b84611e6c670de0b6b3a7640000886138cb565b611e76919061379e565b12155b611ed35760405162461bcd60e51b815260206004820152602560248201527f50657270657475616c506f6f6c3a20696e73756666696369656e74206c697175604482015264696469747960d81b60648201526084016103da565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638ac848ca6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f2c57600080fd5b505afa158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f649190613524565b611f6e8484612d33565b1215611f8c5760405162461bcd60e51b81526004016103da906136fa565b611f97878484612e84565b866001600160a01b03167fe9b9a6b9b3b7df275a3b89328628d89ee68f326bff47da3b67e7e56a5eeead9f87611fd084602001516126dd565b604080519283526020830191909152015b60405180910390a25050600f805460ff191690555050505050565b600f5460ff161561201f5760405162461bcd60e51b81526004016103da9061373c565b600f805460ff1916600117905560006120366127d6565b5090506120438383612f9e565b91506000600360009054906101000a90046001600160a01b031690506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561209a57600080fd5b505afa1580156120ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d29190613524565b90506000816120e2575083612102565b6120eb846126dd565b6120f5838761394e565b6120ff91906137cc565b90505b6040516340c10f1960e01b81526001600160a01b038781166004830152602482018390528416906340c10f1990604401600060405180830381600087803b15801561214c57600080fd5b505af1158015612160573d6000803e3d6000fd5b5050505061216d85612719565b6008600082825461217e919061375d565b909155505060408051828152602081018790526001600160a01b038816917f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca910160405180910390a25050600f805460ff1916905550505050565b600f5460ff16156121fc5760405162461bcd60e51b81526004016103da9061373c565b600f805460ff191660011790556122138282612f9e565b60048054604051637b51e92760e11b81526001600160a01b03868116938201939093529293501690819063f6a3d24e9060240160206040518083038186803b15801561225e57600080fd5b505afa158015612272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229691906134ec565b6122f6576040516335313c2160e11b81526001600160a01b038481166004830152821690636a62784290602401600060405180830381600087803b1580156122dd57600080fd5b505af11580156122f1573d6000803e3d6000fd5b505050505b806001600160a01b031663ac2681c68461230f85612719565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561235557600080fd5b505af1158015612369573d6000803e3d6000fd5b50505050826001600160a01b03167f278e696bd0cd4a7d1260ced26c40cd01c2b088f441889e4148240ac81069b348836040516123a891815260200190565b60405180910390a25050600f805460ff1916905550565b600f5460ff16156123e25760405162461bcd60e51b81526004016103da9061373c565b600f805460ff191660011790556000806123fa6127d6565b600354604080516318160ddd60e01b815290519395509193506001600160a01b03169160009183916318160ddd91600480820192602092909190829003018186803b15801561244857600080fd5b505afa15801561245c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124809190613524565b905060008161248e866126dd565b612498908861394e565b6124a291906137cc565b90506124ad81612719565b600860008282546124be919061396d565b909155505083158061259057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c42243c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561252457600080fd5b505afa158015612538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255c9190613524565b84670de0b6b3a764000061256f84612719565b612579908961396d565b61258391906138cb565b61258d919061379e565b12155b6125ec5760405162461bcd60e51b815260206004820152602760248201527f50657270657475616c506f6f6c3a20706f6f6c20696e73756666696369656e746044820152661036b0b933b4b760c91b60648201526084016103da565b604051632770a7eb60e21b81526001600160a01b03888116600483015260248201889052841690639dc29fac90604401600060405180830381600087803b15801561263657600080fd5b505af115801561264a573d6000803e3d6000fd5b505050506126588782612758565b60408051878152602081018390526001600160a01b038916917f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e89101611fe1565b60008183146126d1576126ad83600a613823565b6126b883600a613823565b6126c2908661394e565b6126cc91906137cc565b6126d3565b835b90505b9392505050565b6000808212156127155760405162461bcd60e51b815260206004820152600360248201526249554f60e81b60448201526064016103da565b5090565b60006001600160ff1b038211156127155760405162461bcd60e51b815260206004820152600360248201526255494f60e81b60448201526064016103da565b60006127726012600154846126999092919063ffffffff16565b9050600061278e6001546012846126999092919063ffffffff16565b61279890846139ac565b90506127a381612719565b600a60008282546127b4919061375d565b90915550506002546127d0906001600160a01b03168584612fde565b50505050565b6009546008549060009043818111156128f8576128f47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636bb9e4cb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561284557600080fd5b505afa158015612859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287d919061340f565b6001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156128b757600080fd5b505af11580156128cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ef9190613524565b612719565b600b555b600d5415612a06576000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b15801561296457600080fd5b505afa158015612978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299c9190613524565b600b54600d54670de0b6b3a7640000916129b5916138cb565b6129bf919061379e565b6129c991906138cb565b6129d3919061379e565b600e549091506129e3908261396d565b6129ed908661396d565b94506129f881612f51565b612a02908561375d565b9350505b81811115612c7a57600d5415612c7a576000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e7a06ffe6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a7257600080fd5b505afa158015612a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aaa9190613524565b670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b158015612b0c57600080fd5b505afa158015612b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b449190613524565b670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b158015612ba657600080fd5b505afa158015612bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bde9190613524565b600b54600d54670de0b6b3a764000091908290612bfc9083906138cb565b612c06919061379e565b612c1091906138cb565b612c1a919061379e565b612c2491906138cb565b612c2e919061379e565b612c3891906138cb565b612c42919061379e565b612c4c91906138cb565b612c56919061379e565b90506000612c6484846139ac565b612c6e90836138cb565b600c8054909101905550505b600955509091565b612ca660405180606001604052806000815260200160008152602001600081525090565b6000612cb183610ed5565b8151919350915060009015612d0357600c546040840151845190820390670de0b6b3a764000090612ce39083906138cb565b612ced919061379e565b612cf7908461375d565b60408601929092525090505b8015612d2d57612d13818361396d565b91508060086000828254612d27919061375d565b90915550505b50915091565b81516000908290829015612e48576000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b158015612da557600080fd5b505afa158015612db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddd9190613524565b600b548851670de0b6b3a764000091612df5916138cb565b612dff919061379e565b612e0991906138cb565b612e13919061379e565b9050856020015181612e25919061396d565b612e2f908461375d565b9250612e3a81612f51565b612e44908361375d565b9150505b8015612e705780612e61670de0b6b3a7640000846138cb565b612e6b919061379e565b612e79565b6001600160ff1b035b925050505b92915050565b600480546040516388f74d0960e01b81526001600160a01b039091169182916388f74d0991612eb79188918891016135d6565b600060405180830381600087803b158015612ed157600080fd5b505af1158015612ee5573d6000803e3d6000fd5b5050604051631a9c941f60e01b81526001600160a01b0387811660048301526024820186905284169250631a9c941f9150604401600060405180830381600087803b158015612f3357600080fd5b505af1158015612f47573d6000803e3d6000fd5b5050505050505050565b6000600160ff1b821415612f8c5760405162461bcd60e51b8152602060048201526002602482015261414f60f01b60448201526064016103da565b600082121561271557612e7e826139ef565b600080612fc38430612fbe6012600154886126999092919063ffffffff16565b613041565b600154909150612fd69082906012612699565b949350505050565b6040516001600160a01b038316602482015260448101829052610e0490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261316e565b6002546040516370a0823160e01b81526001600160a01b0384811660048301526000921690829082906370a082319060240160206040518083038186803b15801561308b57600080fd5b505afa15801561309f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c39190613524565b90506130da6001600160a01b038316878787613240565b6040516370a0823160e01b81526001600160a01b038681166004830152600091908416906370a082319060240160206040518083038186803b15801561311f57600080fd5b505afa158015613133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131579190613524565b905061316382826139ac565b979650505050505050565b60006131c3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132789092919063ffffffff16565b805190915015610e0457808060200190518101906131e191906134ec565b610e045760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103da565b6040516001600160a01b03808516602483015283166044820152606481018290526127d09085906323b872dd60e01b9060840161300a565b60606126d3848460008585843b6132d15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103da565b600080866001600160a01b031685876040516132ed91906135ba565b60006040518083038185875af1925050503d806000811461332a576040519150601f19603f3d011682016040523d82523d6000602084013e61332f565b606091505b5091509150613163828286606083156133495750816126d6565b8251156133595782518084602001fd5b8160405162461bcd60e51b81526004016103da9190613607565b600060a08284031215613384578081fd5b60405160a0810181811067ffffffffffffffff821117156133a7576133a7613a35565b80604052508091508235815260208301356020820152604083013560ff811681146133d157600080fd5b8060408301525060608301356060820152608083013560808201525092915050565b600060208284031215613404578081fd5b81356126d681613a4b565b600060208284031215613420578081fd5b81516126d681613a4b565b60008060c0838503121561343d578081fd5b823561344881613a4b565b91506134578460208501613373565b90509250929050565b600060c08284031215613471578081fd5b82601f83011261347f578081fd5b60405160c0810181811067ffffffffffffffff821117156134a2576134a2613a35565b604052808360c081018610156134b6578384fd5b835b60068110156134e15781356134cc81613a4b565b835260209283019291909101906001016134b8565b509195945050505050565b6000602082840312156134fd578081fd5b815180151581146126d6578182fd5b60006020828403121561351d578081fd5b5035919050565b600060208284031215613535578081fd5b5051919050565b60008060c0838503121561354e578182fd5b823591506134578460208501613373565b600060608284031215613570578081fd5b6040516060810181811067ffffffffffffffff8211171561359357613593613a35565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600082516135cc8184602087016139c3565b9190910192915050565b6001600160a01b0383168152608081016126d660208301848051825260208082015190830152604090810151910152565b60208152600082518060208401526136268160408501602087016139c3565b601f01601f19169190910160400192915050565b60208082526022908201527f50657270657475616c506f6f6c3a20696e76616c6964207472616465566f6c756040820152616d6560f01b606082015260800190565b60208082526018908201527f50657270657475616c506f6f6c3a20302062416d6f756e740000000000000000604082015260600190565b60208082526027908201527f50657270657475616c506f6f6c3a206e6f74207175616c6966696564206c69716040820152663ab4b230ba37b960c91b606082015260800190565b60208082526022908201527f50657270657475616c506f6f6c3a20696e73756666696369656e74206d61726760408201526134b760f11b606082015260800190565b6020808252600790820152667265656e74727960c81b604082015260600190565b600080821280156001600160ff1b038490038513161561377f5761377f613a09565b600160ff1b839003841281161561379857613798613a09565b50500190565b6000826137ad576137ad613a1f565b600160ff1b8214600019841416156137c7576137c7613a09565b500590565b6000826137db576137db613a1f565b500490565b600181815b8085111561381b57816000190482111561380157613801613a09565b8085161561380e57918102915b93841c93908002906137e5565b509250929050565b60006126d6838360008261383957506001612e7e565b8161384657506000612e7e565b816001811461385c576002811461386657613882565b6001915050612e7e565b60ff84111561387757613877613a09565b50506001821b612e7e565b5060208310610133831016604e8410600b84101617156138a5575081810a612e7e565b6138af83836137e0565b80600019048211156138c3576138c3613a09565b029392505050565b60006001600160ff1b03818413828413808216868404861116156138f1576138f1613a09565b600160ff1b8487128281168783058912161561390f5761390f613a09565b85871292508782058712848416161561392a5761392a613a09565b8785058712818416161561394057613940613a09565b505050929093029392505050565b600081600019048311821515161561396857613968613a09565b500290565b60008083128015600160ff1b85018412161561398b5761398b613a09565b6001600160ff1b03840183138116156139a6576139a6613a09565b50500390565b6000828210156139be576139be613a09565b500390565b60005b838110156139de5781810151838201526020016139c6565b838111156127d05750506000910152565b6000600160ff1b821415613a0557613a05613a09565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461055a57600080fdfea2646970667358221220d2d0aa2881065336d815e889f2048a62fce2f26cf62fc39cca1b9e352c7394f664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5461,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5464,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11633,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_decimals",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 11635,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_bTokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11637,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_lTokenAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 11639,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_pTokenAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 11641,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_liquidatorQualifierAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 11643,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_protocolFeeCollector",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 11645,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_underlyingAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 11652,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_liquidity",
        "offset": 0,
        "slot": "8",
        "type": "t_int256"
      },
      {
        "astId": 11654,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_lastUpdateBlock",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 11656,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_protocolFeeAccrued",
        "offset": 0,
        "slot": "10",
        "type": "t_int256"
      },
      {
        "astId": 11659,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_symbol",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(SymbolInfo)16416_storage"
      },
      {
        "astId": 11661,
        "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_mutex",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_struct(SymbolInfo)16416_storage": {
        "encoding": "inplace",
        "label": "struct IPerpetualPoolLite.SymbolInfo",
        "members": [
          {
            "astId": 16409,
            "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 16411,
            "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
            "label": "cumulativeFundingRate",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 16413,
            "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
            "label": "tradersNetVolume",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 16415,
            "contract": "contracts/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
            "label": "tradersNetCost",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}