{
  "address": "0x10bb8c8dfdE16C330b82D82FD275244D0356a0Bd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedLiquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityBurnt",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cumulativeRevenue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalShares",
              "type": "uint256"
            }
          ],
          "internalType": "struct JotPool.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getTotalLiquidityValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_jot",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundingToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerShareDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbeced2633f1b56b1d354725faeb30660e8fae7ab25eb509199398e9876d3e8e5",
  "receipt": {
    "to": null,
    "from": "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
    "contractAddress": "0x10bb8c8dfdE16C330b82D82FD275244D0356a0Bd",
    "transactionIndex": 2,
    "gasUsed": "2347380",
    "logsBloom": "0x
    "blockHash": "0x66490bd6003c7924b67f07fe04c06da5798b1d60e738f9be117446ea7edcb18c",
    "transactionHash": "0xbeced2633f1b56b1d354725faeb30660e8fae7ab25eb509199398e9876d3e8e5",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 19644312,
        "transactionHash": "0xbeced2633f1b56b1d354725faeb30660e8fae7ab25eb509199398e9876d3e8e5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000fa2fe3e395f000000000000000000000000000000000000000000000000000137d3010537c26c10000000000000000000000000000000000000000000001877cc0251f35ed9d9c0000000000000000000000000000000000000000000000001283002c6fe636c10000000000000000000000000000000000000000000001877dba550319838d9c",
        "logIndex": 5,
        "blockHash": "0x66490bd6003c7924b67f07fe04c06da5798b1d60e738f9be117446ea7edcb18c"
      }
    ],
    "blockNumber": 19644312,
    "cumulativeGasUsed": "2566600",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xabd730aA0633d482B9B5e0145f6663e89F1B72B5"
  ],
  "solcInputHash": "1a893c192b01679bf42d803ae7063f27",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedLiquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityBurnt\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLiquidityValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"internalType\":\"struct JotPool.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTotalLiquidityValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundingToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerShareDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/implementations/JotPool.sol\":\"JotPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/polygon/governance/ProtocolParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title parameters controlled by governance\\n * @notice the owner of this contract is the timelock controller of the governance feature\\n */\\ncontract ProtocolParameters is Ownable {\\n    // interval in seconds between the one flip to another in one lock contract\\n    uint256 public flippingInterval;\\n\\n    // amount of reward that the flipper gets if he is right on the outcome\\n    uint256 public flippingReward;\\n\\n    // amount of jots into play in each flip\\n    uint256 public flippingAmount;\\n\\n    // the duration of an NFT auction in seconds\\n    uint256 public auctionDuration;\\n\\n    // the period of grace to recover the nft after reaching 0 owner supply\\n    uint256 public recoveryThreshold;\\n\\n    event FlippingIntervalUpdated(uint256 from, uint256 to);\\n    event FlippingRewardUpdated(uint256 from, uint256 to);\\n    event FlippingAmountUpdated(uint256 from, uint256 to);\\n    event AuctionDurationUpdated(uint256 from, uint256 to);\\n    event RecoveryThresholdUpdated(uint256 from, uint256 to);\\n\\n    /**\\n     * @dev sets the default (initial) values of the parameters\\n     *      also transfers the ownership to the governance\\n     */\\n    constructor(\\n        uint256 flippingInterval_,\\n        uint256 flippingReward_,\\n        uint256 flippingAmount_,\\n        uint256 auctionDuration_,\\n        address governanceContractAddress_\\n    ) {\\n        require(flippingReward_ > 0, \\\"Invalid Reward\\\");\\n        require(flippingAmount_ > 0, \\\"Invalid Amount\\\");\\n        require(flippingReward_ < flippingAmount_, \\\"Reward should be lower than Amount\\\");\\n        require(flippingInterval_ > 0 minutes, \\\"Flipping Interval should be greater than 15 minutes\\\");\\n        require(auctionDuration_ > 1 hours, \\\"Auction duration should be greater than 1 hour\\\");\\n\\n        flippingInterval = flippingInterval_;\\n        flippingReward = flippingReward_;\\n        flippingAmount = flippingAmount_;\\n        auctionDuration = auctionDuration_;\\n\\n        // transfer ownership\\n        transferOwnership(governanceContractAddress_);\\n    }\\n\\n    function setFlippingInterval(uint256 flippingInterval_) external onlyOwner {\\n        require(flippingInterval_ > 15 minutes, \\\"Flipping Interval should be greater than 15 minutes\\\");\\n        emit FlippingIntervalUpdated(flippingInterval, flippingInterval_);\\n        flippingInterval = flippingInterval_;\\n    }\\n\\n    function setFlippingReward(uint256 flippingReward_) external onlyOwner {\\n        require(flippingReward_ > 0, \\\"Invalid Reward\\\");\\n        require(flippingReward_ < flippingAmount, \\\"Reward should be lower than Amount\\\");\\n        emit FlippingRewardUpdated(flippingReward, flippingReward_);\\n        flippingReward = flippingReward_;\\n    }\\n\\n    function setFlippingAmount(uint256 flippingAmount_) external onlyOwner {\\n        require(flippingAmount_ > 0, \\\"Invalid Amount\\\");\\n        require(flippingReward < flippingAmount_, \\\"Reward should be lower than Amount\\\");\\n        emit FlippingAmountUpdated(flippingAmount, flippingAmount_);\\n        flippingAmount = flippingAmount_;\\n    }\\n\\n    function setAuctionDuration(uint256 auctionDuration_) external onlyOwner {\\n        require(auctionDuration_ > 1 hours, \\\"Auction duration should be greater than 1 hour\\\");\\n        emit AuctionDurationUpdated(auctionDuration, auctionDuration_);\\n        auctionDuration = auctionDuration_;\\n    }\\n\\n    function setRecoveryThreshold(uint256 recoveryThreshold_) external onlyOwner {\\n        require(recoveryThreshold_ > 1 hours, \\\"Recovery threshold should be greater than 1 hour\\\");\\n        emit RecoveryThresholdUpdated(recoveryThreshold, recoveryThreshold_);\\n        recoveryThreshold = recoveryThreshold_;\\n    }\\n}\\n\",\"keccak256\":\"0xfcbd1b04af2dd27d587f7511c6730873f8202970b69e500bf95ba5558bad45a5\",\"license\":\"MIT\"},\"contracts/polygon/implementations/JotPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"../libraries/ProtocolConstants.sol\\\";\\r\\n\\r\\ncontract JotPool is ERC721, Initializable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    struct Position {\\r\\n        uint256 id;\\r\\n        uint256 liquidity;\\r\\n        uint256 stake;\\r\\n        uint256 totalShares;\\r\\n    }\\r\\n\\r\\n    address public jot;\\r\\n    address public fundingToken;\\r\\n    ProtocolParameters private immutable protocol;\\r\\n    uint256 public totalLiquidity;\\r\\n\\r\\n    string private _proxyName;\\r\\n    string private _proxySymbol;\\r\\n\\r\\n    uint256 public lastReward;\\r\\n    uint256 public cumulativeRevenue;\\r\\n    uint256 public totalShares;\\r\\n    uint256 public totalStaked;\\r\\n\\r\\n    uint256 public stakerShare = 10;\\r\\n    uint256 public stakerShareDenominator = 1000;\\r\\n\\r\\n    Counters.Counter private idGen;\\r\\n\\r\\n    mapping(address => Position) private positions;\\r\\n\\r\\n    event LiquidityAdded(address provider, uint256 amount, uint256 mintedLiquidity);\\r\\n    event LiquidityRemoved(address provider, uint256 amount, uint256 liquidityBurnt);\\r\\n    event Staked(address staker, uint256 amount, uint256 positionId);\\r\\n    event Unstaked(address recipient, uint256 amount, uint256 reward);\\r\\n    event RewardsClaimed(address recipient, uint256 reward);\\r\\n\\r\\n    constructor(address _protocol) ERC721(\\\"\\\", \\\"\\\") {\\r\\n        require(_protocol != address(0), \\\"Invalid protocol address\\\");\\r\\n        protocol = ProtocolParameters(_protocol);\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _jot,\\r\\n        address _fundingToken,\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) external initializer {\\r\\n        require(_jot != address(0), \\\"Invalid Jot token\\\");\\r\\n        require(_fundingToken != address(0), \\\"Invalid funding token\\\");\\r\\n        jot = _jot;\\r\\n        fundingToken = _fundingToken;\\r\\n        _proxyName = _name;\\r\\n        _proxySymbol = _symbol;\\r\\n    }\\r\\n\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _proxyName;\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _proxySymbol;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n        uint256 mintedLiquidity = totalLiquidity > 0\\r\\n            ? (totalLiquidity * amount) / IERC20(jot).balanceOf(address(this))\\r\\n            : 100;\\r\\n        positions[msg.sender].liquidity += mintedLiquidity;\\r\\n        totalLiquidity += mintedLiquidity;\\r\\n\\r\\n        emit LiquidityAdded(msg.sender, amount, mintedLiquidity);\\r\\n\\r\\n        _stake(msg.sender, amount);\\r\\n\\r\\n        IERC20(jot).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(uint256 amount) external {\\r\\n        require(positions[msg.sender].liquidity >= amount, \\\"Remove amount exceeds balance\\\");\\r\\n        uint256 liquidityBurnt = (IERC20(jot).balanceOf(address(this)) * amount) / totalLiquidity;\\r\\n        if (totalLiquidity - amount > 0) {\\r\\n            positions[msg.sender].liquidity -= amount;\\r\\n            totalLiquidity -= amount;\\r\\n        } else {\\r\\n            uint256 jots = ProtocolConstants.JOT_SUPPLY;\\r\\n            positions[msg.sender].liquidity = jots;\\r\\n            totalLiquidity = jots;\\r\\n        }\\r\\n\\r\\n        emit LiquidityRemoved(msg.sender, amount, liquidityBurnt);\\r\\n\\r\\n        _unstake(msg.sender, liquidityBurnt);\\r\\n\\r\\n        IERC20(jot).safeTransfer(msg.sender, liquidityBurnt);\\r\\n    }\\r\\n\\r\\n    function getLiquidityValue(uint256 amount) external view returns (uint256) {\\r\\n        return _getLiquidityValue(amount);\\r\\n    }\\r\\n\\r\\n    function getTotalLiquidityValue(address owner) external view returns (uint256) {\\r\\n        return _getLiquidityValue(positions[owner].liquidity);\\r\\n    }\\r\\n\\r\\n    function _getLiquidityValue(uint256 amount) internal view returns (uint256) {\\r\\n        return (IERC20(jot).balanceOf(address(this)) * amount) / totalLiquidity;\\r\\n    }\\r\\n\\r\\n    function getPosition() external view returns (Position memory) {\\r\\n        return positions[msg.sender];\\r\\n    }\\r\\n\\r\\n    function stakeShares(uint256 amount) external {\\r\\n        require(IERC20(jot).balanceOf(msg.sender) >= amount, \\\"Insufficient Jot balance\\\");\\r\\n        address to = msg.sender;\\r\\n        _stake(to, amount);\\r\\n        IERC20(jot).safeTransferFrom(to, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function _stake(address to, uint256 amount) internal {\\r\\n        (uint256 ftBalance, uint256 x) = _sync();\\r\\n        cumulativeRevenue += x;\\r\\n        lastReward = ftBalance;\\r\\n        totalStaked += amount;\\r\\n\\r\\n        uint256 id = positions[to].id;\\r\\n        if (id == 0) {\\r\\n            idGen.increment();\\r\\n            id = idGen.current();\\r\\n            positions[to].id = id;\\r\\n            _mint(to, id);\\r\\n        }\\r\\n\\r\\n        positions[to].stake += amount;\\r\\n        positions[to].totalShares = totalShares;\\r\\n\\r\\n        emit Staked(msg.sender, amount, id);\\r\\n    }\\r\\n\\r\\n    function _sync() internal returns (uint256, uint256) {\\r\\n        uint256 ftBalance = IERC20(fundingToken).balanceOf(address(this));\\r\\n        uint256 x = ftBalance - lastReward;\\r\\n        if (totalStaked != 0) {\\r\\n            totalShares += ((x * stakerShare) * 10**18) / (totalStaked * stakerShareDenominator);\\r\\n        }\\r\\n\\r\\n        return (ftBalance, x);\\r\\n    }\\r\\n\\r\\n    function unstakeShares(uint256 amount) external {\\r\\n        _unstake(msg.sender, amount);\\r\\n        IERC20(jot).transfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function _unstake(address to, uint256 amount) internal {\\r\\n        require(positions[to].stake >= amount, \\\"Insufficient stake balance\\\");\\r\\n        (uint256 ftBalance, ) = _sync();\\r\\n\\r\\n        uint256 reward = _getReward(to);\\r\\n        lastReward = ftBalance - reward;\\r\\n\\r\\n        if (amount == positions[to].stake) {\\r\\n            _burn(positions[to].id);\\r\\n            delete positions[to];\\r\\n        } else {\\r\\n            positions[to].stake -= amount;\\r\\n            positions[to].totalShares = totalShares;\\r\\n        }\\r\\n        totalStaked -= amount;\\r\\n\\r\\n        emit Unstaked(msg.sender, amount, reward);\\r\\n\\r\\n        IERC20(fundingToken).transfer(msg.sender, reward);\\r\\n    }\\r\\n\\r\\n    function claimRewards() external {\\r\\n        (uint256 ftBalance, ) = _sync();\\r\\n\\r\\n        address owner = msg.sender;\\r\\n        uint256 reward = _getReward(owner);\\r\\n        lastReward = ftBalance - reward;\\r\\n        positions[owner].totalShares = totalShares;\\r\\n\\r\\n        emit RewardsClaimed(msg.sender, reward);\\r\\n\\r\\n        IERC20(fundingToken).transfer(msg.sender, reward);\\r\\n    }\\r\\n\\r\\n    function getReward() external view returns (uint256 reward) {\\r\\n        reward = _getReward(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _getReward(address owner) internal view returns (uint256 reward) {\\r\\n        reward = ((totalShares - positions[owner].totalShares) * positions[owner].stake) / 10**18;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe1ebfe33aebe746f18b0d9c630c430f1b12a00bc04ae8bd042852dd6ade40d8b\",\"license\":\"MIT\"},\"contracts/polygon/libraries/ProtocolConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary ProtocolConstants {\\r\\n    uint256 public constant JOT_SUPPLY = 100000000000000000000000;\\r\\n}\\r\\n\",\"keccak256\":\"0xae3da923916bf5e87ce57eece92b593a72eacae7c7a5cfba8fe7ca7849f90437\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052600a600f556103e86010553480156200001c57600080fd5b5060405162002a9c38038062002a9c8339810160408190526200003f916200019e565b604080516020808201808452600080845284519283019094528382528251929391926200006e929190620000f8565b50805162000084906001906020840190620000f8565b5050506001600160a01b038116620000e25760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642070726f746f636f6c20616464726573730000000000000000604482015260640160405180910390fd5b60601b6001600160601b0319166080526200020b565b8280546200010690620001ce565b90600052602060002090601f0160209004810192826200012a576000855562000175565b82601f106200014557805160ff191683800117855562000175565b8280016001018555821562000175579182015b828111156200017557825182559160200191906001019062000158565b506200018392915062000187565b5090565b5b8082111562000183576000815560010162000188565b600060208284031215620001b0578081fd5b81516001600160a01b0381168114620001c7578182fd5b9392505050565b600181811c90821680620001e357607f821691505b602082108114156200020557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c61287562000227600039600050506128756000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80636352211e1161010f57806395d89b41116100a2578063b88d4fde11610071578063b88d4fde14610419578063c87b56dd1461042c578063c9b171491461043f578063e985e9c51461044857600080fd5b806395d89b41146103e25780639c8f9f23146103ea578063a22cb465146103fd578063a91986701461041057600080fd5b80637640482f116100de5780637640482f1461039a57806378065f27146103ad578063808cfb5d146103c0578063817b1cd2146103d957600080fd5b80636352211e1461033057806370a0823114610343578063724fcd01146103565780637398ab181461035f57600080fd5b8063372500ab11610187578063460ea58a11610156578063460ea58a146102ee57806351c6590a14610301578063569c426b146103145780635af720791461032757600080fd5b8063372500ab146102c25780633a98ef39146102ca5780633d18b912146102d357806342842e0e146102db57600080fd5b8063095ea7b3116101c3578063095ea7b31461027257806315770f92146102855780632016a0d21461029c57806323b872dd146102af57600080fd5b806301ffc9a7146101f557806306fdde031461021d5780630775ffe514610232578063081812fc14610247575b600080fd5b6102086102033660046124eb565b610484565b60405190151581526020015b60405180910390f35b6102256104d6565b6040516102149190612628565b610245610240366004612523565b610568565b005b61025a610255366004612523565b6105ff565b6040516001600160a01b039091168152602001610214565b6102456102803660046124a6565b610699565b61028e60085481565b604051908152602001610214565b6102456102aa366004612346565b6107af565b6102456102bd3660046123c8565b610967565b610245610998565b61028e600d5481565b61028e610aa6565b6102456102e93660046123c8565b610ab6565b61028e6102fc3660046122fa565b610ad1565b61024561030f366004612523565b610af6565b610245610322366004612523565b610c8a565b61028e600f5481565b61025a61033e366004612523565b610d82565b61028e6103513660046122fa565b610df9565b61028e600c5481565b610367610e80565b60405161021491908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61028e6103a8366004612523565b610ef1565b60075461025a906001600160a01b031681565b60065461025a906201000090046001600160a01b031681565b61028e600e5481565b610225610efc565b6102456103f8366004612523565b610f0b565b61024561040b366004612470565b6110f0565b61028e60105481565b610245610427366004612403565b6111b5565b61022561043a366004612523565b6111e7565b61028e600b5481565b610208610456366004612314565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806104b557506001600160e01b03198216635b5e139f60e01b145b806104d057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600980546104e59061276c565b80601f01602080910402602001604051908101604052809291908181526020018280546105119061276c565b801561055e5780601f106105335761010080835404028352916020019161055e565b820191906000526020600020905b81548152906001019060200180831161054157829003601f168201915b5050505050905090565b61057233826112cf565b60065460405163a9059cbb60e01b815233600482015260248101839052620100009091046001600160a01b03169063a9059cbb90604401602060405180830381600087803b1580156105c357600080fd5b505af11580156105d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fb91906124cf565b5050565b6000818152600260205260408120546001600160a01b031661067d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006106a482610d82565b9050806001600160a01b0316836001600160a01b031614156107125760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610674565b336001600160a01b038216148061072e575061072e8133610456565b6107a05760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610674565b6107aa83836114ff565b505050565b600654610100900460ff16806107c8575060065460ff16155b61082b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610674565b600654610100900460ff1615801561084d576006805461ffff19166101011790555b6001600160a01b0385166108975760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2102537ba103a37b5b2b760791b6044820152606401610674565b6001600160a01b0384166108e55760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b210333ab73234b733903a37b5b2b760591b6044820152606401610674565b6006805462010000600160b01b031916620100006001600160a01b038881169190910291909117909155600780546001600160a01b03191691861691909117905582516109399060099060208601906121b0565b50815161094d90600a9060208501906121b0565b508015610960576006805461ff00191690555b5050505050565b610971338261156d565b61098d5760405162461bcd60e51b81526004016106749061268d565b6107aa838383611664565b60006109a2611804565b5090503360006109b1826118fb565b90506109bd8184612729565b600b55600d546001600160a01b0383166000908152601260209081526040918290206003019290925580513381529182018390527ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe910160405180910390a160075460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa091906124cf565b50505050565b6000610ab1336118fb565b905090565b6107aa838383604051806020016040528060008152506111b5565b6001600160a01b0381166000908152601260205260408120600101546104d090611949565b60008111610b375760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610674565b60008060085411610b49576064610be1565b6006546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a082319060240160206040518083038186803b158015610b9157600080fd5b505afa158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc9919061253b565b82600854610bd7919061270a565b610be191906126f6565b33600090815260126020526040812060010180549293508392909190610c089084906126de565b925050819055508060086000828254610c2191906126de565b90915550506040517fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee4590610c5a90339085908590612607565b60405180910390a1610c6c33836119d2565b6006546105fb906201000090046001600160a01b0316333085611b01565b6006546040516370a0823160e01b815233600482015282916201000090046001600160a01b0316906370a082319060240160206040518083038186803b158015610cd357600080fd5b505afa158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b919061253b565b1015610d595760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74204a6f742062616c616e636500000000000000006044820152606401610674565b33610d6481836119d2565b6006546105fb906201000090046001600160a01b0316823085611b01565b6000818152600260205260408120546001600160a01b0316806104d05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610674565b60006001600160a01b038216610e645760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610674565b506001600160a01b031660009081526003602052604090205490565b610eab6040518060800160405280600081526020016000815260200160008152602001600081525090565b5033600090815260126020908152604091829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015290565b60006104d082611949565b6060600a80546104e59061276c565b33600090815260126020526040902060010154811115610f6d5760405162461bcd60e51b815260206004820152601d60248201527f52656d6f766520616d6f756e7420657863656564732062616c616e63650000006044820152606401610674565b6008546006546040516370a0823160e01b8152306004820152600092918491620100009091046001600160a01b0316906370a082319060240160206040518083038186803b158015610fbe57600080fd5b505afa158015610fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff6919061253b565b611000919061270a565b61100a91906126f6565b905060008260085461101c9190612729565b1115611068573360009081526012602052604081206001018054849290611044908490612729565b92505081905550816008600082825461105d9190612729565b9091555061108e9050565b33600090815260126020526040902069152d02c7e14af680000060019091018190556008555b7f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd0593383836040516110c193929190612607565b60405180910390a16110d333826112cf565b6006546105fb906201000090046001600160a01b03163383611b6c565b6001600160a01b0382163314156111495760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610674565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6111bf338361156d565b6111db5760405162461bcd60e51b81526004016106749061268d565b610aa084848484611b9c565b6000818152600260205260409020546060906001600160a01b03166112665760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610674565b600061127d60408051602081019091526000815290565b9050600081511161129d57604051806020016040528060008152506112c8565b806112a784611bcf565b6040516020016112b892919061259b565b6040516020818303038152906040525b9392505050565b6001600160a01b03821660009081526012602052604090206002015481111561133a5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74207374616b652062616c616e63650000000000006044820152606401610674565b6000611344611804565b5090506000611352846118fb565b905061135e8183612729565b600b556001600160a01b0384166000908152601260205260409020600201548314156113d8576001600160a01b0384166000908152601260205260409020546113a690611ce9565b6001600160a01b0384166000908152601260205260408120818155600181018290556002810182905560030155611428565b6001600160a01b03841660009081526012602052604081206002018054859290611403908490612729565b9091555050600d546001600160a01b0385166000908152601260205260409020600301555b82600e600082825461143a9190612729565b90915550506040517f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e9061147390339086908590612607565b60405180910390a160075460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156114c757600080fd5b505af11580156114db573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096091906124cf565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061153482610d82565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166115e65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610674565b60006115f183610d82565b9050806001600160a01b0316846001600160a01b0316148061162c5750836001600160a01b0316611621846105ff565b6001600160a01b0316145b8061165c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661167782610d82565b6001600160a01b0316146116df5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610674565b6001600160a01b0382166117415760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610674565b61174c6000826114ff565b6001600160a01b0383166000908152600360205260408120805460019290611775908490612729565b90915550506001600160a01b03821660009081526003602052604081208054600192906117a39084906126de565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6007546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a082319060240160206040518083038186803b15801561184c57600080fd5b505afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611884919061253b565b90506000600b54826118969190612729565b9050600e546000146118f257601054600e546118b2919061270a565b600f546118bf908361270a565b6118d190670de0b6b3a764000061270a565b6118db91906126f6565b600d60008282546118ec91906126de565b90915550505b90939092509050565b6001600160a01b03811660009081526012602052604081206002810154600390910154600d54670de0b6b3a7640000929161193591612729565b61193f919061270a565b6104d091906126f6565b6008546006546040516370a0823160e01b8152306004820152600092918491620100009091046001600160a01b0316906370a082319060240160206040518083038186803b15801561199a57600080fd5b505afa1580156119ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611935919061253b565b6000806119dd611804565b9150915080600c60008282546119f391906126de565b9091555050600b829055600e8054849190600090611a129084906126de565b90915550506001600160a01b03841660009081526012602052604090205480611a6c57611a43601180546001019055565b506011546001600160a01b0385166000908152601260205260409020819055611a6c8582611d84565b6001600160a01b03851660009081526012602052604081206002018054869290611a979084906126de565b9091555050600d546001600160a01b0386166000908152601260205260409081902060030191909155517f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee9090611af290339087908590612607565b60405180910390a15050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610aa09085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ec6565b6040516001600160a01b0383166024820152604481018290526107aa90849063a9059cbb60e01b90606401611b35565b611ba7848484611664565b611bb384848484611f98565b610aa05760405162461bcd60e51b81526004016106749061263b565b606081611bf35750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c1d5780611c07816127a7565b9150611c169050600a836126f6565b9150611bf7565b60008167ffffffffffffffff811115611c4657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611c70576020820181803683370190505b5090505b841561165c57611c85600183612729565b9150611c92600a866127c2565b611c9d9060306126de565b60f81b818381518110611cc057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611ce2600a866126f6565b9450611c74565b6000611cf482610d82565b9050611d016000836114ff565b6001600160a01b0381166000908152600360205260408120805460019290611d2a908490612729565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b038216611dda5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610674565b6000818152600260205260409020546001600160a01b031615611e3f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610674565b6001600160a01b0382166000908152600360205260408120805460019290611e689084906126de565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000611f1b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120a59092919063ffffffff16565b8051909150156107aa5780806020019051810190611f3991906124cf565b6107aa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610674565b60006001600160a01b0384163b1561209a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fdc9033908990889088906004016125ca565b602060405180830381600087803b158015611ff657600080fd5b505af1925050508015612026575060408051601f3d908101601f1916820190925261202391810190612507565b60015b612080573d808015612054576040519150601f19603f3d011682016040523d82523d6000602084013e612059565b606091505b5080516120785760405162461bcd60e51b81526004016106749061263b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061165c565b506001949350505050565b606061165c848460008585843b6120fe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610674565b600080866001600160a01b0316858760405161211a919061257f565b60006040518083038185875af1925050503d8060008114612157576040519150601f19603f3d011682016040523d82523d6000602084013e61215c565b606091505b509150915061216c828286612177565b979650505050505050565b606083156121865750816112c8565b8251156121965782518084602001fd5b8160405162461bcd60e51b81526004016106749190612628565b8280546121bc9061276c565b90600052602060002090601f0160209004810192826121de5760008555612224565b82601f106121f757805160ff1916838001178555612224565b82800160010185558215612224579182015b82811115612224578251825591602001919060010190612209565b50612230929150612234565b5090565b5b808211156122305760008155600101612235565b600067ffffffffffffffff8084111561226457612264612802565b604051601f8501601f19908116603f0116810190828211818310171561228c5761228c612802565b816040528093508581528686860111156122a557600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146122d657600080fd5b919050565b600082601f8301126122eb578081fd5b6112c883833560208501612249565b60006020828403121561230b578081fd5b6112c8826122bf565b60008060408385031215612326578081fd5b61232f836122bf565b915061233d602084016122bf565b90509250929050565b6000806000806080858703121561235b578182fd5b612364856122bf565b9350612372602086016122bf565b9250604085013567ffffffffffffffff8082111561238e578384fd5b61239a888389016122db565b935060608701359150808211156123af578283fd5b506123bc878288016122db565b91505092959194509250565b6000806000606084860312156123dc578283fd5b6123e5846122bf565b92506123f3602085016122bf565b9150604084013590509250925092565b60008060008060808587031215612418578384fd5b612421856122bf565b935061242f602086016122bf565b925060408501359150606085013567ffffffffffffffff811115612451578182fd5b8501601f81018713612461578182fd5b6123bc87823560208401612249565b60008060408385031215612482578182fd5b61248b836122bf565b9150602083013561249b81612818565b809150509250929050565b600080604083850312156124b8578182fd5b6124c1836122bf565b946020939093013593505050565b6000602082840312156124e0578081fd5b81516112c881612818565b6000602082840312156124fc578081fd5b81356112c881612829565b600060208284031215612518578081fd5b81516112c881612829565b600060208284031215612534578081fd5b5035919050565b60006020828403121561254c578081fd5b5051919050565b6000815180845261256b816020860160208601612740565b601f01601f19169290920160200192915050565b60008251612591818460208701612740565b9190910192915050565b600083516125ad818460208801612740565b8351908301906125c1818360208801612740565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125fd90830184612553565b9695505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b6020815260006112c86020830184612553565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156126f1576126f16127d6565b500190565b600082612705576127056127ec565b500490565b6000816000190483118215151615612724576127246127d6565b500290565b60008282101561273b5761273b6127d6565b500390565b60005b8381101561275b578181015183820152602001612743565b83811115610aa05750506000910152565b600181811c9082168061278057607f821691505b602082108114156127a157634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156127bb576127bb6127d6565b5060010190565b6000826127d1576127d16127ec565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461282657600080fd5b50565b6001600160e01b03198116811461282657600080fdfea2646970667358221220a9462f91b893522fac34f80a17ec2f25f40b3a89a474a66d2a2c2dfcb39dbb5164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c80636352211e1161010f57806395d89b41116100a2578063b88d4fde11610071578063b88d4fde14610419578063c87b56dd1461042c578063c9b171491461043f578063e985e9c51461044857600080fd5b806395d89b41146103e25780639c8f9f23146103ea578063a22cb465146103fd578063a91986701461041057600080fd5b80637640482f116100de5780637640482f1461039a57806378065f27146103ad578063808cfb5d146103c0578063817b1cd2146103d957600080fd5b80636352211e1461033057806370a0823114610343578063724fcd01146103565780637398ab181461035f57600080fd5b8063372500ab11610187578063460ea58a11610156578063460ea58a146102ee57806351c6590a14610301578063569c426b146103145780635af720791461032757600080fd5b8063372500ab146102c25780633a98ef39146102ca5780633d18b912146102d357806342842e0e146102db57600080fd5b8063095ea7b3116101c3578063095ea7b31461027257806315770f92146102855780632016a0d21461029c57806323b872dd146102af57600080fd5b806301ffc9a7146101f557806306fdde031461021d5780630775ffe514610232578063081812fc14610247575b600080fd5b6102086102033660046124eb565b610484565b60405190151581526020015b60405180910390f35b6102256104d6565b6040516102149190612628565b610245610240366004612523565b610568565b005b61025a610255366004612523565b6105ff565b6040516001600160a01b039091168152602001610214565b6102456102803660046124a6565b610699565b61028e60085481565b604051908152602001610214565b6102456102aa366004612346565b6107af565b6102456102bd3660046123c8565b610967565b610245610998565b61028e600d5481565b61028e610aa6565b6102456102e93660046123c8565b610ab6565b61028e6102fc3660046122fa565b610ad1565b61024561030f366004612523565b610af6565b610245610322366004612523565b610c8a565b61028e600f5481565b61025a61033e366004612523565b610d82565b61028e6103513660046122fa565b610df9565b61028e600c5481565b610367610e80565b60405161021491908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61028e6103a8366004612523565b610ef1565b60075461025a906001600160a01b031681565b60065461025a906201000090046001600160a01b031681565b61028e600e5481565b610225610efc565b6102456103f8366004612523565b610f0b565b61024561040b366004612470565b6110f0565b61028e60105481565b610245610427366004612403565b6111b5565b61022561043a366004612523565b6111e7565b61028e600b5481565b610208610456366004612314565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806104b557506001600160e01b03198216635b5e139f60e01b145b806104d057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600980546104e59061276c565b80601f01602080910402602001604051908101604052809291908181526020018280546105119061276c565b801561055e5780601f106105335761010080835404028352916020019161055e565b820191906000526020600020905b81548152906001019060200180831161054157829003601f168201915b5050505050905090565b61057233826112cf565b60065460405163a9059cbb60e01b815233600482015260248101839052620100009091046001600160a01b03169063a9059cbb90604401602060405180830381600087803b1580156105c357600080fd5b505af11580156105d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fb91906124cf565b5050565b6000818152600260205260408120546001600160a01b031661067d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006106a482610d82565b9050806001600160a01b0316836001600160a01b031614156107125760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610674565b336001600160a01b038216148061072e575061072e8133610456565b6107a05760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610674565b6107aa83836114ff565b505050565b600654610100900460ff16806107c8575060065460ff16155b61082b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610674565b600654610100900460ff1615801561084d576006805461ffff19166101011790555b6001600160a01b0385166108975760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2102537ba103a37b5b2b760791b6044820152606401610674565b6001600160a01b0384166108e55760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b210333ab73234b733903a37b5b2b760591b6044820152606401610674565b6006805462010000600160b01b031916620100006001600160a01b038881169190910291909117909155600780546001600160a01b03191691861691909117905582516109399060099060208601906121b0565b50815161094d90600a9060208501906121b0565b508015610960576006805461ff00191690555b5050505050565b610971338261156d565b61098d5760405162461bcd60e51b81526004016106749061268d565b6107aa838383611664565b60006109a2611804565b5090503360006109b1826118fb565b90506109bd8184612729565b600b55600d546001600160a01b0383166000908152601260209081526040918290206003019290925580513381529182018390527ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe910160405180910390a160075460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa091906124cf565b50505050565b6000610ab1336118fb565b905090565b6107aa838383604051806020016040528060008152506111b5565b6001600160a01b0381166000908152601260205260408120600101546104d090611949565b60008111610b375760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610674565b60008060085411610b49576064610be1565b6006546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a082319060240160206040518083038186803b158015610b9157600080fd5b505afa158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc9919061253b565b82600854610bd7919061270a565b610be191906126f6565b33600090815260126020526040812060010180549293508392909190610c089084906126de565b925050819055508060086000828254610c2191906126de565b90915550506040517fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee4590610c5a90339085908590612607565b60405180910390a1610c6c33836119d2565b6006546105fb906201000090046001600160a01b0316333085611b01565b6006546040516370a0823160e01b815233600482015282916201000090046001600160a01b0316906370a082319060240160206040518083038186803b158015610cd357600080fd5b505afa158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b919061253b565b1015610d595760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74204a6f742062616c616e636500000000000000006044820152606401610674565b33610d6481836119d2565b6006546105fb906201000090046001600160a01b0316823085611b01565b6000818152600260205260408120546001600160a01b0316806104d05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610674565b60006001600160a01b038216610e645760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610674565b506001600160a01b031660009081526003602052604090205490565b610eab6040518060800160405280600081526020016000815260200160008152602001600081525090565b5033600090815260126020908152604091829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015290565b60006104d082611949565b6060600a80546104e59061276c565b33600090815260126020526040902060010154811115610f6d5760405162461bcd60e51b815260206004820152601d60248201527f52656d6f766520616d6f756e7420657863656564732062616c616e63650000006044820152606401610674565b6008546006546040516370a0823160e01b8152306004820152600092918491620100009091046001600160a01b0316906370a082319060240160206040518083038186803b158015610fbe57600080fd5b505afa158015610fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff6919061253b565b611000919061270a565b61100a91906126f6565b905060008260085461101c9190612729565b1115611068573360009081526012602052604081206001018054849290611044908490612729565b92505081905550816008600082825461105d9190612729565b9091555061108e9050565b33600090815260126020526040902069152d02c7e14af680000060019091018190556008555b7f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd0593383836040516110c193929190612607565b60405180910390a16110d333826112cf565b6006546105fb906201000090046001600160a01b03163383611b6c565b6001600160a01b0382163314156111495760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610674565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6111bf338361156d565b6111db5760405162461bcd60e51b81526004016106749061268d565b610aa084848484611b9c565b6000818152600260205260409020546060906001600160a01b03166112665760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610674565b600061127d60408051602081019091526000815290565b9050600081511161129d57604051806020016040528060008152506112c8565b806112a784611bcf565b6040516020016112b892919061259b565b6040516020818303038152906040525b9392505050565b6001600160a01b03821660009081526012602052604090206002015481111561133a5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74207374616b652062616c616e63650000000000006044820152606401610674565b6000611344611804565b5090506000611352846118fb565b905061135e8183612729565b600b556001600160a01b0384166000908152601260205260409020600201548314156113d8576001600160a01b0384166000908152601260205260409020546113a690611ce9565b6001600160a01b0384166000908152601260205260408120818155600181018290556002810182905560030155611428565b6001600160a01b03841660009081526012602052604081206002018054859290611403908490612729565b9091555050600d546001600160a01b0385166000908152601260205260409020600301555b82600e600082825461143a9190612729565b90915550506040517f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e9061147390339086908590612607565b60405180910390a160075460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156114c757600080fd5b505af11580156114db573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096091906124cf565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061153482610d82565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166115e65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610674565b60006115f183610d82565b9050806001600160a01b0316846001600160a01b0316148061162c5750836001600160a01b0316611621846105ff565b6001600160a01b0316145b8061165c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661167782610d82565b6001600160a01b0316146116df5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610674565b6001600160a01b0382166117415760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610674565b61174c6000826114ff565b6001600160a01b0383166000908152600360205260408120805460019290611775908490612729565b90915550506001600160a01b03821660009081526003602052604081208054600192906117a39084906126de565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6007546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a082319060240160206040518083038186803b15801561184c57600080fd5b505afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611884919061253b565b90506000600b54826118969190612729565b9050600e546000146118f257601054600e546118b2919061270a565b600f546118bf908361270a565b6118d190670de0b6b3a764000061270a565b6118db91906126f6565b600d60008282546118ec91906126de565b90915550505b90939092509050565b6001600160a01b03811660009081526012602052604081206002810154600390910154600d54670de0b6b3a7640000929161193591612729565b61193f919061270a565b6104d091906126f6565b6008546006546040516370a0823160e01b8152306004820152600092918491620100009091046001600160a01b0316906370a082319060240160206040518083038186803b15801561199a57600080fd5b505afa1580156119ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611935919061253b565b6000806119dd611804565b9150915080600c60008282546119f391906126de565b9091555050600b829055600e8054849190600090611a129084906126de565b90915550506001600160a01b03841660009081526012602052604090205480611a6c57611a43601180546001019055565b506011546001600160a01b0385166000908152601260205260409020819055611a6c8582611d84565b6001600160a01b03851660009081526012602052604081206002018054869290611a979084906126de565b9091555050600d546001600160a01b0386166000908152601260205260409081902060030191909155517f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee9090611af290339087908590612607565b60405180910390a15050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610aa09085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ec6565b6040516001600160a01b0383166024820152604481018290526107aa90849063a9059cbb60e01b90606401611b35565b611ba7848484611664565b611bb384848484611f98565b610aa05760405162461bcd60e51b81526004016106749061263b565b606081611bf35750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c1d5780611c07816127a7565b9150611c169050600a836126f6565b9150611bf7565b60008167ffffffffffffffff811115611c4657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611c70576020820181803683370190505b5090505b841561165c57611c85600183612729565b9150611c92600a866127c2565b611c9d9060306126de565b60f81b818381518110611cc057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611ce2600a866126f6565b9450611c74565b6000611cf482610d82565b9050611d016000836114ff565b6001600160a01b0381166000908152600360205260408120805460019290611d2a908490612729565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b038216611dda5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610674565b6000818152600260205260409020546001600160a01b031615611e3f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610674565b6001600160a01b0382166000908152600360205260408120805460019290611e689084906126de565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000611f1b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120a59092919063ffffffff16565b8051909150156107aa5780806020019051810190611f3991906124cf565b6107aa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610674565b60006001600160a01b0384163b1561209a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fdc9033908990889088906004016125ca565b602060405180830381600087803b158015611ff657600080fd5b505af1925050508015612026575060408051601f3d908101601f1916820190925261202391810190612507565b60015b612080573d808015612054576040519150601f19603f3d011682016040523d82523d6000602084013e612059565b606091505b5080516120785760405162461bcd60e51b81526004016106749061263b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061165c565b506001949350505050565b606061165c848460008585843b6120fe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610674565b600080866001600160a01b0316858760405161211a919061257f565b60006040518083038185875af1925050503d8060008114612157576040519150601f19603f3d011682016040523d82523d6000602084013e61215c565b606091505b509150915061216c828286612177565b979650505050505050565b606083156121865750816112c8565b8251156121965782518084602001fd5b8160405162461bcd60e51b81526004016106749190612628565b8280546121bc9061276c565b90600052602060002090601f0160209004810192826121de5760008555612224565b82601f106121f757805160ff1916838001178555612224565b82800160010185558215612224579182015b82811115612224578251825591602001919060010190612209565b50612230929150612234565b5090565b5b808211156122305760008155600101612235565b600067ffffffffffffffff8084111561226457612264612802565b604051601f8501601f19908116603f0116810190828211818310171561228c5761228c612802565b816040528093508581528686860111156122a557600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146122d657600080fd5b919050565b600082601f8301126122eb578081fd5b6112c883833560208501612249565b60006020828403121561230b578081fd5b6112c8826122bf565b60008060408385031215612326578081fd5b61232f836122bf565b915061233d602084016122bf565b90509250929050565b6000806000806080858703121561235b578182fd5b612364856122bf565b9350612372602086016122bf565b9250604085013567ffffffffffffffff8082111561238e578384fd5b61239a888389016122db565b935060608701359150808211156123af578283fd5b506123bc878288016122db565b91505092959194509250565b6000806000606084860312156123dc578283fd5b6123e5846122bf565b92506123f3602085016122bf565b9150604084013590509250925092565b60008060008060808587031215612418578384fd5b612421856122bf565b935061242f602086016122bf565b925060408501359150606085013567ffffffffffffffff811115612451578182fd5b8501601f81018713612461578182fd5b6123bc87823560208401612249565b60008060408385031215612482578182fd5b61248b836122bf565b9150602083013561249b81612818565b809150509250929050565b600080604083850312156124b8578182fd5b6124c1836122bf565b946020939093013593505050565b6000602082840312156124e0578081fd5b81516112c881612818565b6000602082840312156124fc578081fd5b81356112c881612829565b600060208284031215612518578081fd5b81516112c881612829565b600060208284031215612534578081fd5b5035919050565b60006020828403121561254c578081fd5b5051919050565b6000815180845261256b816020860160208601612740565b601f01601f19169290920160200192915050565b60008251612591818460208701612740565b9190910192915050565b600083516125ad818460208801612740565b8351908301906125c1818360208801612740565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125fd90830184612553565b9695505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b6020815260006112c86020830184612553565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156126f1576126f16127d6565b500190565b600082612705576127056127ec565b500490565b6000816000190483118215151615612724576127246127d6565b500290565b60008282101561273b5761273b6127d6565b500390565b60005b8381101561275b578181015183820152602001612743565b83811115610aa05750506000910152565b600181811c9082168061278057607f821691505b602082108114156127a157634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156127bb576127bb6127d6565b5060010190565b6000826127d1576127d16127ec565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461282657600080fd5b50565b6001600160e01b03198116811461282657600080fdfea2646970667358221220a9462f91b893522fac34f80a17ec2f25f40b3a89a474a66d2a2c2dfcb39dbb5164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7308,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 7310,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 7314,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7318,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7322,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7328,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5456,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 5459,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 19648,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "jot",
        "offset": 2,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 19650,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "fundingToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 19655,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "totalLiquidity",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 19657,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "_proxyName",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 19659,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "_proxySymbol",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 19661,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "lastReward",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 19663,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "cumulativeRevenue",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 19665,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "totalShares",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 19667,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "totalStaked",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 19670,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "stakerShare",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 19673,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "stakerShareDenominator",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 19676,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "idGen",
        "offset": 0,
        "slot": "17",
        "type": "t_struct(Counter)8584_storage"
      },
      {
        "astId": 19681,
        "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
        "label": "positions",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(Position)19646_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(Position)19646_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct JotPool.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)19646_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)8584_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 8583,
            "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Position)19646_storage": {
        "encoding": "inplace",
        "label": "struct JotPool.Position",
        "members": [
          {
            "astId": 19639,
            "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19641,
            "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
            "label": "liquidity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19643,
            "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
            "label": "stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19645,
            "contract": "contracts/polygon/implementations/JotPool.sol:JotPool",
            "label": "totalShares",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}