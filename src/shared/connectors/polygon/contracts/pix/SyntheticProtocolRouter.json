{
  "address": "0xEa8700A3075be4c790bE3cE7f792f5FDC6f37Bb3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jot_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jotPool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collectionManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "syntheticNFT_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "auctionManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocol_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fundingTokenAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectionManagerID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collectionManagerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "jotAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "jotStakingAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "syntheticNFTAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quickSwapAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "auctionAddress",
          "type": "address"
        }
      ],
      "name": "collectionManagerRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getCollectionManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getJotStakingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getJotsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "isSyntheticCollectionRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isSyntheticNFTCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolVaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyToKeep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceFraction",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "originalName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "originalSymbol",
          "type": "string"
        }
      ],
      "name": "registerNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d83bde807cbf3fa35d747aaeb400f318424f3e4c8e6595b3ff5a9a94995a6a0",
  "receipt": {
    "to": null,
    "from": "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
    "contractAddress": "0xEa8700A3075be4c790bE3cE7f792f5FDC6f37Bb3",
    "transactionIndex": 0,
    "gasUsed": "1019653",
    "logsBloom": "0x
    "blockHash": "0x10aa0552281cc0e05b981c60f6a6638964bed16516253f7fc3c3108b1f4d695e",
    "transactionHash": "0x6d83bde807cbf3fa35d747aaeb400f318424f3e4c8e6595b3ff5a9a94995a6a0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19178360,
        "transactionHash": "0x6d83bde807cbf3fa35d747aaeb400f318424f3e4c8e6595b3ff5a9a94995a6a0",
        "address": "0xEa8700A3075be4c790bE3cE7f792f5FDC6f37Bb3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x10aa0552281cc0e05b981c60f6a6638964bed16516253f7fc3c3108b1f4d695e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19178360,
        "transactionHash": "0x6d83bde807cbf3fa35d747aaeb400f318424f3e4c8e6595b3ff5a9a94995a6a0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000ade1b6493d600000000000000000000000000000000000000000000000000138a6daadaa1099200000000000000000000000000000000000000000000000000716e837de16a00000000000000000000000000000000000000000000000000137f8f8f760d3392000000000000000000000000000000000000000000000000007c4c9ee2754000",
        "logIndex": 1,
        "blockHash": "0x10aa0552281cc0e05b981c60f6a6638964bed16516253f7fc3c3108b1f4d695e"
      }
    ],
    "blockNumber": 19178360,
    "cumulativeGasUsed": "1019653",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbdd4e5660839a088573191A9889A262c0Efc0983",
    "0x133B3d9e7029412d28F0590dAC177B37399e3d7C",
    "0x858C973BDBFa7129724329072208c11460C3F486",
    "0xd64E814f69Ed1dAA31a3BB4D999aC03622837e0c",
    "0x2A29B8dAD12796A99926D7D1D11BD8fACEC2e979",
    "0x4CE19f07440B35530D07F9aE1E38Df3d200c23B4",
    "0x35d04434b62237e9D114b4E06218D3f1A219fD63",
    "0x2cA48b8c2d574b282FDAB69545646983A94a3286"
  ],
  "solcInputHash": "6972bfba4d76c9603a896f1e5fbcd63d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jot_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jotPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectionManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticNFT_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocol_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundingTokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionManagerID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"jotAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"jotStakingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"syntheticNFTAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quickSwapAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"}],\"name\":\"collectionManagerRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getJotStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getJotsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"isSyntheticCollectionRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isSyntheticNFTCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyToKeep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceFraction\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"originalName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"originalSymbol\",\"type\":\"string\"}],\"name\":\"registerNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerNFT(address,uint256,uint256,uint256,string,string)\":{\"params\":{\"collection\":\"the address of the synthetic collection\",\"originalName\":\"the original collection name\",\"originalSymbol\":\"the original collection symbol\",\"priceFraction\":\"the price for a fraction\",\"supplyToKeep\":\"supply to keep\",\"tokenId\":\"the token id\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_jot\":{\"details\":\"implementation addresses for proxies\"},\"collections\":{\"details\":\"collections map. collection address => collection data\"}},\"version\":1},\"userdoc\":{\"events\":{\"collectionManagerRegistered(uint256,address,address,address,address,address,address)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"getCollectionManagerAddress(address)\":{\"notice\":\"getter for Collection Manager Address of a collection\"},\"getJotStakingAddress(address)\":{\"notice\":\"getter for Jot Staking Address of a collection\"},\"getJotsAddress(address)\":{\"notice\":\"getter for Jot Address of a collection\"},\"isSyntheticCollectionRegistered(address)\":{\"notice\":\"checks whether a collection is registered or not\"},\"isSyntheticNFTCreated(address,uint256)\":{\"notice\":\"checks whether a Synthetic NFT has been created for a given NFT or not\"},\"protocolVaults()\":{\"notice\":\"number of registered collections\"},\"registerNFT(address,uint256,uint256,uint256,string,string)\":{\"notice\":\"register an NFT collection\"},\"swapAddress()\":{\"notice\":\"QuickSwap address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/SyntheticProtocolRouter.sol\":\"SyntheticProtocolRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/polygon/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\n\\r\\n\\r\\ninterface ISyntheticNFT is IERC721Metadata {\\r\\n\\tfunction exists(uint256 tokenId) external view returns (bool);\\t\\t\\r\\n\\r\\n\\tfunction safeMint(address to, uint256 tokenId, string memory metadata) external;\\r\\n\\r\\n\\tfunction safeBurn(uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ninterface ICollectionManagerFactory {\\r\\n\\tfunction deploy(\\r\\n        address originalCollectionAddress_, \\r\\n        string memory name_, \\r\\n        string memory symbol_\\r\\n    ) external returns (address);\\r\\n}\\r\\n\\r\\ninterface IJot is IERC20 {\\r\\n\\r\\n\\tfunction uniswapV2Pair() external view returns (address);\\r\\n\\r\\n    function safeMint(address account, uint256 amount) external;\\r\\n\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n\\tfunction feeTo() external view returns (address);\\r\\n\\tfunction feeToSetter() external view returns (address);\\r\\n\\r\\n\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\tfunction allPairs(uint) external view returns (address pair);\\r\\n\\tfunction allPairsLength() external view returns (uint);\\r\\n\\r\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n\\tfunction setFeeTo(address) external;\\r\\n\\tfunction setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n\\r\\n// pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint value);\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n\\tfunction name() external pure returns (string memory);\\r\\n\\tfunction symbol() external pure returns (string memory);\\r\\n\\tfunction decimals() external pure returns (uint8);\\r\\n\\tfunction totalSupply() external view returns (uint);\\r\\n\\tfunction balanceOf(address owner) external view returns (uint);\\r\\n\\tfunction allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n\\tfunction approve(address spender, uint value) external returns (bool);\\r\\n\\tfunction transfer(address to, uint value) external returns (bool);\\r\\n\\tfunction transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\tfunction nonces(address owner) external view returns (uint);\\r\\n\\r\\n\\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n\\tevent Mint(address indexed sender, uint amount0, uint amount1);\\r\\n\\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n\\tevent Swap(\\r\\n\\t\\taddress indexed sender,\\r\\n\\t\\tuint amount0In,\\r\\n\\t\\tuint amount1In,\\r\\n\\t\\tuint amount0Out,\\r\\n\\t\\tuint amount1Out,\\r\\n\\t\\taddress indexed to\\r\\n\\t);\\r\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\tfunction factory() external view returns (address);\\r\\n\\tfunction token0() external view returns (address);\\r\\n\\tfunction token1() external view returns (address);\\r\\n\\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\tfunction price0CumulativeLast() external view returns (uint);\\r\\n\\tfunction price1CumulativeLast() external view returns (uint);\\r\\n\\tfunction kLast() external view returns (uint);\\r\\n\\r\\n\\tfunction mint(address to) external returns (uint liquidity);\\r\\n\\tfunction burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\tfunction skim(address to) external;\\r\\n\\tfunction sync() external;\\r\\n\\r\\n\\tfunction initialize(address, address) external;\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n\\tfunction factory() external pure returns (address);\\r\\n\\tfunction WETH() external pure returns (address);\\r\\n\\r\\n\\tfunction addLiquidity(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint amountADesired,\\r\\n\\t\\tuint amountBDesired,\\r\\n\\t\\tuint amountAMin,\\r\\n\\t\\tuint amountBMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\tfunction addLiquidityETH(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint amountTokenDesired,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\tfunction removeLiquidity(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountAMin,\\r\\n\\t\\tuint amountBMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountA, uint amountB);\\r\\n\\tfunction removeLiquidityETH(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\tfunction removeLiquidityWithPermit(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountAMin,\\r\\n\\t\\tuint amountBMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline,\\r\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountA, uint amountB);\\r\\n\\tfunction removeLiquidityETHWithPermit(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline,\\r\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\tfunction swapExactTokensForTokens(\\r\\n\\t\\tuint amountIn,\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint[] memory amounts);\\r\\n\\tfunction swapTokensForExactTokens(\\r\\n\\t\\tuint amountOut,\\r\\n\\t\\tuint amountInMax,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint[] memory amounts);\\r\\n\\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\texternal\\r\\n\\t\\tpayable\\r\\n\\t\\treturns (uint[] memory amounts);\\r\\n\\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n\\t\\texternal\\r\\n\\t\\treturns (uint[] memory amounts);\\r\\n\\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\texternal\\r\\n\\t\\treturns (uint[] memory amounts);\\r\\n\\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n\\t\\texternal\\r\\n\\t\\tpayable\\r\\n\\t\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n// pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external returns (uint amountETH);\\r\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint liquidity,\\r\\n\\t\\tuint amountTokenMin,\\r\\n\\t\\tuint amountETHMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline,\\r\\n\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t) external returns (uint amountETH);\\r\\n\\r\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\tuint amountIn,\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external;\\r\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external payable;\\r\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n\\t\\tuint amountIn,\\r\\n\\t\\tuint amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint deadline\\r\\n\\t) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1e4d0441cc839aafc1011f29d620da5fda1b3f44b857641ce18ee90cc94ec73b\",\"license\":\"MIT\"},\"contracts/polygon/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev collections struct\\n */\\nstruct SyntheticCollection {\\n    address collectionManagerAddress;\\n    address jotAddress;\\n    address jotStakingAddress;\\n    address syntheticNFTAddress;\\n}\\n\",\"keccak256\":\"0xb6beb6302a5a3ae0a47f6035fb1ca39e869f0eafd858dc13ea1c74051f00db02\",\"license\":\"MIT\"},\"contracts/polygon/SyntheticProtocolRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./implementations/SyntheticCollectionManager.sol\\\";\\r\\nimport \\\"./implementations/Jot.sol\\\";\\r\\nimport \\\"./implementations/JotPool.sol\\\";\\r\\nimport \\\"./implementations/SyntheticNFT.sol\\\";\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract SyntheticProtocolRouter is Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    /**\\r\\n     * @dev implementation addresses for proxies\\r\\n     */\\r\\n    address private _jot;\\r\\n    address private _jotPool;\\r\\n    address private _collectionManager;\\r\\n    address private _syntheticNFT;\\r\\n    address private _auctionManager;\\r\\n    address private _protocol;\\r\\n    address private fundingTokenAddress;\\r\\n    /**\\r\\n     * @notice number of registered collections\\r\\n     */\\r\\n    Counters.Counter public protocolVaults;\\r\\n\\r\\n    /**\\r\\n     * @notice QuickSwap address\\r\\n     */\\r\\n    address public swapAddress;\\r\\n\\r\\n    /**\\r\\n     * @dev collections map.\\r\\n     * collection address => collection data\\r\\n     */\\r\\n    mapping(address => SyntheticCollection) private collections;\\r\\n\\r\\n    /**\\r\\n     * Events\\r\\n     */\\r\\n\\r\\n    // a new Synthetic NFT collection manager is registered\\r\\n    event collectionManagerRegistered(\\r\\n        uint256 collectionManagerID,\\r\\n        address collectionManagerAddress, \\r\\n        address jotAddress,\\r\\n        address jotStakingAddress, \\r\\n        address syntheticNFTAddress, \\r\\n        address quickSwapAddress,\\r\\n        address auctionAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * Constructor\\r\\n     */\\r\\n    constructor(\\r\\n        address _swapAddress,\\r\\n        address jot_,\\r\\n        address jotPool_,\\r\\n        address collectionManager_,\\r\\n        address syntheticNFT_,\\r\\n        address auctionManager_,\\r\\n        address protocol_,\\r\\n        address fundingTokenAddress_\\r\\n    ) {\\r\\n        swapAddress = _swapAddress;\\r\\n        _jot = jot_;\\r\\n        _jotPool = jotPool_;\\r\\n        _collectionManager = collectionManager_;\\r\\n        _syntheticNFT = syntheticNFT_;\\r\\n        _auctionManager = auctionManager_;\\r\\n        _protocol = protocol_;\\r\\n        fundingTokenAddress = fundingTokenAddress_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice register an NFT collection\\r\\n     *  @param collection the address of the synthetic collection\\r\\n     *  @param tokenId the token id\\r\\n     *  @param supplyToKeep supply to keep\\r\\n     *  @param priceFraction the price for a fraction\\r\\n     *  @param originalName the original collection name\\r\\n     *  @param originalSymbol the original collection symbol\\r\\n     */\\r\\n    function registerNFT(\\r\\n        address collection,\\r\\n        uint256 tokenId,\\r\\n        uint256 supplyToKeep,\\r\\n        uint256 priceFraction,\\r\\n        string memory originalName,\\r\\n        string memory originalSymbol\\r\\n    ) public {\\r\\n        address collectionAddress;\\r\\n\\r\\n\\r\\n        // Checks whether a collection is registered or not\\r\\n        // If not registered, then register it and increase the Vault counter\\r\\n        if (!isSyntheticCollectionRegistered(collection)) {\\r\\n            // deploys a minimal proxy contract from the jot contract implementation\\r\\n            address jotAddress = Clones.clone(_jot);\\r\\n            Jot(jotAddress).initialize(\\r\\n                string(abi.encodePacked(\\\"Privi Jot \\\", originalName)),\\r\\n                string(abi.encodePacked(\\\"JOT_\\\", originalSymbol)),\\r\\n                swapAddress,\\r\\n                fundingTokenAddress\\r\\n            );\\r\\n\\r\\n            // deploys a minimal proxy contract from the jotPool contract implementation\\r\\n            address jotPoolAddress = Clones.clone(_jotPool);\\r\\n            JotPool(jotPoolAddress).initialize(jotAddress);\\r\\n\\r\\n            address syntheticNFTAddress = Clones.clone(_syntheticNFT);\\r\\n            SyntheticNFT(syntheticNFTAddress).initialize(\\r\\n                string(abi.encodePacked(\\\"Privi Synthetic \\\", originalName)), \\r\\n                string(abi.encodePacked(\\\"pS_\\\", originalSymbol))\\r\\n            );\\r\\n\\r\\n            // deploys a minimal proxy contract from the collectionManager contract implementation\\r\\n            collectionAddress = Clones.clone(_collectionManager);\\r\\n            SyntheticCollectionManager(collectionAddress).initialize(\\r\\n                jotAddress,\\r\\n                collection,\\r\\n                syntheticNFTAddress,\\r\\n                _auctionManager,\\r\\n                _protocol,\\r\\n                fundingTokenAddress\\r\\n            );\\r\\n\\r\\n            collections[collection] = SyntheticCollection({\\r\\n                collectionManagerAddress: collectionAddress,\\r\\n                jotAddress: jotAddress,\\r\\n                jotStakingAddress: jotPoolAddress,\\r\\n                syntheticNFTAddress: syntheticNFTAddress\\r\\n            });\\r\\n            emit collectionManagerRegistered(\\r\\n                protocolVaults.current(),\\r\\n                collectionAddress,\\r\\n                jotAddress,\\r\\n                jotPoolAddress,\\r\\n                syntheticNFTAddress,\\r\\n                swapAddress,\\r\\n                _auctionManager);\\r\\n\\r\\n            protocolVaults.increment();\\r\\n\\r\\n            //TODO: addSymbol with \\u201daddress\\u201d to the NFTPerpetualFutures\\r\\n        } else {\\r\\n            collectionAddress = collections[collection].collectionManagerAddress;\\r\\n        }\\r\\n\\r\\n        SyntheticCollectionManager collectionManager = SyntheticCollectionManager(collectionAddress);\\r\\n\\r\\n        collectionManager.register(tokenId, supplyToKeep, priceFraction);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice checks whether a collection is registered or not\\r\\n     */\\r\\n    function isSyntheticCollectionRegistered(address collection) public view returns (bool) {\\r\\n        return collections[collection].collectionManagerAddress != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice checks whether a Synthetic NFT has been created for a given NFT or not\\r\\n     */\\r\\n    function isSyntheticNFTCreated(address collection, uint256 tokenId) public view returns (bool) {\\r\\n        // Collection must be registered first\\r\\n        require(isSyntheticCollectionRegistered(collection), \\\"Collection not registered\\\");\\r\\n\\r\\n        // connect to collection manager\\r\\n        address collectionAddress = collections[collection].collectionManagerAddress;\\r\\n        SyntheticCollectionManager collectionManager = SyntheticCollectionManager(collectionAddress);\\r\\n\\r\\n        // check whether a given id was minted or not\\r\\n        return collectionManager._tokens(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice getter for Jot Address of a collection\\r\\n     */\\r\\n    function getJotsAddress(address collection) public view returns (address) {\\r\\n        return collections[collection].jotAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice getter for Jot Staking Address of a collection\\r\\n     */\\r\\n    function getJotStakingAddress(address collection) public view returns (address) {\\r\\n        return collections[collection].jotStakingAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice getter for Collection Manager Address of a collection\\r\\n     */\\r\\n    function getCollectionManagerAddress(address collection) public view returns (address) {\\r\\n        return collections[collection].collectionManagerAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6630c3e13ba280d72355fd0e9a95d3670117c308591a78688f2b22073e6110d6\",\"license\":\"MIT\"},\"contracts/polygon/governance/ProtocolParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title parameters controlled by governance\\n * @notice the owner of this contract is the timelock controller of the governance feature\\n */\\ncontract ProtocolParameters is Ownable {\\n    // this is the number of Jots minted when a new single NFT is synthetic fractionalised\\n    uint256 public jotsSupply;\\n\\n    // interval in seconds between the one flip to another in one lock contract\\n    uint256 public flippingInterval;\\n\\n    // amount of reward that the flipper gets if he is right on the outcome\\n    uint256 public flippingReward;\\n\\n    // amount of jots into play in each flip\\n    uint256 public flippingAmount;\\n\\n    // the duration of an NFT auction in seconds\\n    uint256 public auctionDuration;\\n\\n    event JotsSupplyUpdated(uint256 value);\\n    event FlippingIntervalUpdated(uint256 value);\\n    event FlippingRewardUpdated(uint256 value);\\n    event FlippingAmountUpdated(uint256 value);\\n    event AuctionDurationUpdated(uint256 value);\\n\\n    /**\\n     * @dev sets the default (initial) values of the parameters\\n     *      also transfers the ownership to the governance\\n     */\\n    constructor(\\n        uint256 jotsSupply_,\\n        uint256 flippingInterval_,\\n        uint256 flippingReward_,\\n        uint256 flippingAmount_,\\n        address governanceContractAddress_\\n    ) {\\n        jotsSupply = jotsSupply_;\\n        flippingInterval = flippingInterval_;\\n        flippingReward = flippingReward_;\\n        flippingAmount = flippingAmount_;\\n\\n        // transfer ownership\\n        transferOwnership(governanceContractAddress_);\\n    }\\n\\n    function setJotsSupply(uint256 jotsSupply_) external onlyOwner {\\n        jotsSupply = jotsSupply_;\\n        emit JotsSupplyUpdated(jotsSupply_);\\n    }\\n\\n    function setFlippingInterval(uint256 flippingInterval_) external onlyOwner {\\n        flippingInterval = flippingInterval_;\\n        emit FlippingIntervalUpdated(flippingInterval_);\\n    }\\n\\n    function setFlippingReward(uint256 flippingReward_) external onlyOwner {\\n        flippingReward = flippingReward_;\\n        emit FlippingRewardUpdated(flippingReward_);\\n    }\\n\\n    function setFlippingAmount(uint256 flippingAmount_) external onlyOwner {\\n        flippingAmount = flippingAmount_;\\n        emit FlippingAmountUpdated(flippingAmount_);\\n    }\\n\\n    function setAuctionDuration(uint256 auctionDuration_) external onlyOwner {\\n        auctionDuration = auctionDuration_;\\n        emit AuctionDurationUpdated(auctionDuration_);\\n    }\\n}\\n\",\"keccak256\":\"0x4d676792b8a4d2c335173b8295492b52c5a7e5465b78b831be6202e1bca87569\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Jot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\n\\r\\ncontract Jot is ERC20, AccessControl, Initializable {\\r\\n    bytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\r\\n\\r\\n    // proxied values for the erc20 attributes\\r\\n    string private _proxiedName;\\r\\n    string private _proxiedSymbol;\\r\\n\\r\\n    /**\\r\\n     * @notice *swap address\\r\\n     */\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n\\r\\n    /**\\r\\n    * @notice pair address\\r\\n     */\\r\\n    address public uniswapV2Pair;\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    constructor() ERC20(\\\"Privi Jot Token Implementation\\\", \\\"pJOTI\\\") {}\\r\\n\\r\\n    function initialize(string calldata _name, string calldata _symbol, address swapAddress, address fundingTokenAddress) external initializer {\\r\\n        _proxiedName = _name;\\r\\n        _proxiedSymbol = _symbol;\\r\\n\\r\\n        _setupRole(MINTER, msg.sender);\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(swapAddress);\\r\\n\\t\\tuniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n\\t\\t\\t.createPair(address(this), fundingTokenAddress);\\r\\n    }\\r\\n\\r\\n\\r\\n    function mint(address account, uint256 amount) public onlyRole(MINTER) {\\r\\n        _mint(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _proxiedName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _proxiedSymbol;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xba8fe2184ac2029c510dd93902e8eff14b4993859f2fa979b91ec674b85a4ae4\",\"license\":\"MIT\"},\"contracts/polygon/implementations/JotPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract JotPool is Initializable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 public totalLiquidity;\\r\\n\\r\\n    mapping(address => uint256) private liquidity;\\r\\n\\r\\n    address public jot;\\r\\n\\r\\n    event LiquidityAdded(address provider, uint256 amount, uint256 mintedLiquidity);\\r\\n    event LiquidityRemoved(address provider, uint256 amount, uint256 liquidityBurnt);\\r\\n\\r\\n    function initialize(address _jot) external initializer {\\r\\n        require(_jot != address(0), \\\"Invalid Jot token\\\");\\r\\n        jot = _jot;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n        uint256 mintedLiquidity = totalLiquidity > 0\\r\\n            ? (totalLiquidity * amount) / IERC20(jot).balanceOf(address(this))\\r\\n            : 100;\\r\\n        liquidity[msg.sender] += mintedLiquidity;\\r\\n        totalLiquidity += mintedLiquidity;\\r\\n        emit LiquidityAdded(msg.sender, amount, mintedLiquidity);\\r\\n        IERC20(jot).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(uint256 amount) external {\\r\\n        require(liquidity[msg.sender] >= amount, \\\"Remove amount exceeds balance\\\");\\r\\n        uint256 liquidityBurnt = (IERC20(jot).balanceOf(address(this)) * amount) / totalLiquidity;\\r\\n        if (totalLiquidity - amount > 0) {\\r\\n            liquidity[msg.sender] -= amount;\\r\\n            totalLiquidity -= amount;\\r\\n        } else {\\r\\n            liquidity[msg.sender] = 100;\\r\\n            totalLiquidity = 100;\\r\\n        }\\r\\n\\r\\n        emit LiquidityRemoved(msg.sender, amount, liquidityBurnt);\\r\\n\\r\\n        IERC20(jot).safeTransfer(msg.sender, liquidityBurnt);\\r\\n    }\\r\\n\\r\\n    function balance() external view returns (uint256) {\\r\\n        return liquidity[msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf204730d17b0af61bd697e13e398f50207857e2d645d29e2a7f204f266743531\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct JotsData {\\n    uint256 ownerSupply;\\n    uint256 sellingSupply;\\n    uint256 soldSupply;\\n    uint256 liquiditySupply;\\n    uint256 liquiditySold;\\n    uint256 fractionPrices;\\n}\\n\",\"keccak256\":\"0xe54b3b628a6335cbd1ef78cea671615b0d1a33e4804feb2b016c9d798f48f462\",\"license\":\"MIT\"},\"contracts/polygon/implementations/SyntheticCollectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../SyntheticProtocolRouter.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\nimport \\\"./Structs.sol\\\";\\r\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\r\\n\\r\\ncontract SyntheticCollectionManager is AccessControl, Initializable {\\r\\n    bytes32 public constant ROUTER = keccak256(\\\"ROUTER\\\");\\r\\n    bytes32 public constant AUCTION_MANAGER = keccak256(\\\"AUCTION_MANAGER\\\");\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter public _tokenCounter;\\r\\n\\r\\n    /**\\r\\n     * @notice the address of the Protocol Router\\r\\n     */\\r\\n    address public _syntheticProtocolRouterAddress;\\r\\n\\r\\n    ProtocolParameters public protocol;\\r\\n\\r\\n    // token id => bool\\r\\n    // false, an nft has not been registered\\r\\n    // true, an nft has been registered\\r\\n    mapping(uint256 => bool) public _tokens;\\r\\n\\r\\n    // URIs mapping\\r\\n    // token id => metadata\\r\\n    mapping(uint256 => string) private _tokenMetadata;\\r\\n\\r\\n    /**\\r\\n     * @notice address of the original collection\\r\\n     */\\r\\n    address public _originalCollectionAddress;\\r\\n\\r\\n    /**\\r\\n     * @dev ERC20 totalSupply (governance) parameter\\r\\n     * TODO: get from governance\\r\\n     */\\r\\n    uint256 private jotsSupply;\\r\\n\\r\\n    /**\\r\\n     * @notice jot Address for this collection\\r\\n     */\\r\\n    address public jotAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice funding token address\\r\\n     */\\r\\n    address public fundingTokenAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice Jot data for each token\\r\\n     */\\r\\n    mapping(uint256 => JotsData) public _jots;\\r\\n\\r\\n    /**\\r\\n     * @notice Synthetic NFT Address  for this collection\\r\\n     */\\r\\n    address public erc721address; \\r\\n\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    constructor() {}\\r\\n\\r\\n    function initialize(\\r\\n        address _jotAddress,\\r\\n        address originalCollectionAddress_,\\r\\n        address _erc721address,\\r\\n        address auctionManagerAddress,\\r\\n        address protocol_,\\r\\n        address fundingTokenAddress_\\r\\n    ) external initializer {\\r\\n        jotAddress = _jotAddress;\\r\\n        erc721address = _erc721address;\\r\\n        _originalCollectionAddress = originalCollectionAddress_;\\r\\n        _syntheticProtocolRouterAddress = msg.sender;\\r\\n        protocol = ProtocolParameters(protocol_);\\r\\n        jotsSupply = protocol.jotsSupply();\\r\\n        fundingTokenAddress = fundingTokenAddress_;\\r\\n\\r\\n        _setupRole(ROUTER, msg.sender);\\r\\n\\r\\n        _setupRole(AUCTION_MANAGER, auctionManagerAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev we need to pass the jobSupply here to work well even when the governance\\r\\n     *      changes this protocol parameter in the middle of the auction\\r\\n     */\\r\\n    function reassignNFT(\\r\\n        uint256 nftId_,\\r\\n        address newOwner_,\\r\\n        uint256 jotsSupply_\\r\\n    ) external onlyRole(AUCTION_MANAGER) {\\r\\n        JotsData storage data = _jots[nftId_];\\r\\n\\r\\n        // the auction could only be started if ownerSupply is 0\\r\\n        assert(data.ownerSupply == 0);\\r\\n\\r\\n        // TODO: implement this logic\\r\\n\\r\\n        // data.ownerSupply = jotsSupply_;\\r\\n        // data.sellingSupply = 0;\\r\\n        // data.soldSupply = 0;\\r\\n        // data.liquiditySupply = 0;\\r\\n        // data.liquiditySold = 0;\\r\\n        // data.fractionPrices = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This method calls chainlink oracle and\\r\\n     * verifies if the NFT has been locked on NFTVaultManager. In addition\\r\\n     * gets the metadata of the NFT\\r\\n     */\\r\\n    function verifyNFT(uint256 tokenId) public view returns (bool) {\\r\\n        // TODO: call chainlink Oracle\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the metadata\\r\\n     * of the NFT. This should have been registered first by verifyNFT.\\r\\n     */\\r\\n    function getNFTMetadata(uint256 tokenId) private view returns (string memory) {\\r\\n        //TODO: get metadata from Oracle\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the owner of the NFT\\r\\n     */\\r\\n    function getSyntheticNFTOwner(uint256 tokenId) private view returns (address) {\\r\\n        //TODO: get owner from Oracle\\r\\n        return IERC721(erc721address).ownerOf(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice returns the Quickswap pool address\\r\\n     */\\r\\n    function poolAddress() public view returns (address) {\\r\\n        //TODO: check if pool is initiated\\r\\n        return IJot(jotAddress).uniswapV2Pair();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice public function. Checks if an NFT has\\r\\n     * been already minted.\\r\\n     */\\r\\n    function isSyntheticNFTCreated(uint256 tokenId) public view returns (bool) {\\r\\n        return ISyntheticNFT(erc721address).exists(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice public function. Checks if an NFT has\\r\\n     * been already fractionalised.\\r\\n     */\\r\\n    function isSyntheticNFTFractionalised(uint256 tokenId) public view returns (bool) {\\r\\n        return _jots[tokenId].ownerSupply != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks isSyntheticNFTCreated(address, id) is False.\\r\\n     * Then it mints a new NFT with: \\u201dto\\u201d, \\u201did\\u201d and \\u201dmetadata\\u201d\\r\\n     */\\r\\n    function generateSyntheticNFT(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        string memory metadata\\r\\n    ) private {\\r\\n        require(isSyntheticNFTCreated(tokenId) == false, \\\"Synthetic NFT already generated!\\\");\\r\\n        ISyntheticNFT(erc721address).safeMint(to, tokenId, metadata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice First\\r\\n     * it updates counter syntheticID++. Then:\\r\\n     * \\u2022 generateSyntheticNFT(address, id)\\r\\n     * \\u2022 Interacts with JOT contract for that address and:\\r\\n     * (a) Mints JotSupply (governance parameter)\\r\\n     * (b) Register ownerSupply (DO NOT SEND HIM/HER)\\r\\n     * (c) Register sellingSupply = (JotSupply-supplyToKeep)/2\\r\\n     * (d) Register soldSupply = 0\\r\\n     * (e) Register liquiditySupply = (JotSupply-supplyToKeep)/2.\\r\\n     * (f) Register liquiditySold = 0\\r\\n     *\\r\\n     */\\r\\n    function register(\\r\\n        uint256 tokenId,\\r\\n        uint256 supplyToKeep,\\r\\n        uint256 priceFraction\\r\\n    ) public onlyRole(ROUTER) {\\r\\n        _tokenCounter.increment();\\r\\n        string memory metadata = getNFTMetadata(tokenId);\\r\\n        generateSyntheticNFT(msg.sender, tokenId, metadata);\\r\\n\\r\\n        IJot(jotAddress).safeMint(address(this), jotsSupply);\\r\\n\\r\\n        uint256 sellingSupply = (jotsSupply - supplyToKeep) / 2;\\r\\n        uint256 liquiditySupply = (jotsSupply - supplyToKeep) / 2;\\r\\n\\r\\n        JotsData memory data = JotsData(\\r\\n            supplyToKeep,\\r\\n            sellingSupply,\\r\\n            0,\\r\\n            liquiditySupply,\\r\\n            0,\\r\\n            priceFraction\\r\\n        );\\r\\n\\r\\n        _jots[tokenId] = data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice allows the caller to buy jots using the Funding token\\r\\n    */\\r\\n    function BuyJotTokens(uint256 tokenId, uint256 buyAmount) public {\\r\\n        uint256 amount = buyAmount * _jots[tokenId].fractionPrices;\\r\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\r\\n\\r\\n        // Calculate amount left\\r\\n        uint256 amountLeft = _jots[tokenId].sellingSupply - _jots[tokenId].soldSupply;\\r\\n\\r\\n        // If amount left is lesser than buying amount\\r\\n        // then buying amount = amount left\\r\\n\\r\\n        if (amountLeft < amount) {\\r\\n            amount = amountLeft;\\r\\n        }\\r\\n\\r\\n        // Can't sell zero tokens\\r\\n        require(amount != 0, \\\"No tokens left!\\\");\\r\\n\\r\\n        // Transfer funding tokens\\r\\n        IERC20(fundingTokenAddress).transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        // Transfer Jots\\r\\n        IJot(jotAddress).transferFrom(address(this), msg.sender, buyAmount);\\r\\n\\r\\n        //Increase sold supply (amount in token) and liquidity sold (amount in ether)\\r\\n        _jots[tokenId].soldSupply += buyAmount;\\r\\n        _jots[tokenId].liquiditySold += amount;\\r\\n\\r\\n        //If all jots have been sold, then add liquidity\\r\\n        if (amount == amountLeft) {\\r\\n            addLiquidityToPool(tokenId);\\r\\n        }   \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice increase selling supply for a given NFT\\r\\n     * caller must be the owner of the NFT\\r\\n     */\\r\\n\\r\\n    function increaseSellingSupply(uint256 tokenId, uint256 amount) public {\\r\\n        require(msg.sender == getSyntheticNFTOwner(tokenId), \\\"You are not the owner of the NFT!\\\");\\r\\n        require(_jots[tokenId].ownerSupply >= amount, \\\"You do not have enough tokens left\\\");\\r\\n        _jots[tokenId].ownerSupply -= amount;\\r\\n        _jots[tokenId].sellingSupply += amount / 2;\\r\\n        _jots[tokenId].liquiditySupply += amount / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice decrease selling supply for a given NFT\\r\\n     * caller must be the owner of the NFT\\r\\n     */\\r\\n    function decreaseSellingSupply(uint256 tokenId, uint256 amount) public {\\r\\n        require(msg.sender == getSyntheticNFTOwner(tokenId), \\\"You are not the owner of the NFT!\\\");\\r\\n        require(_jots[tokenId].liquiditySupply >= amount / 2, \\\"You do not have enough liquidity left\\\");\\r\\n        require(_jots[tokenId].sellingSupply >= amount / 2, \\\"You do not have enough selling supply left\\\");\\r\\n\\r\\n        _jots[tokenId].ownerSupply += amount;\\r\\n        _jots[tokenId].sellingSupply -= amount / 2;\\r\\n        _jots[tokenId].liquiditySupply -= amount / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update the price of a fraction for a given NFT\\r\\n     * caller must be the owner\\r\\n     */\\r\\n    function updatePriceFraction(uint256 tokenId, uint256 newFractionPrice) public {\\r\\n        require(msg.sender == getSyntheticNFTOwner(tokenId), \\\"You are not the owner of the NFT!\\\");\\r\\n        _jots[tokenId].fractionPrices = newFractionPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice add available liquidity for a given token to UniSwap pool\\r\\n     */\\r\\n    function addLiquidityToPool(uint256 tokenId) public {\\r\\n        uint256 liquiditySupply = _jots[tokenId].liquiditySupply;\\r\\n        uint256 liquiditySold = _jots[tokenId].liquiditySold;\\r\\n\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        IJot(jotAddress).approve(address(uniswapV2Router), liquiditySupply);\\r\\n\\r\\n        IERC20(fundingTokenAddress).approve(address(uniswapV2Router), liquiditySold);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidity(\\r\\n            jotAddress,\\r\\n            fundingTokenAddress,\\r\\n            liquiditySupply,\\r\\n            liquiditySold,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            address(0),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function isAllowedToFlip(uint256 tokenId) public view {}\\r\\n\\r\\n    function flipJot(uint256 tokenId, uint256 prediction) public {}\\r\\n\\r\\n    /**\\r\\n     * @dev burn a token\\r\\n     */\\r\\n    function safeBurn(uint256 tokenId) public onlyRole(ROUTER) {\\r\\n        ISyntheticNFT(erc721address).safeBurn(tokenId);\\r\\n        _tokenCounter.decrement();\\r\\n    }\\r\\n\\r\\n    function getRemainingSupply(uint256 tokenId) public view returns (uint256) {\\r\\n        return _jots[tokenId].ownerSupply;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4fb3fd2f635d294459542d28ab8a122380611c3aeb2870da539694ccecc1a3a9\",\"license\":\"MIT\"},\"contracts/polygon/implementations/SyntheticNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract SyntheticNFT is ERC721, Initializable, AccessControl {\\r\\n\\r\\n    bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\r\\n\\r\\n    // token metadata\\r\\n    mapping(uint256 => string) private _tokenMetadata;\\r\\n\\r\\n    // proxied values for the erc721 attributes\\r\\n    string private _proxiedName;\\r\\n    string private _proxiedSymbol;\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    constructor() ERC721(\\\"Privi Collection Token\\\", \\\"PCT\\\") {}\\r\\n\\r\\n    function initialize(\\r\\n        string memory name_,\\r\\n        string memory symbol_\\r\\n    ) external initializer {\\r\\n        _proxiedName = name_;\\r\\n        _proxiedSymbol = symbol_;\\r\\n\\r\\n        _setupRole(MANAGER, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _proxiedName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _proxiedSymbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        return _tokenMetadata[tokenId];\\r\\n    }\\r\\n\\r\\n    function exists(uint256 tokenId) public view returns (bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n\\r\\n    function safeMint(address to, uint256 tokenId, string memory metadata) public onlyRole(MANAGER) {\\r\\n        _safeMint(to, tokenId);\\r\\n        _tokenMetadata[tokenId] = metadata;\\r\\n    }\\r\\n\\r\\n    function safeBurn(uint256 tokenId) public onlyRole(MANAGER) {\\r\\n        _burn(tokenId);\\r\\n        _tokenMetadata[tokenId] = \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override (AccessControl, ERC721)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x84380a84800305ed30ffcb1c5dc6a91b2dda36e705a8e3bf3539dfdc38f02e9e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000f9c38038062000f9c83398101604081905262000034916200013e565b6200003f33620000d1565b600980546001600160a01b03199081166001600160a01b039a8b1617909155600180548216988a1698909817909755600280548816968916969096179095556003805487169488169490941790935560048054861692871692909217909155600580548516918616919091179055600680548416918516919091179055600780549092169216919091179055620001e5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200013957600080fd5b919050565b600080600080600080600080610100898b0312156200015b578384fd5b620001668962000121565b97506200017660208a0162000121565b96506200018660408a0162000121565b95506200019660608a0162000121565b9450620001a660808a0162000121565b9350620001b660a08a0162000121565b9250620001c660c08a0162000121565b9150620001d660e08a0162000121565b90509295985092959890939650565b610da780620001f56000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806380f6d7821161007157806380f6d782146101775780638da5cb5b1461018a57806398a339841461019b578063c3e7e12d146101ae578063cf479511146101d1578063f2fde38b146101ff57600080fd5b806306c8d971146100ae578063166090cf146100cb57806356f4f1f014610112578063715018a61461013e5780637546d98514610148575b600080fd5b6008546100b89081565b6040519081526020015b60405180910390f35b6100fa6100d9366004610ad8565b6001600160a01b039081166000908152600a60205260409020600201541690565b6040516001600160a01b0390911681526020016100c2565b6100fa610120366004610ad8565b6001600160a01b039081166000908152600a60205260409020541690565b610146610212565b005b6100fa610156366004610ad8565b6001600160a01b039081166000908152600a60205260409020600101541690565b6009546100fa906001600160a01b031681565b6000546001600160a01b03166100fa565b6101466101a9366004610b22565b61027d565b6101c16101bc366004610af9565b610781565b60405190151581526020016100c2565b6101c16101df366004610ad8565b6001600160a01b039081166000908152600a602052604090205416151590565b61014661020d366004610ad8565b610882565b6000546001600160a01b031633146102715760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61027b600061094d565b565b6001600160a01b038087166000908152600a60205260408120549091166106f0576001546000906102b6906001600160a01b031661099d565b9050806001600160a01b0316638f15b414856040516020016102d89190610bfb565b604051602081830303815290604052856040516020016102f89190610c90565b60408051808303601f190181529082905260095460075460e086901b6001600160e01b031916845261033d94936001600160a01b039283169290911690600401610ce1565b600060405180830381600087803b15801561035757600080fd5b505af115801561036b573d6000803e3d6000fd5b50506002546000925061038791506001600160a01b031661099d565b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b1580156103ce57600080fd5b505af11580156103e2573d6000803e3d6000fd5b5050600454600092506103fe91506001600160a01b031661099d565b9050806001600160a01b0316634cd88b76876040516020016104209190610c58565b604051602081830303815290604052876040516020016104409190610c2d565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161046c929190610cbc565b600060405180830381600087803b15801561048657600080fd5b505af115801561049a573d6000803e3d6000fd5b50506003546104b492506001600160a01b0316905061099d565b60055460065460075460405163cc2a9a5b60e01b81526001600160a01b0388811660048301528f81166024830152868116604483015293841660648201529183166084830152821660a482015291955085169063cc2a9a5b9060c401600060405180830381600087803b15801561052a57600080fd5b505af115801561053e573d6000803e3d6000fd5b505050506040518060800160405280856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b0316815250600a60008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050507f74f876e9c2bb712f83b3d5cb07cce5a4a65dfe93e7454486b32a4bfd2c9f86f361068d60085490565b600954600554604080519384526001600160a01b038981166020860152888116858301528781166060860152868116608086015292831660a0850152911660c0830152519081900360e00190a16106e8600880546001019055565b50505061070d565b506001600160a01b038087166000908152600a6020526040902054165b604051633ea9715960e21b815260048101879052602481018690526044810185905281906001600160a01b0382169063faa5c56490606401600060405180830381600087803b15801561075f57600080fd5b505af1158015610773573d6000803e3d6000fd5b505050505050505050505050565b6001600160a01b038083166000908152600a60205260408120549091166107ea5760405162461bcd60e51b815260206004820152601960248201527f436f6c6c656374696f6e206e6f742072656769737465726564000000000000006044820152606401610268565b6001600160a01b038381166000908152600a60205260409081902054905163ed70554d60e01b8152600481018590529116908190819063ed70554d9060240160206040518083038186803b15801561084157600080fd5b505afa158015610855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108799190610baf565b95945050505050565b6000546001600160a01b031633146108dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610268565b6001600160a01b0381166109415760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610268565b61094a8161094d565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116610a355760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610268565b919050565b80356001600160a01b0381168114610a3557600080fd5b600082601f830112610a61578081fd5b813567ffffffffffffffff80821115610a7c57610a7c610d5b565b604051601f8301601f19908116603f01168101908282118183101715610aa457610aa4610d5b565b81604052838152866020858801011115610abc578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215610ae9578081fd5b610af282610a3a565b9392505050565b60008060408385031215610b0b578081fd5b610b1483610a3a565b946020939093013593505050565b60008060008060008060c08789031215610b3a578182fd5b610b4387610a3a565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff80821115610b74578384fd5b610b808a838b01610a51565b935060a0890135915080821115610b95578283fd5b50610ba289828a01610a51565b9150509295509295509295565b600060208284031215610bc0578081fd5b81518015158114610af2578182fd5b60008151808452610be7816020860160208601610d2b565b601f01601f19169290920160200192915050565b690283934bb34902537ba160b51b815260008251610c2081600a850160208701610d2b565b91909101600a0192915050565b6270535f60e81b815260008251610c4b816003850160208701610d2b565b9190910160030192915050565b6f0283934bb349029bcb73a3432ba34b1960851b815260008251610c83816010850160208701610d2b565b9190910160100192915050565b634a4f545f60e01b815260008251610caf816004850160208701610d2b565b9190910160040192915050565b604081526000610ccf6040830185610bcf565b82810360208401526108798185610bcf565b608081526000610cf46080830187610bcf565b8281036020840152610d068187610bcf565b6001600160a01b03958616604085015293909416606090920191909152509392505050565b60005b83811015610d46578181015183820152602001610d2e565b83811115610d55576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122014763fcea1e9979cf907e0787fa0bd5f716ba4cf3d2a3df48090a11643e060df64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806380f6d7821161007157806380f6d782146101775780638da5cb5b1461018a57806398a339841461019b578063c3e7e12d146101ae578063cf479511146101d1578063f2fde38b146101ff57600080fd5b806306c8d971146100ae578063166090cf146100cb57806356f4f1f014610112578063715018a61461013e5780637546d98514610148575b600080fd5b6008546100b89081565b6040519081526020015b60405180910390f35b6100fa6100d9366004610ad8565b6001600160a01b039081166000908152600a60205260409020600201541690565b6040516001600160a01b0390911681526020016100c2565b6100fa610120366004610ad8565b6001600160a01b039081166000908152600a60205260409020541690565b610146610212565b005b6100fa610156366004610ad8565b6001600160a01b039081166000908152600a60205260409020600101541690565b6009546100fa906001600160a01b031681565b6000546001600160a01b03166100fa565b6101466101a9366004610b22565b61027d565b6101c16101bc366004610af9565b610781565b60405190151581526020016100c2565b6101c16101df366004610ad8565b6001600160a01b039081166000908152600a602052604090205416151590565b61014661020d366004610ad8565b610882565b6000546001600160a01b031633146102715760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61027b600061094d565b565b6001600160a01b038087166000908152600a60205260408120549091166106f0576001546000906102b6906001600160a01b031661099d565b9050806001600160a01b0316638f15b414856040516020016102d89190610bfb565b604051602081830303815290604052856040516020016102f89190610c90565b60408051808303601f190181529082905260095460075460e086901b6001600160e01b031916845261033d94936001600160a01b039283169290911690600401610ce1565b600060405180830381600087803b15801561035757600080fd5b505af115801561036b573d6000803e3d6000fd5b50506002546000925061038791506001600160a01b031661099d565b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b1580156103ce57600080fd5b505af11580156103e2573d6000803e3d6000fd5b5050600454600092506103fe91506001600160a01b031661099d565b9050806001600160a01b0316634cd88b76876040516020016104209190610c58565b604051602081830303815290604052876040516020016104409190610c2d565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161046c929190610cbc565b600060405180830381600087803b15801561048657600080fd5b505af115801561049a573d6000803e3d6000fd5b50506003546104b492506001600160a01b0316905061099d565b60055460065460075460405163cc2a9a5b60e01b81526001600160a01b0388811660048301528f81166024830152868116604483015293841660648201529183166084830152821660a482015291955085169063cc2a9a5b9060c401600060405180830381600087803b15801561052a57600080fd5b505af115801561053e573d6000803e3d6000fd5b505050506040518060800160405280856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b0316815250600a60008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050507f74f876e9c2bb712f83b3d5cb07cce5a4a65dfe93e7454486b32a4bfd2c9f86f361068d60085490565b600954600554604080519384526001600160a01b038981166020860152888116858301528781166060860152868116608086015292831660a0850152911660c0830152519081900360e00190a16106e8600880546001019055565b50505061070d565b506001600160a01b038087166000908152600a6020526040902054165b604051633ea9715960e21b815260048101879052602481018690526044810185905281906001600160a01b0382169063faa5c56490606401600060405180830381600087803b15801561075f57600080fd5b505af1158015610773573d6000803e3d6000fd5b505050505050505050505050565b6001600160a01b038083166000908152600a60205260408120549091166107ea5760405162461bcd60e51b815260206004820152601960248201527f436f6c6c656374696f6e206e6f742072656769737465726564000000000000006044820152606401610268565b6001600160a01b038381166000908152600a60205260409081902054905163ed70554d60e01b8152600481018590529116908190819063ed70554d9060240160206040518083038186803b15801561084157600080fd5b505afa158015610855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108799190610baf565b95945050505050565b6000546001600160a01b031633146108dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610268565b6001600160a01b0381166109415760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610268565b61094a8161094d565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116610a355760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610268565b919050565b80356001600160a01b0381168114610a3557600080fd5b600082601f830112610a61578081fd5b813567ffffffffffffffff80821115610a7c57610a7c610d5b565b604051601f8301601f19908116603f01168101908282118183101715610aa457610aa4610d5b565b81604052838152866020858801011115610abc578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215610ae9578081fd5b610af282610a3a565b9392505050565b60008060408385031215610b0b578081fd5b610b1483610a3a565b946020939093013593505050565b60008060008060008060c08789031215610b3a578182fd5b610b4387610a3a565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff80821115610b74578384fd5b610b808a838b01610a51565b935060a0890135915080821115610b95578283fd5b50610ba289828a01610a51565b9150509295509295509295565b600060208284031215610bc0578081fd5b81518015158114610af2578182fd5b60008151808452610be7816020860160208601610d2b565b601f01601f19169290920160200192915050565b690283934bb34902537ba160b51b815260008251610c2081600a850160208701610d2b565b91909101600a0192915050565b6270535f60e81b815260008251610c4b816003850160208701610d2b565b9190910160030192915050565b6f0283934bb349029bcb73a3432ba34b1960851b815260008251610c83816010850160208701610d2b565b9190910160100192915050565b634a4f545f60e01b815260008251610caf816004850160208701610d2b565b9190910160040192915050565b604081526000610ccf6040830185610bcf565b82810360208401526108798185610bcf565b608081526000610cf46080830187610bcf565b8281036020840152610d068187610bcf565b6001600160a01b03958616604085015293909416606090920191909152509392505050565b60005b83811015610d46578181015183820152602001610d2e565b83811115610d55576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122014763fcea1e9979cf907e0787fa0bd5f716ba4cf3d2a3df48090a11643e060df64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerNFT(address,uint256,uint256,uint256,string,string)": {
        "params": {
          "collection": "the address of the synthetic collection",
          "originalName": "the original collection name",
          "originalSymbol": "the original collection symbol",
          "priceFraction": "the price for a fraction",
          "supplyToKeep": "supply to keep",
          "tokenId": "the token id"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_jot": {
        "details": "implementation addresses for proxies"
      },
      "collections": {
        "details": "collections map. collection address => collection data"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "collectionManagerRegistered(uint256,address,address,address,address,address,address)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "getCollectionManagerAddress(address)": {
        "notice": "getter for Collection Manager Address of a collection"
      },
      "getJotStakingAddress(address)": {
        "notice": "getter for Jot Staking Address of a collection"
      },
      "getJotsAddress(address)": {
        "notice": "getter for Jot Address of a collection"
      },
      "isSyntheticCollectionRegistered(address)": {
        "notice": "checks whether a collection is registered or not"
      },
      "isSyntheticNFTCreated(address,uint256)": {
        "notice": "checks whether a Synthetic NFT has been created for a given NFT or not"
      },
      "protocolVaults()": {
        "notice": "number of registered collections"
      },
      "registerNFT(address,uint256,uint256,uint256,string,string)": {
        "notice": "register an NFT collection"
      },
      "swapAddress()": {
        "notice": "QuickSwap address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8718,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_jot",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8720,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_jotPool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8722,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_collectionManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8724,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_syntheticNFT",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8726,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_auctionManager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 8728,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_protocol",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8730,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "fundingTokenAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8734,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "protocolVaults",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)6262_storage"
      },
      {
        "astId": 8737,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "swapAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 8743,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "collections",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(SyntheticCollection)8699_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(SyntheticCollection)8699_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SyntheticCollection)",
        "numberOfBytes": "32",
        "value": "t_struct(SyntheticCollection)8699_storage"
      },
      "t_struct(Counter)6262_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 6261,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SyntheticCollection)8699_storage": {
        "encoding": "inplace",
        "label": "struct SyntheticCollection",
        "members": [
          {
            "astId": 8692,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "collectionManagerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8694,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "jotAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8696,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "jotStakingAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 8698,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "syntheticNFTAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}