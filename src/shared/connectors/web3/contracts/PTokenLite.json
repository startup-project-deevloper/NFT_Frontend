{
  "address": "0xB3A1aDbf2aA87611A7A94C5b1081654381D5db7c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "UpdateMargin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "volume",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "cost",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "lastCumulativeFundingRate",
          "type": "int256"
        }
      ],
      "name": "UpdatePosition",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "delta",
          "type": "int256"
        }
      ],
      "name": "addMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getMargin",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumPositionHolders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "volume",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cost",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lastCumulativeFundingRate",
              "type": "int256"
            }
          ],
          "internalType": "struct IPTokenLite.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPool",
          "type": "address"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "margin",
          "type": "int256"
        }
      ],
      "name": "updateMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "volume",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cost",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lastCumulativeFundingRate",
              "type": "int256"
            }
          ],
          "internalType": "struct IPTokenLite.Position",
          "name": "position",
          "type": "tuple"
        }
      ],
      "name": "updatePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x93bc79b817c7a851e363e7ceb4b8620570b631b05f3c4003aa308c4c7163707e",
  "receipt": {
    "to": null,
    "from": "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
    "contractAddress": "0xB3A1aDbf2aA87611A7A94C5b1081654381D5db7c",
    "transactionIndex": 2,
    "gasUsed": "1519795",
    "logsBloom": "0x
    "blockHash": "0xabbf7aadd062cd2bc9d7ce6d92cb66b88bc5e7ee8574e1219e299ef430b10ec7",
    "transactionHash": "0x93bc79b817c7a851e363e7ceb4b8620570b631b05f3c4003aa308c4c7163707e",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 19354297,
        "transactionHash": "0x93bc79b817c7a851e363e7ceb4b8620570b631b05f3c4003aa308c4c7163707e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001032bc8b51ba0000000000000000000000000000000000000000000000000044946f8dc23bcb4c000000000000000000000000000000000000000000000000004c1e5bd5553c0000000000000000000000000000000000000000000000000044843cd136ea114c000000000000000000000000000000000000000000000000005c511860a6f600",
        "logIndex": 4,
        "blockHash": "0xabbf7aadd062cd2bc9d7ce6d92cb66b88bc5e7ee8574e1219e299ef430b10ec7"
      }
    ],
    "blockNumber": 19354297,
    "cumulativeGasUsed": "2155693",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Privi Exchange Position Token",
    "pPT"
  ],
  "solcInputHash": "607a69e31484798c31354cc363f2d7ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"UpdateMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lastCumulativeFundingRate\",\"type\":\"int256\"}],\"name\":\"UpdatePosition\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getMargin\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumPositionHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumulativeFundingRate\",\"type\":\"int256\"}],\"internalType\":\"struct IPTokenLite.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"margin\",\"type\":\"int256\"}],\"name\":\"updateMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumulativeFundingRate\",\"type\":\"int256\"}],\"internalType\":\"struct IPTokenLite.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"name\":\"updatePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `operator` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address)\":{\"details\":\"Returns the 'tokenId' owned by 'owner' Requirements:  - `owner` must exist\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token   by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token   by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token   by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/perpetual_futures/tokens/PTokenLite.sol\":\"PTokenLite\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/perpetual_futures/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdaf482a8cd21ed3e200f548ec30dbcad2fd6532ad90fe537ef12e2bbb826e485\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `operator` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed operator, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the 'tokenId' owned by 'owner'\\n     *\\n     * Requirements:\\n     *\\n     *  - `owner` must exist\\n     */\\n    function getTokenId(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Gives permission to `operator` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address\\n     * clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address operator, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     *   by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first\\n     * that contract recipients are aware of the ERC721 protocol to prevent\\n     * tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token\\n     *   by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     *   by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xada012cd8e453427cb9a6ebb44efd1d952bced46067fa047e7d63ed1c6a4a182\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via\\n     * {IERC721-safeTransferFrom} by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient,\\n     * the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x1de916f117671f0b5243e530c4f33cf38727a04b721d66a353a1d15074134c41\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/interfaces/IPTokenLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface IPTokenLite is IERC721 {\\n    struct Position {\\n        // position volume, long is positive and short is negative\\n        int256 volume;\\n        // the cost the establish this position\\n        int256 cost;\\n        // the last cumulativeFundingRate since last funding settlement for this position\\n        // the overflow for this value in intended\\n        int256 lastCumulativeFundingRate;\\n    }\\n\\n    event UpdateMargin(address indexed owner, int256 amount);\\n\\n    event UpdatePosition(address indexed owner, int256 volume, int256 cost, int256 lastCumulativeFundingRate);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function setPool(address newPool) external;\\n\\n    function pool() external view returns (address);\\n\\n    function totalMinted() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getNumPositionHolders() external view returns (uint256);\\n\\n    function exists(address owner) external view returns (bool);\\n\\n    function getMargin(address owner) external view returns (int256);\\n\\n    function updateMargin(address owner, int256 margin) external;\\n\\n    function addMargin(address owner, int256 delta) external;\\n\\n    function getPosition(address owner) external view returns (Position memory);\\n\\n    function updatePosition(address owner, Position memory position) external;\\n\\n    function mint(address owner) external;\\n\\n    function burn(address owner) external;\\n}\\n\",\"keccak256\":\"0xa60644d583853b3398dc6e0252a9034b6d69260c1f630effb5be4ce29e7c21e1\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/library/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85256cdecf5b0cced644cd2621c3c9aca2f488c5003496421daaf112b0ad79d4\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/tokens/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor() {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x725fc1488828b98aed85405d1cb15e79772420dcc7152d0a57f8172513be0954\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"../library/Address.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 Non-Fungible Token Implementation\\n *\\n * Exert uniqueness of owner: one owner can only have one token\\n */\\ncontract ERC721 is IERC721, ERC165 {\\n    using Address for address;\\n\\n    /*\\n     * Equals to `bytes4(keccak256('onERC721Received(address,address,uint256,bytes)'))`\\n     * which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n     */\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x081812fc ^ 0xe985e9c5 ^\\n     *        0x095ea7b3 ^ 0xa22cb465 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    // Mapping from owner address to tokenId\\n    // tokenId starts from 1, 0 is reserved for nonexistent token\\n    // One owner can only own one token in this contract\\n    mapping(address => uint256) internal _ownerTokenId;\\n\\n    // Mapping from tokenId to owner\\n    mapping(uint256 => address) internal _tokenIdOwner;\\n\\n    // Mapping from tokenId to approved operator\\n    mapping(uint256 => address) internal _tokenIdOperator;\\n\\n    // Mapping from owner to operator for all approval\\n    mapping(address => mapping(address => bool)) internal _ownerOperator;\\n\\n    modifier _existsTokenId_(uint256 tokenId) {\\n        require(_exists(tokenId), \\\"ERC721: nonexistent tokenId\\\");\\n        _;\\n    }\\n\\n    modifier _existsOwner_(address owner) {\\n        require(_exists(owner), \\\"ERC721: nonexistent owner\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n    }\\n\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return _exists(owner) ? 1 : 0;\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view override _existsTokenId_(tokenId) returns (address) {\\n        return _tokenIdOwner[tokenId];\\n    }\\n\\n    function getTokenId(address owner) public view override _existsOwner_(owner) returns (uint256) {\\n        return _ownerTokenId[owner];\\n    }\\n\\n    function getApproved(uint256 tokenId) public view override _existsTokenId_(tokenId) returns (address) {\\n        return _tokenIdOperator[tokenId];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        _existsOwner_(owner)\\n        returns (bool)\\n    {\\n        return _ownerOperator[owner][operator];\\n    }\\n\\n    function approve(address operator, uint256 tokenId) public override {\\n        require(msg.sender == ownerOf(tokenId), \\\"ERC721.approve: caller not owner\\\");\\n        _tokenIdOperator[tokenId] = operator;\\n        emit Approval(msg.sender, operator, tokenId);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        require(_exists(msg.sender), \\\"ERC721.setApprovalForAll: nonexistent owner\\\");\\n        _ownerOperator[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        _validateTransfer(msg.sender, from, to, tokenId);\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override {\\n        _validateTransfer(msg.sender, from, to, tokenId);\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    //================================================================================\\n\\n    function _exists(address owner) internal view returns (bool) {\\n        return _ownerTokenId[owner] != 0;\\n    }\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokenIdOwner[tokenId] != address(0);\\n    }\\n\\n    function _validateTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal view {\\n        require(from == ownerOf(tokenId), \\\"ERC721._validateTransfer: not owned token\\\");\\n        require(to != address(0) && !_exists(to), \\\"ERC721._validateTransfer: to address exists or 0\\\");\\n        require(\\n            operator == from || _tokenIdOperator[tokenId] == operator || _ownerOperator[from][operator],\\n            \\\"ERC721._validateTransfer: not owner nor approved\\\"\\n        );\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        // clear previous ownership and approvals\\n        delete _ownerTokenId[from];\\n        delete _tokenIdOperator[tokenId];\\n\\n        // set up new owner\\n        _ownerTokenId[to] = tokenId;\\n        _tokenIdOwner[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract\\n     * recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Validation check on parameters should be carried out before calling this function.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     *      The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID.\\n     * @param to target address that will receive the tokens.\\n     * @param tokenId uint256 ID of the token to be transferred.\\n     * @param data bytes optional data to send along with the call.\\n     * @return bool whether the call correctly returned the expected magic value.\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                msg.sender,\\n                from,\\n                tokenId,\\n                data\\n            ),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n}\\n\",\"keccak256\":\"0x268ac526d996975f819b41a8b57b24b368503c999cf1f77b204c34ec6ef858e4\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/tokens/PTokenLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../interfaces/IPTokenLite.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\n\\ncontract PTokenLite is IPTokenLite, ERC721 {\\n    // PToken name\\n    string internal _name;\\n    // PToken symbol\\n    string internal _symbol;\\n    // associative pool address\\n    address internal _pool;\\n    // total number of PToken ever minted, this number will never decease\\n    uint256 internal _totalMinted;\\n    // total PTokens hold by all traders\\n    uint256 internal _totalSupply;\\n\\n    // tokenId => margin\\n    mapping(uint256 => int256) internal _tokenIdMargin;\\n    // tokenId => (symbolId => Position)\\n    mapping(uint256 => Position) internal _tokenIdPosition;\\n\\n    // symbolId => number of position holders\\n    uint256 internal _numPositionHolders;\\n\\n    modifier _pool_() {\\n        require(msg.sender == _pool, \\\"PToken: only pool\\\");\\n        _;\\n    }\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function setPool(address newPool) public override {\\n        require(_pool == address(0) || _pool == msg.sender, \\\"LToken.setPool: not allowed\\\");\\n        _pool = newPool;\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function pool() public view override returns (address) {\\n        return _pool;\\n    }\\n\\n    function totalMinted() public view override returns (uint256) {\\n        return _totalMinted;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function getNumPositionHolders() public view override returns (uint256) {\\n        return _numPositionHolders;\\n    }\\n\\n    function exists(address owner) public view override returns (bool) {\\n        return _exists(owner);\\n    }\\n\\n    function getMargin(address owner) public view override returns (int256) {\\n        return _tokenIdMargin[_ownerTokenId[owner]];\\n    }\\n\\n    function updateMargin(address owner, int256 margin) public override _pool_ {\\n        _tokenIdMargin[_ownerTokenId[owner]] = margin;\\n        emit UpdateMargin(owner, margin);\\n    }\\n\\n    function addMargin(address owner, int256 delta) public override _pool_ {\\n        int256 margin = _tokenIdMargin[_ownerTokenId[owner]] + delta;\\n        _tokenIdMargin[_ownerTokenId[owner]] = margin;\\n        emit UpdateMargin(owner, margin);\\n    }\\n\\n    function getPosition(address owner) public view override returns (Position memory) {\\n        return _tokenIdPosition[_ownerTokenId[owner]];\\n    }\\n\\n    function updatePosition(address owner, Position memory position) public override _pool_ {\\n        int256 preVolume = _tokenIdPosition[_ownerTokenId[owner]].volume;\\n        int256 curVolume = position.volume;\\n\\n        if (preVolume == 0 && curVolume != 0) {\\n            _numPositionHolders++;\\n        } else if (preVolume != 0 && curVolume == 0) {\\n            _numPositionHolders--;\\n        }\\n\\n        _tokenIdPosition[_ownerTokenId[owner]] = position;\\n        emit UpdatePosition(owner, position.volume, position.cost, position.lastCumulativeFundingRate);\\n    }\\n\\n    function mint(address owner) public override _pool_ {\\n        _totalSupply++;\\n        uint256 tokenId = ++_totalMinted;\\n        require(!_exists(tokenId), \\\"PToken.mint: existent tokenId\\\");\\n\\n        _ownerTokenId[owner] = tokenId;\\n        _tokenIdOwner[tokenId] = owner;\\n\\n        emit Transfer(address(0), owner, tokenId);\\n    }\\n\\n    function burn(address owner) public override _pool_ {\\n        uint256 tokenId = _ownerTokenId[owner];\\n\\n        _totalSupply--;\\n        delete _ownerTokenId[owner];\\n        delete _tokenIdOwner[tokenId];\\n        delete _tokenIdOperator[tokenId];\\n        delete _tokenIdMargin[tokenId];\\n\\n        if (_tokenIdPosition[tokenId].volume != 0) {\\n            _numPositionHolders--;\\n        }\\n        delete _tokenIdPosition[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7f855dfabb3f789f392b4dd0387ec8314501e35718d49f062aba396c93e21859\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001bd838038062001bd8833981016040819052620000349162000269565b620000466301ffc9a760e01b6200008c565b620000586380ac58cd60e01b6200008c565b81516200006d90600590602085019062000110565b5080516200008390600690602084019062000110565b50505062000323565b6001600160e01b03198082161415620000eb5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640160405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b8280546200011e90620002d0565b90600052602060002090601f0160209004810192826200014257600085556200018d565b82601f106200015d57805160ff19168380011785556200018d565b828001600101855582156200018d579182015b828111156200018d57825182559160200191906001019062000170565b506200019b9291506200019f565b5090565b5b808211156200019b5760008155600101620001a0565b600082601f830112620001c7578081fd5b81516001600160401b0380821115620001e457620001e46200030d565b604051601f8301601f19908116603f011681019082821181831017156200020f576200020f6200030d565b816040528381526020925086838588010111156200022b578485fd5b8491505b838210156200024e57858201830151818301840152908201906200022f565b838211156200025f57848385830101525b9695505050505050565b600080604083850312156200027c578182fd5b82516001600160401b038082111562000293578384fd5b620002a186838701620001b6565b93506020850151915080821115620002b7578283fd5b50620002c685828601620001b6565b9150509250929050565b600181811c90821680620002e557607f821691505b602082108114156200030757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6118a580620003336000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80636a627842116100de578063a2309ff811610097578063e985e9c511610071578063e985e9c51461037e578063f153768614610391578063f6a3d24e146103a4578063f84f89a2146103b757600080fd5b8063a2309ff814610350578063ac2681c614610358578063b88d4fde1461036b57600080fd5b80636a627842146102e957806370a08231146102fc57806388f74d091461030f57806389afcb441461032257806395d89b4114610335578063a22cb4651461033d57600080fd5b806316f0115b1161014b57806323b872dd1161012557806323b872dd1461029d57806342842e0e146102b05780634437152a146102c35780636352211e146102d657600080fd5b806316f0115b1461027157806318160ddd146102825780631a9c941f1461028a57600080fd5b806301ffc9a71461019357806306fdde03146101d5578063081812fc146101ea578063095ea7b31461021557806314f2c2601461022a57806316c197391461023c575b600080fd5b6101c06101a13660046115e0565b6001600160e01b03191660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b6101dd6103ed565b6040516101cc91906116b5565b6101fd6101f8366004611618565b61047f565b6040516001600160a01b0390911681526020016101cc565b610228610223366004611539565b61050b565b005b600c545b6040519081526020016101cc565b61024f61024a3660046113c0565b6105cd565b60408051825181526020808401519082015291810151908201526060016101cc565b6007546001600160a01b03166101fd565b60095461022e565b610228610298366004611539565b61063c565b6102286102ab36600461140c565b6106c3565b6102286102be36600461140c565b6106df565b6102286102d13660046113c0565b6106fa565b6101fd6102e4366004611618565b61078a565b6102286102f73660046113c0565b61080d565b61022e61030a3660046113c0565b610931565b61022861031d366004611562565b610953565b6102286103303660046113c0565b610a7d565b6101dd610b9f565b61022861034b3660046114ff565b610bae565b60085461022e565b610228610366366004611539565b610c83565b610228610379366004611447565b610d41565b6101c061038c3660046113da565b610d5f565b61022e61039f3660046113c0565b610de3565b6101c06103b23660046113c0565b610e54565b61022e6103c53660046113c0565b6001600160a01b03166000908152600160209081526040808320548352600a90915290205490565b6060600580546103fc906117a8565b80601f0160208091040260200160405190810160405280929190818152602001828054610428906117a8565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008181526002602052604081205482906001600160a01b03166104ea5760405162461bcd60e51b815260206004820152601b60248201527f4552433732313a206e6f6e6578697374656e7420746f6b656e4964000000000060448201526064015b60405180910390fd5b6000838152600360205260409020546001600160a01b031691505b50919050565b6105148161078a565b6001600160a01b0316336001600160a01b0316146105745760405162461bcd60e51b815260206004820181905260248201527f4552433732312e617070726f76653a2063616c6c6572206e6f74206f776e657260448201526064016104e1565b60008181526003602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839233917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a45050565b6105f160405180606001604052806000815260200160008152602001600081525090565b506001600160a01b03166000908152600160208181526040808420548452600b8252928390208351606081018552815481529281015491830191909152600201549181019190915290565b6007546001600160a01b031633146106665760405162461bcd60e51b81526004016104e1906116c8565b6001600160a01b0382166000818152600160209081526040808320548352600a82529182902084905590518381527f19b12734a92b05dca61848b299f0f8feb8ca9861f2e9805fcb673ccdde1113ac910160405180910390a25050565b6106cf33848484610e65565b6106da838383611031565b505050565b6106da83838360405180602001604052806000815250610d41565b6007546001600160a01b0316158061071c57506007546001600160a01b031633145b6107685760405162461bcd60e51b815260206004820152601b60248201527f4c546f6b656e2e736574506f6f6c3a206e6f7420616c6c6f776564000000000060448201526064016104e1565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526002602052604081205482906001600160a01b03166107f05760405162461bcd60e51b815260206004820152601b60248201527f4552433732313a206e6f6e6578697374656e7420746f6b656e4964000000000060448201526064016104e1565b50506000908152600260205260409020546001600160a01b031690565b6007546001600160a01b031633146108375760405162461bcd60e51b81526004016104e1906116c8565b60098054906000610847836117dd565b9190505550600060086000815461085d906117dd565b91829055506000818152600260205260409020549091506001600160a01b0316156108ca5760405162461bcd60e51b815260206004820152601d60248201527f50546f6b656e2e6d696e743a206578697374656e7420746f6b656e496400000060448201526064016104e1565b6001600160a01b0382166000818152600160209081526040808320859055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061093c826110bd565b61094757600061094a565b60015b60ff1692915050565b6007546001600160a01b0316331461097d5760405162461bcd60e51b81526004016104e1906116c8565b6001600160a01b0382166000908152600160209081526040808320548352600b9091529020548151811580156109b257508015155b156109d157600c80549060006109c7836117dd565b91905055506109f9565b81158015906109de575080155b156109f957600c80549060006109f383611791565b91905055505b6001600160a01b0384166000818152600160208181526040808420548452600b825292839020875180825588830151938201849055888501516002909201829055845190815291820192909252918201527f69bbdb7f76e37244169df3de05c093148c618f1e44c748d8ee450284438be7ea9060600160405180910390a250505050565b6007546001600160a01b03163314610aa75760405162461bcd60e51b81526004016104e1906116c8565b6001600160a01b038116600090815260016020526040812054600980549192610acf83611791565b90915550506001600160a01b03821660009081526001602090815260408083208390558383526002825280832080546001600160a01b03199081169091556003835281842080549091169055600a8252808320839055600b90915290205415610b4857600c8054906000610b4283611791565b91905055505b6000818152600b602052604080822082815560018101839055600201829055518291906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6060600680546103fc906117a8565b610bb7336110bd565b610c175760405162461bcd60e51b815260206004820152602b60248201527f4552433732312e736574417070726f76616c466f72416c6c3a206e6f6e65786960448201526a39ba32b73a1037bbb732b960a91b60648201526084016104e1565b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6007546001600160a01b03163314610cad5760405162461bcd60e51b81526004016104e1906116c8565b6001600160a01b0382166000908152600160209081526040808320548352600a909152812054610cde908390611724565b6001600160a01b0384166000818152600160209081526040808320548352600a825291829020849055905183815292935090917f19b12734a92b05dca61848b299f0f8feb8ca9861f2e9805fcb673ccdde1113ac910160405180910390a2505050565b610d4d33858585610e65565b610d59848484846110da565b50505050565b600082610d6b816110bd565b610db35760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d103737b732bc34b9ba32b73a1037bbb732b960391b60448201526064016104e1565b50506001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600081610def816110bd565b610e375760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d103737b732bc34b9ba32b73a1037bbb732b960391b60448201526064016104e1565b50506001600160a01b031660009081526001602052604090205490565b6000610e5f826110bd565b92915050565b610e6e8161078a565b6001600160a01b0316836001600160a01b031614610ee05760405162461bcd60e51b815260206004820152602960248201527f4552433732312e5f76616c69646174655472616e736665723a206e6f74206f776044820152683732b2103a37b5b2b760b91b60648201526084016104e1565b6001600160a01b03821615801590610efe5750610efc826110bd565b155b610f635760405162461bcd60e51b815260206004820152603060248201527f4552433732312e5f76616c69646174655472616e736665723a20746f2061646460448201526f07265737320657869737473206f7220360841b60648201526084016104e1565b826001600160a01b0316846001600160a01b03161480610f9c57506000818152600360205260409020546001600160a01b038581169116145b80610fcc57506001600160a01b0380841660009081526004602090815260408083209388168352929052205460ff165b610d595760405162461bcd60e51b815260206004820152603060248201527f4552433732312e5f76616c69646174655472616e736665723a206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b60648201526084016104e1565b6001600160a01b0380841660008181526001602081815260408084208490558684526003825280842080546001600160a01b03199081169091559588168085529282528084208790558684526002909152808320805490951682179094559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0316600090815260016020526040902054151590565b6110e5848484611031565b6110f184848484611158565b610d595760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104e1565b60006001600160a01b0384163b61117157506001611222565b60006111f263150b7a0260e01b338887876040516024016111959493929190611678565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505060405180606001604052806032815260200161183e603291396001600160a01b038816919061122a565b905060008180602001905181019061120a91906115fc565b6001600160e01b031916630a85bd0160e11b14925050505b949350505050565b60606112398484600085611243565b90505b9392505050565b6060824710156112a45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104e1565b843b6112f25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104e1565b600080866001600160a01b0316858760405161130e919061165c565b60006040518083038185875af1925050503d806000811461134b576040519150601f19603f3d011682016040523d82523d6000602084013e611350565b606091505b509150915061136082828661136b565b979650505050505050565b6060831561137a57508161123c565b82511561138a5782518084602001fd5b8160405162461bcd60e51b81526004016104e191906116b5565b80356001600160a01b03811681146113bb57600080fd5b919050565b6000602082840312156113d1578081fd5b61123c826113a4565b600080604083850312156113ec578081fd5b6113f5836113a4565b9150611403602084016113a4565b90509250929050565b600080600060608486031215611420578081fd5b611429846113a4565b9250611437602085016113a4565b9150604084013590509250925092565b6000806000806080858703121561145c578081fd5b611465856113a4565b935060206114748187016113a4565b935060408601359250606086013567ffffffffffffffff80821115611497578384fd5b818801915088601f8301126114aa578384fd5b8135818111156114bc576114bc61180e565b6114ce601f8201601f191685016116f3565b915080825289848285010111156114e3578485fd5b8084840185840137810190920192909252939692955090935050565b60008060408385031215611511578182fd5b61151a836113a4565b91506020830135801515811461152e578182fd5b809150509250929050565b6000806040838503121561154b578182fd5b611554836113a4565b946020939093013593505050565b6000808284036080811215611575578283fd5b61157e846113a4565b92506060601f1982011215611591578182fd5b506040516060810181811067ffffffffffffffff821117156115b5576115b561180e565b8060405250602084013581526040840135602082015260608401356040820152809150509250929050565b6000602082840312156115f1578081fd5b813561123c81611824565b60006020828403121561160d578081fd5b815161123c81611824565b600060208284031215611629578081fd5b5035919050565b60008151808452611648816020860160208601611765565b601f01601f19169290920160200192915050565b6000825161166e818460208701611765565b9190910192915050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906116ab90830184611630565b9695505050505050565b60208152600061123c6020830184611630565b60208082526011908201527014151bdad95b8e881bdb9b1e481c1bdbdb607a1b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561171c5761171c61180e565b604052919050565b600080821280156001600160ff1b0384900385131615611746576117466117f8565b600160ff1b839003841281161561175f5761175f6117f8565b50500190565b60005b83811015611780578181015183820152602001611768565b83811115610d595750506000910152565b6000816117a0576117a06117f8565b506000190190565b600181811c908216806117bc57607f821691505b6020821081141561050557634e487b7160e01b600052602260045260246000fd5b60006000198214156117f1576117f16117f8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461183a57600080fd5b5056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572a2646970667358221220cb494a8260e578c8370baeb829f7966a5db5876185a7ac22169c0eb076068d3464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80636a627842116100de578063a2309ff811610097578063e985e9c511610071578063e985e9c51461037e578063f153768614610391578063f6a3d24e146103a4578063f84f89a2146103b757600080fd5b8063a2309ff814610350578063ac2681c614610358578063b88d4fde1461036b57600080fd5b80636a627842146102e957806370a08231146102fc57806388f74d091461030f57806389afcb441461032257806395d89b4114610335578063a22cb4651461033d57600080fd5b806316f0115b1161014b57806323b872dd1161012557806323b872dd1461029d57806342842e0e146102b05780634437152a146102c35780636352211e146102d657600080fd5b806316f0115b1461027157806318160ddd146102825780631a9c941f1461028a57600080fd5b806301ffc9a71461019357806306fdde03146101d5578063081812fc146101ea578063095ea7b31461021557806314f2c2601461022a57806316c197391461023c575b600080fd5b6101c06101a13660046115e0565b6001600160e01b03191660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b6101dd6103ed565b6040516101cc91906116b5565b6101fd6101f8366004611618565b61047f565b6040516001600160a01b0390911681526020016101cc565b610228610223366004611539565b61050b565b005b600c545b6040519081526020016101cc565b61024f61024a3660046113c0565b6105cd565b60408051825181526020808401519082015291810151908201526060016101cc565b6007546001600160a01b03166101fd565b60095461022e565b610228610298366004611539565b61063c565b6102286102ab36600461140c565b6106c3565b6102286102be36600461140c565b6106df565b6102286102d13660046113c0565b6106fa565b6101fd6102e4366004611618565b61078a565b6102286102f73660046113c0565b61080d565b61022e61030a3660046113c0565b610931565b61022861031d366004611562565b610953565b6102286103303660046113c0565b610a7d565b6101dd610b9f565b61022861034b3660046114ff565b610bae565b60085461022e565b610228610366366004611539565b610c83565b610228610379366004611447565b610d41565b6101c061038c3660046113da565b610d5f565b61022e61039f3660046113c0565b610de3565b6101c06103b23660046113c0565b610e54565b61022e6103c53660046113c0565b6001600160a01b03166000908152600160209081526040808320548352600a90915290205490565b6060600580546103fc906117a8565b80601f0160208091040260200160405190810160405280929190818152602001828054610428906117a8565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008181526002602052604081205482906001600160a01b03166104ea5760405162461bcd60e51b815260206004820152601b60248201527f4552433732313a206e6f6e6578697374656e7420746f6b656e4964000000000060448201526064015b60405180910390fd5b6000838152600360205260409020546001600160a01b031691505b50919050565b6105148161078a565b6001600160a01b0316336001600160a01b0316146105745760405162461bcd60e51b815260206004820181905260248201527f4552433732312e617070726f76653a2063616c6c6572206e6f74206f776e657260448201526064016104e1565b60008181526003602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839233917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a45050565b6105f160405180606001604052806000815260200160008152602001600081525090565b506001600160a01b03166000908152600160208181526040808420548452600b8252928390208351606081018552815481529281015491830191909152600201549181019190915290565b6007546001600160a01b031633146106665760405162461bcd60e51b81526004016104e1906116c8565b6001600160a01b0382166000818152600160209081526040808320548352600a82529182902084905590518381527f19b12734a92b05dca61848b299f0f8feb8ca9861f2e9805fcb673ccdde1113ac910160405180910390a25050565b6106cf33848484610e65565b6106da838383611031565b505050565b6106da83838360405180602001604052806000815250610d41565b6007546001600160a01b0316158061071c57506007546001600160a01b031633145b6107685760405162461bcd60e51b815260206004820152601b60248201527f4c546f6b656e2e736574506f6f6c3a206e6f7420616c6c6f776564000000000060448201526064016104e1565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526002602052604081205482906001600160a01b03166107f05760405162461bcd60e51b815260206004820152601b60248201527f4552433732313a206e6f6e6578697374656e7420746f6b656e4964000000000060448201526064016104e1565b50506000908152600260205260409020546001600160a01b031690565b6007546001600160a01b031633146108375760405162461bcd60e51b81526004016104e1906116c8565b60098054906000610847836117dd565b9190505550600060086000815461085d906117dd565b91829055506000818152600260205260409020549091506001600160a01b0316156108ca5760405162461bcd60e51b815260206004820152601d60248201527f50546f6b656e2e6d696e743a206578697374656e7420746f6b656e496400000060448201526064016104e1565b6001600160a01b0382166000818152600160209081526040808320859055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061093c826110bd565b61094757600061094a565b60015b60ff1692915050565b6007546001600160a01b0316331461097d5760405162461bcd60e51b81526004016104e1906116c8565b6001600160a01b0382166000908152600160209081526040808320548352600b9091529020548151811580156109b257508015155b156109d157600c80549060006109c7836117dd565b91905055506109f9565b81158015906109de575080155b156109f957600c80549060006109f383611791565b91905055505b6001600160a01b0384166000818152600160208181526040808420548452600b825292839020875180825588830151938201849055888501516002909201829055845190815291820192909252918201527f69bbdb7f76e37244169df3de05c093148c618f1e44c748d8ee450284438be7ea9060600160405180910390a250505050565b6007546001600160a01b03163314610aa75760405162461bcd60e51b81526004016104e1906116c8565b6001600160a01b038116600090815260016020526040812054600980549192610acf83611791565b90915550506001600160a01b03821660009081526001602090815260408083208390558383526002825280832080546001600160a01b03199081169091556003835281842080549091169055600a8252808320839055600b90915290205415610b4857600c8054906000610b4283611791565b91905055505b6000818152600b602052604080822082815560018101839055600201829055518291906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6060600680546103fc906117a8565b610bb7336110bd565b610c175760405162461bcd60e51b815260206004820152602b60248201527f4552433732312e736574417070726f76616c466f72416c6c3a206e6f6e65786960448201526a39ba32b73a1037bbb732b960a91b60648201526084016104e1565b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6007546001600160a01b03163314610cad5760405162461bcd60e51b81526004016104e1906116c8565b6001600160a01b0382166000908152600160209081526040808320548352600a909152812054610cde908390611724565b6001600160a01b0384166000818152600160209081526040808320548352600a825291829020849055905183815292935090917f19b12734a92b05dca61848b299f0f8feb8ca9861f2e9805fcb673ccdde1113ac910160405180910390a2505050565b610d4d33858585610e65565b610d59848484846110da565b50505050565b600082610d6b816110bd565b610db35760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d103737b732bc34b9ba32b73a1037bbb732b960391b60448201526064016104e1565b50506001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600081610def816110bd565b610e375760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d103737b732bc34b9ba32b73a1037bbb732b960391b60448201526064016104e1565b50506001600160a01b031660009081526001602052604090205490565b6000610e5f826110bd565b92915050565b610e6e8161078a565b6001600160a01b0316836001600160a01b031614610ee05760405162461bcd60e51b815260206004820152602960248201527f4552433732312e5f76616c69646174655472616e736665723a206e6f74206f776044820152683732b2103a37b5b2b760b91b60648201526084016104e1565b6001600160a01b03821615801590610efe5750610efc826110bd565b155b610f635760405162461bcd60e51b815260206004820152603060248201527f4552433732312e5f76616c69646174655472616e736665723a20746f2061646460448201526f07265737320657869737473206f7220360841b60648201526084016104e1565b826001600160a01b0316846001600160a01b03161480610f9c57506000818152600360205260409020546001600160a01b038581169116145b80610fcc57506001600160a01b0380841660009081526004602090815260408083209388168352929052205460ff165b610d595760405162461bcd60e51b815260206004820152603060248201527f4552433732312e5f76616c69646174655472616e736665723a206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b60648201526084016104e1565b6001600160a01b0380841660008181526001602081815260408084208490558684526003825280842080546001600160a01b03199081169091559588168085529282528084208790558684526002909152808320805490951682179094559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0316600090815260016020526040902054151590565b6110e5848484611031565b6110f184848484611158565b610d595760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104e1565b60006001600160a01b0384163b61117157506001611222565b60006111f263150b7a0260e01b338887876040516024016111959493929190611678565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505060405180606001604052806032815260200161183e603291396001600160a01b038816919061122a565b905060008180602001905181019061120a91906115fc565b6001600160e01b031916630a85bd0160e11b14925050505b949350505050565b60606112398484600085611243565b90505b9392505050565b6060824710156112a45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104e1565b843b6112f25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104e1565b600080866001600160a01b0316858760405161130e919061165c565b60006040518083038185875af1925050503d806000811461134b576040519150601f19603f3d011682016040523d82523d6000602084013e611350565b606091505b509150915061136082828661136b565b979650505050505050565b6060831561137a57508161123c565b82511561138a5782518084602001fd5b8160405162461bcd60e51b81526004016104e191906116b5565b80356001600160a01b03811681146113bb57600080fd5b919050565b6000602082840312156113d1578081fd5b61123c826113a4565b600080604083850312156113ec578081fd5b6113f5836113a4565b9150611403602084016113a4565b90509250929050565b600080600060608486031215611420578081fd5b611429846113a4565b9250611437602085016113a4565b9150604084013590509250925092565b6000806000806080858703121561145c578081fd5b611465856113a4565b935060206114748187016113a4565b935060408601359250606086013567ffffffffffffffff80821115611497578384fd5b818801915088601f8301126114aa578384fd5b8135818111156114bc576114bc61180e565b6114ce601f8201601f191685016116f3565b915080825289848285010111156114e3578485fd5b8084840185840137810190920192909252939692955090935050565b60008060408385031215611511578182fd5b61151a836113a4565b91506020830135801515811461152e578182fd5b809150509250929050565b6000806040838503121561154b578182fd5b611554836113a4565b946020939093013593505050565b6000808284036080811215611575578283fd5b61157e846113a4565b92506060601f1982011215611591578182fd5b506040516060810181811067ffffffffffffffff821117156115b5576115b561180e565b8060405250602084013581526040840135602082015260608401356040820152809150509250929050565b6000602082840312156115f1578081fd5b813561123c81611824565b60006020828403121561160d578081fd5b815161123c81611824565b600060208284031215611629578081fd5b5035919050565b60008151808452611648816020860160208601611765565b601f01601f19169290920160200192915050565b6000825161166e818460208701611765565b9190910192915050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906116ab90830184611630565b9695505050505050565b60208152600061123c6020830184611630565b60208082526011908201527014151bdad95b8e881bdb9b1e481c1bdbdb607a1b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561171c5761171c61180e565b604052919050565b600080821280156001600160ff1b0384900385131615611746576117466117f8565b600160ff1b839003841281161561175f5761175f6117f8565b50500190565b60005b83811015611780578181015183820152602001611768565b83811115610d595750506000910152565b6000816117a0576117a06117f8565b506000190190565b600181811c908216806117bc57607f821691505b6020821081141561050557634e487b7160e01b600052602260045260246000fd5b60006000198214156117f1576117f16117f8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461183a57600080fd5b5056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572a2646970667358221220cb494a8260e578c8370baeb829f7966a5db5876185a7ac22169c0eb076068d3464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `operator` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getTokenId(address)": {
        "details": "Returns the 'tokenId' owned by 'owner' Requirements:  - `owner` must exist"
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token   by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token   by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token   by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20981,
        "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 21366,
        "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
        "label": "_ownerTokenId",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21370,
        "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
        "label": "_tokenIdOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 21374,
        "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
        "label": "_tokenIdOperator",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 21380,
        "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
        "label": "_ownerOperator",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 22005,
        "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 22007,
        "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 22009,
        "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
        "label": "_pool",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 22011,
        "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
        "label": "_totalMinted",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 22013,
        "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 22017,
        "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
        "label": "_tokenIdMargin",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 22022,
        "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
        "label": "_tokenIdPosition",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Position)19691_storage)"
      },
      {
        "astId": 22024,
        "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
        "label": "_numPositionHolders",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_struct(Position)19691_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPTokenLite.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)19691_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Position)19691_storage": {
        "encoding": "inplace",
        "label": "struct IPTokenLite.Position",
        "members": [
          {
            "astId": 19686,
            "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
            "label": "volume",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 19688,
            "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
            "label": "cost",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 19690,
            "contract": "contracts/polygon/perpetual_futures/tokens/PTokenLite.sol:PTokenLite",
            "label": "lastCumulativeFundingRate",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}