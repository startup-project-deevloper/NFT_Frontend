{
  "language": "Solidity",
  "sources": {
    "contracts/ethereum/chainlink/ETHValidatorOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../NFTVaultManager.sol\";\r\nimport \"./OracleStructs.sol\";\r\n\r\ncontract ETHValidatorOracle is ChainlinkClient, Ownable, Initializable {\r\n    /**\r\n     * @dev oracle configuration parameters\r\n     */\r\n    string public token;\r\n    string public apiURL;\r\n    address public chainlinkNode;\r\n    bytes32 public jobId;\r\n    uint256 public nodeFee;\r\n    address public linkToken;\r\n\r\n    address private _vaultManagerAddress;\r\n\r\n    mapping(bytes32 => VerifyRequest) private _verifyRequests;\r\n\r\n    event ResponseReceived(bytes32 indexed requestId, address collection, uint256 tokenId, address newOwner);\r\n\r\n    constructor(APIOracleInfo memory _oracleInfo) {\r\n        linkToken = _oracleInfo.linkToken;\r\n        chainlinkNode = _oracleInfo.chainlinkNode;\r\n        jobId = stringToBytes32(_oracleInfo.jobId);\r\n        nodeFee = (_oracleInfo.nodeFee * LINK_DIVISIBILITY) / 1000;\r\n        apiURL = \"https://nft-validator-hwk7x.ondigitalocean.app/iswithdrawable\";\r\n\r\n        setChainlinkToken(linkToken);\r\n    }\r\n\r\n    /**\r\n     * @dev only owner can initialize, and the ownership is removed after that\r\n     */\r\n    function initialize(address _vault) external initializer onlyOwner {\r\n        _vaultManagerAddress = _vault;\r\n        renounceOwnership();\r\n    }\r\n\r\n    /**\r\n     * @dev call to verify if a token is withdrawble in the synthetic collection,\r\n     * this method can be called only from the nft vault contract\r\n     * @param collection the collection address\r\n     * @param tokenId the id of the nft in the collection\r\n     * @param nonce the nonce\r\n     * @return requestId the id of the request to the Chainlink oracle\r\n     */\r\n    function verifyTokenIsWithdrawable(\r\n        address collection,\r\n        uint256 tokenId,\r\n        uint256 nonce\r\n    ) external returns (bytes32 requestId) {\r\n        Chainlink.Request memory request = buildChainlinkRequest(\r\n            jobId,\r\n            address(this),\r\n            this.processResponse.selector\r\n        );\r\n\r\n        // set the request params\r\n        Chainlink.add(\r\n            request,\r\n            \"get\",\r\n            string(\r\n                abi.encodePacked(\r\n                    apiURL,\r\n                    \"?collection=\",\r\n                    collection,\r\n                    \"&tokenId=\",\r\n                    uint2str(tokenId),\r\n                    \"&nonce=\",\r\n                    uint2str(nonce)\r\n                )\r\n            )\r\n        );\r\n        Chainlink.add(request, \"path\", \"withdrawable_by\");\r\n\r\n        // Send the request\r\n        requestId = sendChainlinkRequestTo(chainlinkNode, request, nodeFee);\r\n\r\n        _verifyRequests[requestId] = VerifyRequest({tokenId: tokenId, collection: collection});\r\n    }\r\n\r\n    /**\r\n     * @dev function to process the oracle response (only callable from oracle)\r\n     * @param requestId the id of the request to the Chainlink oracle\r\n     * @param newOwner_ the address who can retrieve the nft (if 0 assumes is not withdrawable)\r\n     */\r\n    function processResponse(bytes32 requestId, uint256 newOwner_)\r\n        public\r\n        recordChainlinkFulfillment(requestId)\r\n    {\r\n        VerifyRequest memory requestData = _verifyRequests[requestId];\r\n        address newOwner = address(uint160(newOwner_));\r\n\r\n        // only call the synthetic collection contract if is locked\r\n        if (newOwner != address(0)) {\r\n            NFTVaultManager(_vaultManagerAddress).unlockNFT(\r\n                requestData.collection,\r\n                requestData.tokenId,\r\n                newOwner\r\n            );\r\n        }\r\n\r\n        emit ResponseReceived(requestId, requestData.collection, requestData.tokenId, newOwner);\r\n    }\r\n\r\n    function stringToBytes32(string memory source) private pure returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n\r\n    function uint2str(uint256 _i) private pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 j = _i;\r\n        uint256 len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len;\r\n        while (_i != 0) {\r\n            k = k - 1;\r\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/ChainlinkClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Chainlink.sol\";\nimport \"./interfaces/ENSInterface.sol\";\nimport \"./interfaces/LinkTokenInterface.sol\";\nimport \"./interfaces/OperatorInterface.sol\";\nimport \"./interfaces/PointerInterface.sol\";\nimport { ENSResolver as ENSResolver_Chainlink } from \"./vendor/ENSResolver.sol\";\n\n/**\n * @title The ChainlinkClient contract\n * @notice Contract writers can inherit this contract in order to create requests for the\n * Chainlink network\n */\ncontract ChainlinkClient {\n  using Chainlink for Chainlink.Request;\n\n  uint256 constant internal LINK_DIVISIBILITY = 10**18;\n  uint256 constant private AMOUNT_OVERRIDE = 0;\n  address constant private SENDER_OVERRIDE = address(0);\n  uint256 constant private ORACLE_ARGS_VERSION = 1;\n  uint256 constant private OPERATOR_ARGS_VERSION = 2;\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\"link\");\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\"oracle\");\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\n\n  ENSInterface private ens;\n  bytes32 private ensNode;\n  LinkTokenInterface private link;\n  OperatorInterface private oracle;\n  uint256 private requestCount = 1;\n  mapping(bytes32 => address) private pendingRequests;\n\n  event ChainlinkRequested(\n    bytes32 indexed id\n  );\n  event ChainlinkFulfilled(\n    bytes32 indexed id\n  );\n  event ChainlinkCancelled(\n    bytes32 indexed id\n  );\n\n  /**\n   * @notice Creates a request that can hold additional parameters\n   * @param specId The Job Specification ID that the request will be created for\n   * @param callbackAddress The callback address that the response will be sent to\n   * @param callbackFunctionSignature The callback function signature to use for the callback address\n   * @return A Chainlink Request struct in memory\n   */\n  function buildChainlinkRequest(\n    bytes32 specId,\n    address callbackAddress,\n    bytes4 callbackFunctionSignature\n  )\n    internal\n    pure\n    returns (\n      Chainlink.Request memory\n    )\n  {\n    Chainlink.Request memory req;\n    return req.initialize(specId, callbackAddress, callbackFunctionSignature);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the stored oracle address\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendChainlinkRequest(\n    Chainlink.Request memory req,\n    uint256 payment\n  )\n    internal\n    returns (\n      bytes32\n    )\n  {\n    return sendChainlinkRequestTo(address(oracle), req, payment);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the specified oracle address\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n   * send LINK which creates a request on the target oracle contract.\n   * Emits ChainlinkRequested event.\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendChainlinkRequestTo(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment\n  )\n    internal\n    returns (\n      bytes32 requestId\n    )\n  {\n    return rawRequest(oracleAddress, req, payment, ORACLE_ARGS_VERSION, oracle.oracleRequest.selector);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the stored oracle address\n   * @dev This function supports multi-word response\n   * @dev Calls `requestOracleDataFrom` with the stored oracle address\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function requestOracleData(\n    Chainlink.Request memory req,\n    uint256 payment\n  )\n    internal\n    returns (\n      bytes32\n    )\n  {\n    return requestOracleDataFrom(address(oracle), req, payment);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the specified oracle address\n   * @dev This function supports multi-word response\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n   * send LINK which creates a request on the target oracle contract.\n   * Emits ChainlinkRequested event.\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function requestOracleDataFrom(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment\n  )\n    internal\n    returns (\n      bytes32 requestId\n    )\n  {\n    return rawRequest(oracleAddress, req, payment, OPERATOR_ARGS_VERSION, oracle.requestOracleData.selector);\n  }\n\n  /**\n   * @notice Make a request to an oracle\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @param argsVersion The version of data support (single word, multi word)\n   * @return requestId The request ID\n   */\n  function rawRequest(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment,\n    uint256 argsVersion,\n    bytes4 funcSelector\n  )\n    private\n    returns (\n      bytes32 requestId\n    )\n  {\n    requestId = keccak256(abi.encodePacked(this, requestCount));\n    req.nonce = requestCount;\n    pendingRequests[requestId] = oracleAddress;\n    emit ChainlinkRequested(requestId);\n    bytes memory encodedData = abi.encodeWithSelector(\n      funcSelector,\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\n      req.id,\n      req.callbackAddress,\n      req.callbackFunctionId,\n      req.nonce,\n      argsVersion,\n      req.buf.buf);\n    require(link.transferAndCall(oracleAddress, payment, encodedData), \"unable to transferAndCall to oracle\");\n    requestCount += 1;\n  }\n\n  /**\n   * @notice Allows a request to be cancelled if it has not been fulfilled\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\n   * Deletes the request from the `pendingRequests` mapping.\n   * Emits ChainlinkCancelled event.\n   * @param requestId The request ID\n   * @param payment The amount of LINK sent for the request\n   * @param callbackFunc The callback function specified for the request\n   * @param expiration The time of the expiration for the request\n   */\n  function cancelChainlinkRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunc,\n    uint256 expiration\n  )\n    internal\n  {\n    OperatorInterface requested = OperatorInterface(pendingRequests[requestId]);\n    delete pendingRequests[requestId];\n    emit ChainlinkCancelled(requestId);\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\n  }\n\n  /**\n   * @notice Sets the stored oracle address\n   * @param oracleAddress The address of the oracle contract\n   */\n  function setChainlinkOracle(\n    address oracleAddress\n  )\n    internal\n  {\n    oracle = OperatorInterface(oracleAddress);\n  }\n\n  /**\n   * @notice Sets the LINK token address\n   * @param linkAddress The address of the LINK token contract\n   */\n  function setChainlinkToken(\n    address linkAddress\n  )\n    internal\n  {\n    link = LinkTokenInterface(linkAddress);\n  }\n\n  /**\n   * @notice Sets the Chainlink token address for the public\n   * network as given by the Pointer contract\n   */\n  function setPublicChainlinkToken() \n    internal\n  {\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\n  }\n\n  /**\n   * @notice Retrieves the stored address of the LINK token\n   * @return The address of the LINK token\n   */\n  function chainlinkTokenAddress()\n    internal\n    view\n    returns (\n      address\n    )\n  {\n    return address(link);\n  }\n\n  /**\n   * @notice Retrieves the stored address of the oracle contract\n   * @return The address of the oracle contract\n   */\n  function chainlinkOracleAddress()\n    internal\n    view\n    returns (\n      address\n    )\n  {\n    return address(oracle);\n  }\n\n  /**\n   * @notice Allows for a request which was created on another contract to be fulfilled\n   * on this contract\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\n   * @param requestId The request ID used for the response\n   */\n  function addChainlinkExternalRequest(\n    address oracleAddress,\n    bytes32 requestId\n  )\n    internal\n    notPendingRequest(requestId)\n  {\n    pendingRequests[requestId] = oracleAddress;\n  }\n\n  /**\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\n   * @dev Accounts for subnodes having different resolvers\n   * @param ensAddress The address of the ENS contract\n   * @param node The ENS node hash\n   */\n  function useChainlinkWithENS(\n    address ensAddress,\n    bytes32 node\n  )\n    internal\n  {\n    ens = ENSInterface(ensAddress);\n    ensNode = node;\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\n    setChainlinkToken(resolver.addr(linkSubnode));\n    updateChainlinkOracleWithENS();\n  }\n\n  /**\n   * @notice Sets the stored oracle contract with the address resolved by ENS\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\n   */\n  function updateChainlinkOracleWithENS()\n    internal\n  {\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\n    setChainlinkOracle(resolver.addr(oracleSubnode));\n  }\n\n  /**\n   * @notice Ensures that the fulfillment is valid for this contract\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\n   * @param requestId The request ID for fulfillment\n   */\n  function validateChainlinkCallback(\n    bytes32 requestId\n  )\n    internal\n    recordChainlinkFulfillment(requestId)\n    // solhint-disable-next-line no-empty-blocks\n  {}\n\n  /**\n   * @dev Reverts if the sender is not the oracle of the request.\n   * Emits ChainlinkFulfilled event.\n   * @param requestId The request ID for fulfillment\n   */\n  modifier recordChainlinkFulfillment(\n    bytes32 requestId\n  )\n  {\n    require(msg.sender == pendingRequests[requestId],\n            \"Source must be the oracle of the request\");\n    delete pendingRequests[requestId];\n    emit ChainlinkFulfilled(requestId);\n    _;\n  }\n\n  /**\n   * @dev Reverts if the request is already pending\n   * @param requestId The request ID for fulfillment\n   */\n  modifier notPendingRequest(\n    bytes32 requestId\n  )\n  {\n    require(pendingRequests[requestId] == address(0), \"Request is already pending\");\n    _;\n  }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/ethereum/NFTVaultManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"./chainlink/ETHValidatorOracle.sol\";\r\n\r\ncontract NFTVaultManager is AccessControl {\r\n    bytes32 public constant MANAGER = keccak256(\"MANAGER\");\r\n    bytes32 public constant VALIDATOR_ORACLE = keccak256(\"VALIDATOR_ORACLE\");\r\n\r\n\r\n    /**\r\n     * @dev map to check if a holder has a token registered over an approved collection\r\n     *\r\n     *  COLLECTION_CONTRACT_ADDRESS => NFT_ID => HOLDER_ACCOUNT_ADDRESS OR ZERO_ADDRESS\r\n     */\r\n    mapping(address => mapping(uint256 => address)) private _holdings;\r\n\r\n    /**\r\n     * @dev the nonces allow to check if a token is safely withdrawable (avoid double verifying)\r\n     */\r\n    mapping(address => mapping(uint256 => uint256)) public nonces;\r\n\r\n    /**\r\n     * @dev tokens in this map can be retrieved by the owner (address returned)\r\n     */\r\n    mapping(address => mapping(uint256 => address)) public pendingWithdraws;\r\n\r\n    address private _validatorOracleAddress;\r\n\r\n    event UnlockRequested(address collection, uint256 tokenId);\r\n    event NFTUnlocked(address collection, uint256 tokenId, address newOwner);\r\n\r\n    constructor(address validatorOracleAddress_) {\r\n        _validatorOracleAddress = validatorOracleAddress_;\r\n\r\n        _setupRole(VALIDATOR_ORACLE, validatorOracleAddress_);\r\n        _setupRole(MANAGER, msg.sender);\r\n    }\r\n\r\n    function lockNFT(address collection_, uint256 tokenId_) external {\r\n        require(_holdings[collection_][tokenId_] == address(0), \"Token already locked\");\r\n\r\n        // get the token\r\n        IERC721(collection_).transferFrom(msg.sender, address(this), tokenId_);\r\n\r\n        // the sender must be the collection contract\r\n        _holdings[collection_][tokenId_] = msg.sender;\r\n    }\r\n\r\n    function requestUnlock(address collection_, uint256 tokenId_) external {\r\n        require(_holdings[collection_][tokenId_] != address(0), \"Token not locked\");\r\n\r\n        ETHValidatorOracle(_validatorOracleAddress).verifyTokenIsWithdrawable(\r\n            collection_,\r\n            tokenId_,\r\n            nonces[collection_][tokenId_]\r\n        );\r\n\r\n        emit UnlockRequested(collection_, tokenId_);\r\n    }\r\n\r\n    function unlockNFT(\r\n        address collection_,\r\n        uint256 tokenId_,\r\n        address newOwner\r\n    ) external onlyRole(VALIDATOR_ORACLE) {\r\n        pendingWithdraws[collection_][tokenId_] = newOwner;\r\n\r\n        emit NFTUnlocked(collection_, tokenId_, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice check if the vault holds a token\r\n     */\r\n    function isTokenInVault(address collection_, uint256 tokenId_) external view returns (bool) {\r\n        address previousOwner = _holdings[collection_][tokenId_];\r\n        return previousOwner != address(0);\r\n    }\r\n\r\n    function withdraw(address collection_, uint256 tokenId_) external {\r\n        require(pendingWithdraws[collection_][tokenId_] == msg.sender, \"You can not withdraw this token\");\r\n\r\n        // release the space\r\n        _holdings[collection_][tokenId_] = address(0);\r\n\r\n        // increment the nonce\r\n        nonces[collection_][tokenId_] += 1;\r\n\r\n        // transfer the token\r\n        IERC721(collection_).transferFrom(address(this), msg.sender, tokenId_);\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/ethereum/chainlink/OracleStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nstruct APIOracleInfo {\n    address linkToken;\n    address chainlinkNode;\n    string jobId;\n    uint256 nodeFee;\n}\n\nstruct VerifyRequest {\n    address collection;\n    uint256 tokenId;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/Chainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { CBORChainlink } from \"./vendor/CBORChainlink.sol\";\nimport { BufferChainlink } from \"./vendor/BufferChainlink.sol\";\n\n/**\n * @title Library for common Chainlink functions\n * @dev Uses imported CBOR library for encoding to buffer\n */\nlibrary Chainlink {\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\n\n  using CBORChainlink for BufferChainlink.buffer;\n\n  struct Request {\n    bytes32 id;\n    address callbackAddress;\n    bytes4 callbackFunctionId;\n    uint256 nonce;\n    BufferChainlink.buffer buf;\n  }\n\n  /**\n   * @notice Initializes a Chainlink request\n   * @dev Sets the ID, callback address, and callback function signature on the request\n   * @param self The uninitialized request\n   * @param jobId The Job Specification ID\n   * @param callbackAddr The callback address\n   * @param callbackFunc The callback function signature\n   * @return The initialized request\n   */\n  function initialize(\n    Request memory self,\n    bytes32 jobId,\n    address callbackAddr,\n    bytes4 callbackFunc\n  )\n    internal\n    pure\n    returns (\n      Chainlink.Request memory\n    )\n  {\n    BufferChainlink.init(self.buf, defaultBufferSize);\n    self.id = jobId;\n    self.callbackAddress = callbackAddr;\n    self.callbackFunctionId = callbackFunc;\n    return self;\n  }\n\n  /**\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\n   * @param self The initialized request\n   * @param data The CBOR data\n   */\n  function setBuffer(\n    Request memory self,\n    bytes memory data\n  )\n    internal\n    pure\n  {\n    BufferChainlink.init(self.buf, data.length);\n    BufferChainlink.append(self.buf, data);\n  }\n\n  /**\n   * @notice Adds a string value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The string value to add\n   */\n  function add(\n    Request memory self,\n    string memory key,\n    string memory value\n  )\n    internal\n    pure\n  {\n    self.buf.encodeString(key);\n    self.buf.encodeString(value);\n  }\n\n  /**\n   * @notice Adds a bytes value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The bytes value to add\n   */\n  function addBytes(\n    Request memory self,\n    string memory key,\n    bytes memory value\n  )\n    internal\n    pure\n  {\n    self.buf.encodeString(key);\n    self.buf.encodeBytes(value);\n  }\n\n  /**\n   * @notice Adds a int256 value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The int256 value to add\n   */\n  function addInt(\n    Request memory self,\n    string memory key,\n    int256 value\n  )\n    internal\n    pure\n  {\n    self.buf.encodeString(key);\n    self.buf.encodeInt(value);\n  }\n\n  /**\n   * @notice Adds a uint256 value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The uint256 value to add\n   */\n  function addUint(\n    Request memory self,\n    string memory key,\n    uint256 value\n  )\n    internal\n    pure\n  {\n    self.buf.encodeString(key);\n    self.buf.encodeUInt(value);\n  }\n\n  /**\n   * @notice Adds an array of strings to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param values The array of string values to add\n   */\n  function addStringArray(\n    Request memory self,\n    string memory key,\n    string[] memory values\n  )\n    internal\n    pure\n  {\n    self.buf.encodeString(key);\n    self.buf.startArray();\n    for (uint256 i = 0; i < values.length; i++) {\n      self.buf.encodeString(values[i]);\n    }\n    self.buf.endSequence();\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ENSInterface {\n\n  // Logged when the owner of a node assigns a new owner to a subnode.\n  event NewOwner(\n    bytes32 indexed node,\n    bytes32 indexed label,\n    address owner\n  );\n\n  // Logged when the owner of a node transfers ownership to a new account.\n  event Transfer(\n    bytes32 indexed node,\n    address owner\n  );\n\n  // Logged when the resolver for a node changes.\n  event NewResolver(\n    bytes32 indexed node,\n    address resolver\n  );\n\n  // Logged when the TTL of a node changes\n  event NewTTL(\n    bytes32 indexed node,\n    uint64 ttl\n  );\n\n\n  function setSubnodeOwner(\n    bytes32 node,\n    bytes32 label,\n    address owner\n  ) external;\n\n  function setResolver(\n    bytes32 node,\n    address resolver\n  ) external;\n\n  function setOwner(\n    bytes32 node,\n    address owner\n  ) external;\n\n  function setTTL(\n    bytes32 node,\n    uint64 ttl\n  ) external;\n\n  function owner(\n    bytes32 node\n  )\n    external\n    view\n    returns (\n      address\n    );\n\n  function resolver(\n    bytes32 node\n  )\n    external\n    view\n    returns (\n      address\n    );\n\n  function ttl(\n    bytes32 node\n  )\n    external\n    view\n    returns (\n      uint64\n    );\n\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n\n  function allowance(\n    address owner,\n    address spender\n  )\n    external\n    view\n    returns (\n      uint256 remaining\n    );\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function balanceOf(\n    address owner\n  )\n    external\n    view\n    returns (\n      uint256 balance\n    );\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8 decimalPlaces\n    );\n\n  function decreaseApproval(\n    address spender,\n    uint256 addedValue\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function increaseApproval(\n    address spender,\n    uint256 subtractedValue\n  ) external;\n\n  function name()\n    external\n    view\n    returns (\n      string memory tokenName\n    );\n\n  function symbol()\n    external\n    view\n    returns (\n      string memory tokenSymbol\n    );\n\n  function totalSupply()\n    external\n    view\n    returns (\n      uint256 totalTokensIssued\n    );\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./OracleInterface.sol\";\nimport \"./ChainlinkRequestInterface.sol\";\n\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\n\n  function requestOracleData(\n    address sender,\n    uint256 payment,\n    bytes32 specId,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  )\n    external;\n\n  function fulfillOracleRequest2(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool\n    );\n\n  function ownerTransferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function distributeFunds(\n    address payable[] calldata receivers,\n    uint[] calldata amounts\n  )\n    external\n    payable;\n\n  function getAuthorizedSenders()\n    external\n    returns (\n      address[] memory\n    );\n\n  function setAuthorizedSenders(\n    address[] calldata senders\n  ) external;\n\n  function getForwarder()\n    external\n    returns (\n      address\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface PointerInterface {\n  \n  function getAddress()\n    external\n    view\n    returns (\n      address\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ENSResolver {\n  function addr(\n    bytes32 node\n  )\n    public\n    view\n    virtual\n    returns (\n      address\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.19;\n\nimport { BufferChainlink } from \"./BufferChainlink.sol\";\n\nlibrary CBORChainlink {\n  using BufferChainlink for BufferChainlink.buffer;\n\n  uint8 private constant MAJOR_TYPE_INT = 0;\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\n  uint8 private constant MAJOR_TYPE_STRING = 3;\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\n  uint8 private constant MAJOR_TYPE_MAP = 5;\n  uint8 private constant MAJOR_TYPE_TAG = 6;\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\n\n  function encodeType(\n    BufferChainlink.buffer memory buf,\n    uint8 major,\n    uint value\n  )\n    private\n    pure\n  {\n    if(value <= 23) {\n      buf.appendUint8(uint8((major << 5) | value));\n    } else if(value <= 0xFF) {\n      buf.appendUint8(uint8((major << 5) | 24));\n      buf.appendInt(value, 1);\n    } else if(value <= 0xFFFF) {\n      buf.appendUint8(uint8((major << 5) | 25));\n      buf.appendInt(value, 2);\n    } else if(value <= 0xFFFFFFFF) {\n      buf.appendUint8(uint8((major << 5) | 26));\n      buf.appendInt(value, 4);\n    } else if(value <= 0xFFFFFFFFFFFFFFFF) {\n      buf.appendUint8(uint8((major << 5) | 27));\n      buf.appendInt(value, 8);\n    }\n  }\n\n  function encodeIndefiniteLengthType(\n    BufferChainlink.buffer memory buf,\n    uint8 major\n  )\n    private\n    pure\n  {\n    buf.appendUint8(uint8((major << 5) | 31));\n  }\n\n  function encodeUInt(\n    BufferChainlink.buffer memory buf,\n    uint value\n  )\n    internal\n    pure\n  {\n    encodeType(buf, MAJOR_TYPE_INT, value);\n  }\n\n  function encodeInt(\n    BufferChainlink.buffer memory buf,\n    int value\n  )\n    internal\n    pure\n  {\n    if(value < -0x10000000000000000) {\n      encodeSignedBigNum(buf, value);\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\n      encodeBigNum(buf, value);\n    } else if(value >= 0) {\n      encodeType(buf, MAJOR_TYPE_INT, uint(value));\n    } else {\n      encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\n    }\n  }\n\n  function encodeBytes(\n    BufferChainlink.buffer memory buf,\n    bytes memory value\n  )\n    internal\n    pure\n  {\n    encodeType(buf, MAJOR_TYPE_BYTES, value.length);\n    buf.append(value);\n  }\n\n  function encodeBigNum(\n    BufferChainlink.buffer memory buf,\n    int value\n  )\n    internal\n    pure\n  {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\n    encodeBytes(buf, abi.encode(uint(value)));\n  }\n\n  function encodeSignedBigNum(\n    BufferChainlink.buffer memory buf,\n    int input\n  )\n    internal\n    pure\n  {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\n    encodeBytes(buf, abi.encode(uint(-1 - input)));\n  }\n\n  function encodeString(\n    BufferChainlink.buffer memory buf,\n    string memory value\n  )\n    internal\n    pure\n  {\n    encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\n    buf.append(bytes(value));\n  }\n\n  function startArray(\n    BufferChainlink.buffer memory buf\n  )\n    internal\n    pure\n  {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n  }\n\n  function startMap(\n    BufferChainlink.buffer memory buf\n  )\n    internal\n    pure\n  {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n  }\n\n  function endSequence(\n    BufferChainlink.buffer memory buf\n  )\n    internal\n    pure\n  {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n* @dev A library for working with mutable byte buffers in Solidity.\n*\n* Byte buffers are mutable and expandable, and provide a variety of primitives\n* for writing to them. At any time you can fetch a bytes object containing the\n* current contents of the buffer. The bytes object should not be stored between\n* operations, as it may change due to resizing of the buffer.\n*/\nlibrary BufferChainlink {\n  /**\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n  *      a capacity. The capacity may be longer than the current value, in\n  *      which case it can be extended without the need to allocate more memory.\n  */\n  struct buffer {\n    bytes buf;\n    uint capacity;\n  }\n\n  /**\n  * @dev Initializes a buffer with an initial capacity.\n  * @param buf The buffer to initialize.\n  * @param capacity The number of bytes of space to allocate the buffer.\n  * @return The buffer, for chaining.\n  */\n  function init(\n    buffer memory buf,\n    uint capacity\n  )\n    internal\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    if (capacity % 32 != 0) {\n      capacity += 32 - (capacity % 32);\n    }\n    // Allocate space for the buffer data\n    buf.capacity = capacity;\n    assembly {\n      let ptr := mload(0x40)\n      mstore(buf, ptr)\n      mstore(ptr, 0)\n      mstore(0x40, add(32, add(ptr, capacity)))\n    }\n    return buf;\n  }\n\n  /**\n  * @dev Initializes a new buffer from an existing bytes object.\n  *      Changes to the buffer may mutate the original value.\n  * @param b The bytes object to initialize the buffer with.\n  * @return A new buffer.\n  */\n  function fromBytes(\n    bytes memory b\n  )\n    internal\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    buffer memory buf;\n    buf.buf = b;\n    buf.capacity = b.length;\n    return buf;\n  }\n\n  function resize(\n    buffer memory buf,\n    uint capacity\n  )\n    private\n    pure\n  {\n    bytes memory oldbuf = buf.buf;\n    init(buf, capacity);\n    append(buf, oldbuf);\n  }\n\n  function max(\n    uint a,\n    uint b\n  )\n    private\n    pure\n    returns(\n      uint\n    )\n  {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  /**\n  * @dev Sets buffer length to 0.\n  * @param buf The buffer to truncate.\n  * @return The original buffer, for chaining..\n  */\n  function truncate(\n    buffer memory buf\n  )\n    internal\n    pure\n    returns (\n      buffer memory\n    )\n  {\n    assembly {\n      let bufptr := mload(buf)\n      mstore(bufptr, 0)\n    }\n    return buf;\n  }\n\n  /**\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The start offset to write to.\n  * @param data The data to append.\n  * @param len The number of bytes to copy.\n  * @return The original buffer, for chaining.\n  */\n  function write(\n    buffer memory buf,\n    uint off,\n    bytes memory data,\n    uint len\n  )\n    internal\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    require(len <= data.length);\n\n    if (off + len > buf.capacity) {\n      resize(buf, max(buf.capacity, len + off) * 2);\n    }\n\n    uint dest;\n    uint src;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Start address = buffer address + offset + sizeof(buffer length)\n      dest := add(add(bufptr, 32), off)\n      // Update buffer length if we're extending it\n      if gt(add(len, off), buflen) {\n        mstore(bufptr, add(len, off))\n      }\n      src := add(data, 32)\n    }\n\n    // Copy word-length chunks while possible\n    for (; len >= 32; len -= 32) {\n      assembly {\n        mstore(dest, mload(src))\n      }\n      dest += 32;\n      src += 32;\n    }\n\n    // Copy remaining bytes\n    uint mask = 256 ** (32 - len) - 1;\n    assembly {\n      let srcpart := and(mload(src), not(mask))\n      let destpart := and(mload(dest), mask)\n      mstore(dest, or(destpart, srcpart))\n    }\n\n    return buf;\n  }\n\n  /**\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @param len The number of bytes to copy.\n  * @return The original buffer, for chaining.\n  */\n  function append(\n    buffer memory buf,\n    bytes memory data,\n    uint len\n  )\n    internal\n    pure\n    returns (\n      buffer memory\n    )\n  {\n    return write(buf, buf.buf.length, data, len);\n  }\n\n  /**\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function append(\n    buffer memory buf,\n    bytes memory data\n  )\n    internal\n    pure\n    returns (\n      buffer memory\n    )\n  {\n    return write(buf, buf.buf.length, data, data.length);\n  }\n\n  /**\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\n  *      capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The offset to write the byte at.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function writeUint8(\n    buffer memory buf,\n    uint off,\n    uint8 data\n  )\n    internal\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    if (off >= buf.capacity) {\n      resize(buf, buf.capacity * 2);\n    }\n\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Address = buffer address + sizeof(buffer length) + off\n      let dest := add(add(bufptr, off), 32)\n      mstore8(dest, data)\n      // Update buffer length if we extended it\n      if eq(off, buflen) {\n        mstore(bufptr, add(buflen, 1))\n      }\n    }\n    return buf;\n  }\n\n  /**\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n  *      capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function appendUint8(\n    buffer memory buf,\n    uint8 data\n  )\n    internal\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    return writeUint8(buf, buf.buf.length, data);\n  }\n\n  /**\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n  *      exceed the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The offset to write at.\n  * @param data The data to append.\n  * @param len The number of bytes to write (left-aligned).\n  * @return The original buffer, for chaining.\n  */\n  function write(\n    buffer memory buf,\n    uint off,\n    bytes32 data,\n    uint len\n  )\n    private\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    uint mask = 256 ** len - 1;\n    // Right-align data\n    data = data >> (8 * (32 - len));\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Address = buffer address + sizeof(buffer length) + off + len\n      let dest := add(add(bufptr, off), len)\n      mstore(dest, or(and(mload(dest), not(mask)), data))\n      // Update buffer length if we extended it\n      if gt(add(off, len), mload(bufptr)) {\n        mstore(bufptr, add(off, len))\n      }\n    }\n    return buf;\n  }\n\n  /**\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n  *      capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The offset to write at.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function writeBytes20(\n    buffer memory buf,\n    uint off,\n    bytes20 data\n  )\n    internal\n    pure\n    returns (\n      buffer memory\n    )\n  {\n    return write(buf, off, bytes32(data), 20);\n  }\n\n  /**\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @return The original buffer, for chhaining.\n  */\n  function appendBytes20(\n    buffer memory buf,\n    bytes20 data\n  )\n    internal\n    pure\n    returns (\n      buffer memory\n    )\n  {\n    return write(buf, buf.buf.length, bytes32(data), 20);\n  }\n\n  /**\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function appendBytes32(\n    buffer memory buf,\n    bytes32 data\n  )\n    internal\n    pure\n    returns (\n      buffer memory\n    )\n  {\n    return write(buf, buf.buf.length, data, 32);\n  }\n\n  /**\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The offset to write at.\n  * @param data The data to append.\n  * @param len The number of bytes to write (right-aligned).\n  * @return The original buffer, for chaining.\n  */\n  function writeInt(\n    buffer memory buf,\n    uint off,\n    uint data,\n    uint len\n  )\n    private\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    uint mask = 256 ** len - 1;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Address = buffer address + off + sizeof(buffer length) + len\n      let dest := add(add(bufptr, off), len)\n      mstore(dest, or(and(mload(dest), not(mask)), data))\n      // Update buffer length if we extended it\n      if gt(add(off, len), mload(bufptr)) {\n        mstore(bufptr, add(off, len))\n      }\n    }\n    return buf;\n  }\n\n  /**\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n    * exceed the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer.\n    */\n  function appendInt(\n    buffer memory buf,\n    uint data,\n    uint len\n  )\n    internal\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    return writeInt(buf, buf.buf.length, data, len);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface OracleInterface {\n  function fulfillOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes32 data\n  )\n    external\n    returns (\n      bool\n    );\n\n  function isAuthorizedSender(\n    address node\n  )\n    external\n    view\n    returns (\n      bool\n    );\n\n  function withdraw(\n    address recipient,\n    uint256 amount\n  ) external;\n\n  function withdrawable()\n    external\n    view\n    returns (\n      uint256\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ChainlinkRequestInterface {\n  function oracleRequest(\n    address sender,\n    uint256 requestPrice,\n    bytes32 serviceAgreementID,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  ) external;\n\n  function cancelOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunctionId,\n    uint256 expiration\n  ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/ethereum/mocks/ETHValidatorOracleMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../chainlink/OracleStructs.sol\";\nimport \"../NFTVaultManager.sol\";\n\ncontract ETHValidatorOracleMock is ChainlinkClient, Ownable, Initializable {\n    address private _vaultManagerAddress;\n\n    mapping(bytes32 => VerifyRequest) private _verifyRequests;\n\n    event ResponseReceived(bytes32 indexed requestId, address collection, uint256 tokenId, address newOwner);\n\n    /**\n     * @dev only owner can initialize, and the ownership is removed after that\n     */\n    function initialize(address _vault) external initializer onlyOwner {\n        _vaultManagerAddress = _vault;\n        renounceOwnership();\n    }\n\n    /**\n     * @dev call to verify if a token is withdrawble in the synthetic collection,\n     * this method can be called only from the nft vault contract\n     * @return requestId the id of the request to the Chainlink oracle\n     */\n    function verifyTokenIsWithdrawable(\n        address collection,\n        uint256 tokenId,\n        uint256\n    ) external returns (bytes32 requestId) {\n        requestId = keccak256(abi.encodePacked(\"requestId\"));\n        _verifyRequests[requestId] = VerifyRequest({tokenId: tokenId, collection: collection});\n        processResponseMock(requestId, 0);\n    }\n\n    /**\n     * @dev function to process the oracle response (only callable from oracle)\n     * @param requestId the id of the request to the Chainlink oracle\n     * @param newOwner_ the address who can retrieve the nft (if 0 assumes is not withdrawable)\n     */\n    function processResponseMock(bytes32 requestId, uint256 newOwner_)\n        public\n        recordChainlinkFulfillment(requestId)\n    {\n        VerifyRequest memory requestData = _verifyRequests[requestId];\n        address newOwner = address(uint160(newOwner_));\n\n        // only call the synthetic collection contract if is locked\n        if (newOwner != address(0)) {\n            NFTVaultManager(_vaultManagerAddress).unlockNFT(\n                requestData.collection,\n                requestData.tokenId,\n                newOwner\n            );\n        }\n\n        emit ResponseReceived(requestId, requestData.collection, requestData.tokenId, newOwner);\n    }\n}\n"
    },
    "contracts/polygon/mocks/SyntheticNFTMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"../Interfaces.sol\";\r\nimport \"../implementations/Structs.sol\";\r\n\r\ncontract SyntheticNFTMock is ERC721, Initializable, AccessControl {\r\n    bytes32 public constant MANAGER = keccak256(\"MANAGER\");    \r\n\r\n    // token metadata\r\n    mapping(uint256 => string) private _tokenMetadata;\r\n\r\n    // proxied values for the erc721 attributes\r\n    string private _proxiedName;\r\n    string private _proxiedSymbol;\r\n\r\n    address private _collectionManager;\r\n\r\n    // solhint-disable-next-line\r\n    constructor() ERC721(\"Privi Collection Token\", \"PCT\") {}\r\n\r\n    function initialize(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        address collectionManager_\r\n    ) external initializer {\r\n        _proxiedName = name_;\r\n        _proxiedSymbol = symbol_;\r\n        _collectionManager = collectionManager_;\r\n\r\n        _setupRole(MANAGER, collectionManager_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _proxiedName;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _proxiedSymbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        return _tokenMetadata[tokenId];\r\n    }\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function safeMint(\r\n        address to,\r\n        uint256 tokenId, \r\n        string memory metadata\r\n    ) public onlyRole(MANAGER) {\r\n        _mint(to, tokenId);\r\n        _tokenMetadata[tokenId] = metadata;\r\n    }\r\n\r\n    function setMetadata(\r\n        uint256 tokenId,\r\n        string memory metadata\r\n    ) public onlyRole(MANAGER) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        _tokenMetadata[tokenId] = metadata;\r\n    }\r\n\r\n    function safeBurn(uint256 tokenId) public onlyRole(MANAGER) {\r\n        _burn(tokenId);\r\n        _tokenMetadata[tokenId] = \"\";\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(AccessControl, ERC721)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev override the before transfer hook to allow locking the nft\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address,\r\n        address,\r\n        uint256 tokenId\r\n    ) internal view override {\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "contracts/polygon/Interfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\n\r\ninterface IFlipCoinGenerator {\r\n    function generateRandom() external view returns (uint8);\r\n}\r\n\r\ninterface ISyntheticNFT is IERC721Metadata {\r\n\r\n    function setMetadata(uint256 tokenId,string memory metadata) external;\r\n\r\n    function isVerified(uint256 tokenId) external view returns (bool);\r\n\r\n    function exists(uint256 tokenId) external view returns (bool);\r\n\r\n    function safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory metadata\r\n    ) external;\r\n\r\n    function safeBurn(uint256 tokenId) external;\r\n}\r\n\r\ninterface ICollectionManagerFactory {\r\n    function deploy(\r\n        address originalCollectionAddress_,\r\n        string memory name_,\r\n        string memory symbol_\r\n    ) external returns (address);\r\n}\r\n\r\ninterface IJot is IERC20 {\r\n    function uniswapV2Pair() external view returns (address);\r\n\r\n    function safeMint(address account, uint256 amount) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IOwnable {\r\n    event ChangeController(address oldController, address newController);\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function setNewController(address newController) external;\r\n\r\n    function claimNewController() external;\r\n}\r\n\r\ninterface IMigratable is IOwnable {\r\n    event PrepareMigration(uint256 migrationTimestamp, address source, address target);\r\n\r\n    event ExecuteMigration(uint256 migrationTimestamp, address source, address target);\r\n\r\n    function migrationTimestamp() external view returns (uint256);\r\n\r\n    function migrationDestination() external view returns (address);\r\n\r\n    function prepareMigration(address target, uint256 graceDays) external;\r\n\r\n    function approveMigration() external;\r\n\r\n    function executeMigration(address source) external;\r\n}\r\n\r\ninterface IPerpetualPoolLite {\r\n// struct SymbolInfo {\r\n//         uint256 symbolId;\r\n//         string symbol;\r\n//         address oracleAddress;\r\n//         int256 multiplier;\r\n//         int256 feeRatio;\r\n//         int256 fundingRateCoefficient;\r\n//         int256 price;\r\n//         int256 cumulativeFundingRate;\r\n//         int256 tradersNetVolume;\r\n//         int256 tradersNetCost;\r\n//     }\r\n\r\n    struct SymbolInfo {\r\n        int256 price;\r\n        int256 cumulativeFundingRate;\r\n        int256 tradersNetVolume;\r\n        int256 tradersNetCost;\r\n    }\r\n\r\n    struct SignedPrice {\r\n        uint256 timestamp;\r\n        uint256 price;\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    event AddLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\r\n\r\n    event RemoveLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\r\n\r\n    event AddMargin(address indexed account, uint256 bAmount);\r\n\r\n    event RemoveMargin(address indexed account, uint256 bAmount);\r\n\r\n    event Trade(address indexed account, int256 tradeVolume, uint256 price);\r\n\r\n    event Liquidate(address indexed account, address indexed liquidator, uint256 reward);\r\n\r\n    event ProtocolFeeCollection(address indexed collector, uint256 amount);\r\n\r\n    function getParameters()\r\n        external\r\n        view\r\n        returns (\r\n            int256 minPoolMarginRatio,\r\n            int256 minInitialMarginRatio,\r\n            int256 minMaintenanceMarginRatio,\r\n            int256 minLiquidationReward,\r\n            int256 maxLiquidationReward,\r\n            int256 liquidationCutRatio,\r\n            int256 protocolFeeCollectRatio\r\n        );\r\n\r\n    function getAddresses()\r\n        external\r\n        view\r\n        returns (\r\n            address bTokenAddress,\r\n            address lTokenAddress,\r\n            address pTokenAddress,\r\n            address liquidatorQualifierAddress,\r\n            address protocolFeeCollector,\r\n            address underlyingAddress,\r\n            address protocolAddress\r\n        );\r\n\r\n    function getSymbol() external view returns (SymbolInfo memory);\r\n\r\n    function getLiquidity() external view returns (int256);\r\n\r\n    function getLastUpdateBlock() external view returns (uint256);\r\n\r\n    function getProtocolFeeAccrued() external view returns (int256);\r\n\r\n    function collectProtocolFee() external;\r\n\r\n    function addLiquidity(uint256 bAmount) external;\r\n\r\n    function removeLiquidity(uint256 lShares) external;\r\n\r\n    function addMargin(uint256 bAmount) external;\r\n\r\n    function removeMargin(uint256 bAmount) external;\r\n\r\n    function trade(int256 tradeVolume) external;\r\n\r\n    function liquidate(address account) external;\r\n\r\n    function addLiquidity(uint256 bAmount, SignedPrice memory price) external;\r\n\r\n    function removeLiquidity(uint256 lShares, SignedPrice memory price) external;\r\n\r\n    function addMargin(uint256 bAmount, SignedPrice memory price) external;\r\n\r\n    function removeMargin(uint256 bAmount, SignedPrice memory price) external;\r\n\r\n    function trade(int256 tradeVolume, SignedPrice memory price) external;\r\n\r\n    function liquidate(address account, SignedPrice memory price) external;\r\n}\r\n\r\ninterface IPTokenLite is IERC721 {\r\n    struct Position {\r\n        // position volume, long is positive and short is negative\r\n        int256 volume;\r\n        // the cost the establish this position\r\n        int256 cost;\r\n        // the last cumulativeFundingRate since last funding settlement for this position\r\n        // the overflow for this value in intended\r\n        int256 lastCumulativeFundingRate;\r\n    }\r\n\r\n    event UpdateMargin(address indexed owner, int256 amount);\r\n\r\n    event UpdatePosition(address indexed owner, int256 volume, int256 cost, int256 lastCumulativeFundingRate);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function setPool(address newPool) external;\r\n\r\n    function pool() external view returns (address);\r\n\r\n    function totalMinted() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function getNumPositionHolders() external view returns (uint256);\r\n\r\n    function exists(address owner) external view returns (bool);\r\n\r\n    function getMargin(address owner) external view returns (int256);\r\n\r\n    function updateMargin(address owner, int256 margin) external;\r\n\r\n    function addMargin(address owner, int256 delta) external;\r\n\r\n    function getPosition(address owner) external view returns (Position memory);\r\n\r\n    function updatePosition(address owner, Position memory position) external;\r\n\r\n    function mint(address owner) external;\r\n\r\n    function burn(address owner) external;\r\n}\r\n\r\ninterface ILiquidatorQualifier {\r\n    function isQualifiedLiquidator(address liquidator) external view returns (bool);\r\n}\r\n\r\ninterface ILTokenLite is IERC20 {\r\n    function pool() external view returns (address);\r\n\r\n    function setPool(address newPool) external;\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    function burn(address account, uint256 amount) external;\r\n}\r\n\r\ninterface IOracle {\r\n    function getPrice() external returns (uint256);\r\n}\r\n\r\ninterface IOracleWithUpdate {\r\n    function getPrice() external returns (uint256);\r\n\r\n    function updatePrice(\r\n        address address_,\r\n        uint256 timestamp,\r\n        uint256 price,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}"
    },
    "contracts/polygon/implementations/Structs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nstruct TokenData {\n    uint256 originalTokenID;\n    uint256 ownerSupply;\n    uint256 sellingSupply;\n    uint256 soldSupply;\n    uint256 liquiditySupply;\n    uint256 liquiditySold;\n    uint256 fractionPrices;\n    uint256 lastFlipTime;\n    bool verified;\n    bool verifying;\n}\n\nstruct Flip {\n    uint256 tokenId;\n    uint64 prediction;\n    address player;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/polygon/implementations/SyntheticNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"../Interfaces.sol\";\r\nimport \"./SyntheticCollectionManager.sol\";\r\nimport \"./Structs.sol\";\r\n\r\ncontract SyntheticNFT is ERC721, Initializable, AccessControl {\r\n    bytes32 public constant MANAGER = keccak256(\"MANAGER\");\r\n\r\n    // token metadata\r\n    mapping(uint256 => string) private _tokenMetadata;\r\n\r\n    // proxied values for the erc721 attributes\r\n    string private _proxiedName;\r\n    string private _proxiedSymbol;\r\n\r\n    address private _collectionManager;\r\n\r\n    // solhint-disable-next-line\r\n    constructor() ERC721(\"Privi Collection Token\", \"PCT\") {}\r\n\r\n    function initialize(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        address collectionManager_\r\n    ) external initializer {\r\n        _proxiedName = name_;\r\n        _proxiedSymbol = symbol_;\r\n        _collectionManager = collectionManager_;\r\n\r\n        _setupRole(MANAGER, collectionManager_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _proxiedName;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _proxiedSymbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        return _tokenMetadata[tokenId];\r\n    }\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function safeMint(\r\n        address to, \r\n        uint256 tokenId, \r\n        string memory metadata \r\n    ) public onlyRole(MANAGER) {\r\n        _mint(to, tokenId);\r\n        _tokenMetadata[tokenId] = metadata;\r\n    }\r\n\r\n    function setMetadata(\r\n        uint256 tokenId, \r\n        string memory metadata\r\n    ) public onlyRole(MANAGER) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        _tokenMetadata[tokenId] = metadata;\r\n    }\r\n\r\n    function safeBurn(uint256 tokenId) public onlyRole(MANAGER) {\r\n        _burn(tokenId);\r\n        _tokenMetadata[tokenId] = \"\";\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(AccessControl, ERC721)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev override the before transfer hook to allow locking the nft\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address,\r\n        address,\r\n        uint256 tokenId\r\n    ) internal view override {\r\n        if (_exists(tokenId)) {\r\n            require(!SyntheticCollectionManager(_collectionManager).lockedNFT(tokenId), \"Token is locked\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/polygon/implementations/SyntheticCollectionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../extensions/IERC20ManagedAccounts.sol\";\r\nimport \"../auctions/AuctionsManager.sol\";\r\nimport \"../chainlink/RandomNumberConsumer.sol\";\r\nimport \"../chainlink/PolygonValidatorOracle.sol\";\r\nimport \"../SyntheticProtocolRouter.sol\";\r\nimport \"../Interfaces.sol\";\r\nimport \"../governance/ProtocolParameters.sol\";\r\nimport \"./Jot.sol\";\r\nimport \"./Structs.sol\";\r\nimport \"../libraries/ProtocolConstants.sol\";\r\n\r\ncontract SyntheticCollectionManager is AccessControl, Initializable {\r\n    using SafeERC20 for IERC20;\r\n    using Counters for Counters.Counter;\r\n\r\n    bytes32 public constant ROUTER = keccak256(\"ROUTER\");\r\n    bytes32 public constant AUCTION_MANAGER = keccak256(\"AUCTION_MANAGER\");\r\n    bytes32 public constant RANDOM_ORACLE = keccak256(\"RANDOM_ORACLE\");\r\n    bytes32 public constant VALIDATOR_ORACLE = keccak256(\"VALIDATOR_ORACLE\");\r\n\r\n    address private immutable _randomConsumerAddress;\r\n    address private immutable _validatorAddress;\r\n    address private _auctionsManagerAddress;\r\n\r\n    /**\r\n     * @dev ERC20 totalSupply (governance) parameter\r\n     * TODO: get from governance\r\n     */\r\n    uint256 private _jotsSupply;\r\n\r\n    /**\r\n     * @dev mapping the request id with the flip input data\r\n     */\r\n    mapping(bytes32 => Flip) private _flips;\r\n\r\n    mapping(uint256 => uint256) private _originalToSynthetic;\r\n\r\n    Counters.Counter public tokenCounter;\r\n\r\n    /**\r\n     * @notice the address of the Protocol Router\r\n     */\r\n    address public syntheticProtocolRouterAddress;\r\n\r\n    ProtocolParameters public protocol;\r\n\r\n    address private _swapAddress;\r\n\r\n    /**\r\n     * @notice address of the original collection\r\n     */\r\n    address public originalCollectionAddress;\r\n\r\n    /**\r\n     * @notice jot Address for this collection\r\n     */\r\n    address public jotAddress;\r\n\r\n    /**\r\n     * @notice funding token address\r\n     */\r\n    address public fundingTokenAddress;\r\n\r\n    /**\r\n     * @notice data for each token\r\n     */\r\n    mapping(uint256 => TokenData) public tokens;\r\n\r\n    /**\r\n     * @dev the nonce to avoid double verification (quantity of exits for original token id)\r\n     */\r\n    mapping(uint256 => uint256) public nonces;\r\n    mapping(uint256 => mapping(uint256 => address)) public ownersByNonce;\r\n\r\n    /**\r\n     * @notice Synthetic NFT Address  for this collection\r\n     */\r\n    address public erc721address;\r\n\r\n    address public jotPool;\r\n\r\n    address private _usdtAddress;\r\n\r\n    event CoinFlipped(\r\n        bytes32 indexed requestId,\r\n        address indexed player,\r\n        uint256 indexed tokenId,\r\n        uint256 prediction\r\n    );\r\n    event FlipProcessed(\r\n        bytes32 indexed requestId,\r\n        uint256 indexed tokenId,\r\n        uint256 prediction,\r\n        uint256 randomResult\r\n    );\r\n\r\n    constructor(\r\n        address randomConsumerAddress,\r\n        address validatorAddress,\r\n        address usdtAddress\r\n    ) {\r\n        _randomConsumerAddress = randomConsumerAddress;\r\n        _validatorAddress = validatorAddress;\r\n        _usdtAddress = usdtAddress;\r\n    }\r\n\r\n    function initialize(\r\n        address _jotAddress,\r\n        address originalCollectionAddress_,\r\n        address _erc721address,\r\n        address auctionManagerAddress,\r\n        address protocol_,\r\n        address fundingTokenAddress_,\r\n        address jotPool_,\r\n        address swapAddress\r\n    ) external initializer {\r\n        jotAddress = _jotAddress;\r\n        erc721address = _erc721address;\r\n        originalCollectionAddress = originalCollectionAddress_;\r\n        syntheticProtocolRouterAddress = msg.sender;\r\n        _auctionsManagerAddress = auctionManagerAddress;\r\n        protocol = ProtocolParameters(protocol_);\r\n        jotPool = jotPool_;\r\n        _swapAddress = swapAddress;\r\n        _jotsSupply = ProtocolConstants.JOT_SUPPLY;\r\n        fundingTokenAddress = fundingTokenAddress_;\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(ROUTER, msg.sender);\r\n        _setupRole(AUCTION_MANAGER, auctionManagerAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev we need to pass the jobSupply here to work well even when the governance\r\n     *      changes this protocol parameter in the middle of the auction\r\n     */\r\n    function reassignNFT(uint256 nftId_, address newOwner_) external onlyRole(AUCTION_MANAGER) {\r\n        string memory metadata = ISyntheticNFT(erc721address).tokenURI(nftId_);\r\n\r\n        TokenData storage data = tokens[nftId_];\r\n\r\n        // the auction could only be started if ownerSupply is 0\r\n        assert(data.ownerSupply == 0);\r\n\r\n        // Get original token ID\r\n        uint256 originalID = tokens[nftId_].originalTokenID;\r\n\r\n        // Burn synthetic NFT\r\n        ISyntheticNFT(erc721address).safeBurn(nftId_);\r\n\r\n        // Get new synthetic ID\r\n        uint256 newSyntheticID = tokenCounter.current();\r\n\r\n        // Mint new one\r\n        ISyntheticNFT(erc721address).safeMint(newOwner_, newSyntheticID, metadata);\r\n\r\n        // Update original to synthetic mapping\r\n        _originalToSynthetic[originalID] = newSyntheticID;\r\n\r\n        // Empty previous id\r\n        tokens[nftId_] = TokenData(0, 0, 0, 0, 0, 0, 0, 0, false, false);\r\n\r\n        // Fill new ID\r\n        uint256 tokenSupply = ProtocolConstants.JOT_SUPPLY;\r\n        tokens[newSyntheticID] = TokenData(originalID, tokenSupply, 0, 0, 0, 0, 0, 0, false, false);\r\n    }\r\n\r\n    /**\r\n     * @notice change an NFT for another one of the same collection\r\n     */\r\n    function change(\r\n        uint256 syntheticID,\r\n        uint256 newOriginalTokenID,\r\n        address caller\r\n    ) public onlyRole(ROUTER) {\r\n        // Token must be registered\r\n        require(ISyntheticNFT(erc721address).exists(syntheticID), \"token not registered!\");\r\n        require(tokens[syntheticID].ownerSupply != 0, \"Token is locked\");\r\n\r\n        // Caller must be token owner\r\n        address tokenOwner = IERC721(erc721address).ownerOf(syntheticID);\r\n        require(tokenOwner == caller, \"You are not the owner of the NFT!\");\r\n\r\n        // Change original token ID and set verified = false\r\n        uint256 originalID = tokens[syntheticID].originalTokenID;\r\n\r\n        _originalToSynthetic[originalID] = 0;\r\n        _originalToSynthetic[newOriginalTokenID] = syntheticID;\r\n\r\n        tokens[syntheticID].originalTokenID = newOriginalTokenID;\r\n        tokens[syntheticID].verified = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the owner of the NFT\r\n     */\r\n    function getSyntheticNFTOwner(uint256 tokenId) private view returns (address) {\r\n        //TODO: get owner from Oracle\r\n        return IERC721(erc721address).ownerOf(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice returns the Quickswap pool address\r\n     */\r\n    function poolAddress() public view returns (address) {\r\n        //TODO: check if pool is initiated\r\n        return IJot(jotAddress).uniswapV2Pair();\r\n    }\r\n\r\n    /**\r\n     * @notice public function. Checks if an NFT has\r\n     * been already fractionalized\r\n     */\r\n    function isSyntheticNFTCreated(uint256 tokenId) public view returns (bool) {\r\n        return _originalToSynthetic[tokenId] != 0;\r\n    }\r\n\r\n    /**\r\n     * @notice public function. Checks if an NFT has\r\n     * been already fractionalised.\r\n     */\r\n    function isSyntheticNFTFractionalised(uint256 tokenId) public view returns (bool) {\r\n        return tokens[tokenId].originalTokenID != 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Checks isSyntheticNFTCreated(address, id) is False.\r\n     * Then it mints a new NFT with: ”to”, ”id” and ”metadata”\r\n     */\r\n    function generateSyntheticNFT(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory metadata\r\n    ) private {\r\n        ISyntheticNFT(erc721address).safeMint(to, tokenId, metadata);\r\n    }\r\n\r\n    /**\r\n     * @notice First\r\n     * it updates counter syntheticID++. Then:\r\n     * • generateSyntheticNFT(address, id)\r\n     * • Interacts with JOT contract for that address and:\r\n     * (a) Mints JotSupply (governance parameter)\r\n     * (b) Register ownerSupply (DO NOT SEND HIM/HER)\r\n     * (c) Register sellingSupply = (JotSupply-supplyToKeep)/2\r\n     * (d) Register soldSupply = 0\r\n     * (e) Register liquiditySupply = (JotSupply-supplyToKeep)/2.\r\n     * (f) Register liquiditySold = 0\r\n     *\r\n     */\r\n    function register(\r\n        uint256 tokenId,\r\n        uint256 supplyToKeep,\r\n        uint256 priceFraction,\r\n        address nftOwner,\r\n        string memory metadata\r\n    ) public onlyRole(ROUTER) returns (uint256) {\r\n        require(priceFraction > 0, \"priceFraction can't be zero\");\r\n        require(isSyntheticNFTCreated(tokenId) == false, \"Synthetic NFT already generated!\");\r\n\r\n        uint256 syntheticID = tokenCounter.current();\r\n\r\n        generateSyntheticNFT(nftOwner, syntheticID, metadata);\r\n\r\n        Jot(jotAddress).mint(address(this), _jotsSupply);\r\n\r\n        uint256 sellingSupply = (_jotsSupply - supplyToKeep) / 2;\r\n        uint256 liquiditySupply = (_jotsSupply - supplyToKeep) / 2;\r\n\r\n        TokenData memory data = TokenData({\r\n            originalTokenID: tokenId,\r\n            ownerSupply: supplyToKeep,\r\n            sellingSupply: sellingSupply,\r\n            soldSupply: 0,\r\n            liquiditySupply: liquiditySupply,\r\n            liquiditySold: 0,\r\n            fractionPrices: priceFraction,\r\n            lastFlipTime: 0,\r\n            verified: false,\r\n            verifying: false\r\n        });\r\n\r\n        tokens[syntheticID] = data;\r\n\r\n        tokenCounter.increment();\r\n\r\n        return syntheticID;\r\n    }\r\n\r\n    function getOwnerSupply(uint256 tokenId) public view returns (uint256) {\r\n        return tokens[tokenId].ownerSupply;\r\n    }\r\n\r\n    function getSellingSupply(uint256 tokenId) public view returns (uint256) {\r\n        return tokens[tokenId].sellingSupply;\r\n    }\r\n\r\n    function getSoldSupply(uint256 tokenId) public view returns (uint256) {\r\n        return tokens[tokenId].soldSupply;\r\n    }\r\n\r\n    function getJotFractionPrice(uint256 tokenId) public view returns (uint256) {\r\n        return tokens[tokenId].fractionPrices;\r\n    }\r\n\r\n    function getJotAmountLeft(uint256 tokenId) public view returns (uint256) {\r\n        TokenData storage token = tokens[tokenId];\r\n        return token.sellingSupply - token.soldSupply;\r\n    }\r\n\r\n    function getSalePrice(uint256 tokenId, uint256 buyAmount) public view returns (uint256) {\r\n        uint256 amount = (buyAmount * tokens[tokenId].fractionPrices);\r\n        return amount;\r\n    }\r\n\r\n    function getFundingTokenAllowance() public view returns (uint256) {\r\n        return IERC20(fundingTokenAddress).allowance(msg.sender, address(this));\r\n    }\r\n\r\n    function getContractJotsBalance() public view returns (uint256) {\r\n        return IJot(jotAddress).balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice allows the caller to buy jots using the Funding token\r\n     */\r\n    function buyJotTokens(uint256 tokenId, uint256 buyAmount) public {\r\n        TokenData storage token = tokens[tokenId];\r\n        require(ISyntheticNFT(erc721address).exists(tokenId), \"Token not registered\");\r\n        require(token.fractionPrices > 0, \"Token price not set\");\r\n        //require(token.verified, \"Token not verified yet\");\r\n        require(token.ownerSupply != 0, \"Token is locked\");\r\n\r\n        // Calculate amount left\r\n        uint256 amountLeft = token.sellingSupply - token.soldSupply;\r\n\r\n        // If amount left is lesser than buying amount\r\n        // then buying amount = amount left\r\n        if (amountLeft < buyAmount) {\r\n            buyAmount = amountLeft;\r\n        }\r\n        uint256 amount = (buyAmount * token.fractionPrices);\r\n        // Can't sell zero tokens\r\n        require(amount != 0, \"No tokens left!\");\r\n\r\n        // Transfer funding tokens\r\n        IERC20(fundingTokenAddress).transferFrom(msg.sender, address(this), amount);\r\n\r\n        // Transfer Jots\r\n        IJot(jotAddress).transfer(msg.sender, buyAmount);\r\n\r\n        //Increase sold supply (amount in token) and liquidity sold (amount in ether)\r\n        token.soldSupply += buyAmount;\r\n        token.liquiditySold += amount;\r\n    }\r\n\r\n    function depositJots(uint256 tokenId, uint256 amount) public {\r\n        ISyntheticNFT nft = ISyntheticNFT(erc721address);\r\n        address nftOwner = nft.ownerOf(tokenId);\r\n        require(nftOwner == msg.sender, \"you are not the owner of the NFT!\");\r\n        uint256 result = tokens[tokenId].ownerSupply + amount;\r\n        require(result <= ProtocolConstants.JOT_SUPPLY, \"You can't deposit more than the Jot Supply limit\");\r\n        IJot(jotAddress).transferFrom(msg.sender, address(this), amount);\r\n        tokens[tokenId].ownerSupply += amount;\r\n    }\r\n\r\n    /**\r\n     * @notice increase selling supply for a given NFT\r\n     * caller must be the owner of the NFT\r\n     */\r\n\r\n    function increaseSellingSupply(uint256 tokenId, uint256 amount) public {\r\n        TokenData storage token = tokens[tokenId];\r\n        require(msg.sender == getSyntheticNFTOwner(tokenId), \"You are not the owner of the NFT!\");\r\n\r\n        //require(token.verified, \"Token not verified yet\");\r\n        require(token.ownerSupply != 0, \"Token is locked\");\r\n\r\n        require(token.ownerSupply >= amount, \"You do not have enough tokens left\");\r\n        token.ownerSupply -= amount;\r\n        token.sellingSupply += amount / 2;\r\n        token.liquiditySupply += amount / 2;\r\n    }\r\n\r\n    /**\r\n     * @notice decrease selling supply for a given NFT\r\n     * caller must be the owner of the NFT\r\n     */\r\n    function decreaseSellingSupply(uint256 tokenId, uint256 amount) public {\r\n        require(msg.sender == getSyntheticNFTOwner(tokenId), \"You are not the owner of the NFT!\");\r\n\r\n        TokenData storage token = tokens[tokenId];\r\n\r\n        //require(token.verified, \"Token not verified yet\");\r\n        require(token.ownerSupply != 0, \"Token is locked\");\r\n\r\n        require(token.liquiditySupply >= amount / 2, \"You do not have enough liquidity left\");\r\n        require(token.sellingSupply >= amount / 2, \"You do not have enough selling supply left\");\r\n\r\n        token.ownerSupply += amount;\r\n        token.sellingSupply -= amount / 2;\r\n        token.liquiditySupply -= amount / 2;\r\n    }\r\n\r\n    function lockedNFT(uint256 tokenId) public view returns (bool) {\r\n        TokenData storage token = tokens[tokenId];\r\n        return !token.verified || token.ownerSupply == 0;\r\n    }\r\n\r\n    /**\r\n     * @notice update the price of a fraction for a given NFT\r\n     * caller must be the owner\r\n     */\r\n    function updatePriceFraction(uint256 tokenId, uint256 newFractionPrice) public {\r\n        require(ISyntheticNFT(erc721address).exists(tokenId), \"Token not registered\");\r\n\r\n        TokenData storage token = tokens[tokenId];\r\n\r\n        //require(token.verified, \"Token not verified yet\");\r\n        require(token.ownerSupply != 0, \"Token is locked\");\r\n\r\n        require(msg.sender == getSyntheticNFTOwner(tokenId), \"You are not the owner of the NFT!\");\r\n        token.fractionPrices = newFractionPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice add available liquidity for a given token to UniSwap pool\r\n     */\r\n    function addLiquidityToPool(uint256 tokenId) public {\r\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_swapAddress);\r\n\r\n        TokenData storage token = tokens[tokenId];\r\n        require(tokens[tokenId].soldSupply > 0, \"soldSupply is zero\");\r\n        uint256 liquiditySupply = token.liquiditySupply;\r\n        uint256 liquiditySold = token.liquiditySold;\r\n\r\n        IJot(jotAddress).approve(_swapAddress, liquiditySupply);\r\n\r\n        IERC20(fundingTokenAddress).approve(_swapAddress, liquiditySold);\r\n\r\n        uint256 amountA;\r\n        uint256 amountB;\r\n        uint256 liquidity;\r\n\r\n        // add the liquidity\r\n        (amountA, amountB, liquidity) = uniswapV2Router.addLiquidity(\r\n            jotAddress,\r\n            fundingTokenAddress,\r\n            liquiditySupply,\r\n            liquiditySold,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(0),\r\n            block.timestamp // solhint-disable-line\r\n        );\r\n        unchecked {\r\n            tokens[tokenId].liquiditySupply -= amountA;\r\n            tokens[tokenId].liquiditySold -= amountB;\r\n            tokens[tokenId].sellingSupply -= amountA;\r\n            tokens[tokenId].soldSupply -= amountB;\r\n        }\r\n    }\r\n\r\n    function isAllowedToFlip(uint256 tokenId) public view returns (bool) {\r\n        return\r\n            ISyntheticNFT(erc721address).exists(tokenId) &&\r\n            block.timestamp - tokens[tokenId].lastFlipTime >= protocol.flippingInterval() && // solhint-disable-line\r\n            IERC20(jotAddress).balanceOf(jotPool) > protocol.flippingAmount() &&\r\n            isSyntheticNFTFractionalised(tokenId);\r\n    }\r\n\r\n    function flipJot(uint256 tokenId, uint64 prediction) external {\r\n        TokenData storage token = tokens[tokenId];\r\n\r\n        require(isAllowedToFlip(tokenId), \"Flip is not allowed yet\");\r\n        require(token.ownerSupply != 0, \"Token is locked\");\r\n\r\n        token.lastFlipTime = block.timestamp; // solhint-disable-line\r\n\r\n        bytes32 requestId = RandomNumberConsumer(_randomConsumerAddress).getRandomNumber();\r\n        _flips[requestId] = Flip({tokenId: tokenId, prediction: prediction, player: msg.sender});\r\n\r\n        emit CoinFlipped(requestId, msg.sender, tokenId, prediction);\r\n    }\r\n\r\n    function processFlipResult(uint256 randomNumber, bytes32 requestId) external onlyRole(RANDOM_ORACLE) {\r\n        uint256 poolAmount;\r\n        uint256 fAmount = protocol.flippingAmount();\r\n        uint256 fReward = protocol.flippingReward();\r\n\r\n        Flip memory flip = _flips[requestId];\r\n        uint256 ownerSupply = tokens[flip.tokenId].ownerSupply;\r\n\r\n        // avoid underflow in math operations\r\n        if (fAmount > ownerSupply) {\r\n            fAmount = ownerSupply;\r\n        }\r\n        if (fReward > fAmount) {\r\n            fReward = fAmount;\r\n        }\r\n\r\n        if (randomNumber == 0) {\r\n            tokens[flip.tokenId].ownerSupply -= fAmount;\r\n            if (randomNumber != flip.prediction) {\r\n                poolAmount = fAmount;\r\n            } else {\r\n                poolAmount = fAmount - fReward;\r\n                IERC20(jotAddress).safeTransfer(_flips[requestId].player, fReward);\r\n            }\r\n            if (poolAmount > 0) {\r\n                IERC20(jotAddress).safeTransfer(jotPool, poolAmount);\r\n            }\r\n        } else {\r\n            tokens[flip.tokenId].ownerSupply += fAmount;\r\n            if (randomNumber != flip.prediction) {\r\n                poolAmount = fAmount;\r\n            } else {\r\n                poolAmount = fAmount - fReward;\r\n                IERC20(jotAddress).safeTransfer(_flips[requestId].player, fReward);\r\n            }\r\n            if (poolAmount > 0) {\r\n                IERC20ManagedAccounts(jotAddress).transferFromManaged(jotPool, address(this), poolAmount);\r\n            }\r\n        }\r\n\r\n        // lock the nft and make it auctionable\r\n        if (tokens[flip.tokenId].ownerSupply == 0) {\r\n            AuctionsManager(_auctionsManagerAddress).whitelistNFT(flip.tokenId);\r\n        }\r\n\r\n        emit FlipProcessed(requestId, flip.tokenId, flip.prediction, randomNumber);\r\n    }\r\n\r\n    function recoverToken(uint256 tokenId) external {\r\n        require(AuctionsManager(_auctionsManagerAddress).isRecoverable(tokenId), \"Token is not recoverable\");\r\n        require(ISyntheticNFT(erc721address).ownerOf(tokenId) == msg.sender, \"Only owner allowed\");\r\n\r\n        // reverts on failure\r\n        IERC20(jotAddress).safeTransferFrom(msg.sender, address(this), ProtocolConstants.JOT_SUPPLY);\r\n\r\n        tokens[tokenId].ownerSupply = ProtocolConstants.JOT_SUPPLY;\r\n\r\n        AuctionsManager(_auctionsManagerAddress).blacklistNFT(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice This method calls chainlink oracle and\r\n     * verifies if the NFT has been locked on NFTVaultManager. In addition\r\n     * gets the metadata of the NFT\r\n     */\r\n    function verify(uint256 tokenId) external {\r\n        TokenData storage token = tokens[tokenId];\r\n        require(ISyntheticNFT(erc721address).exists(tokenId), \"Token not registered\");\r\n        require(!token.verified, \"Token already verified\");\r\n\r\n        //PolygonValidatorOracle(_validatorAddress).verifyTokenInCollection(\r\n        //    originalCollectionAddress,\r\n        //    tokenId,\r\n        //    nonces[token.originalTokenID]\r\n        //);\r\n\r\n        //tokens[tokenId].verifying = true;\r\n        tokens[tokenId].verified = true;\r\n    }\r\n\r\n    function processSuccessfulVerify(uint256 tokenId, bool verified) external onlyRole(VALIDATOR_ORACLE) {\r\n        tokens[tokenId].verified = verified;\r\n        tokens[tokenId].verifying = false;\r\n    }\r\n\r\n    /**\r\n     * @notice allows to exit the protocol (retrieve the token)\r\n     */\r\n    function exitProtocol(uint256 tokenId) external {\r\n        TokenData storage token = tokens[tokenId];\r\n        uint256 ownerSupply = token.ownerSupply;\r\n        require(ISyntheticNFT(erc721address).ownerOf(tokenId) == msg.sender, \"Only owner allowed\");\r\n        require(ownerSupply >= ProtocolConstants.JOT_SUPPLY, \"Insufficient jot supply in the token\");\r\n\r\n        // increase nonce to avoid double verification\r\n        uint256 currentNonce = nonces[token.originalTokenID];\r\n        ownersByNonce[tokenId][currentNonce] = msg.sender;\r\n        nonces[token.originalTokenID] = currentNonce + 1;\r\n\r\n        // free space and get refunds\r\n        delete tokens[tokenId];\r\n\r\n        // burn the jots and the nft\r\n        Jot(jotAddress).burn(ownerSupply);\r\n        safeBurn(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev burn a token\r\n     */\r\n    function safeBurn(uint256 tokenId) public onlyRole(ROUTER) {\r\n        ISyntheticNFT(erc721address).safeBurn(tokenId);\r\n        tokenCounter.decrement();\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function isVerified(uint256 tokenId) public view returns (bool) {\r\n        require(ISyntheticNFT(erc721address).exists(tokenId), \"NFT not minted\");\r\n        return tokens[tokenId].verified;\r\n    }\r\n\r\n    function getOriginalID(uint256 tokenId) public view returns (uint256) {\r\n        require(ISyntheticNFT(erc721address).exists(tokenId), \"NFT not minted\");\r\n        return tokens[tokenId].originalTokenID;\r\n    }\r\n\r\n    function getTokenURI(uint256 tokenId) public view returns (string memory) {\r\n        return ISyntheticNFT(erc721address).tokenURI(tokenId);\r\n    }\r\n\r\n    function setMetadata(uint256 tokenId, string memory metadata) public {\r\n        TokenData storage token = tokens[tokenId];\r\n        require(!token.verified, \"Can't change metadata after verify\");\r\n        require(!token.verifying, \"Can't change metadata while verifying\");\r\n\r\n        address tokenOwner = IERC721(erc721address).ownerOf(tokenId);\r\n        require(msg.sender == tokenOwner, \"You are not the owner of the NFT!\");\r\n        ISyntheticNFT(erc721address).setMetadata(tokenId, metadata);\r\n    }\r\n\r\n    function exchangeOwnerJot(uint256 tokenId, uint256 amount) external {\r\n        require(tokens[tokenId].ownerSupply >= amount, \"Exchange amount exceeds balance\");\r\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_swapAddress);\r\n        address[] memory path = new address[](2);\r\n        path[0] = jotAddress;\r\n        path[1] = _usdtAddress;\r\n\r\n        tokens[tokenId].ownerSupply -= amount;\r\n        if (tokens[tokenId].ownerSupply == 0) {\r\n            AuctionsManager(_auctionsManagerAddress).whitelistNFT(tokenId);\r\n        }\r\n\r\n        uniswapV2Router.swapExactTokensForTokens(\r\n            amount,\r\n            0, //we don't care about slippage\r\n            path,\r\n            msg.sender,\r\n            // solhint-disable-next-line\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/polygon/extensions/IERC20ManagedAccounts.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * @dev allows to send funds from a managed account (infinite allowance)\n */\ninterface IERC20ManagedAccounts {\n    function transferFromManaged(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/polygon/auctions/AuctionsManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"../governance/ProtocolParameters.sol\";\nimport \"../implementations/SyntheticCollectionManager.sol\";\nimport \"../SyntheticProtocolRouter.sol\";\nimport \"../libraries/ProtocolConstants.sol\";\nimport \"./NFTAuction.sol\";\n\ncontract AuctionsManager is AccessControl, Initializable {\n    bytes32 public constant COLLECTION_MANAGER = keccak256(\"COLLECTION_MANAGER\");\n    bytes32 public constant DEPLOYER = keccak256(\"DEPLOYER\");\n    bytes32 public constant AUCTION = keccak256(\"AUCTION\");\n\n    /**\n     * @dev the implementation to deploy through minimal proxies\n     */\n    address private immutable _nftAuctionImplementation;\n\n    ProtocolParameters public protocol;\n    SyntheticProtocolRouter public router;\n\n    mapping(address => mapping(uint256 => bool)) private _whitelistedTokens;\n    mapping(address => mapping(uint256 => uint256)) private _recoverableTillDate;\n\n    event AuctionStarted(\n        address indexed collection,\n        uint256 indexed nftId,\n        address auctionContract,\n        uint256 openingBid\n    );\n\n    constructor(address nftAuction_) {\n        _nftAuctionImplementation = nftAuction_;\n\n        _setupRole(DEPLOYER, msg.sender);\n    }\n\n    function initialize(address protocol_, address router_) external initializer onlyRole(DEPLOYER) {\n        protocol = ProtocolParameters(protocol_);\n        router = SyntheticProtocolRouter(router_);\n\n        _setupRole(DEFAULT_ADMIN_ROLE, router_);\n    }\n\n    function whitelistNFT(uint256 nftId_) external onlyRole(COLLECTION_MANAGER) {\n        _whitelistedTokens[msg.sender][nftId_] = true;\n        _recoverableTillDate[msg.sender][nftId_] = block.timestamp + protocol.recoveryThreshold(); // solhint-disable-line\n    }\n\n    function blacklistNFT(uint256 nftId_) external onlyRole(COLLECTION_MANAGER) {\n        _whitelistedTokens[msg.sender][nftId_] = false;\n    }\n\n    function isRecoverable(uint256 nftId_) public view returns (bool) {\n        // solhint-disable-next-line\n        return (_whitelistedTokens[msg.sender][nftId_] &&\n            _recoverableTillDate[msg.sender][nftId_] >= block.timestamp);\n    }\n\n    /**\n     * @dev we need to pass the jobSupply here to work well even when the governance\n     *      changes this protocol parameter in the middle of the auction\n     */\n    function reassignNFT(\n        address collection_,\n        uint256 nftId_,\n        address newOwner_\n    ) external onlyRole(AUCTION) {\n        SyntheticCollectionManager(collection_).reassignNFT(nftId_, newOwner_);\n    }\n\n    function startAuction(\n        address collection_,\n        uint256 nftId_,\n        uint256 openingBid_\n    ) external {\n        require(_whitelistedTokens[collection_][nftId_], \"Token can't be auctioned\");\n        require(_recoverableTillDate[msg.sender][nftId_] < block.timestamp, \"Token is yet recoverable\"); //solhint-disable-line\n        require(openingBid_ >= ProtocolConstants.JOT_SUPPLY, \"Opening bid too low\");\n        require(router.isSyntheticNFTCreated(collection_, nftId_), \"Non registered token\");\n\n        // blacklist the nft to avoid start a new auction\n        _whitelistedTokens[collection_][nftId_] = false;\n\n        address jotToken = router.getJotsAddress(collection_);\n\n        // deploys a minimal proxy contract from privi nft auction implementation\n        address auctionAddress = Clones.clone(_nftAuctionImplementation);\n        NFTAuction(auctionAddress).initialize(\n            nftId_,\n            jotToken,\n            router.getJotPoolAddress(collection_),\n            router.getCollectionManagerAddress(collection_),\n            openingBid_,\n            protocol.auctionDuration(),\n            msg.sender\n        );\n\n        // give the AUCTION role to allow blacklisting\n        _setupRole(AUCTION, auctionAddress);\n\n        // transfer funds to the auction contract\n        require(\n            IERC20(jotToken).transferFrom(msg.sender, auctionAddress, openingBid_),\n            \"Unable to transfer jots\"\n        );\n\n        emit AuctionStarted(collection_, nftId_, auctionAddress, openingBid_);\n    }\n}\n"
    },
    "contracts/polygon/chainlink/RandomNumberConsumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../implementations/SyntheticCollectionManager.sol\";\n\n/**\n * @dev the ownership will be transferred after deployment to the router contract\n */\ncontract RandomNumberConsumer is VRFConsumerBase, Ownable {\n    bytes32 internal immutable keyHash;\n    uint256 internal immutable fee;\n\n    mapping(bytes32 => address) private _requestIdToCollection;\n    mapping(address => bool) private _whitelistedCollections;\n\n    /**\n     * @dev constructor inherits VRFConsumerBase\n     */\n    constructor(VRFOracleInfo memory _oracleInfo)\n        VRFConsumerBase(_oracleInfo.vrfCoordinator, _oracleInfo.linkToken)\n    {\n        keyHash = _oracleInfo.keyHash;\n        fee = _oracleInfo.vrfFee;\n    }\n\n    /**\n     * @dev requests randomness\n     */\n    function getRandomNumber() external returns (bytes32 requestId) {\n        require(_whitelistedCollections[msg.sender], \"Invalid requester\");\n        require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with faucet\");\n\n        requestId = requestRandomness(keyHash, fee);\n        _requestIdToCollection[requestId] = msg.sender;\n    }\n\n    /**\n     * @dev callback function used by VRF Coordinator (only 200k gas allowed and should not revert)\n     */\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n        SyntheticCollectionManager(_requestIdToCollection[requestId]).processFlipResult(\n            randomness % 2,\n            requestId\n        );\n    }\n\n    /**\n     * @dev whitelist collections to get random from this contract\n     */\n    function whitelistCollection(address collectionId) external onlyOwner {\n        _whitelistedCollections[collectionId] = true;\n    }\n}\n"
    },
    "contracts/polygon/chainlink/PolygonValidatorOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../implementations/SyntheticCollectionManager.sol\";\r\nimport \"./OracleStructs.sol\";\r\n\r\n/**\r\n * @dev the ownership will be transferred after deployment to the router contract\r\n */\r\ncontract PolygonValidatorOracle is ChainlinkClient, Ownable {\r\n    /**\r\n     * @dev oracle configuration parameters\r\n     */\r\n    string public token;\r\n    string public apiURL;\r\n    address public chainlinkNode;\r\n    bytes32 public jobId;\r\n    uint256 public nodeFee;\r\n    address public linkToken;\r\n\r\n    mapping(bytes32 => VerifyRequest) private _verifyRequests;\r\n    mapping(address => bool) private _whitelistedCollections;\r\n\r\n    event ResponseReceived(\r\n        bytes32 indexed requestId,\r\n        address originalCollection,\r\n        address syntheticCollection,\r\n        uint256 tokenId,\r\n        bool verified\r\n    );\r\n\r\n    constructor(APIOracleInfo memory _oracleInfo) {\r\n        linkToken = _oracleInfo.linkToken;\r\n        chainlinkNode = _oracleInfo.chainlinkNode;\r\n        jobId = stringToBytes32(_oracleInfo.jobId);\r\n        nodeFee = _oracleInfo.nodeFee;\r\n        apiURL = \"https://nft-validator-hwk7x.ondigitalocean.app/verify\";\r\n\r\n        setChainlinkToken(linkToken);\r\n    }\r\n\r\n    /**\r\n     * @dev call to verify if a token is locked in ethereum vault,\r\n     * this method can be called only from the collection manager contract\r\n     * @param ethereumCollection the collection address in ethereum\r\n     * @param tokenId the id of the nft in the collection\r\n     * @param nonce the nonce\r\n     * @return requestId the id of the request to the Chainlink oracle\r\n     */\r\n    function verifyTokenInCollection(\r\n        address ethereumCollection,\r\n        uint256 tokenId,\r\n        uint256 nonce\r\n    ) external returns (bytes32 requestId) {\r\n        require(_whitelistedCollections[msg.sender], \"Invalid requester\");\r\n\r\n        Chainlink.Request memory request = buildChainlinkRequest(\r\n            jobId,\r\n            address(this),\r\n            this.processResponse.selector\r\n        );\r\n\r\n        // set the request params\r\n        Chainlink.add(\r\n            request,\r\n            \"get\",\r\n            string(\r\n                abi.encodePacked(\r\n                    apiURL,\r\n                    \"?collection=\",\r\n                    ethereumCollection,\r\n                    \"&tokenId=\",\r\n                    uint2str(tokenId),\r\n                    \"&nonce=\",\r\n                    uint2str(nonce)\r\n                )\r\n            )\r\n        );\r\n        Chainlink.add(request, \"path\", \"locked\");\r\n\r\n        // Send the request\r\n        requestId = sendChainlinkRequestTo(chainlinkNode, request, nodeFee);\r\n\r\n        _verifyRequests[requestId] = VerifyRequest({\r\n            tokenId: tokenId,\r\n            originalCollection: ethereumCollection,\r\n            syntheticCollection: msg.sender\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @dev function to process the oracle response (only callable from oracle)\r\n     * @param requestId the id of the request to the Chainlink oracle\r\n     * @param verified wether the nft is locked or not on ethereum\r\n     */\r\n    function processResponse(bytes32 requestId, bool verified) public recordChainlinkFulfillment(requestId) {\r\n        VerifyRequest memory requestData = _verifyRequests[requestId];\r\n\r\n        // only call the synthetic collection contract if is locked\r\n        SyntheticCollectionManager(requestData.syntheticCollection).processSuccessfulVerify(\r\n            requestData.tokenId,\r\n            verified\r\n        );\r\n\r\n        emit ResponseReceived(\r\n            requestId,\r\n            requestData.originalCollection,\r\n            requestData.syntheticCollection,\r\n            requestData.tokenId,\r\n            verified\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev whitelist collections in order to allow calling this contract\r\n     * (only router can whitelist after deploying the proxy, the router contract owns this one)\r\n     * @param collectionId the collection manager (sythetic collection from polygon)\r\n     */\r\n    function whitelistCollection(address collectionId) external onlyOwner {\r\n        _whitelistedCollections[collectionId] = true;\r\n    }\r\n\r\n    function stringToBytes32(string memory source) private pure returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n\r\n    function uint2str(uint256 _i) private pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 j = _i;\r\n        uint256 len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len;\r\n        while (_i != 0) {\r\n            k = k - 1;\r\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n"
    },
    "contracts/polygon/SyntheticProtocolRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./chainlink/RandomNumberConsumer.sol\";\nimport \"./chainlink/PolygonValidatorOracle.sol\";\nimport \"./implementations/SyntheticCollectionManager.sol\";\nimport \"./implementations/Jot.sol\";\nimport \"./implementations/JotPool.sol\";\nimport \"./implementations/SyntheticNFT.sol\";\nimport \"./auctions/AuctionsManager.sol\";\nimport \"./Structs.sol\";\nimport \"./governance/ProtocolParameters.sol\";\nimport \"./governance/FuturesProtocolParameters.sol\";\nimport \"../perpetual_futures/tokens/LTokenLite.sol\";\nimport \"../perpetual_futures/tokens/PTokenLite.sol\";\nimport \"../perpetual_futures/PerpetualPoolLite.sol\";\nimport \"./Interfaces.sol\";\n\ncontract SyntheticProtocolRouter is AccessControl, Ownable {\n    using Counters for Counters.Counter;\n\n    /**\n     * @dev implementation addresses for proxies\n     */\n    address private _jot;\n    address private _jotPool;\n    address private _collectionManager;\n    address private _syntheticNFT;\n    address private _auctionManager;\n\n    address private _protocol;\n    address private _futuresProtocol;\n    address private _fundingTokenAddress;\n    address private _randomConsumerAddress;\n    address private _validatorAddress;\n\n    address private _perpetualPoolLiteAddress;\n    address private _lTokenLite;\n    address private _pTokenLite;\n\n    /**\n     * @dev collections map.\n     * collection address => collection data\n     */\n    mapping(address => SyntheticCollection) private _collections;\n\n    /**\n     * @dev get collection address from ID\n     */\n    mapping(uint256 => address) private _collectionIdToAddress;\n\n    /**\n     * @notice number of registered collections\n     */\n    Counters.Counter public protocolVaults;\n\n    /**\n     * @notice QuickSwap address\n     */\n    address public swapAddress;\n\n    // a new Synthetic NFT collection manager is registered\n    event CollectionManagerRegistered(\n        uint256 collectionManagerID,\n        address collectionManagerAddress,\n        address jotAddress,\n        address jotPoolAddress,\n        address jotPairAddress,\n        address syntheticNFTAddress,\n        address quickSwapAddress,\n        address auctionAddress,\n        address lTokenLite_,\n        address pTokenLite_,\n        address perpetualPoolLiteAddress_\n    );\n\n    event TokenRegistered(\n        address collectionManagerAddress,\n        uint256 collectionManagerID,\n        uint256 syntheticTokenId\n    );\n\n    event TokenChanged(address collectionAddress, uint256 syntheticID, uint256 previousID, uint256 newID);\n\n    constructor(\n        address swapAddress_,\n        address jot_,\n        address jotPool_,\n        address collectionManager_,\n        address syntheticNFT_,\n        address auctionManager_,\n        address fundingTokenAddress_,\n        address randomConsumerAddress_,\n        address validatorAddress_,\n        FuturesParametersContracts memory futuresParameters,\n        ProtocolParametersContracts memory protocolParameters\n    ) {\n        swapAddress = swapAddress_;\n        _jot = jot_;\n        _jotPool = jotPool_;\n        _collectionManager = collectionManager_;\n        _syntheticNFT = syntheticNFT_;\n        _auctionManager = auctionManager_;\n        _protocol = protocolParameters.fractionalizeProtocol;\n        _futuresProtocol = protocolParameters.futuresProtocol;\n        _fundingTokenAddress = fundingTokenAddress_;\n        _randomConsumerAddress = randomConsumerAddress_;\n        _validatorAddress = validatorAddress_;\n        _lTokenLite = futuresParameters.lTokenLite_;\n        _pTokenLite = futuresParameters.pTokenLite_;\n        _perpetualPoolLiteAddress = futuresParameters.perpetualPoolLiteAddress_;\n    }\n\n    /**\n     *  @notice register an NFT collection\n     *  @param collection the address of the synthetic collection\n     *  @param tokenId the token id\n     *  @param supplyToKeep supply to keep\n     *  @param priceFraction the price for a fraction\n     *  @param originalName the original collection name\n     *  @param originalSymbol the original collection symbol\n     */\n    function registerNFT(\n        address collection,\n        uint256 tokenId,\n        uint256 supplyToKeep,\n        uint256 priceFraction,\n        string memory originalName,\n        string memory originalSymbol,\n        string memory metadata\n    ) public {\n        require(collection != address(0), \"Invalid collection\");\n\n        address collectionAddress;\n        // Checks whether a collection is registered or not\n        // If not registered, then register it and increase the Vault counter\n        if (!isSyntheticCollectionRegistered(collection)) {\n            // deploys a minimal proxy contract from the jot contract implementation\n            address jotAddress = Clones.clone(_jot);\n            Jot(jotAddress).initialize(\n                string(abi.encodePacked(\"Privi Jot \", originalName)),\n                string(abi.encodePacked(\"JOT_\", originalSymbol)),\n                swapAddress,\n                _fundingTokenAddress\n            );\n\n            // deploys a minimal proxy contract from the jotPool contract implementation\n            address jotPoolAddress = Clones.clone(_jotPool);\n            JotPool(jotPoolAddress).initialize(\n                jotAddress,\n                _fundingTokenAddress,\n                string(abi.encodePacked(\"Privi JotPool \", originalName)),\n                string(abi.encodePacked(\" \", originalName))\n            );\n\n            address syntheticNFTAddress = Clones.clone(_syntheticNFT);\n\n            // deploys a minimal proxy contract from the collectionManager contract implementation\n            collectionAddress = Clones.clone(_collectionManager);\n            SyntheticCollectionManager(collectionAddress).initialize(\n                jotAddress,\n                collection,\n                syntheticNFTAddress,\n                _auctionManager,\n                _protocol,\n                _fundingTokenAddress,\n                jotPoolAddress,\n                swapAddress\n            );\n\n            AuctionsManager(_auctionManager).grantRole(\n                AuctionsManager(_auctionManager).COLLECTION_MANAGER(),\n                collectionAddress\n            );\n\n            // Done this way because of stack limitations\n            SyntheticCollectionManager(collectionAddress).grantRole(\n                SyntheticCollectionManager(collectionAddress).RANDOM_ORACLE(),\n                _randomConsumerAddress\n            );\n\n            SyntheticCollectionManager(collectionAddress).grantRole(\n                SyntheticCollectionManager(collectionAddress).VALIDATOR_ORACLE(),\n                _validatorAddress\n            );\n\n            Jot(jotAddress).grantRole(Jot(jotAddress).MINTER(), collectionAddress);\n\n            // set the manager to allow control over the funds\n            Jot(jotAddress).setManager(collectionAddress, jotPoolAddress);\n\n            SyntheticNFT(syntheticNFTAddress).initialize(\n                string(abi.encodePacked(\"Privi Synthetic \", originalName)),\n                string(abi.encodePacked(\"pS_\", originalSymbol)),\n                collectionAddress\n            );\n\n            // whitelist the new collection contract on the random number consumer and the validator\n            RandomNumberConsumer(_randomConsumerAddress).whitelistCollection(collectionAddress);\n            PolygonValidatorOracle(_validatorAddress).whitelistCollection(collectionAddress);\n\n            FuturesParametersContracts memory futuresParameters;\n            futuresParameters.lTokenLite_ = _lTokenLite;\n            futuresParameters.pTokenLite_ = _pTokenLite;\n            futuresParameters.perpetualPoolLiteAddress_ = _perpetualPoolLiteAddress;\n\n            FuturesParametersContracts memory futuresData = deployFutures(\n                originalName,\n                originalSymbol,\n                collection,\n                futuresParameters\n            );\n\n            _collections[collection] = SyntheticCollection({\n                collectionID: protocolVaults.current(),\n                collectionManagerAddress: collectionAddress,\n                jotAddress: jotAddress,\n                jotPoolAddress: jotPoolAddress,\n                jotPairAddress: Jot(jotAddress).uniswapV2Pair(),\n                syntheticNFTAddress: syntheticNFTAddress,\n                originalName: originalName,\n                originalSymbol: originalSymbol,\n                lTokenAddress: futuresData.lTokenLite_,\n                pTokenAddress: futuresData.pTokenLite_,\n                perpetualPoolLiteAddress: futuresData.perpetualPoolLiteAddress_\n            });\n\n            _collectionIdToAddress[protocolVaults.current()] = collectionAddress;\n\n            emit CollectionManagerRegistered(\n                protocolVaults.current(),\n                collectionAddress,\n                jotAddress,\n                jotPoolAddress,\n                Jot(jotAddress).uniswapV2Pair(),\n                syntheticNFTAddress,\n                swapAddress,\n                _auctionManager,\n                futuresData.lTokenLite_,\n                futuresData.pTokenLite_,\n                futuresData.perpetualPoolLiteAddress_\n            );\n\n            protocolVaults.increment();\n        } else {\n            collectionAddress = _collections[collection].collectionManagerAddress;\n        }\n\n        SyntheticCollectionManager collectionManager = SyntheticCollectionManager(collectionAddress);\n\n        uint256 syntheticID = collectionManager.register(\n            tokenId,\n            supplyToKeep,\n            priceFraction,\n            msg.sender,\n            metadata\n        );\n\n        emit TokenRegistered(collectionAddress, protocolVaults.current(), syntheticID);\n    }\n\n    function deployFutures(\n        string memory originalName,\n        string memory originalSymbol,\n        address collection,\n        FuturesParametersContracts memory futuresParameters\n    ) private returns (FuturesParametersContracts memory) {\n        // Deploy futures\n        address lTokenAddress = Clones.clone(_lTokenLite);\n        LTokenLite(lTokenAddress).initialize(\n            string(abi.encodePacked(\"Liquidity Futures \", originalName)),\n            string(abi.encodePacked(\"LF_\", originalSymbol))\n        );\n\n        address pTokenAddress = Clones.clone(_pTokenLite);\n        PTokenLite(pTokenAddress).initialize(\n            string(abi.encodePacked(\"Position Futures \", originalName)),\n            string(abi.encodePacked(\"PF_\", originalSymbol))\n        );\n\n        address nftFutureAddress = Clones.clone(_perpetualPoolLiteAddress);\n        PerpetualPoolLite(nftFutureAddress).initialize(\n            [\n                _fundingTokenAddress,\n                lTokenAddress,\n                pTokenAddress,\n                _jotPool, // TODO: change by liquidator address\n                _jotPool,\n                collection\n            ]\n        );\n\n        LTokenLite(lTokenAddress).setPool(nftFutureAddress);\n        PTokenLite(pTokenAddress).setPool(nftFutureAddress);\n\n        return FuturesParametersContracts(lTokenAddress, pTokenAddress, nftFutureAddress);\n    }\n\n    /**\n     * @notice change an NFT for another one\n     */\n    function changeNFT(\n        address collection,\n        uint256 syntheticID,\n        uint256 newOriginalTokenID\n    ) public {\n        address collectionManager = getCollectionManagerAddress(collection);\n        SyntheticCollectionManager manager = SyntheticCollectionManager(collectionManager);\n        uint256 originalTokenID = manager.getOriginalID(syntheticID);\n        manager.change(syntheticID, newOriginalTokenID, msg.sender);\n\n        emit TokenChanged(collection, syntheticID, originalTokenID, newOriginalTokenID);\n    }\n\n    /**\n     * @dev init Perpetual Pool Lite for a specific collection\n     */\n\n    // function initPerpetualPoolLite(uint256 collectionID, string memory name) internal view {\n    //     FuturesProtocolParameters futuresProtocol = FuturesProtocolParameters(_futuresProtocol);\n    //     address futuresOracleAddress = futuresProtocol.futuresOracleAddress();\n    // }\n\n    /**\n     * @notice checks whether a collection is registered or not\n     */\n    function isSyntheticCollectionRegistered(address collection) public view returns (bool) {\n        return _collections[collection].collectionManagerAddress != address(0);\n    }\n\n    /**\n     * @notice checks whether a Synthetic NFT has been created for a given NFT or not\n     */\n    function isSyntheticNFTCreated(address collection, uint256 tokenId) public view returns (bool) {\n        // Collection must be registered first\n        require(isSyntheticCollectionRegistered(collection), \"Collection not registered\");\n\n        // connect to collection manager\n        address collectionAddress = _collections[collection].collectionManagerAddress;\n        address syntheticNFTAddress = SyntheticCollectionManager(collectionAddress).erc721address();\n\n        // check whether a given id was minted or not\n        return ISyntheticNFT(syntheticNFTAddress).exists(tokenId);\n    }\n\n    /**\n     * @notice checks whether a Synthetic has been verified or not\n     */\n    function isNFTVerified(address collection, uint256 tokenId) public view returns (bool) {\n        require(isSyntheticNFTCreated(collection, tokenId), \"NFT not registered\");\n        address collectionManager = getCollectionManagerAddress(collection);\n        return SyntheticCollectionManager(collectionManager).isVerified(tokenId);\n    }\n\n    /**\n     * @notice verify a synthetic NFT\n     */\n    function verifyNFT(address collection, uint256 tokenId) public {\n        address collectionManager = getCollectionManagerAddress(collection);\n        SyntheticCollectionManager(collectionManager).verify(tokenId);\n    }\n\n    /**\n     * @notice getter for Jot Address of a collection\n     */\n    function getJotsAddress(address collection) public view returns (address) {\n        return _collections[collection].jotAddress;\n    }\n\n    /**\n     * @notice getter for Jot Pool Address of a collection\n     */\n    function getJotPoolAddress(address collection) public view returns (address) {\n        return _collections[collection].jotPoolAddress;\n    }\n\n    /**\n     * @notice get collection manager address from collection address\n     */\n    function getCollectionManagerAddress(address collection) public view returns (address) {\n        return _collections[collection].collectionManagerAddress;\n    }\n\n    /**\n     * @notice get collection manager address from collection ID\n     */\n    function getCollectionManagerAddressFromId(uint256 collectionID) public view returns (address) {\n        address collectionAddress = _collectionIdToAddress[collectionID];\n        return _collections[collectionAddress].collectionManagerAddress;\n    }\n\n    /**\n     * @notice get collection ID from collection address\n     */\n    function getCollectionID(address collection) public view returns (uint256) {\n        return _collections[collection].collectionID;\n    }\n\n    /**\n     * @notice get collection address from collection ID\n     */\n    function getOriginalCollectionAddress(uint256 collectionID) public view returns (address) {\n        return _collectionIdToAddress[collectionID];\n    }\n\n    function getCollectionlTokenAddress(address collection) public view returns (address) {\n        return _collections[collection].lTokenAddress;\n    }\n\n    function getCollectionpTokenAddress(address collection) public view returns (address) {\n        return _collections[collection].pTokenAddress;\n    }\n\n    function getCollectionPerpetualPoolAddress(address collection) public view returns (address) {\n        return _collections[collection].perpetualPoolLiteAddress;\n    }\n\n    function getCollectionUniswapPair(address collection) public view returns (address) {\n        return _collections[collection].jotPairAddress;\n    }\n}\n"
    },
    "contracts/polygon/governance/ProtocolParameters.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title parameters controlled by governance\n * @notice the owner of this contract is the timelock controller of the governance feature\n */\ncontract ProtocolParameters is Ownable {\n    // interval in seconds between the one flip to another in one lock contract\n    uint256 public flippingInterval;\n\n    // amount of reward that the flipper gets if he is right on the outcome\n    uint256 public flippingReward;\n\n    // amount of jots into play in each flip\n    uint256 public flippingAmount;\n\n    // the duration of an NFT auction in seconds\n    uint256 public auctionDuration;\n\n    // the period of grace to recover the nft after reaching 0 owner supply\n    uint256 public recoveryThreshold;\n\n    event FlippingIntervalUpdated(uint256 from, uint256 to);\n    event FlippingRewardUpdated(uint256 from, uint256 to);\n    event FlippingAmountUpdated(uint256 from, uint256 to);\n    event AuctionDurationUpdated(uint256 from, uint256 to);\n    event RecoveryThresholdUpdated(uint256 from, uint256 to);\n\n    /**\n     * @dev sets the default (initial) values of the parameters\n     *      also transfers the ownership to the governance\n     */\n    constructor(\n        uint256 flippingInterval_,\n        uint256 flippingReward_,\n        uint256 flippingAmount_,\n        uint256 auctionDuration_,\n        address governanceContractAddress_\n    ) {\n        require(flippingReward_ > 0, \"Invalid Reward\");\n        require(flippingAmount_ > 0, \"Invalid Amount\");\n        require(flippingReward_ < flippingAmount_, \"Reward should be lower than Amount\");\n        require(flippingInterval_ > 15 minutes, \"Flipping Interval should be greater than 15 minutes\");\n        require(auctionDuration_ > 1 hours, \"Auction duration should be greater than 1 hour\");\n\n        flippingInterval = flippingInterval_;\n        flippingReward = flippingReward_;\n        flippingAmount = flippingAmount_;\n        auctionDuration = auctionDuration_;\n\n        // transfer ownership\n        transferOwnership(governanceContractAddress_);\n    }\n\n    function setFlippingInterval(uint256 flippingInterval_) external onlyOwner {\n        require(flippingInterval_ > 15 minutes, \"Flipping Interval should be greater than 15 minutes\");\n        emit FlippingIntervalUpdated(flippingInterval, flippingInterval_);\n        flippingInterval = flippingInterval_;\n    }\n\n    function setFlippingReward(uint256 flippingReward_) external onlyOwner {\n        require(flippingReward_ > 0, \"Invalid Reward\");\n        require(flippingReward_ < flippingAmount, \"Reward should be lower than Amount\");\n        emit FlippingRewardUpdated(flippingReward, flippingReward_);\n        flippingReward = flippingReward_;\n    }\n\n    function setFlippingAmount(uint256 flippingAmount_) external onlyOwner {\n        require(flippingAmount_ > 0, \"Invalid Amount\");\n        require(flippingReward < flippingAmount_, \"Reward should be lower than Amount\");\n        emit FlippingAmountUpdated(flippingAmount, flippingAmount_);\n        flippingAmount = flippingAmount_;\n    }\n\n    function setAuctionDuration(uint256 auctionDuration_) external onlyOwner {\n        require(auctionDuration_ > 1 hours, \"Auction duration should be greater than 1 hour\");\n        emit AuctionDurationUpdated(auctionDuration, auctionDuration_);\n        auctionDuration = auctionDuration_;\n    }\n\n    function setRecoveryThreshold(uint256 recoveryThreshold_) external onlyOwner {\n        require(recoveryThreshold_ > 1 hours, \"Recovery threshold should be greater than 1 hour\");\n        emit RecoveryThresholdUpdated(recoveryThreshold, recoveryThreshold_);\n        recoveryThreshold = recoveryThreshold_;\n    }\n}\n"
    },
    "contracts/polygon/implementations/Jot.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\r\nimport \"../extensions/IERC20ManagedAccounts.sol\";\r\nimport \"../Interfaces.sol\";\r\n\r\ncontract Jot is ERC20, IERC20ManagedAccounts, ERC20Burnable, AccessControl, Initializable {\r\n    bytes32 public constant ROUTER = keccak256(\"ROUTER\");\r\n    bytes32 public constant MINTER = keccak256(\"MINTER\");\r\n\r\n    // proxied values for the erc20 attributes\r\n    string private _proxiedName;\r\n    string private _proxiedSymbol;\r\n\r\n    /**\r\n     * @notice *swap address\r\n     */\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    /**\r\n     * @notice pair address\r\n     */\r\n    address public uniswapV2Pair;\r\n\r\n    mapping(address => address) private _managers;\r\n\r\n    // solhint-disable-next-line\r\n    constructor() ERC20(\"Privi Jot Token Implementation\", \"pJOTI\") {}\r\n\r\n    function initialize(\r\n        string calldata _name,\r\n        string calldata _symbol,\r\n        address swapAddress,\r\n        address fundingTokenAddress\r\n    ) external initializer {\r\n        _proxiedName = _name;\r\n        _proxiedSymbol = _symbol;\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(ROUTER, msg.sender);\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(swapAddress);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            fundingTokenAddress\r\n        );\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(\r\n            address(this),\r\n            fundingTokenAddress\r\n        );\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public onlyRole(MINTER) {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev allows to send funds from a managed account (infinite allowance)\r\n     */\r\n    function transferFromManaged(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external virtual override {\r\n        require(_managers[sender] == msg.sender, \"The caller is not the manager of this account\");\r\n        _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function setManager(address manager, address account) external onlyRole(ROUTER) {\r\n        _managers[account] = manager;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _proxiedName;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _proxiedSymbol;\r\n    }\r\n}\r\n"
    },
    "contracts/polygon/libraries/ProtocolConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nlibrary ProtocolConstants {\r\n    uint256 public constant JOT_SUPPLY = 100000000000000000000000;\r\n}\r\n"
    },
    "contracts/polygon/auctions/NFTAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../libraries/ProtocolConstants.sol\";\nimport \"./AuctionsManager.sol\";\n\ncontract NFTAuction is Initializable {\n    // parameters of the auction. Times are either\n    // absolute unix timestamps (seconds since 1970-01-01)\n    // or time periods in seconds.\n    uint256 public auctionEndTime;\n\n    // current state of the auction.\n    address public highestBidder;\n    uint256 public highestBid;\n\n    // getters\n    uint256 public nftId;\n    address public jot;\n    address public jotPool;\n    address public syntheticCollection;\n    address public auctionsManager;\n\n    // allowed withdrawals of previous bids\n    mapping(address => uint256) private _pendingReturns;\n\n    // set to true at the end, disallows any change.\n    // by default initialized to `false`.\n    bool private _claimed;\n\n    // events that will be emitted on changes.\n    event HighestBidIncreased(address bidder, uint256 amount);\n    event AuctionEnded(address winner, uint256 amount);\n\n    /// create a simple auction\n    function initialize(\n        uint256 nftId_,\n        address jot_,\n        address jotPool_,\n        address syntheticCollection_,\n        uint256 initialBid_,\n        uint256 auctionDuration_,\n        address initialBidder_\n    ) external initializer {\n        nftId = nftId_;\n        auctionEndTime = block.timestamp + auctionDuration_; // solhint-disable-line\n        highestBid = initialBid_;\n        jot = jot_;\n        jotPool = jotPool_;\n        syntheticCollection = syntheticCollection_;\n        highestBidder = initialBidder_;\n        auctionsManager = msg.sender;\n    }\n\n    /// bid on the auction.\n    /// the value will only be refunded if the\n    /// auction is not won.\n    function bid(uint256 amount_) public payable {\n        // revert the call if the bidding\n        // period is over.\n        // solhint-disable-next-line\n        require(block.timestamp <= auctionEndTime, \"Auction already ended\");\n\n        // if the bid is not higher revert\n        require(amount_ > highestBid, \"There already is a higher bid\");\n\n        // if the allowance is not enough or transfer fails revert\n        require(IERC20(jot).transferFrom(msg.sender, address(this), amount_), \"Unable to transfer jots\");\n\n        if (highestBid != 0) {\n            // sending back the money by simply using\n            // highestBidder.send(highestBid) is a security risk\n            // because it could execute an untrusted contract.\n            // it is always safer to let the recipients\n            // withdraw their money themselves.\n            _pendingReturns[highestBidder] += highestBid;\n        }\n        highestBidder = msg.sender;\n        highestBid = amount_;\n\n        emit HighestBidIncreased(msg.sender, amount_);\n    }\n\n    /// withdraw a bid that was overbid.\n    function withdraw() public {\n        uint256 amount = _pendingReturns[msg.sender];\n        if (amount > 0) {\n            // avoid reentrancy\n            _pendingReturns[msg.sender] = 0;\n\n            require(IERC20(jot).transfer(msg.sender, amount), \"Unable to transfer jots\");\n        }\n    }\n\n    /// winner can claim the token after auction end time\n    function endAuction() public {\n        // solhint-disable-next-line\n        require(block.timestamp >= auctionEndTime, \"Auction not yet ended\");\n        require(!_claimed, \"Token has already been claimed\");\n\n        _claimed = true;\n\n        // transfer the jots\n        require(IERC20(jot).transfer(jot, ProtocolConstants.JOT_SUPPLY), \"Unable to transfer jots\");\n\n        if (highestBid - ProtocolConstants.JOT_SUPPLY > 0) {\n            require(\n                IERC20(jot).transfer(jotPool, highestBid - ProtocolConstants.JOT_SUPPLY),\n                \"Unable to transfer jots\"\n            );\n        }\n\n        // reassign the NFT in the synthetic collection\n        AuctionsManager(auctionsManager).reassignNFT(syntheticCollection, nftId, highestBidder);\n\n        emit AuctionEnded(highestBidder, highestBid);\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(\n    bytes32 requestId,\n    uint256 randomness\n  )\n    internal\n    virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(\n    bytes32 _keyHash,\n    uint256 _fee\n  )\n    internal\n    returns (\n      bytes32 requestId\n    )\n  {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface immutable internal LINK;\n  address immutable private vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(\n    address _vrfCoordinator,\n    address _link\n  ) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(\n    bytes32 requestId,\n    uint256 randomness\n  )\n    external\n  {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(\n    bytes32 _keyHash,\n    uint256 _vRFInputSeed\n  )\n    internal\n    pure\n    returns (\n      bytes32\n    )\n  {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}"
    },
    "contracts/polygon/chainlink/OracleStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nstruct APIOracleInfo {\n    address linkToken;\n    address chainlinkNode;\n    string jobId;\n    uint256 nodeFee;\n}\n\nstruct VRFOracleInfo {\n    address vrfCoordinator;\n    address linkToken;\n    bytes32 keyHash;\n    uint256 vrfFee;\n}\n\nstruct VerifyRequest {\n    address originalCollection;\n    address syntheticCollection;\n    uint256 tokenId;\n}\n"
    },
    "contracts/polygon/implementations/JotPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"../governance/ProtocolParameters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"../libraries/ProtocolConstants.sol\";\r\n\r\ncontract JotPool is ERC721, Initializable {\r\n    using SafeERC20 for IERC20;\r\n    using Counters for Counters.Counter;\r\n\r\n    struct Position {\r\n        uint256 id;\r\n        uint256 liquidity;\r\n        uint256 stake;\r\n        uint256 totalShares;\r\n    }\r\n\r\n    address public jot;\r\n    address public fundingToken;\r\n    ProtocolParameters private immutable protocol;\r\n    uint256 public totalLiquidity;\r\n\r\n    string private _proxyName;\r\n    string private _proxySymbol;\r\n\r\n    uint256 public lastReward;\r\n    uint256 public cumulativeRevenue;\r\n    uint256 public totalShares;\r\n    uint256 public totalStaked;\r\n\r\n    uint256 public stakerShare = 10;\r\n    uint256 public stakerShareDenominator = 1000;\r\n\r\n    Counters.Counter private idGen;\r\n\r\n    mapping(address => Position) private positions;\r\n\r\n    event LiquidityAdded(address provider, uint256 amount, uint256 mintedLiquidity);\r\n    event LiquidityRemoved(address provider, uint256 amount, uint256 liquidityBurnt);\r\n    event Staked(address staker, uint256 amount, uint256 positionId);\r\n    event Unstaked(address recipient, uint256 amount, uint256 reward);\r\n    event RewardsClaimed(address recipient, uint256 reward);\r\n\r\n    constructor(address _protocol) ERC721(\"\", \"\") {\r\n        require(_protocol != address(0), \"Invalid protocol address\");\r\n        protocol = ProtocolParameters(_protocol);\r\n    }\r\n\r\n    function initialize(\r\n        address _jot,\r\n        address _fundingToken,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) external initializer {\r\n        require(_jot != address(0), \"Invalid Jot token\");\r\n        require(_fundingToken != address(0), \"Invalid funding token\");\r\n        jot = _jot;\r\n        fundingToken = _fundingToken;\r\n        _proxyName = _name;\r\n        _proxySymbol = _symbol;\r\n    }\r\n\r\n    function name() public view override returns (string memory) {\r\n        return _proxyName;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _proxySymbol;\r\n    }\r\n\r\n    function addLiquidity(uint256 amount) external {\r\n        require(amount > 0, \"Invalid amount\");\r\n        uint256 mintedLiquidity = totalLiquidity > 0\r\n            ? (totalLiquidity * amount) / IERC20(jot).balanceOf(address(this))\r\n            : 100;\r\n        positions[msg.sender].liquidity += mintedLiquidity;\r\n        totalLiquidity += mintedLiquidity;\r\n\r\n        emit LiquidityAdded(msg.sender, amount, mintedLiquidity);\r\n\r\n        _stake(msg.sender, amount);\r\n\r\n        IERC20(jot).safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function removeLiquidity(uint256 amount) external {\r\n        require(positions[msg.sender].liquidity >= amount, \"Remove amount exceeds balance\");\r\n        uint256 liquidityBurnt = (IERC20(jot).balanceOf(address(this)) * amount) / totalLiquidity;\r\n        if (totalLiquidity - amount > 0) {\r\n            positions[msg.sender].liquidity -= amount;\r\n            totalLiquidity -= amount;\r\n        } else {\r\n            uint256 jots = ProtocolConstants.JOT_SUPPLY;\r\n            positions[msg.sender].liquidity = jots;\r\n            totalLiquidity = jots;\r\n        }\r\n\r\n        emit LiquidityRemoved(msg.sender, amount, liquidityBurnt);\r\n\r\n        _unstake(msg.sender, liquidityBurnt);\r\n\r\n        IERC20(jot).safeTransfer(msg.sender, liquidityBurnt);\r\n    }\r\n\r\n    function getLiquidityValue(uint256 amount) external view returns (uint256) {\r\n        return _getLiquidityValue(amount);\r\n    }\r\n\r\n    function getTotalLiquidityValue(address owner) external view returns (uint256) {\r\n        return _getLiquidityValue(positions[owner].liquidity);\r\n    }\r\n\r\n    function _getLiquidityValue(uint256 amount) internal view returns (uint256) {\r\n        return (IERC20(jot).balanceOf(address(this)) * amount) / totalLiquidity;\r\n    }\r\n\r\n    function getPosition() external view returns (Position memory) {\r\n        return positions[msg.sender];\r\n    }\r\n\r\n    function stakeShares(uint256 amount) external {\r\n        require(IERC20(jot).balanceOf(msg.sender) >= amount, \"Insufficient Jot balance\");\r\n        address to = msg.sender;\r\n        _stake(to, amount);\r\n        IERC20(jot).safeTransferFrom(to, address(this), amount);\r\n    }\r\n\r\n    function _stake(address to, uint256 amount) internal {\r\n        (uint256 ftBalance, uint256 x) = _sync();\r\n        cumulativeRevenue += x;\r\n        lastReward = ftBalance;\r\n        totalStaked += amount;\r\n\r\n        uint256 id = positions[to].id;\r\n        if (id == 0) {\r\n            idGen.increment();\r\n            id = idGen.current();\r\n            positions[to].id = id;\r\n            _mint(to, id);\r\n        }\r\n\r\n        positions[to].stake += amount;\r\n        positions[to].totalShares = totalShares;\r\n\r\n        emit Staked(msg.sender, amount, id);\r\n    }\r\n\r\n    function _sync() internal returns (uint256, uint256) {\r\n        uint256 ftBalance = IERC20(fundingToken).balanceOf(address(this));\r\n        uint256 x = ftBalance - lastReward;\r\n        if (totalStaked != 0) {\r\n            totalShares += ((x * stakerShare) * 10**18) / (totalStaked * stakerShareDenominator);\r\n        }\r\n\r\n        return (ftBalance, x);\r\n    }\r\n\r\n    function unstakeShares(uint256 amount) external {\r\n        _unstake(msg.sender, amount);\r\n        IERC20(jot).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function _unstake(address to, uint256 amount) internal {\r\n        require(positions[to].stake >= amount, \"Insufficient stake balance\");\r\n        (uint256 ftBalance, ) = _sync();\r\n\r\n        uint256 reward = _getReward(to);\r\n        lastReward = ftBalance - reward;\r\n\r\n        if (amount == positions[to].stake) {\r\n            _burn(positions[to].id);\r\n            delete positions[to];\r\n        } else {\r\n            positions[to].stake -= amount;\r\n            positions[to].totalShares = totalShares;\r\n        }\r\n        totalStaked -= amount;\r\n\r\n        emit Unstaked(msg.sender, amount, reward);\r\n\r\n        IERC20(fundingToken).transfer(msg.sender, reward);\r\n    }\r\n\r\n    function claimRewards() external {\r\n        (uint256 ftBalance, ) = _sync();\r\n\r\n        address owner = msg.sender;\r\n        uint256 reward = _getReward(owner);\r\n        lastReward = ftBalance - reward;\r\n        positions[owner].totalShares = totalShares;\r\n\r\n        emit RewardsClaimed(msg.sender, reward);\r\n\r\n        IERC20(fundingToken).transfer(msg.sender, reward);\r\n    }\r\n\r\n    function getReward() external view returns (uint256 reward) {\r\n        reward = _getReward(msg.sender);\r\n    }\r\n\r\n    function _getReward(address owner) internal view returns (uint256 reward) {\r\n        reward = ((totalShares - positions[owner].totalShares) * positions[owner].stake) / 10**18;\r\n    }\r\n}\r\n"
    },
    "contracts/polygon/Structs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * @dev collections struct\n */\nstruct SyntheticCollection {\n    uint256 collectionID;\n    address collectionManagerAddress;\n    address jotAddress;\n    address jotPoolAddress;\n    address jotPairAddress;\n    address syntheticNFTAddress;\n    string originalName;\n    string originalSymbol;\n    address lTokenAddress;\n    address pTokenAddress;\n    address perpetualPoolLiteAddress;\n}\n\nstruct ProtocolParametersContracts {\n    address fractionalizeProtocol;\n    address futuresProtocol;\n}\n\nstruct FuturesParametersContracts {\n        address lTokenLite_;\n        address pTokenLite_;\n        address perpetualPoolLiteAddress_;\n}\n"
    },
    "contracts/polygon/governance/FuturesProtocolParameters.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Structs.sol\";\n\n// ! TODO: EMIT THE EVENTS AND ADD VALIDATIONS\n\n/**\n * @title future parameters controlled by governance\n * @notice the owner of this contract is the timelock controller of the governance feature\n */\ncontract FuturesProtocolParameters is Ownable {\n    int256 public minPoolMarginRatio;\n    int256 public minInitialMarginRatio;\n    int256 public minMaintenanceMarginRatio;\n    int256 public minLiquidationReward;\n    int256 public maxLiquidationReward;\n    int256 public liquidationCutRatio;\n    int256 public protocolFeeCollectRatio;\n    address public futuresOracleAddress;\n    int256 public futuresMultiplier;\n    int256 public futuresFeeRatio;\n    int256 public futuresFundingRateCoefficient;\n    uint256 public oracleDelay;\n\n    event MinPoolMarginRatioUpdated(address value);\n    event MinInitialMarginRatioUpdated(address value);\n    event MinMaintenanceMarginRatioUpdated(address value);\n    event MinLiquidationRewardUpdated(address value);\n    event MaxLiquidationRewardUpdated(address value);\n    event LiquidationCutRatioUpdated(address value);\n    event ProtocolFeeCollectRatioUpdated(address value);\n    event OracleDelayUpdated(address value);\n    event FuturesOracleAddressUpdated(address value);\n    event FuturesMultiplierUpdated(int256 value);\n    event FuturesFeeRatioUpdated(int256 value);\n    event FuturesFundingRateCoefficientUpdated(int256 value);\n\n    /**\n     * @dev set initial state of the data\n     */\n    constructor(\n        MainParams memory mainParams,\n        address _futuresOracleAddress,\n        int256 _futuresMultiplier,\n        int256 _futuresFeeRatio,\n        int256 _futuresFundingRateCoefficient,\n        uint256 _oracleDelay,\n        address _governanceContractAddress\n    ) {\n        require(_futuresOracleAddress != address(0), \"Oracle address can't be zero\");\n        require(_futuresMultiplier > 0, \"Invalid futures multiplier\");\n        require(_futuresFeeRatio > 0, \"Invalid futures fee ratio\");\n        require(_futuresFundingRateCoefficient > 0, \"Invalid futures funding rate coefficient\");\n\n        minPoolMarginRatio = mainParams.minPoolMarginRatio;\n        minInitialMarginRatio = mainParams.minInitialMarginRatio;\n        minMaintenanceMarginRatio = mainParams.minMaintenanceMarginRatio;\n        minLiquidationReward = mainParams.minLiquidationReward;\n        maxLiquidationReward = mainParams.maxLiquidationReward;\n        liquidationCutRatio = mainParams.liquidationCutRatio;\n        protocolFeeCollectRatio = mainParams.protocolFeeCollectRatio;\n        futuresOracleAddress = _futuresOracleAddress;\n        futuresMultiplier = _futuresMultiplier;\n        futuresFeeRatio = _futuresFeeRatio;\n        futuresFundingRateCoefficient = _futuresFundingRateCoefficient;\n        oracleDelay = _oracleDelay;\n\n        // transfer ownership\n        transferOwnership(_governanceContractAddress);\n    }\n\n    function setMinPoolMarginRatio(int256 _minPoolMarginRatio) external onlyOwner {\n        minPoolMarginRatio = _minPoolMarginRatio;\n    }\n\n    function setMinInitialMarginRatio(int256 _minInitialMarginRatio) external onlyOwner {\n        minInitialMarginRatio = _minInitialMarginRatio;\n    }\n\n    function setMinMaintenanceMarginRatio(int256 _minMaintenanceMarginRatio) external onlyOwner {\n        minMaintenanceMarginRatio = _minMaintenanceMarginRatio;\n    }\n\n    function setMinLiquidationReward(int256 _minLiquidationReward) external onlyOwner {\n        minLiquidationReward = _minLiquidationReward;\n    }\n\n    function setMaxLiquidationReward(int256 _maxLiquidationReward) external onlyOwner {\n        maxLiquidationReward = _maxLiquidationReward;\n    }\n\n    function setLiquidationCutRatio(int256 _liquidationCutRatio) external onlyOwner {\n        liquidationCutRatio = _liquidationCutRatio;\n    }\n\n    function setProtocolFeeCollectRatio(int256 _protocolFeeCollectRatio) external onlyOwner {\n        protocolFeeCollectRatio = _protocolFeeCollectRatio;\n    }\n\n    function setFuturesOracleAddress(address futuresOracleAddress_) external onlyOwner {\n        require(futuresOracleAddress_ != address(0), \"Oracle address can't be zero\");\n        futuresOracleAddress = futuresOracleAddress_;\n        emit FuturesOracleAddressUpdated(futuresOracleAddress_);\n    }\n\n    function setFuturesMultiplier(int256 futuresMultiplier_) external onlyOwner {\n        require(futuresMultiplier_ > 1 hours, \"Invalid futures multiplier\");\n        futuresMultiplier = futuresMultiplier_;\n        emit FuturesMultiplierUpdated(futuresMultiplier_);\n    }\n\n    function setFuturesFeeRatio(int256 futuresFeeRatio_) external onlyOwner {\n        require(futuresFeeRatio_ > 1 hours, \"Invalid futures fee ratio\");\n        futuresFeeRatio = futuresFeeRatio_;\n        emit FuturesFeeRatioUpdated(futuresFeeRatio_);\n    }\n\n    function setFuturesFundingRateCoefficient(int256 futuresFundingRateCoefficient_) external onlyOwner {\n        require(futuresFundingRateCoefficient_ > 1 hours, \"Invalid futures funding rate coefficient\");\n        futuresFundingRateCoefficient = futuresFundingRateCoefficient_;\n        emit FuturesFundingRateCoefficientUpdated(futuresFundingRateCoefficient_);\n    }\n\n    function setOracleDelay(uint256 _oracleDelay) external onlyOwner {\n        oracleDelay = _oracleDelay;\n    }\n}\n"
    },
    "contracts/perpetual_futures/tokens/LTokenLite.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"../../polygon/Interfaces.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract LTokenLite is ILTokenLite, Initializable, AccessControl, ERC20 {\n    bytes32 public constant ROUTER = keccak256(\"ROUTER\");\n\n    // proxied values for the erc20 attributes\n    string private _proxiedName;\n    string private _proxiedSymbol;\n    address private _pool;\n\n    modifier _pool_() {\n        require(msg.sender == _pool, \"LToken: only pool\");\n        _;\n    }\n\n    // solhint-disable-next-line\n    constructor() ERC20(\"Future Liquidity Token\", \"FLT\") {}\n\n    function initialize(string memory name_, string memory symbol_) external initializer {\n        _proxiedName = name_;\n        _proxiedSymbol = symbol_;\n\n        _setupRole(ROUTER, msg.sender);\n    }\n\n    function name() public view override returns (string memory) {\n        return _proxiedName;\n    }\n\n    function symbol() public view override returns (string memory) {\n        return _proxiedSymbol;\n    }\n\n    function pool() public view override returns (address) {\n        return _pool;\n    }\n\n    function setPool(address newPool) public override onlyRole(ROUTER) {\n        require(_pool == address(0), \"LToken.setPool: not allowed\");\n        _pool = newPool;\n    }\n\n    function mint(address account, uint256 amount) public override _pool_ {\n        require(account != address(0), \"LToken: mint to 0 address\");\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public override _pool_ {\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/perpetual_futures/tokens/PTokenLite.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../../polygon/Interfaces.sol\";\nimport \"./PFERC721.sol\";\n\ncontract PTokenLite is IPTokenLite, PFERC721, Initializable {\n    // PToken name\n    string internal _name;\n    // PToken symbol\n    string internal _symbol;\n    // associative pool address\n    address internal _pool;\n    // total number of PToken ever minted, this number will never decease\n    uint256 internal _totalMinted;\n    // total PTokens hold by all traders\n    uint256 internal _totalSupply;\n\n    address private _collectionManager;\n\n    // tokenId => margin\n    mapping(uint256 => int256) internal _tokenIdMargin;\n    // tokenId => (symbolId => Position)\n    mapping(uint256 => Position) internal _tokenIdPosition;\n\n    // symbolId => number of position holders\n    uint256 internal _numPositionHolders;\n\n    modifier _pool_() {\n        require(msg.sender == _pool, \"PToken: only pool\");\n        _;\n    }\n\n    function initialize(string memory name_, string memory symbol_) external initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function setPool(address newPool) public override {\n        require(_pool == address(0) || _pool == msg.sender, \"PToken.setPool: not allowed\");\n        _pool = newPool;\n    }\n\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    function pool() public view override returns (address) {\n        return _pool;\n    }\n\n    function totalMinted() public view override returns (uint256) {\n        return _totalMinted;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function getNumPositionHolders() public view override returns (uint256) {\n        return _numPositionHolders;\n    }\n\n    function exists(address owner) public view override returns (bool) {\n        return _exists(owner);\n    }\n\n    function getMargin(address owner) public view override returns (int256) {\n        return _tokenIdMargin[_ownerTokenId[owner]];\n    }\n\n    function updateMargin(address owner, int256 margin) public override _pool_ {\n        _tokenIdMargin[_ownerTokenId[owner]] = margin;\n        emit UpdateMargin(owner, margin);\n    }\n\n    function addMargin(address owner, int256 delta) public override _pool_ {\n        int256 margin = _tokenIdMargin[_ownerTokenId[owner]] + delta;\n        _tokenIdMargin[_ownerTokenId[owner]] = margin;\n        emit UpdateMargin(owner, margin);\n    }\n\n    function getPosition(address owner) public view override returns (Position memory) {\n        return _tokenIdPosition[_ownerTokenId[owner]];\n    }\n\n    function updatePosition(address owner, Position memory position) public override _pool_ {\n        int256 preVolume = _tokenIdPosition[_ownerTokenId[owner]].volume;\n        int256 curVolume = position.volume;\n\n        if (preVolume == 0 && curVolume != 0) {\n            _numPositionHolders++;\n        } else if (preVolume != 0 && curVolume == 0) {\n            _numPositionHolders--;\n        }\n\n        _tokenIdPosition[_ownerTokenId[owner]] = position;\n        emit UpdatePosition(owner, position.volume, position.cost, position.lastCumulativeFundingRate);\n    }\n\n    function mint(address owner) public override _pool_ {\n        _totalSupply++;\n        uint256 tokenId = ++_totalMinted;\n        require(!_exists(tokenId), \"PToken.mint: existent tokenId\");\n\n        _ownerTokenId[owner] = tokenId;\n        _tokenIdOwner[tokenId] = owner;\n\n        emit Transfer(address(0), owner, tokenId);\n    }\n\n    function burn(address owner) public override _pool_ {\n        uint256 tokenId = _ownerTokenId[owner];\n\n        _totalSupply--;\n        delete _ownerTokenId[owner];\n        delete _tokenIdOwner[tokenId];\n        delete _tokenIdOperator[tokenId];\n        delete _tokenIdMargin[tokenId];\n\n        if (_tokenIdPosition[tokenId].volume != 0) {\n            _numPositionHolders--;\n        }\n        delete _tokenIdPosition[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n}\n"
    },
    "contracts/perpetual_futures/PerpetualPoolLite.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"../polygon/Interfaces.sol\";\n//import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./library/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../polygon/governance/FuturesProtocolParameters.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\ncontract PerpetualPoolLite is IPerpetualPoolLite, Initializable {\n    using SafeMath for uint256;\n    using SafeMath for int256;\n    using SafeERC20 for IERC20;\n\n    int256 private constant ONE = 10**18;\n\n    uint256 private  _decimals;\n\n    address private  _bTokenAddress;\n    address private  _lTokenAddress;\n    address private  _pTokenAddress;\n    address private  _liquidatorQualifierAddress;\n    address private  _protocolFeeCollector;\n    address private  _underlyingAddress;\n    address private  _protocolAddress;\n    FuturesProtocolParameters private _protocolParameters;\n\n    int256 private _liquidity;\n\n    uint256 private _lastUpdateBlock;\n    int256 private _protocolFeeAccrued;\n\n    // symbolId => SymbolInfo\n    SymbolInfo private _symbol;\n\n    bool private _mutex;\n    modifier _lock_() {\n        require(!_mutex, \"reentry\");\n        _mutex = true;\n        _;\n        _mutex = false;\n    }\n\n    constructor(address[2] memory addresses) {\n        _protocolAddress = addresses[0];\n        _protocolParameters = FuturesProtocolParameters(addresses[0]);\n        _decimals = 18;\n    }\n\n    function initialize(address[6] memory addresses) external initializer {\n        _bTokenAddress = addresses[0];\n        _lTokenAddress = addresses[1];\n        _pTokenAddress = addresses[2];\n        _liquidatorQualifierAddress = addresses[3];\n        _protocolFeeCollector = addresses[4];\n        _underlyingAddress = addresses[5];\n    }\n\n    function getSymbolPriceAndMultiplier() external view returns (int256 price, int256 multiplier) {\n        return (_symbol.price, _protocolParameters.futuresMultiplier());\n    }\n\n    function getParameters()\n        external\n        view\n        override\n        returns (\n            int256 minPoolMarginRatio,\n            int256 minInitialMarginRatio,\n            int256 minMaintenanceMarginRatio,\n            int256 minLiquidationReward,\n            int256 maxLiquidationReward,\n            int256 liquidationCutRatio,\n            int256 protocolFeeCollectRatio\n        )\n    {\n        return (\n            _protocolParameters.minPoolMarginRatio(),\n            _protocolParameters.minInitialMarginRatio(),\n            _protocolParameters.minMaintenanceMarginRatio(),\n            _protocolParameters.minLiquidationReward(),\n            _protocolParameters.maxLiquidationReward(),\n            _protocolParameters.liquidationCutRatio(),\n            _protocolParameters.protocolFeeCollectRatio()\n        );\n    }\n\n    function getAddresses()\n        external\n        view\n        override\n        returns (\n            address bTokenAddress,\n            address lTokenAddress,\n            address pTokenAddress,\n            address liquidatorQualifierAddress,\n            address protocolFeeCollector,\n            address underlyingAddress,\n            address protocolAddress\n        )\n    {\n        return (\n            _bTokenAddress,\n            _lTokenAddress,\n            _pTokenAddress,\n            _liquidatorQualifierAddress,\n            _protocolFeeCollector,\n            _underlyingAddress,\n            _protocolAddress\n        );\n    }\n\n    function getSymbol() external view override returns (SymbolInfo memory) {\n        return _symbol;\n    }\n\n    function getLiquidity() external view override returns (int256) {\n        return _liquidity;\n    }\n\n    function getLastUpdateBlock() external view override returns (uint256) {\n        return _lastUpdateBlock;\n    }\n\n    function getProtocolFeeAccrued() external view override returns (int256) {\n        return _protocolFeeAccrued;\n    }\n\n    function collectProtocolFee() external override {\n        uint256 balance = IERC20(_bTokenAddress).balanceOf(address(this)).rescale(_decimals, 18);\n        uint256 amount = _protocolFeeAccrued.itou();\n        if (amount > balance) amount = balance;\n        _protocolFeeAccrued -= amount.utoi();\n        _transferOut(_protocolFeeCollector, amount);\n        emit ProtocolFeeCollection(_protocolFeeCollector, amount);\n    }\n\n    //================================================================================\n    // Interactions with onchain oracles\n    //================================================================================\n\n    function addLiquidity(uint256 bAmount) external override {\n        require(bAmount > 0, \"PerpetualPool: 0 bAmount\");\n        _addLiquidity(msg.sender, bAmount);\n    }\n\n    function removeLiquidity(uint256 lShares) external override {\n        require(lShares > 0, \"PerpetualPool: 0 lShares\");\n        _removeLiquidity(msg.sender, lShares);\n    }\n\n    function addMargin(uint256 bAmount) external override {\n        require(bAmount > 0, \"PerpetualPool: 0 bAmount\");\n        _addMargin(msg.sender, bAmount);\n    }\n\n    function removeMargin(uint256 bAmount) external override {\n        require(bAmount > 0, \"PerpetualPool: 0 bAmount\");\n        _removeMargin(msg.sender, bAmount);\n    }\n\n    function trade(int256 tradeVolume) external override {\n        require(\n            tradeVolume != 0 && (tradeVolume / ONE) * ONE == tradeVolume,\n            \"PerpetualPool: invalid tradeVolume\"\n        );\n        _trade(msg.sender, tradeVolume);\n    }\n\n    function liquidate(address account) external override {\n        address liquidator = msg.sender;\n        require(\n            _liquidatorQualifierAddress == address(0) ||\n                ILiquidatorQualifier(_liquidatorQualifierAddress).isQualifiedLiquidator(liquidator),\n            \"PerpetualPool: not qualified liquidator\"\n        );\n        _liquidate(liquidator, account);\n    }\n\n    //================================================================================\n    // Interactions with offchain oracles\n    //================================================================================\n\n    function addLiquidity(uint256 bAmount, SignedPrice memory price) external override {\n        require(bAmount > 0, \"PerpetualPool: 0 bAmount\");\n        _updateSymbolOracles(price);\n        _addLiquidity(msg.sender, bAmount);\n    }\n\n    function removeLiquidity(uint256 lShares, SignedPrice memory price) external override {\n        require(lShares > 0, \"PerpetualPool: 0 lShares\");\n        _updateSymbolOracles(price);\n        _removeLiquidity(msg.sender, lShares);\n    }\n\n    function addMargin(uint256 bAmount, SignedPrice memory price) external override {\n        require(bAmount > 0, \"PerpetualPool: 0 bAmount\");\n        _updateSymbolOracles(price);\n        _addMargin(msg.sender, bAmount);\n    }\n\n    function removeMargin(uint256 bAmount, SignedPrice memory price) external override {\n        require(bAmount > 0, \"PerpetualPool: 0 bAmount\");\n        _updateSymbolOracles(price);\n        _removeMargin(msg.sender, bAmount);\n    }\n\n    function trade(int256 tradeVolume, SignedPrice memory price) external override {\n        require(\n            tradeVolume != 0 && (tradeVolume / ONE) * ONE == tradeVolume,\n            \"PerpetualPool: invalid tradeVolume\"\n        );\n        _updateSymbolOracles(price);\n        _trade(msg.sender, tradeVolume);\n    }\n\n    function liquidate(address account, SignedPrice memory price) external override {\n        address liquidator = msg.sender;\n        require(\n            _liquidatorQualifierAddress == address(0) ||\n                ILiquidatorQualifier(_liquidatorQualifierAddress).isQualifiedLiquidator(liquidator),\n            \"PerpetualPool: not qualified liquidator\"\n        );\n        _updateSymbolOracles(price);\n        _liquidate(liquidator, account);\n    }\n\n    //================================================================================\n    // Core logics\n    //================================================================================\n\n    function _addLiquidity(address account, uint256 bAmount) internal _lock_ {\n        (int256 totalDynamicEquity, ) = _updateSymbolPricesAndFundingRates();\n        bAmount = _transferIn(account, bAmount);\n        ILTokenLite lToken = ILTokenLite(_lTokenAddress);\n\n        uint256 totalSupply = lToken.totalSupply();\n        uint256 lShares;\n        if (totalSupply == 0) {\n            lShares = bAmount;\n        } else {\n            lShares = (bAmount * totalSupply) / totalDynamicEquity.itou();\n        }\n\n        lToken.mint(account, lShares);\n        _liquidity += bAmount.utoi();\n\n        emit AddLiquidity(account, lShares, bAmount);\n    }\n\n    function _removeLiquidity(address account, uint256 lShares) internal _lock_ {\n        (int256 totalDynamicEquity, int256 totalAbsCost) = _updateSymbolPricesAndFundingRates();\n        ILTokenLite lToken = ILTokenLite(_lTokenAddress);\n\n        uint256 totalSupply = lToken.totalSupply();\n        uint256 bAmount = (lShares * totalDynamicEquity.itou()) / totalSupply;\n\n        _liquidity -= bAmount.utoi();\n\n        require(\n            totalAbsCost == 0 ||\n                ((totalDynamicEquity - bAmount.utoi()) * ONE) / totalAbsCost >=\n                _protocolParameters.minPoolMarginRatio(),\n            \"PerpetualPool: pool insufficient margin\"\n        );\n\n        lToken.burn(account, lShares);\n        _transferOut(account, bAmount);\n\n        emit RemoveLiquidity(account, lShares, bAmount);\n    }\n\n    function _addMargin(address account, uint256 bAmount) internal _lock_ {\n        bAmount = _transferIn(account, bAmount);\n\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\n        if (!pToken.exists(account)) pToken.mint(account);\n\n        pToken.addMargin(account, bAmount.utoi());\n        emit AddMargin(account, bAmount);\n    }\n\n    function _removeMargin(address account, uint256 bAmount) internal _lock_ {\n        _updateSymbolPricesAndFundingRates();\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\n\n        int256 amount = bAmount.utoi();\n        if (amount >= margin) {\n            amount = margin;\n            bAmount = amount.itou();\n            margin = 0;\n        } else {\n            margin -= amount;\n        }\n\n        require(\n            _getTraderMarginRatio(position, margin) >= _protocolParameters.minInitialMarginRatio(),\n            \"PerpetualPool: insufficient margin\"\n        );\n\n        _updateTraderPortfolio(account, position, margin);\n        _transferOut(account, bAmount);\n\n        emit RemoveMargin(account, bAmount);\n    }\n\n    // struct for temp use in trade function, to prevent stack too deep error\n    struct TradeParams {\n        int256 tradersNetVolume;\n        int256 price;\n        int256 multiplier;\n        int256 curCost;\n        int256 fee;\n        int256 realizedCost;\n        int256 protocolFee;\n    }\n\n    function _trade(address account, int256 tradeVolume) internal _lock_ {\n        (int256 totalDynamicEquity, int256 totalAbsCost) = _updateSymbolPricesAndFundingRates();\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\n\n        TradeParams memory params;\n\n        params.tradersNetVolume = _symbol.tradersNetVolume;\n        params.price = _symbol.price;\n        params.multiplier = _protocolParameters.futuresMultiplier();\n        params.curCost = (((tradeVolume * params.price) / ONE) * params.multiplier) / ONE;\n        params.fee = (params.curCost.abs() * _protocolParameters.futuresFeeRatio()) / ONE;\n\n        if (!(position.volume >= 0 && tradeVolume >= 0) && !(position.volume <= 0 && tradeVolume <= 0)) {\n            int256 absVolume = position.volume.abs();\n            int256 absTradeVolume = tradeVolume.abs();\n            if (absVolume <= absTradeVolume) {\n                // previous position is totally closed\n                params.realizedCost = (params.curCost * absVolume) / absTradeVolume + position.cost;\n            } else {\n                // previous position is partially closed\n                params.realizedCost = (position.cost * absTradeVolume) / absVolume + params.curCost;\n            }\n        }\n\n        // adjust totalAbsCost after trading\n        totalAbsCost +=\n            (((((params.tradersNetVolume + tradeVolume).abs() - params.tradersNetVolume.abs()) *\n                params.price) / ONE) * params.multiplier) /\n            ONE;\n\n        position.volume += tradeVolume;\n        position.cost += params.curCost - params.realizedCost;\n        position.lastCumulativeFundingRate = _symbol.cumulativeFundingRate;\n        margin -= params.fee + params.realizedCost;\n\n        _symbol.tradersNetVolume += tradeVolume;\n        _symbol.tradersNetCost += params.curCost - params.realizedCost;\n        params.protocolFee = (params.fee * _protocolParameters.protocolFeeCollectRatio()) / ONE;\n        _protocolFeeAccrued += params.protocolFee;\n        _liquidity += params.fee - params.protocolFee + params.realizedCost;\n\n        require(\n            totalAbsCost == 0 ||\n                (totalDynamicEquity * ONE) / totalAbsCost >= _protocolParameters.minPoolMarginRatio(),\n            \"PerpetualPool: insufficient liquidity\"\n        );\n        require(\n            _getTraderMarginRatio(position, margin) >= _protocolParameters.minInitialMarginRatio(),\n            \"PerpetualPool: insufficient margin\"\n        );\n\n        _updateTraderPortfolio(account, position, margin);\n\n        emit Trade(account, tradeVolume, params.price.itou());\n    }\n\n    function _liquidate(address liquidator, address account) internal _lock_ {\n        _updateSymbolPricesAndFundingRates();\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\n        require(\n            _getTraderMarginRatio(position, margin) < _protocolParameters.minMaintenanceMarginRatio(),\n            \"PerpetualPool: cannot liquidate\"\n        );\n\n        int256 netEquity = margin;\n        if (position.volume != 0) {\n            _symbol.tradersNetVolume -= position.volume;\n            _symbol.tradersNetCost -= position.cost;\n            netEquity +=\n                (((position.volume * _symbol.price) / ONE) * _protocolParameters.futuresMultiplier()) /\n                ONE -\n                position.cost;\n        }\n\n        int256 reward;\n        int256 minLiquidationReward = _protocolParameters.minLiquidationReward();\n        int256 maxLiquidationReward = _protocolParameters.maxLiquidationReward();\n        if (netEquity <= minLiquidationReward) {\n            reward = minLiquidationReward;\n        } else if (netEquity >= maxLiquidationReward) {\n            reward = maxLiquidationReward;\n        } else {\n            reward =\n                ((netEquity - minLiquidationReward) * _protocolParameters.liquidationCutRatio()) /\n                ONE +\n                minLiquidationReward;\n        }\n\n        _liquidity += margin - reward;\n        IPTokenLite(_pTokenAddress).burn(account);\n        _transferOut(liquidator, reward.itou());\n\n        emit Liquidate(account, liquidator, reward.itou());\n    }\n\n    //================================================================================\n    // Helpers\n    //================================================================================\n\n    function _updateSymbolOracles(SignedPrice memory price) internal {\n        IOracleWithUpdate(_protocolParameters.futuresOracleAddress()).updatePrice(\n            _underlyingAddress,\n            price.timestamp,\n            price.price,\n            price.v,\n            price.r,\n            price.s\n        );\n    }\n\n    function _updateSymbolPricesAndFundingRates()\n        internal\n        returns (int256 totalDynamicEquity, int256 totalAbsCost)\n    {\n        uint256 preBlockNumber = _lastUpdateBlock;\n        uint256 curBlockNumber = block.number;\n        totalDynamicEquity = _liquidity;\n\n        if (curBlockNumber > preBlockNumber) {\n            _symbol.price = IOracle(_protocolParameters.futuresOracleAddress()).getPrice().utoi();\n        }\n        if (_symbol.tradersNetVolume != 0) {\n            int256 cost = (((_symbol.tradersNetVolume * _symbol.price) / ONE) *\n                _protocolParameters.futuresMultiplier()) / ONE;\n            totalDynamicEquity -= cost - _symbol.tradersNetCost;\n            totalAbsCost += cost.abs();\n        }\n\n        if (curBlockNumber > preBlockNumber) {\n            if (_symbol.tradersNetVolume != 0) {\n                int256 ratePerBlock = (((((((((_symbol.tradersNetVolume * _symbol.price) / ONE) *\n                    _symbol.price) / ONE) * _protocolParameters.futuresMultiplier()) / ONE) *\n                    _protocolParameters.futuresMultiplier()) / ONE) *\n                    _protocolParameters.futuresFundingRateCoefficient()) / totalDynamicEquity;\n                int256 delta = ratePerBlock * int256(curBlockNumber - preBlockNumber);\n                unchecked {\n                    _symbol.cumulativeFundingRate += delta;\n                }\n            }\n        }\n\n        _lastUpdateBlock = curBlockNumber;\n    }\n\n    function getTraderPortfolio(address account)\n        public\n        view\n        returns (IPTokenLite.Position memory position, int256 margin)\n    {\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\n        position = pToken.getPosition(account);\n        margin = pToken.getMargin(account);\n    }\n\n    function _updateTraderPortfolio(\n        address account,\n        IPTokenLite.Position memory position,\n        int256 margin\n    ) internal {\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\n        pToken.updatePosition(account, position);\n        pToken.updateMargin(account, margin);\n    }\n\n    function _settleTraderFundingFee(address account)\n        internal\n        returns (IPTokenLite.Position memory position, int256 margin)\n    {\n        (position, margin) = getTraderPortfolio(account);\n        int256 funding;\n        if (position.volume != 0) {\n            int256 cumulativeFundingRate = _symbol.cumulativeFundingRate;\n            int256 delta;\n            unchecked {\n                delta = cumulativeFundingRate - position.lastCumulativeFundingRate;\n            }\n            funding += (position.volume * delta) / ONE;\n\n            position.lastCumulativeFundingRate = cumulativeFundingRate;\n        }\n        if (funding != 0) {\n            margin -= funding;\n            _liquidity += funding;\n        }\n    }\n\n    function _getTraderMarginRatio(IPTokenLite.Position memory position, int256 margin)\n        internal\n        view\n        returns (int256)\n    {\n        int256 totalDynamicEquity = margin;\n        int256 totalAbsCost;\n        if (position.volume != 0) {\n            int256 cost = (((position.volume * _symbol.price) / ONE) *\n                _protocolParameters.futuresMultiplier()) / ONE;\n            totalDynamicEquity += cost - position.cost;\n            totalAbsCost += cost.abs();\n        }\n        return totalAbsCost == 0 ? type(int256).max : (totalDynamicEquity * ONE) / totalAbsCost;\n    }\n\n    function _deflationCompatibleSafeTransferFrom(\n        address from,\n        address to,\n        uint256 bAmount\n    ) internal returns (uint256) {\n        IERC20 bToken = IERC20(_bTokenAddress);\n        uint256 balance1 = bToken.balanceOf(to);\n        bToken.safeTransferFrom(from, to, bAmount);\n        uint256 balance2 = bToken.balanceOf(to);\n        return balance2 - balance1;\n    }\n\n    function _transferIn(address from, uint256 bAmount) internal returns (uint256) {\n        uint256 amount = _deflationCompatibleSafeTransferFrom(\n            from,\n            address(this),\n            bAmount.rescale(18, _decimals)\n        );\n        return amount.rescale(_decimals, 18);\n    }\n\n    function _transferOut(address to, uint256 bAmount) internal {\n        uint256 amount = bAmount.rescale(18, _decimals);\n        uint256 leftover = bAmount - amount.rescale(_decimals, 18);\n        // leftover due to decimal precision is accrued to _protocolFeeAccrued\n        _protocolFeeAccrued += leftover.utoi();\n        IERC20(_bTokenAddress).safeTransfer(to, amount);\n    }\n\n    // function migrationTimestamp() external view override returns (uint256) {\n    //     // TODO: Implement\n    // }\n\n    // function migrationDestination() external view override returns (address) {\n    //     // TODO: Implement\n    // }\n\n    // function prepareMigration(address target, uint256 graceDays) external override {\n    //     // TODO: Implement\n    // }\n\n    // function approveMigration() external override {\n    //     // TODO: Implement\n    // }\n\n    // function executeMigration(address source) override external {\n    //     // TODO: Implement\n    // }\n\n    // function controller() external view override returns (address) {\n    //     // TODO: Implement\n    // }\n\n    // function setNewController(address newController) external override {\n    //     // TODO: Implement\n    // }\n\n    // function claimNewController() external override {\n    //     // TODO: Implement\n    // }\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/polygon/governance/Structs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nstruct MainParams {\n    int256 minPoolMarginRatio;\n    int256 minInitialMarginRatio;\n    int256 minMaintenanceMarginRatio;\n    int256 minLiquidationReward;\n    int256 maxLiquidationReward;\n    int256 liquidationCutRatio;\n    int256 protocolFeeCollectRatio;\n}\n"
    },
    "contracts/perpetual_futures/tokens/PFERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"./PFERC165.sol\";\n\n/**\n * @dev ERC721 Non-Fungible Token Implementation\n *\n * Exert uniqueness of owner: one owner can only have one token\n */\ncontract PFERC721 is IERC721, PFERC165 {\n    using Address for address;\n\n    /*\n     * Equals to `bytes4(keccak256('onERC721Received(address,address,uint256,bytes)'))`\n     * which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n     */\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x081812fc ^ 0xe985e9c5 ^\n     *        0x095ea7b3 ^ 0xa22cb465 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    // Mapping from owner address to tokenId\n    // tokenId starts from 1, 0 is reserved for nonexistent token\n    // One owner can only own one token in this contract\n    mapping(address => uint256) internal _ownerTokenId;\n\n    // Mapping from tokenId to owner\n    mapping(uint256 => address) internal _tokenIdOwner;\n\n    // Mapping from tokenId to approved operator\n    mapping(uint256 => address) internal _tokenIdOperator;\n\n    // Mapping from owner to operator for all approval\n    mapping(address => mapping(address => bool)) internal _ownerOperator;\n\n    modifier _existsTokenId_(uint256 tokenId) {\n        require(_exists(tokenId), \"ERC721: nonexistent tokenId\");\n        _;\n    }\n\n    modifier _existsOwner_(address owner) {\n        require(_exists(owner), \"ERC721: nonexistent owner\");\n        _;\n    }\n\n    constructor() {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n    }\n\n    function balanceOf(address owner) public view override returns (uint256) {\n        return _exists(owner) ? 1 : 0;\n    }\n\n    function ownerOf(uint256 tokenId) public view override _existsTokenId_(tokenId) returns (address) {\n        return _tokenIdOwner[tokenId];\n    }\n\n    function getTokenId(address owner) public view _existsOwner_(owner) returns (uint256) {\n        return _ownerTokenId[owner];\n    }\n\n    function getApproved(uint256 tokenId) public view override _existsTokenId_(tokenId) returns (address) {\n        return _tokenIdOperator[tokenId];\n    }\n\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override\n        _existsOwner_(owner)\n        returns (bool)\n    {\n        return _ownerOperator[owner][operator];\n    }\n\n    function approve(address operator, uint256 tokenId) public override {\n        require(msg.sender == ownerOf(tokenId), \"ERC721.approve: caller not owner\");\n        _tokenIdOperator[tokenId] = operator;\n        emit Approval(msg.sender, operator, tokenId);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public override {\n        require(_exists(msg.sender), \"ERC721.setApprovalForAll: nonexistent owner\");\n        _ownerOperator[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override {\n        _validateTransfer(msg.sender, from, to, tokenId);\n        _transfer(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public override {\n        _validateTransfer(msg.sender, from, to, tokenId);\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    //================================================================================\n\n    function _exists(address owner) internal view returns (bool) {\n        return _ownerTokenId[owner] != 0;\n    }\n\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _tokenIdOwner[tokenId] != address(0);\n    }\n\n    function _validateTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal view {\n        require(from == ownerOf(tokenId), \"ERC721._validateTransfer: not owned token\");\n        require(to != address(0) && !_exists(to), \"ERC721._validateTransfer: to address exists or 0\");\n        require(\n            operator == from || _tokenIdOperator[tokenId] == operator || _ownerOperator[from][operator],\n            \"ERC721._validateTransfer: not owner nor approved\"\n        );\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal {\n        // clear previous ownership and approvals\n        delete _ownerTokenId[from];\n        delete _tokenIdOperator[tokenId];\n\n        // set up new owner\n        _ownerTokenId[to] = tokenId;\n        _tokenIdOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract\n     * recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Validation check on parameters should be carried out before calling this function.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     *      The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID.\n     * @param to target address that will receive the tokens.\n     * @param tokenId uint256 ID of the token to be transferred.\n     * @param data bytes optional data to send along with the call.\n     * @return bool whether the call correctly returned the expected magic value.\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal returns (bool) {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(\n            abi.encodeWithSelector(\n                IERC721Receiver(to).onERC721Received.selector,\n                msg.sender,\n                from,\n                tokenId,\n                data\n            ),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n}\n"
    },
    "contracts/perpetual_futures/tokens/PFERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract PFERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor() {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "contracts/perpetual_futures/library/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary SafeMath {\n    uint256 internal constant UMAX = 2**255 - 1;\n    int256 internal constant IMIN = -2**255;\n\n    /// convert uint256 to int256\n    function utoi(uint256 a) internal pure returns (int256) {\n        require(a <= UMAX, \"UIO\");\n        return int256(a);\n    }\n\n    /// convert int256 to uint256\n    function itou(int256 a) internal pure returns (uint256) {\n        require(a >= 0, \"IUO\");\n        return uint256(a);\n    }\n\n    /// take abs of int256\n    function abs(int256 a) internal pure returns (int256) {\n        require(a != IMIN, \"AO\");\n        return a >= 0 ? a : -a;\n    }\n\n    /// rescale a uint256 from base 10**decimals1 to 10**decimals2\n    function rescale(\n        uint256 a,\n        uint256 decimals1,\n        uint256 decimals2\n    ) internal pure returns (uint256) {\n        return decimals1 == decimals2 ? a : (a * (10**decimals2)) / (10**decimals1);\n    }\n\n    /// rescale a int256 from base 10**decimals1 to 10**decimals2\n    function rescale(\n        int256 a,\n        uint256 decimals1,\n        uint256 decimals2\n    ) internal pure returns (int256) {\n        return decimals1 == decimals2 ? a : (a * utoi(10**decimals2)) / utoi(10**decimals1);\n    }\n\n    /// reformat a uint256 to be a valid 10**decimals base value\n    /// the reformatted value is still in 10**18 base\n    function reformat(uint256 a, uint256 decimals) internal pure returns (uint256) {\n        return decimals == 18 ? a : rescale(rescale(a, 18, decimals), decimals, 18);\n    }\n\n    /// reformat a int256 to be a valid 10**decimals base value\n    /// the reformatted value is still in 10**18 base\n    function reformat(int256 a, uint256 decimals) internal pure returns (int256) {\n        return decimals == 18 ? a : rescale(rescale(a, 18, decimals), decimals, 18);\n    }\n\n    /// ceiling value away from zero, return a valid 10**decimals base value, but still in 10**18 based\n    function ceil(int256 a, uint256 decimals) internal pure returns (int256) {\n        if (reformat(a, decimals) == a) {\n            return a;\n        } else {\n            int256 b = rescale(a, 18, decimals);\n            b += a > 0 ? int256(1) : int256(-1);\n            return rescale(b, decimals, 18);\n        }\n    }\n\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 quotient = a / b;\n        uint256 remainder = a - quotient * b;\n        if (remainder > 0) {\n            return quotient + 1;\n        } else {\n            return quotient;\n        }\n    }\n\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = x / 2 + 1;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a >= b ? a : b;\n    }\n\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a <= b ? a : b;\n    }\n\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a <= b ? a : b;\n    }\n}\n"
    },
    "contracts/polygon/mocks/RandomNumberConsumerMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../implementations/SyntheticCollectionManager.sol\";\n\n/**\n * @dev the ownership will be transferred after deploy to the router contract\n */\ncontract RandomNumberConsumerMock is Ownable {\n    mapping(address => bool) private _whitelistedCollections;\n\n    event RequestedRandomness(bytes32 requestId, address fromCollection);\n\n    /**\n     * @dev constructor inherits VRFConsumerBase\n     */\n    constructor() {} // solhint-disable-line\n\n    /**\n     * @dev mock just for testing purposes\n     */\n    function getRandomNumber() external returns (bytes32 requestId) {\n        require(_whitelistedCollections[msg.sender], \"Invalid requester\");\n\n        requestId = keccak256(abi.encodePacked(\"requestId\"));\n\n        fulfillRandomnessMock(requestId, 131, msg.sender);\n    }\n\n    /**\n     * @dev mock just for testing purposes\n     */\n    function fulfillRandomnessMock(\n        bytes32 requestId,\n        uint256 randomness,\n        address collection\n    ) public {\n        SyntheticCollectionManager(collection).processFlipResult(randomness % 2, requestId);\n    }\n\n    /**\n     * @dev whitelist collections to get random from this contract\n     */\n    function whitelistCollection(address collectionId) external onlyOwner {\n        _whitelistedCollections[collectionId] = true;\n    }\n}\n"
    },
    "contracts/polygon/mocks/PolygonValidatorOracleMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../implementations/SyntheticCollectionManager.sol\";\nimport \"../chainlink/OracleStructs.sol\";\n\n/**\n * @dev the ownership will be transferred after deployment to the router contract\n */\ncontract PolygonValidatorOracleMock is ChainlinkClient, Ownable {\n    mapping(bytes32 => VerifyRequest) private _verifyRequests;\n    mapping(address => bool) private _whitelistedCollections;\n\n    event ResponseReceived(\n        bytes32 indexed requestId,\n        address originalCollection,\n        address syntheticCollection,\n        uint256 tokenId,\n        bool verified\n    );\n\n    // solhint-disable-next-line\n    constructor() {}\n\n    /**\n     * @dev this is a mock just for testing purposes\n     */\n    function verifyTokenInCollection(\n        address ethereumCollection,\n        uint256 tokenId,\n        uint256\n    ) external returns (bytes32 requestId) {\n        requestId = keccak256(abi.encodePacked(\"requestId\"));\n\n        processResponseMock(requestId, true, ethereumCollection, msg.sender, tokenId);\n    }\n\n    /**\n     * @dev this is a mock just for testing purposes\n     */\n    function processResponseMock(\n        bytes32 requestId,\n        bool verified,\n        address originalCollection,\n        address syntheticCollection,\n        uint256 tokenId\n    ) public {\n        if (verified) {\n            SyntheticCollectionManager(syntheticCollection).processSuccessfulVerify(tokenId, true);\n        }\n\n        emit ResponseReceived(requestId, originalCollection, syntheticCollection, tokenId, verified);\n    }\n\n    /**\n     * @dev whitelist collections to call this contract\n     */\n    function whitelistCollection(address collectionId) external onlyOwner {\n        _whitelistedCollections[collectionId] = true;\n    }\n}\n"
    },
    "contracts/polygon/mocks/JotMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"../extensions/IERC20ManagedAccounts.sol\";\r\nimport \"../Interfaces.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract JotMock is ERC20, IERC20ManagedAccounts, AccessControl, Initializable {\r\n    bytes32 public constant ROUTER = keccak256(\"ROUTER\");\r\n    bytes32 public constant MINTER = keccak256(\"MINTER\");\r\n\r\n    // proxied values for the erc20 attributes\r\n    string private _proxiedName;\r\n    string private _proxiedSymbol;\r\n\r\n    /**\r\n     * @notice *swap address\r\n     */\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    /**\r\n     * @notice pair address\r\n     */\r\n    address public uniswapV2Pair;\r\n\r\n    mapping(address => address) private _managers;\r\n\r\n    // solhint-disable-next-line\r\n    constructor() ERC20(\"Privi Mock Jot\", \"mJOT\") {\r\n        _mint(msg.sender, 10000000000 * 10**decimals());\r\n    }\r\n\r\n    function initialize(\r\n        string calldata _name,\r\n        string calldata _symbol,\r\n        address swapAddress,\r\n        address fundingTokenAddress\r\n    ) external initializer {\r\n        _proxiedName = _name;\r\n        _proxiedSymbol = _symbol;\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(ROUTER, msg.sender);\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(swapAddress);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            fundingTokenAddress\r\n        );\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(\r\n            address(this),\r\n            fundingTokenAddress\r\n        );\r\n\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev allows to send funds from a managed account (infinite allowance)\r\n     */\r\n    function transferFromManaged(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external virtual override {\r\n        require(_managers[sender] == msg.sender, \"The caller is not the manager of this account\");\r\n        _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function setManager(address manager, address account) external onlyRole(ROUTER) {\r\n        _managers[account] = manager;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _proxiedName;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _proxiedSymbol;\r\n    }\r\n}\r\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/governance/Governor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/cryptography/ECDSA.sol\";\nimport \"../utils/cryptography/draft-EIP712.sol\";\nimport \"../utils/introspection/ERC165.sol\";\nimport \"../utils/math/SafeCast.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Timers.sol\";\nimport \"./IGovernor.sol\";\n\n/**\n * @dev Core of the governance system, designed to be extended though various modules.\n *\n * This contract is abstract and requires several function to be implemented in various modules:\n *\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\n * - A voting module must implement {getVotes}\n * - Additionanly, the {votingPeriod} must also be implemented\n *\n * _Available since v4.3._\n */\nabstract contract Governor is Context, ERC165, EIP712, IGovernor {\n    using SafeCast for uint256;\n    using Timers for Timers.BlockNumber;\n\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,uint8 support)\");\n\n    struct ProposalCore {\n        Timers.BlockNumber voteStart;\n        Timers.BlockNumber voteEnd;\n        bool executed;\n        bool canceled;\n    }\n\n    string private _name;\n\n    mapping(uint256 => ProposalCore) private _proposals;\n\n    /**\n     * @dev Restrict access to governor executing address. Some module might override the _executor function to make\n     * sure this modifier is consistant with the execution model.\n     */\n    modifier onlyGovernance() {\n        require(_msgSender() == _executor(), \"Governor: onlyGovernance\");\n        _;\n    }\n\n    /**\n     * @dev Sets the value for {name} and {version}\n     */\n    constructor(string memory name_) EIP712(name_, version()) {\n        _name = name_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IGovernor).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IGovernor-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IGovernor-version}.\n     */\n    function version() public view virtual override returns (string memory) {\n        return \"1\";\n    }\n\n    /**\n     * @dev See {IGovernor-hashProposal}.\n     *\n     * The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\n     * advance, before the proposal is submitted.\n     *\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\n     * accross multiple networks. This also means that in order to execute the same operation twice (on the same\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\n     */\n    function hashProposal(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual override returns (uint256) {\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\n    }\n\n    /**\n     * @dev See {IGovernor-state}.\n     */\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\n        ProposalCore memory proposal = _proposals[proposalId];\n\n        if (proposal.executed) {\n            return ProposalState.Executed;\n        } else if (proposal.canceled) {\n            return ProposalState.Canceled;\n        } else if (proposal.voteStart.isPending()) {\n            return ProposalState.Pending;\n        } else if (proposal.voteEnd.isPending()) {\n            return ProposalState.Active;\n        } else if (proposal.voteEnd.isExpired()) {\n            return\n                _quorumReached(proposalId) && _voteSucceeded(proposalId)\n                    ? ProposalState.Succeeded\n                    : ProposalState.Defeated;\n        } else {\n            revert(\"Governor: unknown proposal id\");\n        }\n    }\n\n    /**\n     * @dev See {IGovernor-proposalSnapshot}.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteStart.getDeadline();\n    }\n\n    /**\n     * @dev See {IGovernor-proposalDeadline}.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteEnd.getDeadline();\n    }\n\n    /**\n     * @dev Amount of votes already cast passes the threshold limit.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Is the proposal successful or not.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Register a vote with a given support and voting weight.\n     *\n     * Note: Support is generic and can represent various things depending on the voting system used.\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight\n    ) internal virtual;\n\n    /**\n     * @dev See {IGovernor-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\n\n        require(targets.length == values.length, \"Governor: invalid proposal length\");\n        require(targets.length == calldatas.length, \"Governor: invalid proposal length\");\n        require(targets.length > 0, \"Governor: empty proposal\");\n\n        ProposalCore storage proposal = _proposals[proposalId];\n        require(proposal.voteStart.isUnset(), \"Governor: proposal already exists\");\n\n        uint64 snapshot = block.number.toUint64() + votingDelay().toUint64();\n        uint64 deadline = snapshot + votingPeriod().toUint64();\n\n        proposal.voteStart.setDeadline(snapshot);\n        proposal.voteEnd.setDeadline(deadline);\n\n        emit ProposalCreated(\n            proposalId,\n            _msgSender(),\n            targets,\n            values,\n            new string[](targets.length),\n            calldatas,\n            snapshot,\n            deadline,\n            description\n        );\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-execute}.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        ProposalState status = state(proposalId);\n        require(\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\n            \"Governor: proposal not successful\"\n        );\n        _proposals[proposalId].executed = true;\n\n        emit ProposalExecuted(proposalId);\n\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Internal execution mechanism. Can be overriden to implement different execution mechanism\n     */\n    function _execute(\n        uint256, /* proposalId */\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        string memory errorMessage = \"Governor: call reverted without message\";\n        for (uint256 i = 0; i < targets.length; ++i) {\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\n            Address.verifyCallResult(success, returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\n     * canceled to allow distinguishing it from executed proposals.\n     *\n     * Emits a {IGovernor-ProposalCanceled} event.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n        ProposalState status = state(proposalId);\n\n        require(\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\n            \"Governor: proposal not active\"\n        );\n        _proposals[proposalId].canceled = true;\n\n        emit ProposalCanceled(proposalId);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-castVote}.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReason}.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, reason);\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteBySig}.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override returns (uint256) {\n        address voter = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\n            v,\n            r,\n            s\n        );\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\n     *\n     * Emits a {IGovernor-VoteCast} event.\n     */\n    function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason\n    ) internal virtual returns (uint256) {\n        ProposalCore storage proposal = _proposals[proposalId];\n        require(state(proposalId) == ProposalState.Active, \"Governor: vote not currently active\");\n\n        uint256 weight = getVotes(account, proposal.voteStart.getDeadline());\n        _countVote(proposalId, account, support, weight);\n\n        emit VoteCast(account, proposalId, support, weight, reason);\n\n        return weight;\n    }\n\n    /**\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\n     * through another contract such as a timelock.\n     */\n    function _executor() internal view virtual returns (address) {\n        return address(this);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Timers.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Tooling for timepoints, timers and delays\n */\nlibrary Timers {\n    struct Timestamp {\n        uint64 _deadline;\n    }\n\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(Timestamp storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(Timestamp memory timer) internal view returns (bool) {\n        return timer._deadline > block.timestamp;\n    }\n\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.timestamp;\n    }\n\n    struct BlockNumber {\n        uint64 _deadline;\n    }\n\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(BlockNumber storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\n        return timer._deadline > block.number;\n    }\n\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.number;\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/IGovernor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Interface of the {Governor} core.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernor is IERC165 {\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    /**\n     * @dev Emitted when a proposal is created.\n     */\n    event ProposalCreated(\n        uint256 proposalId,\n        address proposer,\n        address[] targets,\n        uint256[] values,\n        string[] signatures,\n        bytes[] calldatas,\n        uint256 startBlock,\n        uint256 endBlock,\n        string description\n    );\n\n    /**\n     * @dev Emitted when a proposal is canceled.\n     */\n    event ProposalCanceled(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a proposal is executed.\n     */\n    event ProposalExecuted(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a vote is cast.\n     *\n     * Note: `support` values should be seen as buckets. There interpretation depends on the voting module used.\n     */\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\n\n    /**\n     * @notice module:core\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\n     */\n    function name() public view virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\"\n     */\n    function version() public view virtual returns (string memory);\n\n    /**\n     * @notice module:voting\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\n     *\n     * There are 2 standard keys: `support` and `quorum`.\n     *\n     * - `support=bravo` refers to the vote options 0 = For, 1 = Against, 2 = Abstain, as in `GovernorBravo`.\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\n     *\n     * NOTE: The string can be decoded by the standard\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\n     * JavaScript class.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\n     */\n    function hashProposal(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Current state of a proposal, following Compound's convention\n     */\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\n\n    /**\n     * @notice module:core\n     * @dev block number used to retrieve user's votes and quorum.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev timestamp at which votes close.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\n     */\n    function votingDelay() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev delay, in number of blocks, between the vote start and vote ends.\n     *\n     * Note: the {votingDelay} can delay the start of the vote. This must be considered when setting the voting\n     * duration compared to the voting delay.\n     */\n    function votingPeriod() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Minimum number of cast voted required for a proposal to be successful.\n     *\n     * Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\n     * quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\n     */\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\n\n    /**\n     * @notice module:reputation\n     * @dev Voting power of an `account` at a specific `blockNumber`.\n     *\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\n     * multiple), {ERC20Votes} tokens.\n     */\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\n\n    /**\n     * @notice module:voting\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\n\n    /**\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\n     * {IGovernor-votingPeriod} blocks after the voting starts.\n     *\n     * Emits a {ProposalCreated} event.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\n     * deadline to be reached.\n     *\n     * Emits a {ProposalExecuted} event.\n     *\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Cast a vote\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a with a reason\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote using the user cryptographic signature.\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual returns (uint256 balance);\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IGovernorTimelock.sol\";\nimport \"../Governor.sol\";\nimport \"../TimelockController.sol\";\n\n/**\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\n * {Governor} needs the proposer (an ideally the executor) roles for the {Governor} to work properly.\n *\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\n * inaccessible.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorTimelockControl is IGovernorTimelock, Governor {\n    TimelockController private _timelock;\n    mapping(uint256 => bytes32) private _timelockIds;\n\n    /**\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\n     */\n    event TimelockChange(address oldTimelock, address newTimelock);\n\n    /**\n     * @dev Set the timelock.\n     */\n    constructor(TimelockController timelockAddress) {\n        _updateTimelock(timelockAddress);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {\n        return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Overriden version of the {Governor-state} function with added support for the `Queued` status.\n     */\n    function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {\n        ProposalState status = super.state(proposalId);\n\n        if (status != ProposalState.Succeeded) {\n            return status;\n        }\n\n        // core tracks execution, so we just have to check if successful proposal have been queued.\n        bytes32 queueid = _timelockIds[proposalId];\n        if (queueid == bytes32(0)) {\n            return status;\n        } else if (_timelock.isOperationDone(queueid)) {\n            return ProposalState.Executed;\n        } else {\n            return ProposalState.Queued;\n        }\n    }\n\n    /**\n     * @dev Public accessor to check the address of the timelock\n     */\n    function timelock() public view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public accessor to check the eta of a queued proposal\n     */\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\n    }\n\n    /**\n     * @dev Function to queue a proposal to the timelock.\n     */\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        require(state(proposalId) == ProposalState.Succeeded, \"Governor: proposal not successful\");\n\n        uint256 delay = _timelock.getMinDelay();\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\n\n        emit ProposalQueued(proposalId, block.timestamp + delay);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Overriden execute function that run the already queued proposal through the timelock.\n     */\n    function _execute(\n        uint256, /* proposalId */\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override {\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\n    }\n\n    /**\n     * @dev Overriden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\n     * been queued.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\n\n        if (_timelockIds[proposalId] != 0) {\n            _timelock.cancel(_timelockIds[proposalId]);\n            delete _timelockIds[proposalId];\n        }\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Address through which the governor executes action. In this case, the timelock.\n     */\n    function _executor() internal view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\n     * must be proposed, scheduled and executed using the {Governor} workflow.\n     */\n    function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\n        _updateTimelock(newTimelock);\n    }\n\n    function _updateTimelock(TimelockController newTimelock) private {\n        emit TimelockChange(address(_timelock), address(newTimelock));\n        _timelock = newTimelock;\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IGovernor.sol\";\n\n/**\n * @dev Extension of the {IGovernor} for timelock supporting modules.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernorTimelock is IGovernor {\n    event ProposalQueued(uint256 proposalId, uint256 eta);\n\n    function timelock() public view virtual returns (address);\n\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\n\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual returns (uint256 proposalId);\n}\n"
    },
    "@openzeppelin/contracts/governance/TimelockController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../access/AccessControl.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n *\n * _Available since v3.3._\n */\ncontract TimelockController is AccessControl {\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with a given `minDelay`.\n     */\n    constructor(\n        uint256 minDelay,\n        address[] memory proposers,\n        address[] memory executors\n    ) {\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n\n        // deployer + self administration\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n        // register proposers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _setupRole(PROPOSER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _setupRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev Returns whether an id correspond to a registered operation. This\n     * includes both Pending, Ready and Done operations.\n     */\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > 0;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not.\n     */\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready or not.\n     */\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\n        uint256 timestamp = getTimestamp(id);\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns the minimum delay for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256 duration) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits a {CallScheduled} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to becomes valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _beforeCall(id, predecessor);\n        _call(id, 0, target, value, data);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            _call(id, i, targets[i], values[i], datas[i]);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Checks before execution of an operation's calls.\n     */\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\n    }\n\n    /**\n     * @dev Checks after execution of an operation's calls.\n     */\n    function _afterCall(bytes32 id) private {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Execute an operation's call.\n     *\n     * Emits a {CallExecuted} event.\n     */\n    function _call(\n        bytes32 id,\n        uint256 index,\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) private {\n        (bool success, ) = target.call{value: value}(data);\n        require(success, \"TimelockController: underlying transaction reverted\");\n\n        emit CallExecuted(id, index, target, value, data);\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n}\n"
    },
    "contracts/polygon/mocks/GovernorTimelockControlMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\";\nimport \"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\";\nimport \"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\";\n\ncontract GovernorTimelockControlMock is\n    GovernorTimelockControl,\n    GovernorVotesQuorumFraction,\n    GovernorCountingSimple\n{\n    uint256 private immutable _votingDelay;\n    uint256 private immutable _votingPeriod;\n\n    constructor(\n        string memory name_,\n        ERC20Votes token_,\n        uint256 votingDelay_,\n        uint256 votingPeriod_,\n        TimelockController timelock_,\n        uint256 quorumNumerator_\n    )\n        Governor(name_)\n        GovernorTimelockControl(timelock_)\n        GovernorVotes(token_)\n        GovernorVotesQuorumFraction(quorumNumerator_)\n    {\n        _votingDelay = votingDelay_;\n        _votingPeriod = votingPeriod_;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(Governor, GovernorTimelockControl)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function votingDelay() public view override returns (uint256) {\n        return _votingDelay;\n    }\n\n    function votingPeriod() public view override returns (uint256) {\n        return _votingPeriod;\n    }\n\n    function quorum(uint256 blockNumber)\n        public\n        view\n        override(IGovernor, GovernorVotesQuorumFraction)\n        returns (uint256)\n    {\n        return super.quorum(blockNumber);\n    }\n\n    function cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public returns (uint256 proposalId) {\n        return _cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    /**\n     * Overriding nightmare\n     */\n    function state(uint256 proposalId)\n        public\n        view\n        virtual\n        override(Governor, GovernorTimelockControl)\n        returns (ProposalState)\n    {\n        return super.state(proposalId);\n    }\n\n    function _execute(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override(Governor, GovernorTimelockControl) {\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\n    }\n\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override(Governor, GovernorTimelockControl) returns (uint256 proposalId) {\n        return super._cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    function getVotes(address account, uint256 blockNumber)\n        public\n        view\n        virtual\n        override(IGovernor, GovernorVotes)\n        returns (uint256)\n    {\n        return super.getVotes(account, blockNumber);\n    }\n\n    function _executor() internal view virtual override(Governor, GovernorTimelockControl) returns (address) {\n        return super._executor();\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\n\n/**\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorCountingSimple is Governor {\n    /**\n     * @dev Supported vote types. Matches Governor Bravo ordering.\n     */\n    enum VoteType {\n        Against,\n        For,\n        Abstain\n    }\n\n    struct ProposalVote {\n        uint256 againstVotes;\n        uint256 forVotes;\n        uint256 abstainVotes;\n        mapping(address => bool) hasVoted;\n    }\n\n    mapping(uint256 => ProposalVote) private _proposalVotes;\n\n    /**\n     * @dev See {IGovernor-COUNTING_MODE}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\n        return \"support=bravo&quorum=for,abstain\";\n    }\n\n    /**\n     * @dev See {IGovernor-hasVoted}.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\n        return _proposalVotes[proposalId].hasVoted[account];\n    }\n\n    /**\n     * @dev Accessor to the internal vote counts.\n     */\n    function proposalVotes(uint256 proposalId)\n        public\n        view\n        virtual\n        returns (\n            uint256 againstVotes,\n            uint256 forVotes,\n            uint256 abstainVotes\n        )\n    {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n        return (proposalvote.againstVotes, proposalvote.forVotes, proposalvote.abstainVotes);\n    }\n\n    /**\n     * @dev See {Governor-_quorumReached}.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        return quorum(proposalSnapshot(proposalId)) <= proposalvote.forVotes + proposalvote.abstainVotes;\n    }\n\n    /**\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be scritly over the againstVotes.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        return proposalvote.forVotes > proposalvote.againstVotes;\n    }\n\n    /**\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight\n    ) internal virtual override {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        require(!proposalvote.hasVoted[account], \"GovernorVotingSimple: vote already cast\");\n        proposalvote.hasVoted[account] = true;\n\n        if (support == uint8(VoteType.Against)) {\n            proposalvote.againstVotes += weight;\n        } else if (support == uint8(VoteType.For)) {\n            proposalvote.forVotes += weight;\n        } else if (support == uint8(VoteType.Abstain)) {\n            proposalvote.abstainVotes += weight;\n        } else {\n            revert(\"GovernorVotingSimple: invalid value for enum VoteType\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./GovernorVotes.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\n * fraction of the total supply.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorVotesQuorumFraction is GovernorVotes {\n    uint256 private _quorumNumerator;\n\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\n\n    constructor(uint256 quorumNumeratorValue) {\n        _updateQuorumNumerator(quorumNumeratorValue);\n    }\n\n    function quorumNumerator() public view virtual returns (uint256) {\n        return _quorumNumerator;\n    }\n\n    function quorumDenominator() public view virtual returns (uint256) {\n        return 100;\n    }\n\n    function quorum(uint256 blockNumber) public view virtual override returns (uint256) {\n        return (token.getPastTotalSupply(blockNumber) * quorumNumerator()) / quorumDenominator();\n    }\n\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\n        _updateQuorumNumerator(newQuorumNumerator);\n    }\n\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\n        require(\n            newQuorumNumerator <= quorumDenominator(),\n            \"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\"\n        );\n\n        uint256 oldQuorumNumerator = _quorumNumerator;\n        _quorumNumerator = newQuorumNumerator;\n\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\nimport \"../../token/ERC20/extensions/ERC20Votes.sol\";\nimport \"../../utils/math/Math.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorVotes is Governor {\n    ERC20Votes public immutable token;\n\n    constructor(ERC20Votes tokenAddress) {\n        token = tokenAddress;\n    }\n\n    /**\n     * Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes}).\n     */\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\n        return token.getPastVotes(account, blockNumber);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-ERC20Permit.sol\";\nimport \"../../../utils/math/Math.sol\";\nimport \"../../../utils/math/SafeCast.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\n\n/**\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\n *\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\n * will significantly increase the base gas cost of transfers.\n *\n * _Available since v4.2._\n */\nabstract contract ERC20Votes is ERC20Permit {\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint224 votes;\n    }\n\n    bytes32 private constant _DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address => address) private _delegates;\n    mapping(address => Checkpoint[]) private _checkpoints;\n    Checkpoint[] private _totalSupplyCheckpoints;\n\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\n        return _checkpoints[account][pos];\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function numCheckpoints(address account) public view virtual returns (uint32) {\n        return SafeCast.toUint32(_checkpoints[account].length);\n    }\n\n    /**\n     * @dev Get the address `account` is currently delegating to.\n     */\n    function delegates(address account) public view virtual returns (address) {\n        return _delegates[account];\n    }\n\n    /**\n     * @dev Gets the current votes balance for `account`\n     */\n    function getVotes(address account) public view returns (uint256) {\n        uint256 pos = _checkpoints[account].length;\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\n    }\n\n    /**\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\n    }\n\n    /**\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\n     * It is but NOT the sum of all the delegated votes!\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\n    }\n\n    /**\n     * @dev Lookup a value in a list of (sorted) checkpoints.\n     */\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\n        //\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\n        // the same.\n        uint256 high = ckpts.length;\n        uint256 low = 0;\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (ckpts[mid].fromBlock > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        return high == 0 ? 0 : ckpts[high - 1].votes;\n    }\n\n    /**\n     * @dev Delegate votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual {\n        return _delegate(_msgSender(), delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(block.timestamp <= expiry, \"ERC20Votes: signature expired\");\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"ERC20Votes: invalid nonce\");\n        return _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\n     */\n    function _maxSupply() internal view virtual returns (uint224) {\n        return type(uint224).max;\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been increased.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        super._mint(account, amount);\n        require(totalSupply() <= _maxSupply(), \"ERC20Votes: total supply risks overflowing votes\");\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been decreased.\n     */\n    function _burn(address account, uint256 amount) internal virtual override {\n        super._burn(account, amount);\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\n    }\n\n    /**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {DelegateVotesChanged} event.\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._afterTokenTransfer(from, to, amount);\n\n        _moveVotingPower(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Change delegation for `delegator` to `delegatee`.\n     *\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\n     */\n    function _delegate(address delegator, address delegatee) internal virtual {\n        address currentDelegate = delegates(delegator);\n        uint256 delegatorBalance = balanceOf(delegator);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveVotingPower(\n        address src,\n        address dst,\n        uint256 amount\n    ) private {\n        if (src != dst && amount > 0) {\n            if (src != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\n            }\n\n            if (dst != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        Checkpoint[] storage ckpts,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\n        uint256 pos = ckpts.length;\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\n        newWeight = op(oldWeight, delta);\n\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\n        } else {\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\n        }\n    }\n\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\n        return a + b;\n    }\n\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\n        return a - b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/polygon/mocks/ERC20VotesMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\";\n\ncontract ERC20VotesMock is ERC20Votes {\n    // solhint-disable-next-line\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) ERC20Permit(name) {}\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        _burn(account, amount);\n    }\n\n    function getChainId() external view returns (uint256) {\n        return block.chainid;\n    }\n}\n"
    },
    "contracts/polygon/governance/JUICE.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\";\n\ncontract JUICE is ERC20, ERC20Permit, ERC20Votes {\n    // solhint-disable-next-line\n    constructor() ERC20(\"Privi Juice\", \"JUICE\") ERC20Permit(\"Privi Juice\") {}\n\n    // The functions below are overrides required by Solidity.\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override(ERC20, ERC20Votes) {\n        super._afterTokenTransfer(from, to, amount);\n    }\n\n    function _mint(address to, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._mint(to, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._burn(account, amount);\n    }\n}\n"
    },
    "contracts/polygon/LinkManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Interfaces.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract LinkManager {\n    using SafeERC20 for IERC20;\n\n    IUniswapV2Router02 public immutable router;\n    address public immutable matic;\n    address public immutable link;\n    address public immutable receiver;\n\n    IUniswapV2Pair public immutable maticLinkPair;\n\n    event Swapped(uint256[] amounts, address receiver);\n\n    constructor(\n        address quickswapRouter,\n        address _matic,\n        address _link,\n        address _receiver\n    ) {\n        require(quickswapRouter != address(0), \"Invalid QuickSwap factory address\");\n        require(_matic != address(0), \"Invalid Matic token address\");\n        require(_link != address(0), \"Invalid LINK token address\");\n        require(_receiver != address(0), \"Invalid receiver address\");\n        router = IUniswapV2Router02(quickswapRouter);\n        matic = _matic;\n        link = _link;\n        receiver = _receiver;\n\n        IUniswapV2Factory factory = IUniswapV2Factory(IUniswapV2Router02(quickswapRouter).factory());\n        maticLinkPair = IUniswapV2Pair(factory.getPair(_link, _matic));\n    }\n\n    function swapToLink() external {\n        address[] memory path = new address[](2);\n        path[0] = matic;\n        path[1] = link;\n        uint256[] memory amounts = router.swapExactETHForTokens{value: address(this).balance}(\n            0,\n            path,\n            receiver,\n            // solhint-disable-next-line\n            block.timestamp\n        );\n\n        emit Swapped(amounts, receiver);\n    }\n\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    // solhint-disable-next-line\n    receive() external payable {}\n}\n"
    },
    "contracts/polygon/mocks/FundingTokenMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @notice mock to simulate ERC20 funding tokens\n * @author Eric Nordelo\n */\ncontract FundingTokenMock is ERC20 {\n    constructor() ERC20(\"FundingToken\", \"pFT\") {\n        _mint(msg.sender, 10000000000 * 10**decimals());\n    }\n}\n"
    },
    "contracts/perpetual_futures/PoolInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"./PerpetualPoolLite.sol\";\nimport \"./library/SafeMath.sol\";\nimport \"../polygon/Interfaces.sol\";\n\ncontract PoolInfo is Initializable {\n    using SafeMath for int256;\n\n    int256 private constant ONE = 10**18;\n    address public immutable poolAddress;\n\n    constructor(address _poolAddress) {\n        poolAddress = _poolAddress;\n    }\n\n    function getProtocolParameters()\n        external\n        view\n        returns (\n            int256 minPoolMarginRatio,\n            int256 minInitialMarginRatio,\n            int256 minMaintenanceMarginRatio,\n            int256 minLiquidationReward,\n            int256 maxLiquidationReward,\n            int256 liquidationCutRatio,\n            int256 protocolFeeCollectRatio\n        )\n    {\n        return PerpetualPoolLite(poolAddress).getParameters();\n    }\n\n    function getProtocolAddresses()\n        external\n        view\n        returns (\n            address bTokenAddress,\n            address lTokenAddress,\n            address pTokenAddress,\n            address liquidatorQualifierAddress,\n            address protocolFeeCollector,\n            address underlyingAddress,\n            address protocolAddress\n        )\n    {\n        return PerpetualPoolLite(poolAddress).getAddresses();\n    }\n\n    function getLiquidity() external view returns (int256) {\n        return PerpetualPoolLite(poolAddress).getLiquidity();\n    }\n\n    function getLastUpdateBlock() external view returns (uint256) {\n        return PerpetualPoolLite(poolAddress).getLastUpdateBlock();\n    }\n\n    function getFeeAccrued() external view returns (int256) {\n        return PerpetualPoolLite(poolAddress).getProtocolFeeAccrued();\n    }\n\n    function getTraderPortfolio(address account)\n        public\n        view\n        returns (IPTokenLite.Position memory position, int256 margin)\n    {\n        return PerpetualPoolLite(poolAddress).getTraderPortfolio(account);\n    }\n\n    function getTraderMarginRatio(address account) external view returns (int256) {\n        (IPTokenLite.Position memory position, int256 margin) = getTraderPortfolio(account);\n\n        (int256 price, int256 multiplier) = PerpetualPoolLite(poolAddress).getSymbolPriceAndMultiplier();\n\n        int256 totalDynamicEquity = margin;\n        int256 totalAbsCost;\n        if (position.volume != 0) {\n            int256 cost = (((position.volume * price) / ONE) * multiplier) / ONE;\n            totalDynamicEquity += cost - position.cost;\n            totalAbsCost += cost.abs();\n        }\n        return totalAbsCost == 0 ? type(int256).max : (totalDynamicEquity * ONE) / totalAbsCost;\n    }\n}\n"
    },
    "contracts/perpetual_futures/library/DecimalMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport {SafeMath} from \"./SafeMath.sol\";    \n\n/**\n * @title DecimalMath\n * @author Deri Protocol\n *\n * @notice Functions for fixed point number with 18 decimals\n */\nlibrary DecimalMath {\n    using SafeMath for uint256;\n\n    uint256 internal constant ONE = 10**18;\n\n    function mul(uint256 target, uint256 d) internal pure returns (uint256) {\n        return (target * d) / ONE;\n    }\n\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\n        return (target * d).divCeil(ONE);\n    }\n\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\n        return (target * ONE) / d;\n    }\n\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\n        return (target * ONE).divCeil(d);\n    }\n}\n"
    },
    "contracts/perpetual_futures/SymbolOracleOffChain.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../polygon/governance/FuturesProtocolParameters.sol\";\nimport \"../polygon/Interfaces.sol\";\n\ncontract SymbolOracleOffChain is IOracleWithUpdate, Initializable {\n    address public immutable signatory;\n    FuturesProtocolParameters private _protocolParameters;\n\n    uint256 public timestamp;\n    uint256 public price;\n\n    address private _deployer;\n\n    constructor(address signatory_) {\n        signatory = signatory_;\n        _deployer = msg.sender;\n    }\n\n    function initialize(address protocolParameters_) external initializer {\n        require(msg.sender == _deployer, \"Only deployer can initialize\");\n        _protocolParameters = FuturesProtocolParameters(protocolParameters_);\n    }\n\n    function getPrice() external view override returns (uint256) {\n        // solhint-disable-next-line\n        require(block.timestamp - timestamp <= _protocolParameters.oracleDelay(), \"Price expired\");\n        return price;\n    }\n\n    // update oracle price using off chain signed price\n    // the signature must be verified in order for the price to be updated\n    function updatePrice(\n        address address_,\n        uint256 timestamp_,\n        uint256 price_,\n        uint8 v_,\n        bytes32 r_,\n        bytes32 s_\n    ) external override {\n        uint256 lastTimestamp = timestamp;\n        if (timestamp_ > lastTimestamp) {\n            if (v_ == 27 || v_ == 28) {\n                bytes32 message = keccak256(abi.encodePacked(address_, timestamp_, price_));\n                bytes32 hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", message));\n                address signer = ecrecover(hash, v_, r_, s_);\n                if (signer == signatory) {\n                    timestamp = timestamp_;\n                    price = price_;\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/perpetual_futures/mocks/BTokenMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract BTokenMock is ERC20 {\n    // solhint-disable-next-line\n    constructor() ERC20(\"Privi B Token Mock\", \"pBTM\") {\n        _mint(msg.sender, 10000000000 * 10**decimals());\n    }\n}\n"
    },
    "contracts/ethereum/mocks/NFTMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract NFTMock is ERC721 {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIdCounter;\n\n    // solhint-disable-next-line\n    constructor() ERC721(\"MyToken\", \"MTK\") {}\n\n    function safeMint(address to) public {\n        _tokenIdCounter.increment();\n        _safeMint(to, _tokenIdCounter.current());\n    }\n}\n"
    },
    "contracts/polygon/governance/Governance.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/governance/Governor.sol\";\r\nimport \"@openzeppelin/contracts/governance/extensions/GovernorProposalThreshold.sol\";\r\nimport \"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\";\r\nimport \"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\";\r\nimport \"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\";\r\nimport \"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\";\r\n\r\ncontract Governance is\r\n    Governor,\r\n    GovernorProposalThreshold,\r\n    GovernorCountingSimple,\r\n    GovernorVotes,\r\n    GovernorVotesQuorumFraction,\r\n    GovernorTimelockControl\r\n{\r\n    constructor(ERC20Votes _token, TimelockController _timelock)\r\n        Governor(\"Governance\")\r\n        GovernorVotes(_token)\r\n        GovernorVotesQuorumFraction(4)\r\n        GovernorTimelockControl(_timelock)\r\n    {} // solhint-disable-line\r\n\r\n    function votingDelay() public pure override returns (uint256) {\r\n        return 1; // 1 block\r\n    }\r\n\r\n    function votingPeriod() public pure override returns (uint256) {\r\n        return 45818; // 1 week\r\n    }\r\n\r\n    function proposalThreshold() public pure override returns (uint256) {\r\n        return 5e18;\r\n    }\r\n    \r\n    // The following functions are overrides required by Solidity.\r\n\r\n    function quorum(uint256 blockNumber)\r\n        public\r\n        view\r\n        override(IGovernor, GovernorVotesQuorumFraction)\r\n        returns (uint256)\r\n    {\r\n        return super.quorum(blockNumber);\r\n    }\r\n\r\n    function getVotes(address account, uint256 blockNumber)\r\n        public\r\n        view\r\n        override(IGovernor, GovernorVotes)\r\n        returns (uint256)\r\n    {\r\n        return super.getVotes(account, blockNumber);\r\n    }\r\n\r\n    function state(uint256 proposalId)\r\n        public\r\n        view\r\n        override(Governor, GovernorTimelockControl)\r\n        returns (ProposalState)\r\n    {\r\n        return super.state(proposalId);\r\n    }\r\n\r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    ) public override(Governor, GovernorProposalThreshold, IGovernor) returns (uint256) {\r\n        return super.propose(targets, values, calldatas, description);\r\n    }\r\n\r\n    function _execute(\r\n        uint256 proposalId,\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        bytes32 descriptionHash\r\n    ) internal override(Governor, GovernorTimelockControl) {\r\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\r\n    }\r\n\r\n    function _cancel(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory calldatas,\r\n        bytes32 descriptionHash\r\n    ) internal override(Governor, GovernorTimelockControl) returns (uint256) {\r\n        return super._cancel(targets, values, calldatas, descriptionHash);\r\n    }\r\n\r\n    function _executor() internal view override(Governor, GovernorTimelockControl) returns (address) {\r\n        return super._executor();\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(Governor, GovernorTimelockControl)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorProposalThreshold.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\n\n/**\n * @dev Extension of {Governor} for proposal restriction to token holders with a minimum balance.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorProposalThreshold is Governor {\n    /**\n     * @dev See {IGovernor-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        require(\n            getVotes(msg.sender, block.number - 1) >= proposalThreshold(),\n            \"GovernorCompatibilityBravo: proposer votes below proposal threshold\"\n        );\n\n        return super.propose(targets, values, calldatas, description);\n    }\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_.\n     */\n    function proposalThreshold() public view virtual returns (uint256);\n}\n"
    },
    "contracts/polygon/governance/TimelockController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/governance/TimelockController.sol\";\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}