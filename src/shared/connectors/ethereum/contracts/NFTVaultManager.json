{
  "address": "0x9ceab70d66DB541fe67917f4ff8A49e5D5107fd2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validatorOracleAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenFrom",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenTo",
          "type": "uint256"
        }
      ],
      "name": "ChangeApproveRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenFrom",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenTo",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "response",
          "type": "bool"
        }
      ],
      "name": "ChangeResponseReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "UnlockRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "WithdrawResponseReceived",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_ORACLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenFrom_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenTo_",
          "type": "uint256"
        }
      ],
      "name": "change",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "changeNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "isTokenInVault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isInVault",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "lockNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingChanges",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenTo",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingWithdraws",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenFrom_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenTo_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "changeable_",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "requestId_",
          "type": "bytes32"
        }
      ],
      "name": "processChangeResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId_",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "processUnlockResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenFrom_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenTo_",
          "type": "uint256"
        }
      ],
      "name": "requestChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "requestUnlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorOracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5849160869a159585be3560ba933c560227c2ac4bad6b6a2a632bdbdb3d8e9bb",
  "receipt": {
    "to": null,
    "from": "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
    "contractAddress": "0x9ceab70d66DB541fe67917f4ff8A49e5D5107fd2",
    "transactionIndex": 30,
    "gasUsed": "1359792",
    "logsBloom": "0x
    "blockHash": "0x188672e908ddd1c71b2609628599d7e9d31b2f33ff3e4952236dc65758e0ede1",
    "transactionHash": "0x5849160869a159585be3560ba933c560227c2ac4bad6b6a2a632bdbdb3d8e9bb",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 9545146,
        "transactionHash": "0x5849160869a159585be3560ba933c560227c2ac4bad6b6a2a632bdbdb3d8e9bb",
        "address": "0x9ceab70d66DB541fe67917f4ff8A49e5D5107fd2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x747c8a75243ae2ca1d188aaaeab610daf9d97e45b6513baed451ebf0b9ec74fd",
          "0x0000000000000000000000006d30f73f4d56e21bd6ee89efa1b958f404794340",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0x188672e908ddd1c71b2609628599d7e9d31b2f33ff3e4952236dc65758e0ede1"
      }
    ],
    "blockNumber": 9545146,
    "cumulativeGasUsed": "19245945",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6d30F73f4D56e21BD6eE89EFa1b958F404794340"
  ],
  "solcInputHash": "694fee723780e93b6046aa9e779b9f27",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorOracleAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenTo\",\"type\":\"uint256\"}],\"name\":\"ChangeApproveRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"}],\"name\":\"ChangeResponseReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"UnlockRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"WithdrawResponseReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_ORACLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenFrom_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTo_\",\"type\":\"uint256\"}],\"name\":\"change\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"changeNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"isTokenInVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isInVault\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"lockNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingChanges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingWithdraws\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenFrom_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTo_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"changeable_\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"requestId_\",\"type\":\"bytes32\"}],\"name\":\"processChangeResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"processUnlockResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenFrom_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTo_\",\"type\":\"uint256\"}],\"name\":\"requestChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"requestUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"priviprotocol\",\"events\":{\"ChangeApproveRequested(bytes32,address,uint256,uint256)\":{\"details\":\"emitted when owner of a locked token request a change\",\"params\":{\"collection\":\"the address of the nft collection\",\"requestId\":\"the Chainlink oracle request id from the validator oracle\",\"tokenFrom\":\"the id of the nft token to change (from)\",\"tokenTo\":\"the id of the nft token to change (to)\"}},\"ChangeResponseReceived(bytes32,address,uint256,uint256,bool)\":{\"details\":\"emitted when the Chainlink oracle response for a change is received\",\"params\":{\"collection\":\"the address of the nft collection\",\"requestId\":\"the Chainlink oracle request id from the validator oracle (to match)\",\"response\":\"wheter the tokens are changeable or not\",\"tokenFrom\":\"the id of the nft token to change (from)\",\"tokenTo\":\"the id of the nft token to change (to)\"}},\"UnlockRequested(bytes32,address,uint256)\":{\"details\":\"emitted when owner of a locked token request a unlock\",\"params\":{\"collection\":\"the address of the nft collection\",\"requestId\":\"the Chainlink oracle request id from the validator oracle\",\"tokenId\":\"the id of the nft token to unlock\"}},\"WithdrawResponseReceived(bytes32,address,uint256,address)\":{\"details\":\"emitted when the Chainlink oracle response for unlocking is received\",\"params\":{\"collection\":\"the address of the nft collection\",\"newOwner\":\"the address of the owner allowed to withdraw (if 0 assume is not withdrawable)\",\"requestId\":\"the Chainlink oracle request id from the validator oracle (to match)\",\"tokenId\":\"the id of the nft token to unlock\"}}},\"kind\":\"dev\",\"methods\":{\"change(address,uint256,uint256)\":{\"params\":{\"collection_\":\"the address of the nft collection\",\"tokenFrom_\":\"the nft token id to change (from)\",\"tokenTo_\":\"the nft token id to change (to)\"}},\"constructor\":{\"params\":{\"validatorOracleAddress_\":\"the address of the validator oracle (Chainlink client)\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isTokenInVault(address,uint256)\":{\"params\":{\"collection_\":\"the address of the nft collection\",\"tokenId_\":\"the nft token id\"},\"returns\":{\"isInVault\":\"where the token is in vault or not\"}},\"lockNFT(address,uint256)\":{\"params\":{\"collection_\":\"the address of the nft collection\",\"tokenId_\":\"the nft token id\"}},\"processChangeResponse(address,uint256,uint256,address,bool,bytes32)\":{\"details\":\"processes the oracle response for change requests\",\"params\":{\"changeable_\":\"the response, wheter is changeable or not\",\"collection_\":\"the address of the nft collection\",\"owner_\":\"the owner of the nfts\",\"requestId_\":\"the id of the Chainlink request\",\"tokenFrom_\":\"the nft token id to change (from)\",\"tokenTo_\":\"the nft token id to change (to)\"}},\"processUnlockResponse(bytes32,address,uint256,address)\":{\"details\":\"processes the oracle response for unlock requests\",\"params\":{\"collection_\":\"the address of the nft collection\",\"newOwner_\":\"the new owner (if 0, token is not withdrawable)\",\"requestId_\":\"the id of the Chainlink request\",\"tokenId_\":\"the nft token id\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"requestChange(address,uint256,uint256)\":{\"params\":{\"collection_\":\"the address of the nft collection\",\"tokenFrom_\":\"the nft token id to change (from)\",\"tokenTo_\":\"the nft token id to change (to)\"}},\"requestUnlock(address,uint256)\":{\"params\":{\"collection_\":\"the address of the nft collection\",\"tokenId_\":\"the nft token id\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdraw(address,uint256)\":{\"params\":{\"collection_\":\"the address of the nft collection\",\"tokenId_\":\"the nft token id to withdraw\"}}},\"stateVariables\":{\"_holdings\":{\"details\":\"map to check if a holder has a token registered over an approved collection  COLLECTION_CONTRACT_ADDRESS => NFT_ID => HOLDER_ACCOUNT_ADDRESS OR ZERO_ADDRESS\"}},\"title\":\"the Vault where nfts are locked\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"change(address,uint256,uint256)\":{\"notice\":\"allows to change tokens after a succesfull verification process\"},\"changeNonces(address,uint256)\":{\"notice\":\"nonces to count the changes of an original collection token id      in order to avoid double change (with the second one keeping the synthetic playing)\"},\"isTokenInVault(address,uint256)\":{\"notice\":\"check if the vault holds a token\"},\"lockNFT(address,uint256)\":{\"notice\":\"call this method to lock an NFT in the vault (add it to the protocol)\"},\"nonces(address,uint256)\":{\"notice\":\"the nonces allow to check if a token is safely withdrawable (avoid double verifying)         a user could try to withdraw a non registered token if nonces dont exist\"},\"pendingChanges(address,uint256)\":{\"notice\":\"tokens in this map can be directly swapped\"},\"pendingWithdraws(address,uint256)\":{\"notice\":\"tokens in this map can be retrieved by the owner (address returned)\"},\"requestChange(address,uint256,uint256)\":{\"notice\":\"allows owners of locked tokens to request changes,         validates through the validator oracle\"},\"requestUnlock(address,uint256)\":{\"notice\":\"allows owners of locked tokens to request unlocking,         validates the availability through the validator oracle\"},\"validatorOracleAddress()\":{\"notice\":\"the address of the validator oracle\"},\"withdraw(address,uint256)\":{\"notice\":\"allows withdrawing a token after a successful verification process\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethereum/NFTVaultManager.sol\":\"NFTVaultManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { CBORChainlink } from \\\"./vendor/CBORChainlink.sol\\\";\\nimport { BufferChainlink } from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  )\\n    internal\\n    pure\\n    returns (\\n      Chainlink.Request memory\\n    )\\n  {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(\\n    Request memory self,\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n  {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x12e1313c62b0dae9684b7ca52f0a05be3ddef6926f5a714ec723ef9587b08222\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport { ENSResolver as ENSResolver_Chainlink } from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\ncontract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 constant internal LINK_DIVISIBILITY = 10**18;\\n  uint256 constant private AMOUNT_OVERRIDE = 0;\\n  address constant private SENDER_OVERRIDE = address(0);\\n  uint256 constant private ORACLE_ARGS_VERSION = 1;\\n  uint256 constant private OPERATOR_ARGS_VERSION = 2;\\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private ens;\\n  bytes32 private ensNode;\\n  LinkTokenInterface private link;\\n  OperatorInterface private oracle;\\n  uint256 private requestCount = 1;\\n  mapping(bytes32 => address) private pendingRequests;\\n\\n  event ChainlinkRequested(\\n    bytes32 indexed id\\n  );\\n  event ChainlinkFulfilled(\\n    bytes32 indexed id\\n  );\\n  event ChainlinkCancelled(\\n    bytes32 indexed id\\n  );\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddress The callback address that the response will be sent to\\n   * @param callbackFunctionSignature The callback function signature to use for the callback address\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddress,\\n    bytes4 callbackFunctionSignature\\n  )\\n    internal\\n    pure\\n    returns (\\n      Chainlink.Request memory\\n    )\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddress, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return sendChainlinkRequestTo(address(oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    return rawRequest(oracleAddress, req, payment, ORACLE_ARGS_VERSION, oracle.oracleRequest.selector);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `requestOracleDataFrom` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function requestOracleData(\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return requestOracleDataFrom(address(oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function requestOracleDataFrom(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    return rawRequest(oracleAddress, req, payment, OPERATOR_ARGS_VERSION, oracle.requestOracleData.selector);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @param argsVersion The version of data support (single word, multi word)\\n   * @return requestId The request ID\\n   */\\n  function rawRequest(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment,\\n    uint256 argsVersion,\\n    bytes4 funcSelector\\n  )\\n    private\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    requestId = keccak256(abi.encodePacked(this, requestCount));\\n    req.nonce = requestCount;\\n    pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    bytes memory encodedData = abi.encodeWithSelector(\\n      funcSelector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackAddress,\\n      req.callbackFunctionId,\\n      req.nonce,\\n      argsVersion,\\n      req.buf.buf);\\n    require(link.transferAndCall(oracleAddress, payment, encodedData), \\\"unable to transferAndCall to oracle\\\");\\n    requestCount += 1;\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  )\\n    internal\\n  {\\n    OperatorInterface requested = OperatorInterface(pendingRequests[requestId]);\\n    delete pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(\\n    address oracleAddress\\n  )\\n    internal\\n  {\\n    oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(\\n    address linkAddress\\n  )\\n    internal\\n  {\\n    link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() \\n    internal\\n  {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress()\\n    internal\\n    view\\n    returns (\\n      address\\n    )\\n  {\\n    return address(link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress()\\n    internal\\n    view\\n    returns (\\n      address\\n    )\\n  {\\n    return address(oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(\\n    address oracleAddress,\\n    bytes32 requestId\\n  )\\n    internal\\n    notPendingRequest(requestId)\\n  {\\n    pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(\\n    address ensAddress,\\n    bytes32 node\\n  )\\n    internal\\n  {\\n    ens = ENSInterface(ensAddress);\\n    ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS()\\n    internal\\n  {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(\\n    bytes32 requestId\\n  )\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n    // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(\\n    bytes32 requestId\\n  )\\n  {\\n    require(msg.sender == pendingRequests[requestId],\\n            \\\"Source must be the oracle of the request\\\");\\n    delete pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(\\n    bytes32 requestId\\n  )\\n  {\\n    require(pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x15f8b423b9a4417b916e076b77ce59bcaeee8947807b3efca9e0e864888afddf\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(\\n    bytes32 indexed node,\\n    bytes32 indexed label,\\n    address owner\\n  );\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(\\n    bytes32 indexed node,\\n    address owner\\n  );\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(\\n    bytes32 indexed node,\\n    address resolver\\n  );\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(\\n    bytes32 indexed node,\\n    uint64 ttl\\n  );\\n\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(\\n    bytes32 node,\\n    address resolver\\n  ) external;\\n\\n  function setOwner(\\n    bytes32 node,\\n    address owner\\n  ) external;\\n\\n  function setTTL(\\n    bytes32 node,\\n    uint64 ttl\\n  ) external;\\n\\n  function owner(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n\\n  function resolver(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n\\n  function ttl(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      uint64\\n    );\\n\\n}\\n\",\"keccak256\":\"0xd8545d2e73f7aa517543d97e1763d95c11ddd52a5050cf1933047c9f22f10b5a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n\\n  function requestOracleData(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  )\\n    external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool\\n    );\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function distributeFunds(\\n    address payable[] calldata receivers,\\n    uint[] calldata amounts\\n  )\\n    external\\n    payable;\\n\\n  function getAuthorizedSenders()\\n    external\\n    returns (\\n      address[] memory\\n    );\\n\\n  function setAuthorizedSenders(\\n    address[] calldata senders\\n  ) external;\\n\\n  function getForwarder()\\n    external\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0x71dcc45bae7384cfb47c74de767a7ec56df21e165468610b2abf2bb02ca0c352\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  )\\n    external\\n    returns (\\n      bool\\n    );\\n\\n  function isAuthorizedSender(\\n    address node\\n  )\\n    external\\n    view\\n    returns (\\n      bool\\n    );\\n\\n  function withdraw(\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  function withdrawable()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n}\\n\",\"keccak256\":\"0x55fb2c156150379d285ab89081ff5add6f37343d7992bd2ec1485a2652af94d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  \\n  function getAddress()\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0xc3d897e7c93b02e53f21b40accd4a0bd5c38f9780a4f74a7109b70fbfde03b40\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for writing to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary BufferChainlink {\\n  /**\\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n  *      a capacity. The capacity may be longer than the current value, in\\n  *      which case it can be extended without the need to allocate more memory.\\n  */\\n  struct buffer {\\n    bytes buf;\\n    uint capacity;\\n  }\\n\\n  /**\\n  * @dev Initializes a buffer with an initial capacity.\\n  * @param buf The buffer to initialize.\\n  * @param capacity The number of bytes of space to allocate the buffer.\\n  * @return The buffer, for chaining.\\n  */\\n  function init(\\n    buffer memory buf,\\n    uint capacity\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Initializes a new buffer from an existing bytes object.\\n  *      Changes to the buffer may mutate the original value.\\n  * @param b The bytes object to initialize the buffer with.\\n  * @return A new buffer.\\n  */\\n  function fromBytes(\\n    bytes memory b\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(\\n    buffer memory buf,\\n    uint capacity\\n  )\\n    private\\n    pure\\n  {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(\\n    uint a,\\n    uint b\\n  )\\n    private\\n    pure\\n    returns(\\n      uint\\n    )\\n  {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n  * @dev Sets buffer length to 0.\\n  * @param buf The buffer to truncate.\\n  * @return The original buffer, for chaining..\\n  */\\n  function truncate(\\n    buffer memory buf\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The start offset to write to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(\\n    buffer memory buf,\\n    uint off,\\n    bytes memory data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint dest;\\n    uint src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint mask = (256 ** (32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write the byte at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint off,\\n    uint8 data\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendUint8(\\n    buffer memory buf,\\n    uint8 data\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n  *      exceed the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (left-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(\\n    buffer memory buf,\\n    uint off,\\n    bytes32 data,\\n    uint len\\n  )\\n    private\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint mask = (256 ** len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint off,\\n    bytes20 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chhaining.\\n  */\\n  function appendBytes20(\\n    buffer memory buf,\\n    bytes20 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendBytes32(\\n    buffer memory buf,\\n    bytes32 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (right-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeInt(\\n    buffer memory buf,\\n    uint off,\\n    uint data,\\n    uint len\\n  )\\n    private\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = (256 ** len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n    * exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer.\\n    */\\n  function appendInt(\\n    buffer memory buf,\\n    uint data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0xc110af8d5a44b3bfbc5cdb1cbfc78b472346703c13c5e5288aa4e980a6b94519\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.19;\\n\\nimport { BufferChainlink } from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeType(\\n    BufferChainlink.buffer memory buf,\\n    uint8 major,\\n    uint value\\n  )\\n    private\\n    pure\\n  {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if(value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if(value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if(value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else if(value <= 0xFFFFFFFFFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(\\n    BufferChainlink.buffer memory buf,\\n    uint8 major\\n  )\\n    private\\n    pure\\n  {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(\\n    BufferChainlink.buffer memory buf,\\n    uint value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_INT, value);\\n  }\\n\\n  function encodeInt(\\n    BufferChainlink.buffer memory buf,\\n    int value\\n  )\\n    internal\\n    pure\\n  {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else if(value >= 0) {\\n      encodeType(buf, MAJOR_TYPE_INT, uint(value));\\n    } else {\\n      encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\\n    }\\n  }\\n\\n  function encodeBytes(\\n    BufferChainlink.buffer memory buf,\\n    bytes memory value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_BYTES, value.length);\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(\\n    BufferChainlink.buffer memory buf,\\n    int value\\n  )\\n    internal\\n    pure\\n  {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint(value)));\\n  }\\n\\n  function encodeSignedBigNum(\\n    BufferChainlink.buffer memory buf,\\n    int input\\n  )\\n    internal\\n    pure\\n  {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint(-1 - input)));\\n  }\\n\\n  function encodeString(\\n    BufferChainlink.buffer memory buf,\\n    string memory value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0xe7c6e4290ac2a41a138e6bd89d89a2779f66847a5ee6fb5a6f2a3386e5ce589d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(\\n    bytes32 node\\n  )\\n    public\\n    view\\n    virtual\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0xeed48a6a522c400f024f8725ad931833205cb63cc87285b46c5c0e88ca090352\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ethereum/NFTVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"./chainlink/ETHValidatorOracle.sol\\\";\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title the Vault where nfts are locked\\r\\n * @author priviprotocol\\r\\n */\\r\\ncontract NFTVaultManager is AccessControl {\\r\\n    bytes32 public constant VALIDATOR_ORACLE = keccak256(\\\"VALIDATOR_ORACLE\\\");\\r\\n\\r\\n    /**\\r\\n     * @dev map to check if a holder has a token registered over an approved collection\\r\\n     *\\r\\n     *  COLLECTION_CONTRACT_ADDRESS => NFT_ID => HOLDER_ACCOUNT_ADDRESS OR ZERO_ADDRESS\\r\\n     */\\r\\n    mapping(address => mapping(uint256 => address)) private _holdings;\\r\\n\\r\\n    /**\\r\\n     * @notice the nonces allow to check if a token is safely withdrawable (avoid double verifying)\\r\\n     *         a user could try to withdraw a non registered token if nonces dont exist\\r\\n     */\\r\\n    mapping(address => mapping(uint256 => uint256)) public nonces;\\r\\n\\r\\n    /**\\r\\n     * @notice nonces to count the changes of an original collection token id\\r\\n     *      in order to avoid double change (with the second one keeping the synthetic playing)\\r\\n     */\\r\\n    mapping(address => mapping(uint256 => uint256)) public changeNonces;\\r\\n\\r\\n    /// @notice tokens in this map can be retrieved by the owner (address returned)\\r\\n    mapping(address => mapping(uint256 => address)) public pendingWithdraws;\\r\\n\\r\\n    /// @notice tokens in this map can be directly swapped\\r\\n    mapping(address => mapping(uint256 => PendingChange)) public pendingChanges;\\r\\n\\r\\n    /// @notice the address of the validator oracle\\r\\n    address public validatorOracleAddress;\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when owner of a locked token request a unlock\\r\\n     * @param requestId the Chainlink oracle request id from the validator oracle\\r\\n     * @param collection the address of the nft collection\\r\\n     * @param tokenId the id of the nft token to unlock\\r\\n     */\\r\\n    event UnlockRequested(bytes32 indexed requestId, address collection, uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when the Chainlink oracle response for unlocking is received\\r\\n     * @param requestId the Chainlink oracle request id from the validator oracle (to match)\\r\\n     * @param collection the address of the nft collection\\r\\n     * @param tokenId the id of the nft token to unlock\\r\\n     * @param newOwner the address of the owner allowed to withdraw (if 0 assume is not withdrawable)\\r\\n     */\\r\\n    event WithdrawResponseReceived(\\r\\n        bytes32 indexed requestId,\\r\\n        address collection,\\r\\n        uint256 tokenId,\\r\\n        address newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when owner of a locked token request a change\\r\\n     * @param requestId the Chainlink oracle request id from the validator oracle\\r\\n     * @param collection the address of the nft collection\\r\\n     * @param tokenFrom the id of the nft token to change (from)\\r\\n     * @param tokenTo the id of the nft token to change (to)\\r\\n     */\\r\\n    event ChangeApproveRequested(\\r\\n        bytes32 indexed requestId,\\r\\n        address collection,\\r\\n        uint256 tokenFrom,\\r\\n        uint256 tokenTo\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when the Chainlink oracle response for a change is received\\r\\n     * @param requestId the Chainlink oracle request id from the validator oracle (to match)\\r\\n     * @param collection the address of the nft collection\\r\\n     * @param tokenFrom the id of the nft token to change (from)\\r\\n     * @param tokenTo the id of the nft token to change (to)\\r\\n     * @param response wheter the tokens are changeable or not\\r\\n     */\\r\\n    event ChangeResponseReceived(\\r\\n        bytes32 indexed requestId,\\r\\n        address collection,\\r\\n        uint256 tokenFrom,\\r\\n        uint256 tokenTo,\\r\\n        bool response\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @param validatorOracleAddress_ the address of the validator oracle (Chainlink client)\\r\\n     */\\r\\n    constructor(address validatorOracleAddress_) {\\r\\n        validatorOracleAddress = validatorOracleAddress_;\\r\\n\\r\\n        // set the role to fulfill requests\\r\\n        _setupRole(VALIDATOR_ORACLE, validatorOracleAddress_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice call this method to lock an NFT in the vault (add it to the protocol)\\r\\n     * @param collection_ the address of the nft collection\\r\\n     * @param tokenId_ the nft token id\\r\\n     */\\r\\n    function lockNFT(address collection_, uint256 tokenId_) external {\\r\\n        require(_holdings[collection_][tokenId_] == address(0), \\\"Token already locked\\\");\\r\\n\\r\\n        // get the token\\r\\n        IERC721(collection_).transferFrom(msg.sender, address(this), tokenId_);\\r\\n\\r\\n        // the sender must be the collection contract\\r\\n        _holdings[collection_][tokenId_] = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows owners of locked tokens to request unlocking,\\r\\n     *         validates the availability through the validator oracle\\r\\n     *\\r\\n     * @param collection_ the address of the nft collection\\r\\n     * @param tokenId_ the nft token id\\r\\n     */\\r\\n    function requestUnlock(address collection_, uint256 tokenId_) external {\\r\\n        require(_holdings[collection_][tokenId_] != address(0), \\\"Token not locked\\\");\\r\\n        require(pendingWithdraws[collection_][tokenId_] == address(0), \\\"Already withdrawable\\\");\\r\\n\\r\\n        bytes32 requestId = ETHValidatorOracle(validatorOracleAddress).verifyTokenIsWithdrawable(\\r\\n            collection_,\\r\\n            tokenId_,\\r\\n            nonces[collection_][tokenId_]\\r\\n        );\\r\\n\\r\\n        emit UnlockRequested(requestId, collection_, tokenId_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev processes the oracle response for unlock requests\\r\\n     * @param requestId_ the id of the Chainlink request\\r\\n     * @param collection_ the address of the nft collection\\r\\n     * @param tokenId_ the nft token id\\r\\n     * @param newOwner_ the new owner (if 0, token is not withdrawable)\\r\\n     */\\r\\n    function processUnlockResponse(\\r\\n        bytes32 requestId_,\\r\\n        address collection_,\\r\\n        uint256 tokenId_,\\r\\n        address newOwner_\\r\\n    ) external onlyRole(VALIDATOR_ORACLE) {\\r\\n        // this condition is necessary to avoid double check and unlocking an nft that was already withdrawed\\r\\n        // because of race condition among oracle request and fulfillment responses\\r\\n        if (_holdings[collection_][tokenId_] != address(0)) {\\r\\n            if (newOwner_ != address(0)) {\\r\\n                pendingWithdraws[collection_][tokenId_] = newOwner_;\\r\\n            }\\r\\n\\r\\n            emit WithdrawResponseReceived(requestId_, collection_, tokenId_, newOwner_);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows owners of locked tokens to request changes,\\r\\n     *         validates through the validator oracle\\r\\n     *\\r\\n     * @param collection_ the address of the nft collection\\r\\n     * @param tokenFrom_ the nft token id to change (from)\\r\\n     * @param tokenTo_ the nft token id to change (to)\\r\\n     */\\r\\n    function requestChange(\\r\\n        address collection_,\\r\\n        uint256 tokenFrom_,\\r\\n        uint256 tokenTo_\\r\\n    ) external {\\r\\n        require(_holdings[collection_][tokenFrom_] != address(0), \\\"Token not locked\\\");\\r\\n        require(_holdings[collection_][tokenTo_] == address(0), \\\"Token already locked\\\");\\r\\n        require(pendingWithdraws[collection_][tokenFrom_] == address(0), \\\"Withdrawable token\\\");\\r\\n        require(pendingChanges[collection_][tokenFrom_].tokenTo == 0, \\\"Change already approved\\\");\\r\\n\\r\\n        bytes32 requestId = ETHValidatorOracle(validatorOracleAddress).verifyTokenIsChangeable(\\r\\n            collection_,\\r\\n            tokenFrom_,\\r\\n            tokenTo_,\\r\\n            msg.sender,\\r\\n            changeNonces[collection_][tokenFrom_]\\r\\n        );\\r\\n\\r\\n        emit ChangeApproveRequested(requestId, collection_, tokenFrom_, tokenTo_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev processes the oracle response for change requests\\r\\n     * @param collection_ the address of the nft collection\\r\\n     * @param tokenFrom_ the nft token id to change (from)\\r\\n     * @param tokenTo_ the nft token id to change (to)\\r\\n     * @param owner_ the owner of the nfts\\r\\n     * @param changeable_ the response, wheter is changeable or not\\r\\n     * @param requestId_ the id of the Chainlink request\\r\\n     */\\r\\n    function processChangeResponse(\\r\\n        address collection_,\\r\\n        uint256 tokenFrom_,\\r\\n        uint256 tokenTo_,\\r\\n        address owner_,\\r\\n        bool changeable_,\\r\\n        bytes32 requestId_\\r\\n    ) external onlyRole(VALIDATOR_ORACLE) {\\r\\n        // this condition is necessary to avoid double check and unlocking an nft that was already changed\\r\\n        // because of race condition among oracle request and fulfillment responses\\r\\n        if (\\r\\n            _holdings[collection_][tokenFrom_] != address(0) && _holdings[collection_][tokenTo_] == address(0)\\r\\n        ) {\\r\\n            if (changeable_) {\\r\\n                pendingChanges[collection_][tokenFrom_] = PendingChange({owner: owner_, tokenTo: tokenTo_});\\r\\n            }\\r\\n\\r\\n            emit ChangeResponseReceived(requestId_, collection_, tokenFrom_, tokenTo_, changeable_);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice check if the vault holds a token\\r\\n     * @param collection_ the address of the nft collection\\r\\n     * @param tokenId_ the nft token id\\r\\n     * @return isInVault where the token is in vault or not\\r\\n     */\\r\\n    function isTokenInVault(address collection_, uint256 tokenId_) external view returns (bool isInVault) {\\r\\n        address previousOwner = _holdings[collection_][tokenId_];\\r\\n        return previousOwner != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows to change tokens after a succesfull verification process\\r\\n     * @param collection_ the address of the nft collection\\r\\n     * @param tokenFrom_ the nft token id to change (from)\\r\\n     * @param tokenTo_ the nft token id to change (to)\\r\\n     */\\r\\n    function change(\\r\\n        address collection_,\\r\\n        uint256 tokenFrom_,\\r\\n        uint256 tokenTo_\\r\\n    ) external {\\r\\n        PendingChange memory pendingChange = pendingChanges[collection_][tokenFrom_];\\r\\n        require(pendingChange.tokenTo == tokenTo_, \\\"Non approved change\\\");\\r\\n        require(pendingChange.owner == msg.sender, \\\"Only owner can change\\\");\\r\\n\\r\\n        // release the space\\r\\n        delete _holdings[collection_][tokenFrom_];\\r\\n        delete pendingChanges[collection_][tokenFrom_];\\r\\n\\r\\n        _holdings[collection_][tokenTo_] = pendingChange.owner;\\r\\n\\r\\n        // increment the nonce\\r\\n        changeNonces[collection_][tokenFrom_] += 1;\\r\\n\\r\\n        // transfer the tokens\\r\\n        IERC721(collection_).transferFrom(msg.sender, address(this), tokenTo_);\\r\\n        IERC721(collection_).transferFrom(address(this), msg.sender, tokenFrom_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows withdrawing a token after a successful verification process\\r\\n     * @param collection_ the address of the nft collection\\r\\n     * @param tokenId_ the nft token id to withdraw\\r\\n     */\\r\\n    function withdraw(address collection_, uint256 tokenId_) external {\\r\\n        require(pendingWithdraws[collection_][tokenId_] == msg.sender, \\\"Non approved withdraw\\\");\\r\\n\\r\\n        // remove pending withdrawal\\r\\n        delete pendingWithdraws[collection_][tokenId_];\\r\\n\\r\\n        // release the space\\r\\n        delete _holdings[collection_][tokenId_];\\r\\n\\r\\n        // increment the nonce\\r\\n        nonces[collection_][tokenId_] += 1;\\r\\n\\r\\n        // transfer the token\\r\\n        IERC721(collection_).transferFrom(address(this), msg.sender, tokenId_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9a4d8bc374af2e1da779a9085e300c5b2b0dce123192b0bd94549950e65976bc\",\"license\":\"MIT\"},\"contracts/ethereum/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct PendingChange {\\n    address owner;\\n    uint256 tokenTo;\\n}\\n\",\"keccak256\":\"0x588d06392138c79c42bcba72cb914c5c337b4908dd0284479f474fa2af9c13eb\",\"license\":\"MIT\"},\"contracts/ethereum/chainlink/ETHValidatorOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../../libraries/Stringify.sol\\\";\\r\\nimport \\\"../NFTVaultManager.sol\\\";\\r\\nimport \\\"./OracleStructs.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Validator Oracle for withdraws and changes\\r\\n * @author priviprotocol\\r\\n * @notice use Chainlink API Get request to check if a locked\\r\\n *         token is withdrawable or if two locked token are\\r\\n *         interchangeable\\r\\n */\\r\\ncontract ETHValidatorOracle is ChainlinkClient, Ownable, Initializable {\\r\\n    using Stringify for uint256;\\r\\n    using Stringify for address;\\r\\n    using Stringify for string;\\r\\n\\r\\n    /// @notice the Chainlink node oracle address\\r\\n    address public immutable chainlinkNode;\\r\\n\\r\\n    /// @notice the job id for GET -> uint256\\r\\n    bytes32 public immutable jobId;\\r\\n\\r\\n    /// @notice the job id for GET -> bool\\r\\n    bytes32 public immutable booleanJobId;\\r\\n\\r\\n    /// @notice the node fee required by the Chainlink node\\r\\n    uint256 public immutable nodeFee;\\r\\n\\r\\n    /// @notice the API url to check withdrawable status\\r\\n    string public apiURLForWithdraws;\\r\\n\\r\\n    /// @notice the API url to check changeable status\\r\\n    string public apiURLForChanges;\\r\\n\\r\\n    /// @notice the address of the LINK token\\r\\n    address public linkToken;\\r\\n\\r\\n    /// @notice the address the vault contract\\r\\n    address public vaultManagerAddress;\\r\\n\\r\\n    mapping(bytes32 => VerifyRequest) private _verifyRequests;\\r\\n    mapping(bytes32 => ChangeRequest) private _changeRequests;\\r\\n\\r\\n    /**\\r\\n     * @dev initialize the Chainlink client params\\r\\n     * @param oracleInfo_ the struct with the oracle specifications\\r\\n     */\\r\\n    constructor(APIOracleInfo memory oracleInfo_) {\\r\\n        chainlinkNode = oracleInfo_.chainlinkNode;\\r\\n        nodeFee = oracleInfo_.nodeFee;\\r\\n\\r\\n        // use the library to make the convertion\\r\\n        jobId = oracleInfo_.jobId.toBytes32();\\r\\n        booleanJobId = oracleInfo_.booleanJobId.toBytes32();\\r\\n\\r\\n        apiURLForWithdraws = \\\"https://nft-validator-hwk7x.ondigitalocean.app/iswithdrawable\\\";\\r\\n        apiURLForChanges = \\\"https://nft-validator-hwk7x.ondigitalocean.app/ischangeable\\\";\\r\\n\\r\\n        linkToken = oracleInfo_.linkToken;\\r\\n        setChainlinkToken(oracleInfo_.linkToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev ensures that only the vault contract can request for verifications\\r\\n     */\\r\\n    modifier onlyVault() {\\r\\n        require(vaultManagerAddress == msg.sender, \\\"Only vault can request verifications\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev only owner can initialize, and the ownership is removed after that\\r\\n     * @param vault_ the address of the vault contract\\r\\n     */\\r\\n    function initialize(address vault_) external initializer onlyOwner {\\r\\n        vaultManagerAddress = vault_;\\r\\n        renounceOwnership();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev call to verify if a token is withdrawble in the synthetic collection,\\r\\n     *      this method can be called only from the nft vault contract\\r\\n     *\\r\\n     * @param collection_ the address of the nft collection\\r\\n     * @param tokenId_ the id of the nft in the collection\\r\\n     * @param nonce_ the nonce {see: NFTVaultManager}\\r\\n     * @return requestId the id of the request to the Chainlink oracle\\r\\n     */\\r\\n    function verifyTokenIsWithdrawable(\\r\\n        address collection_,\\r\\n        uint256 tokenId_,\\r\\n        uint256 nonce_\\r\\n    ) external onlyVault returns (bytes32 requestId) {\\r\\n        Chainlink.Request memory request = buildChainlinkRequest(\\r\\n            jobId,\\r\\n            address(this),\\r\\n            this.processResponse.selector\\r\\n        );\\r\\n\\r\\n        // set the request params\\r\\n        Chainlink.add(\\r\\n            request,\\r\\n            \\\"get\\\",\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    apiURLForWithdraws,\\r\\n                    \\\"?collection=0x\\\",\\r\\n                    collection_.toString(),\\r\\n                    \\\"&tokenId=\\\",\\r\\n                    tokenId_.toString(),\\r\\n                    \\\"&nonce=\\\",\\r\\n                    nonce_.toString()\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        Chainlink.add(request, \\\"path\\\", \\\"withdrawable_by\\\");\\r\\n\\r\\n        // send the request\\r\\n        requestId = sendChainlinkRequestTo(chainlinkNode, request, nodeFee);\\r\\n\\r\\n        // save the request params\\r\\n        _verifyRequests[requestId] = VerifyRequest({tokenId: tokenId_, collection: collection_});\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev call to verify if a token is changable in the synthetic collection,\\r\\n     *      this method can be called only from the nft vault contract\\r\\n     *\\r\\n     * @param collection_ the address of the nft collection\\r\\n     * @param tokenFrom_ the id of the nft in the collection to change from\\r\\n     * @param tokenTo_ the id of the nft in the collection to change to\\r\\n     * @param caller_ the caller\\r\\n     * @param nonce_ the nonce {see: NFTVaultManager}\\r\\n     * @return requestId the id of the request to the Chainlink oracle\\r\\n     */\\r\\n    function verifyTokenIsChangeable(\\r\\n        address collection_,\\r\\n        uint256 tokenFrom_,\\r\\n        uint256 tokenTo_,\\r\\n        address caller_,\\r\\n        uint256 nonce_\\r\\n    ) external onlyVault returns (bytes32 requestId) {\\r\\n        Chainlink.Request memory request = buildChainlinkRequest(\\r\\n            booleanJobId,\\r\\n            address(this),\\r\\n            this.processResponseForChange.selector\\r\\n        );\\r\\n\\r\\n        // set the request params\\r\\n        Chainlink.add(\\r\\n            request,\\r\\n            \\\"get\\\",\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    apiURLForChanges,\\r\\n                    \\\"?collection=0x\\\",\\r\\n                    collection_.toString(),\\r\\n                    \\\"&tokenFrom=\\\",\\r\\n                    tokenFrom_.toString(),\\r\\n                    \\\"&tokenTo=\\\",\\r\\n                    tokenTo_.toString(),\\r\\n                    \\\"&caller=0x\\\",\\r\\n                    caller_.toString(),\\r\\n                    \\\"&nonce=\\\",\\r\\n                    nonce_.toString()\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        Chainlink.add(request, \\\"path\\\", \\\"is_changeable\\\");\\r\\n\\r\\n        // send the request\\r\\n        requestId = sendChainlinkRequestTo(chainlinkNode, request, nodeFee);\\r\\n\\r\\n        // save the request\\r\\n        _changeRequests[requestId] = ChangeRequest({\\r\\n            tokenFrom: tokenFrom_,\\r\\n            collection: collection_,\\r\\n            tokenTo: tokenTo_,\\r\\n            caller: caller_\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function to process the oracle response (only callable from oracle)\\r\\n     * @param requestId_ the id of the request to the Chainlink oracle\\r\\n     * @param newOwner_ the address who can retrieve the nft (if 0 assumes is not withdrawable)\\r\\n     */\\r\\n    function processResponse(bytes32 requestId_, uint256 newOwner_)\\r\\n        public\\r\\n        recordChainlinkFulfillment(requestId_)\\r\\n    {\\r\\n        VerifyRequest memory requestData = _verifyRequests[requestId_];\\r\\n        address newOwner = address(uint160(newOwner_));\\r\\n\\r\\n        // only call the synthetic collection contract if is locked\\r\\n        NFTVaultManager(vaultManagerAddress).processUnlockResponse(\\r\\n            requestId_,\\r\\n            requestData.collection,\\r\\n            requestData.tokenId,\\r\\n            newOwner\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function to process the oracle response (only callable from oracle)\\r\\n     * @param requestId_ the id of the request to the Chainlink oracle\\r\\n     * @param changeable_ the response telling us if this tokens are changeable\\r\\n     */\\r\\n    function processResponseForChange(bytes32 requestId_, bool changeable_)\\r\\n        public\\r\\n        recordChainlinkFulfillment(requestId_)\\r\\n    {\\r\\n        ChangeRequest memory requestData = _changeRequests[requestId_];\\r\\n\\r\\n        NFTVaultManager(vaultManagerAddress).processChangeResponse(\\r\\n            requestData.collection,\\r\\n            requestData.tokenFrom,\\r\\n            requestData.tokenTo,\\r\\n            requestData.caller,\\r\\n            changeable_,\\r\\n            requestId_\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbf866daa8c870456083f240ed3c7084ba47496309eb2ca77ff11177f4108e7f7\",\"license\":\"MIT\"},\"contracts/ethereum/chainlink/OracleStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct APIOracleInfo {\\n    address linkToken;\\n    address chainlinkNode;\\n    string jobId;\\n    string booleanJobId;\\n    uint256 nodeFee;\\n}\\n\\nstruct VerifyRequest {\\n    address collection;\\n    uint256 tokenId;\\n}\\n\\nstruct ChangeRequest {\\n    address collection;\\n    uint256 tokenFrom;\\n    uint256 tokenTo;\\n    address caller;\\n}\\n\",\"keccak256\":\"0x5cf1e04cf56c3e3ea4bd82d375d1f7bb15e10f7f0130a5821144491e8c14f96b\",\"license\":\"MIT\"},\"contracts/libraries/Stringify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\n/**\\n * @title library for string parsing to and from\\n * @author priviprotocol\\n */\\nlibrary Stringify {\\n    /**\\n     * @dev converts a uint256 to string\\n     * @param i_ the uint256 to convert\\n     * @return uintAsString the string representation of the input\\n     */\\n    function toString(uint256 i_) internal pure returns (string memory uintAsString) {\\n        // match 0 case\\n        if (i_ == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 len;\\n        uint256 j = i_;\\n\\n        // count the uint256 input length\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n\\n        // creates a byte string of size length of i_\\n        bytes memory bstr = new bytes(len);\\n\\n        uint256 k = len;\\n\\n        while (i_ != 0) {\\n            k = k - 1;\\n\\n            // get the ASCII representation of the current last digit\\n            uint8 temp = (48 + uint8(i_ - (i_ / 10) * 10));\\n\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n\\n            i_ /= 10;\\n        }\\n\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @dev converts an address to string\\n     * @param x_ the address to convert\\n     * @return addressAsString the string representation of the input\\n     */\\n    function toString(address x_) internal pure returns (string memory addressAsString) {\\n        bytes memory s = new bytes(40);\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint256(uint160(x_)) / (2**(8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n\\n        return string(s);\\n    }\\n\\n    /**\\n     * @dev converts a byte to char (byte representation)\\n     * @param b_ the byte to convert\\n     * @return c the char representation of the input\\n     */\\n    function char(bytes1 b_) internal pure returns (bytes1 c) {\\n        if (uint8(b_) < 10) return bytes1(uint8(b_) + 0x30);\\n        else return bytes1(uint8(b_) + 0x57);\\n    }\\n\\n    /**\\n     * @dev converts a string to bytes32\\n     * @param source_ the string to convert\\n     * @return stringAsBytes32 the bytes32 representation of the input\\n     */\\n    function toBytes32(string memory source_) internal pure returns (bytes32 stringAsBytes32) {\\n        bytes memory tempEmptyStringTest = bytes(source_);\\n\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            stringAsBytes32 := mload(add(source_, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8956332df86e6f0890932ab9b930e1f0254eeeca539a8762d04dd5930e0f77a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200182138038062001821833981016040819052620000349162000132565b600680546001600160a01b0319166001600160a01b0383161790556200007b7f747c8a75243ae2ca1d188aaaeab610daf9d97e45b6513baed451ebf0b9ec74fd8262000082565b5062000162565b6200008e828262000092565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200008e576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000ee3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006020828403121562000144578081fd5b81516001600160a01b03811681146200015b578182fd5b9392505050565b6116af80620001726000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806380769e98116100b8578063abacac251161007c578063abacac2514610311578063b8bb8c7314610338578063d0e009651461034b578063d547741f146103a8578063de207035146103bb578063f3fef3a3146103ce57600080fd5b806380769e98146102a557806391d14854146102d0578063a217fddf146102e3578063a9112140146102eb578063a9aadece146102fe57600080fd5b80633a404917116100ff5780633a404917146101d0578063428e173e146101e3578063502e1a161461021b5780635802c89e146102465780637223d1da1461029257600080fd5b806301ffc9a71461013c578063248a9ca3146101645780632f2ff15d1461019557806331f5a8b6146101aa57806336568abe146101bd575b600080fd5b61014f61014a3660046114f1565b6103e1565b60405190151581526020015b60405180910390f35b610187610172366004611451565b60009081526020819052604090206001015490565b60405190815260200161015b565b6101a86101a3366004611481565b610418565b005b6101a86101b83660046114ac565b610443565b6101a86101cb366004611481565b610537565b6101a86101de366004611390565b6105ba565b61014f6101f1366004611390565b6001600160a01b039182166000908152600160209081526040808320938352929052205416151590565b610187610229366004611390565b600260209081526000928352604080842090915290825290205481565b61027a610254366004611390565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b03909116815260200161015b565b60065461027a906001600160a01b031681565b6101876102b3366004611390565b600360209081526000928352604080842090915290825290205481565b61014f6102de366004611481565b6106bb565b610187600081565b6101a86102f93660046113b9565b6106e4565b6101a861030c3660046113b9565b610917565b6101877f747c8a75243ae2ca1d188aaaeab610daf9d97e45b6513baed451ebf0b9ec74fd81565b6101a86103463660046113eb565b610bce565b610389610359366004611390565b6005602090815260009283526040808420909152908252902080546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520161015b565b6101a86103b6366004611481565b610d0b565b6101a86103c9366004611390565b610d31565b6101a86103dc366004611390565b610ef6565b60006001600160e01b03198216637965db0b60e01b148061041257506301ffc9a760e01b6001600160e01b03198316145b92915050565b600082815260208190526040902060010154610434813361103e565b61043e83836110a2565b505050565b7f747c8a75243ae2ca1d188aaaeab610daf9d97e45b6513baed451ebf0b9ec74fd61046e813361103e565b6001600160a01b0384811660009081526001602090815260408083208784529091529020541615610530576001600160a01b038216156104e2576001600160a01b038481166000908152600460209081526040808320878452909152902080546001600160a01b0319169184169190911790555b604080516001600160a01b03868116825260208201869052841681830152905186917f2cdf40344d878a961ef279e6fbcaa42b3afa8a4359eada285c09d799a9f5e591919081900360600190a25b5050505050565b6001600160a01b03811633146105ac5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6105b68282611126565b5050565b6001600160a01b03828116600090815260016020908152604080832085845290915290205416156106245760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b1bd8dad95960621b60448201526064016105a3565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd906106549033903090869060040161158e565b600060405180830381600087803b15801561066e57600080fd5b505af1158015610682573d6000803e3d6000fd5b5050506001600160a01b0390921660009081526001602090815260408083209383529290522080546001600160a01b0319163317905550565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0380841660009081526005602090815260408083208684528252918290208251808401909352805490931682526001909201549181018290529082146107695760405162461bcd60e51b81526020600482015260136024820152724e6f6e20617070726f766564206368616e676560681b60448201526064016105a3565b80516001600160a01b031633146107ba5760405162461bcd60e51b81526020600482015260156024820152744f6e6c79206f776e65722063616e206368616e676560581b60448201526064016105a3565b6001600160a01b03808516600081815260016020818152604080842089855280835281852080546001600160a01b0319908116909155868652600584528286208b87528452828620805482168155850186905588518a8752918452828620805492909816911617909555928252600383528382208783529092529182208054919290916108489084906115e5565b90915550506040516323b872dd60e01b81526001600160a01b038516906323b872dd9061087d9033903090879060040161158e565b600060405180830381600087803b15801561089757600080fd5b505af11580156108ab573d6000803e3d6000fd5b50506040516323b872dd60e01b81526001600160a01b03871692506323b872dd91506108df9030903390889060040161158e565b600060405180830381600087803b1580156108f957600080fd5b505af115801561090d573d6000803e3d6000fd5b5050505050505050565b6001600160a01b0383811660009081526001602090815260408083208684529091529020541661097c5760405162461bcd60e51b815260206004820152601060248201526f151bdad95b881b9bdd081b1bd8dad95960821b60448201526064016105a3565b6001600160a01b03838116600090815260016020908152604080832085845290915290205416156109e65760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b1bd8dad95960621b60448201526064016105a3565b6001600160a01b0383811660009081526004602090815260408083208684529091529020541615610a4e5760405162461bcd60e51b81526020600482015260126024820152712bb4ba34323930bbb0b13632903a37b5b2b760711b60448201526064016105a3565b6001600160a01b038316600090815260056020908152604080832085845290915290206001015415610ac25760405162461bcd60e51b815260206004820152601760248201527f4368616e676520616c726561647920617070726f76656400000000000000000060448201526064016105a3565b6006546001600160a01b038481166000818152600360209081526040808320888452909152808220549051630ffb29ed60e01b8152600481019390935260248301879052604483018690523360648401526084830152929190911690630ffb29ed9060a401602060405180830381600087803b158015610b4157600080fd5b505af1158015610b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b799190611469565b604080516001600160a01b03871681526020810186905290810184905290915081907f1d90362ea7fb87044aa174135a335410d86bcb7d72c5d75678b1aa04ebbd72f09060600160405180910390a250505050565b7f747c8a75243ae2ca1d188aaaeab610daf9d97e45b6513baed451ebf0b9ec74fd610bf9813361103e565b6001600160a01b0387811660009081526001602090815260408083208a84529091529020541615801590610c5057506001600160a01b03878116600090815260016020908152604080832089845290915290205416155b15610d02578215610cad576040805180820182526001600160a01b03868116825260208083018981528b83166000908152600583528581208c8252909252939020915182546001600160a01b031916911617815590516001909101555b604080516001600160a01b038916815260208101889052908101869052831515606082015282907f9cc08b652558ad0d32a05868cb6dc740e61e5c99ea201addb9ec107dfbc036aa9060800160405180910390a25b50505050505050565b600082815260208190526040902060010154610d27813361103e565b61043e8383611126565b6001600160a01b03828116600090815260016020908152604080832085845290915290205416610d965760405162461bcd60e51b815260206004820152601060248201526f151bdad95b881b9bdd081b1bd8dad95960821b60448201526064016105a3565b6001600160a01b0382811660009081526004602090815260408083208584529091529020541615610e005760405162461bcd60e51b8152602060048201526014602482015273416c726561647920776974686472617761626c6560601b60448201526064016105a3565b6006546001600160a01b038381166000818152600260209081526040808320878452909152808220549051630c85284b60e01b81526004810193909352602483018690526044830152929190911690630c85284b90606401602060405180830381600087803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa9190611469565b604080516001600160a01b03861681526020810185905291925082917ffc72bbe2858daa3c5e979a90386125316b9034f6644459cc5cc1cb2299b70896910160405180910390a2505050565b6001600160a01b038281166000908152600460209081526040808320858452909152902054163314610f625760405162461bcd60e51b81526020600482015260156024820152744e6f6e20617070726f76656420776974686472617760581b60448201526064016105a3565b6001600160a01b0382166000818152600460209081526040808320858452825280832080546001600160a01b03199081169091558484526001808452828520878652845282852080549092169091559383526002825280832085845290915281208054909190610fd39084906115e5565b90915550506040516323b872dd60e01b81526001600160a01b038316906323b872dd906110089030903390869060040161158e565b600060405180830381600087803b15801561102257600080fd5b505af1158015611036573d6000803e3d6000fd5b505050505050565b61104882826106bb565b6105b657611060816001600160a01b0316601461118b565b61106b83602061118b565b60405160200161107c929190611519565b60408051601f198184030181529082905262461bcd60e51b82526105a3916004016115b2565b6110ac82826106bb565b6105b6576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556110e23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61113082826106bb565b156105b6576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060600061119a8360026115fd565b6111a59060026115e5565b67ffffffffffffffff8111156111cb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156111f5576020820181803683370190505b509050600360fc1b8160008151811061121e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061125b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061127f8460026115fd565b61128a9060016115e5565b90505b600181111561131e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106112cc57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106112f057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936113178161164c565b905061128d565b50831561136d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105a3565b9392505050565b80356001600160a01b038116811461138b57600080fd5b919050565b600080604083850312156113a2578182fd5b6113ab83611374565b946020939093013593505050565b6000806000606084860312156113cd578081fd5b6113d684611374565b95602085013595506040909401359392505050565b60008060008060008060c08789031215611403578182fd5b61140c87611374565b9550602087013594506040870135935061142860608801611374565b92506080870135801515811461143c578283fd5b8092505060a087013590509295509295509295565b600060208284031215611462578081fd5b5035919050565b60006020828403121561147a578081fd5b5051919050565b60008060408385031215611493578182fd5b823591506114a360208401611374565b90509250929050565b600080600080608085870312156114c1578384fd5b843593506114d160208601611374565b9250604085013591506114e660608601611374565b905092959194509250565b600060208284031215611502578081fd5b81356001600160e01b03198116811461136d578182fd5b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161155181601785016020880161161c565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161158281602884016020880161161c565b01602801949350505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208152600082518060208401526115d181604085016020870161161c565b601f01601f19169190910160400192915050565b600082198211156115f8576115f8611663565b500190565b600081600019048311821515161561161757611617611663565b500290565b60005b8381101561163757818101518382015260200161161f565b83811115611646576000848401525b50505050565b60008161165b5761165b611663565b506000190190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205c2330a39f9687b9193d5e0208ed880344d23729edb7d1f765fda274fac7b1c264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806380769e98116100b8578063abacac251161007c578063abacac2514610311578063b8bb8c7314610338578063d0e009651461034b578063d547741f146103a8578063de207035146103bb578063f3fef3a3146103ce57600080fd5b806380769e98146102a557806391d14854146102d0578063a217fddf146102e3578063a9112140146102eb578063a9aadece146102fe57600080fd5b80633a404917116100ff5780633a404917146101d0578063428e173e146101e3578063502e1a161461021b5780635802c89e146102465780637223d1da1461029257600080fd5b806301ffc9a71461013c578063248a9ca3146101645780632f2ff15d1461019557806331f5a8b6146101aa57806336568abe146101bd575b600080fd5b61014f61014a3660046114f1565b6103e1565b60405190151581526020015b60405180910390f35b610187610172366004611451565b60009081526020819052604090206001015490565b60405190815260200161015b565b6101a86101a3366004611481565b610418565b005b6101a86101b83660046114ac565b610443565b6101a86101cb366004611481565b610537565b6101a86101de366004611390565b6105ba565b61014f6101f1366004611390565b6001600160a01b039182166000908152600160209081526040808320938352929052205416151590565b610187610229366004611390565b600260209081526000928352604080842090915290825290205481565b61027a610254366004611390565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b03909116815260200161015b565b60065461027a906001600160a01b031681565b6101876102b3366004611390565b600360209081526000928352604080842090915290825290205481565b61014f6102de366004611481565b6106bb565b610187600081565b6101a86102f93660046113b9565b6106e4565b6101a861030c3660046113b9565b610917565b6101877f747c8a75243ae2ca1d188aaaeab610daf9d97e45b6513baed451ebf0b9ec74fd81565b6101a86103463660046113eb565b610bce565b610389610359366004611390565b6005602090815260009283526040808420909152908252902080546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520161015b565b6101a86103b6366004611481565b610d0b565b6101a86103c9366004611390565b610d31565b6101a86103dc366004611390565b610ef6565b60006001600160e01b03198216637965db0b60e01b148061041257506301ffc9a760e01b6001600160e01b03198316145b92915050565b600082815260208190526040902060010154610434813361103e565b61043e83836110a2565b505050565b7f747c8a75243ae2ca1d188aaaeab610daf9d97e45b6513baed451ebf0b9ec74fd61046e813361103e565b6001600160a01b0384811660009081526001602090815260408083208784529091529020541615610530576001600160a01b038216156104e2576001600160a01b038481166000908152600460209081526040808320878452909152902080546001600160a01b0319169184169190911790555b604080516001600160a01b03868116825260208201869052841681830152905186917f2cdf40344d878a961ef279e6fbcaa42b3afa8a4359eada285c09d799a9f5e591919081900360600190a25b5050505050565b6001600160a01b03811633146105ac5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6105b68282611126565b5050565b6001600160a01b03828116600090815260016020908152604080832085845290915290205416156106245760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b1bd8dad95960621b60448201526064016105a3565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd906106549033903090869060040161158e565b600060405180830381600087803b15801561066e57600080fd5b505af1158015610682573d6000803e3d6000fd5b5050506001600160a01b0390921660009081526001602090815260408083209383529290522080546001600160a01b0319163317905550565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0380841660009081526005602090815260408083208684528252918290208251808401909352805490931682526001909201549181018290529082146107695760405162461bcd60e51b81526020600482015260136024820152724e6f6e20617070726f766564206368616e676560681b60448201526064016105a3565b80516001600160a01b031633146107ba5760405162461bcd60e51b81526020600482015260156024820152744f6e6c79206f776e65722063616e206368616e676560581b60448201526064016105a3565b6001600160a01b03808516600081815260016020818152604080842089855280835281852080546001600160a01b0319908116909155868652600584528286208b87528452828620805482168155850186905588518a8752918452828620805492909816911617909555928252600383528382208783529092529182208054919290916108489084906115e5565b90915550506040516323b872dd60e01b81526001600160a01b038516906323b872dd9061087d9033903090879060040161158e565b600060405180830381600087803b15801561089757600080fd5b505af11580156108ab573d6000803e3d6000fd5b50506040516323b872dd60e01b81526001600160a01b03871692506323b872dd91506108df9030903390889060040161158e565b600060405180830381600087803b1580156108f957600080fd5b505af115801561090d573d6000803e3d6000fd5b5050505050505050565b6001600160a01b0383811660009081526001602090815260408083208684529091529020541661097c5760405162461bcd60e51b815260206004820152601060248201526f151bdad95b881b9bdd081b1bd8dad95960821b60448201526064016105a3565b6001600160a01b03838116600090815260016020908152604080832085845290915290205416156109e65760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b1bd8dad95960621b60448201526064016105a3565b6001600160a01b0383811660009081526004602090815260408083208684529091529020541615610a4e5760405162461bcd60e51b81526020600482015260126024820152712bb4ba34323930bbb0b13632903a37b5b2b760711b60448201526064016105a3565b6001600160a01b038316600090815260056020908152604080832085845290915290206001015415610ac25760405162461bcd60e51b815260206004820152601760248201527f4368616e676520616c726561647920617070726f76656400000000000000000060448201526064016105a3565b6006546001600160a01b038481166000818152600360209081526040808320888452909152808220549051630ffb29ed60e01b8152600481019390935260248301879052604483018690523360648401526084830152929190911690630ffb29ed9060a401602060405180830381600087803b158015610b4157600080fd5b505af1158015610b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b799190611469565b604080516001600160a01b03871681526020810186905290810184905290915081907f1d90362ea7fb87044aa174135a335410d86bcb7d72c5d75678b1aa04ebbd72f09060600160405180910390a250505050565b7f747c8a75243ae2ca1d188aaaeab610daf9d97e45b6513baed451ebf0b9ec74fd610bf9813361103e565b6001600160a01b0387811660009081526001602090815260408083208a84529091529020541615801590610c5057506001600160a01b03878116600090815260016020908152604080832089845290915290205416155b15610d02578215610cad576040805180820182526001600160a01b03868116825260208083018981528b83166000908152600583528581208c8252909252939020915182546001600160a01b031916911617815590516001909101555b604080516001600160a01b038916815260208101889052908101869052831515606082015282907f9cc08b652558ad0d32a05868cb6dc740e61e5c99ea201addb9ec107dfbc036aa9060800160405180910390a25b50505050505050565b600082815260208190526040902060010154610d27813361103e565b61043e8383611126565b6001600160a01b03828116600090815260016020908152604080832085845290915290205416610d965760405162461bcd60e51b815260206004820152601060248201526f151bdad95b881b9bdd081b1bd8dad95960821b60448201526064016105a3565b6001600160a01b0382811660009081526004602090815260408083208584529091529020541615610e005760405162461bcd60e51b8152602060048201526014602482015273416c726561647920776974686472617761626c6560601b60448201526064016105a3565b6006546001600160a01b038381166000818152600260209081526040808320878452909152808220549051630c85284b60e01b81526004810193909352602483018690526044830152929190911690630c85284b90606401602060405180830381600087803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa9190611469565b604080516001600160a01b03861681526020810185905291925082917ffc72bbe2858daa3c5e979a90386125316b9034f6644459cc5cc1cb2299b70896910160405180910390a2505050565b6001600160a01b038281166000908152600460209081526040808320858452909152902054163314610f625760405162461bcd60e51b81526020600482015260156024820152744e6f6e20617070726f76656420776974686472617760581b60448201526064016105a3565b6001600160a01b0382166000818152600460209081526040808320858452825280832080546001600160a01b03199081169091558484526001808452828520878652845282852080549092169091559383526002825280832085845290915281208054909190610fd39084906115e5565b90915550506040516323b872dd60e01b81526001600160a01b038316906323b872dd906110089030903390869060040161158e565b600060405180830381600087803b15801561102257600080fd5b505af1158015611036573d6000803e3d6000fd5b505050505050565b61104882826106bb565b6105b657611060816001600160a01b0316601461118b565b61106b83602061118b565b60405160200161107c929190611519565b60408051601f198184030181529082905262461bcd60e51b82526105a3916004016115b2565b6110ac82826106bb565b6105b6576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556110e23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61113082826106bb565b156105b6576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060600061119a8360026115fd565b6111a59060026115e5565b67ffffffffffffffff8111156111cb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156111f5576020820181803683370190505b509050600360fc1b8160008151811061121e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061125b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061127f8460026115fd565b61128a9060016115e5565b90505b600181111561131e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106112cc57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106112f057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936113178161164c565b905061128d565b50831561136d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105a3565b9392505050565b80356001600160a01b038116811461138b57600080fd5b919050565b600080604083850312156113a2578182fd5b6113ab83611374565b946020939093013593505050565b6000806000606084860312156113cd578081fd5b6113d684611374565b95602085013595506040909401359392505050565b60008060008060008060c08789031215611403578182fd5b61140c87611374565b9550602087013594506040870135935061142860608801611374565b92506080870135801515811461143c578283fd5b8092505060a087013590509295509295509295565b600060208284031215611462578081fd5b5035919050565b60006020828403121561147a578081fd5b5051919050565b60008060408385031215611493578182fd5b823591506114a360208401611374565b90509250929050565b600080600080608085870312156114c1578384fd5b843593506114d160208601611374565b9250604085013591506114e660608601611374565b905092959194509250565b600060208284031215611502578081fd5b81356001600160e01b03198116811461136d578182fd5b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161155181601785016020880161161c565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161158281602884016020880161161c565b01602801949350505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208152600082518060208401526115d181604085016020870161161c565b601f01601f19169190910160400192915050565b600082198211156115f8576115f8611663565b500190565b600081600019048311821515161561161757611617611663565b500290565b60005b8381101561163757818101518382015260200161161f565b83811115611646576000848401525b50505050565b60008161165b5761165b611663565b506000190190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205c2330a39f9687b9193d5e0208ed880344d23729edb7d1f765fda274fac7b1c264736f6c63430008040033",
  "devdoc": {
    "author": "priviprotocol",
    "events": {
      "ChangeApproveRequested(bytes32,address,uint256,uint256)": {
        "details": "emitted when owner of a locked token request a change",
        "params": {
          "collection": "the address of the nft collection",
          "requestId": "the Chainlink oracle request id from the validator oracle",
          "tokenFrom": "the id of the nft token to change (from)",
          "tokenTo": "the id of the nft token to change (to)"
        }
      },
      "ChangeResponseReceived(bytes32,address,uint256,uint256,bool)": {
        "details": "emitted when the Chainlink oracle response for a change is received",
        "params": {
          "collection": "the address of the nft collection",
          "requestId": "the Chainlink oracle request id from the validator oracle (to match)",
          "response": "wheter the tokens are changeable or not",
          "tokenFrom": "the id of the nft token to change (from)",
          "tokenTo": "the id of the nft token to change (to)"
        }
      },
      "UnlockRequested(bytes32,address,uint256)": {
        "details": "emitted when owner of a locked token request a unlock",
        "params": {
          "collection": "the address of the nft collection",
          "requestId": "the Chainlink oracle request id from the validator oracle",
          "tokenId": "the id of the nft token to unlock"
        }
      },
      "WithdrawResponseReceived(bytes32,address,uint256,address)": {
        "details": "emitted when the Chainlink oracle response for unlocking is received",
        "params": {
          "collection": "the address of the nft collection",
          "newOwner": "the address of the owner allowed to withdraw (if 0 assume is not withdrawable)",
          "requestId": "the Chainlink oracle request id from the validator oracle (to match)",
          "tokenId": "the id of the nft token to unlock"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "change(address,uint256,uint256)": {
        "params": {
          "collection_": "the address of the nft collection",
          "tokenFrom_": "the nft token id to change (from)",
          "tokenTo_": "the nft token id to change (to)"
        }
      },
      "constructor": {
        "params": {
          "validatorOracleAddress_": "the address of the validator oracle (Chainlink client)"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isTokenInVault(address,uint256)": {
        "params": {
          "collection_": "the address of the nft collection",
          "tokenId_": "the nft token id"
        },
        "returns": {
          "isInVault": "where the token is in vault or not"
        }
      },
      "lockNFT(address,uint256)": {
        "params": {
          "collection_": "the address of the nft collection",
          "tokenId_": "the nft token id"
        }
      },
      "processChangeResponse(address,uint256,uint256,address,bool,bytes32)": {
        "details": "processes the oracle response for change requests",
        "params": {
          "changeable_": "the response, wheter is changeable or not",
          "collection_": "the address of the nft collection",
          "owner_": "the owner of the nfts",
          "requestId_": "the id of the Chainlink request",
          "tokenFrom_": "the nft token id to change (from)",
          "tokenTo_": "the nft token id to change (to)"
        }
      },
      "processUnlockResponse(bytes32,address,uint256,address)": {
        "details": "processes the oracle response for unlock requests",
        "params": {
          "collection_": "the address of the nft collection",
          "newOwner_": "the new owner (if 0, token is not withdrawable)",
          "requestId_": "the id of the Chainlink request",
          "tokenId_": "the nft token id"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "requestChange(address,uint256,uint256)": {
        "params": {
          "collection_": "the address of the nft collection",
          "tokenFrom_": "the nft token id to change (from)",
          "tokenTo_": "the nft token id to change (to)"
        }
      },
      "requestUnlock(address,uint256)": {
        "params": {
          "collection_": "the address of the nft collection",
          "tokenId_": "the nft token id"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdraw(address,uint256)": {
        "params": {
          "collection_": "the address of the nft collection",
          "tokenId_": "the nft token id to withdraw"
        }
      }
    },
    "stateVariables": {
      "_holdings": {
        "details": "map to check if a holder has a token registered over an approved collection  COLLECTION_CONTRACT_ADDRESS => NFT_ID => HOLDER_ACCOUNT_ADDRESS OR ZERO_ADDRESS"
      }
    },
    "title": "the Vault where nfts are locked",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "change(address,uint256,uint256)": {
        "notice": "allows to change tokens after a succesfull verification process"
      },
      "changeNonces(address,uint256)": {
        "notice": "nonces to count the changes of an original collection token id      in order to avoid double change (with the second one keeping the synthetic playing)"
      },
      "isTokenInVault(address,uint256)": {
        "notice": "check if the vault holds a token"
      },
      "lockNFT(address,uint256)": {
        "notice": "call this method to lock an NFT in the vault (add it to the protocol)"
      },
      "nonces(address,uint256)": {
        "notice": "the nonces allow to check if a token is safely withdrawable (avoid double verifying)         a user could try to withdraw a non registered token if nonces dont exist"
      },
      "pendingChanges(address,uint256)": {
        "notice": "tokens in this map can be directly swapped"
      },
      "pendingWithdraws(address,uint256)": {
        "notice": "tokens in this map can be retrieved by the owner (address returned)"
      },
      "requestChange(address,uint256,uint256)": {
        "notice": "allows owners of locked tokens to request changes,         validates through the validator oracle"
      },
      "requestUnlock(address,uint256)": {
        "notice": "allows owners of locked tokens to request unlocking,         validates the availability through the validator oracle"
      },
      "validatorOracleAddress()": {
        "notice": "the address of the validator oracle"
      },
      "withdraw(address,uint256)": {
        "notice": "allows withdrawing a token after a successful verification process"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3872,
        "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3867_storage)"
      },
      {
        "astId": 12382,
        "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
        "label": "_holdings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 12389,
        "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 12396,
        "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
        "label": "changeNonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 12403,
        "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
        "label": "pendingWithdraws",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 12411,
        "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
        "label": "pendingChanges",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(PendingChange)12967_storage))"
      },
      {
        "astId": 12414,
        "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
        "label": "validatorOracleAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(PendingChange)12967_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct PendingChange))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(PendingChange)12967_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3867_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3867_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(PendingChange)12967_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PendingChange)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingChange)12967_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PendingChange)12967_storage": {
        "encoding": "inplace",
        "label": "struct PendingChange",
        "members": [
          {
            "astId": 12964,
            "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12966,
            "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
            "label": "tokenTo",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)3867_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 3864,
            "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3866,
            "contract": "contracts/ethereum/NFTVaultManager.sol:NFTVaultManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}