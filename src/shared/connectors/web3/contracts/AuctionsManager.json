{
  "address": "0xc0D020f1ce936A46DBfDA40a3A2982e2566B7736",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAuction_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "auctionContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openingBid",
          "type": "uint256"
        }
      ],
      "name": "AuctionStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUCTION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLECTION_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPLOYER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocol_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "contract ProtocolParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "reassignNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract SyntheticProtocolRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openingBid_",
          "type": "uint256"
        }
      ],
      "name": "startAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId_",
          "type": "uint256"
        }
      ],
      "name": "whitelistNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb32702f53809554074c4fb15d046403d8a35a7f0dda8474f6889023e8fcddc7f",
  "receipt": {
    "to": null,
    "from": "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
    "contractAddress": "0xc0D020f1ce936A46DBfDA40a3A2982e2566B7736",
    "transactionIndex": 1,
    "gasUsed": "1106841",
    "logsBloom": "0x
    "blockHash": "0x83db8afb274d315ee5f2cf7caa2f6a1801ca5f45521cd8dea665aec8e3ead424",
    "transactionHash": "0xb32702f53809554074c4fb15d046403d8a35a7f0dda8474f6889023e8fcddc7f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 19474316,
        "transactionHash": "0xb32702f53809554074c4fb15d046403d8a35a7f0dda8474f6889023e8fcddc7f",
        "address": "0xc0D020f1ce936A46DBfDA40a3A2982e2566B7736",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x503cf060389b91af8851125bd70ce66d16d12330718b103fc7674ef6d27e70c9",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x83db8afb274d315ee5f2cf7caa2f6a1801ca5f45521cd8dea665aec8e3ead424"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 19474316,
        "transactionHash": "0xb32702f53809554074c4fb15d046403d8a35a7f0dda8474f6889023e8fcddc7f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000bcbff81e22e00000000000000000000000000000000000000000000000000806a960085d8804c0000000000000000000000000000000000000000000000000054f6d6eccd3200000000000000000000000000000000000000000000000000805eca0103f6524c0000000000000000000000000000000000000000000000000060c2d66eaf6000",
        "logIndex": 3,
        "blockHash": "0x83db8afb274d315ee5f2cf7caa2f6a1801ca5f45521cd8dea665aec8e3ead424"
      }
    ],
    "blockNumber": 19474316,
    "cumulativeGasUsed": "1127841",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC57c47E9F5432574f1B93e4c0EED88E87a7B619a"
  ],
  "solcInputHash": "dbbc68a2ad62d52c90add900817d9432",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAuction_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctionContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openingBid\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLECTION_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPLOYER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"contract ProtocolParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"reassignNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract SyntheticProtocolRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingBid_\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"}],\"name\":\"whitelistNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"reassignNFT(address,uint256,address)\":{\"details\":\"we need to pass the jobSupply here to work well even when the governance      changes this protocol parameter in the middle of the auction\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"_nftAuctionImplementation\":{\"details\":\"the implementation to deploy through minimal proxies\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/auctions/AuctionsManager.sol\":\"AuctionsManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { CBORChainlink } from \\\"./vendor/CBORChainlink.sol\\\";\\nimport { BufferChainlink } from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  )\\n    internal\\n    pure\\n    returns (\\n      Chainlink.Request memory\\n    )\\n  {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(\\n    Request memory self,\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n  {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x12e1313c62b0dae9684b7ca52f0a05be3ddef6926f5a714ec723ef9587b08222\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport { ENSResolver as ENSResolver_Chainlink } from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\ncontract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 constant internal LINK_DIVISIBILITY = 10**18;\\n  uint256 constant private AMOUNT_OVERRIDE = 0;\\n  address constant private SENDER_OVERRIDE = address(0);\\n  uint256 constant private ORACLE_ARGS_VERSION = 1;\\n  uint256 constant private OPERATOR_ARGS_VERSION = 2;\\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private ens;\\n  bytes32 private ensNode;\\n  LinkTokenInterface private link;\\n  OperatorInterface private oracle;\\n  uint256 private requestCount = 1;\\n  mapping(bytes32 => address) private pendingRequests;\\n\\n  event ChainlinkRequested(\\n    bytes32 indexed id\\n  );\\n  event ChainlinkFulfilled(\\n    bytes32 indexed id\\n  );\\n  event ChainlinkCancelled(\\n    bytes32 indexed id\\n  );\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddress The callback address that the response will be sent to\\n   * @param callbackFunctionSignature The callback function signature to use for the callback address\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddress,\\n    bytes4 callbackFunctionSignature\\n  )\\n    internal\\n    pure\\n    returns (\\n      Chainlink.Request memory\\n    )\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddress, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return sendChainlinkRequestTo(address(oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    return rawRequest(oracleAddress, req, payment, ORACLE_ARGS_VERSION, oracle.oracleRequest.selector);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `requestOracleDataFrom` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function requestOracleData(\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return requestOracleDataFrom(address(oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function requestOracleDataFrom(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    return rawRequest(oracleAddress, req, payment, OPERATOR_ARGS_VERSION, oracle.requestOracleData.selector);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @param argsVersion The version of data support (single word, multi word)\\n   * @return requestId The request ID\\n   */\\n  function rawRequest(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment,\\n    uint256 argsVersion,\\n    bytes4 funcSelector\\n  )\\n    private\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    requestId = keccak256(abi.encodePacked(this, requestCount));\\n    req.nonce = requestCount;\\n    pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    bytes memory encodedData = abi.encodeWithSelector(\\n      funcSelector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackAddress,\\n      req.callbackFunctionId,\\n      req.nonce,\\n      argsVersion,\\n      req.buf.buf);\\n    require(link.transferAndCall(oracleAddress, payment, encodedData), \\\"unable to transferAndCall to oracle\\\");\\n    requestCount += 1;\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  )\\n    internal\\n  {\\n    OperatorInterface requested = OperatorInterface(pendingRequests[requestId]);\\n    delete pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(\\n    address oracleAddress\\n  )\\n    internal\\n  {\\n    oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(\\n    address linkAddress\\n  )\\n    internal\\n  {\\n    link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() \\n    internal\\n  {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress()\\n    internal\\n    view\\n    returns (\\n      address\\n    )\\n  {\\n    return address(link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress()\\n    internal\\n    view\\n    returns (\\n      address\\n    )\\n  {\\n    return address(oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(\\n    address oracleAddress,\\n    bytes32 requestId\\n  )\\n    internal\\n    notPendingRequest(requestId)\\n  {\\n    pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(\\n    address ensAddress,\\n    bytes32 node\\n  )\\n    internal\\n  {\\n    ens = ENSInterface(ensAddress);\\n    ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS()\\n    internal\\n  {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(\\n    bytes32 requestId\\n  )\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n    // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(\\n    bytes32 requestId\\n  )\\n  {\\n    require(msg.sender == pendingRequests[requestId],\\n            \\\"Source must be the oracle of the request\\\");\\n    delete pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(\\n    bytes32 requestId\\n  )\\n  {\\n    require(pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x15f8b423b9a4417b916e076b77ce59bcaeee8947807b3efca9e0e864888afddf\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(\\n    bytes32 indexed node,\\n    bytes32 indexed label,\\n    address owner\\n  );\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(\\n    bytes32 indexed node,\\n    address owner\\n  );\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(\\n    bytes32 indexed node,\\n    address resolver\\n  );\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(\\n    bytes32 indexed node,\\n    uint64 ttl\\n  );\\n\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(\\n    bytes32 node,\\n    address resolver\\n  ) external;\\n\\n  function setOwner(\\n    bytes32 node,\\n    address owner\\n  ) external;\\n\\n  function setTTL(\\n    bytes32 node,\\n    uint64 ttl\\n  ) external;\\n\\n  function owner(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n\\n  function resolver(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n\\n  function ttl(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      uint64\\n    );\\n\\n}\\n\",\"keccak256\":\"0xd8545d2e73f7aa517543d97e1763d95c11ddd52a5050cf1933047c9f22f10b5a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n\\n  function requestOracleData(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  )\\n    external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool\\n    );\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function distributeFunds(\\n    address payable[] calldata receivers,\\n    uint[] calldata amounts\\n  )\\n    external\\n    payable;\\n\\n  function getAuthorizedSenders()\\n    external\\n    returns (\\n      address[] memory\\n    );\\n\\n  function setAuthorizedSenders(\\n    address[] calldata senders\\n  ) external;\\n\\n  function getForwarder()\\n    external\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0x71dcc45bae7384cfb47c74de767a7ec56df21e165468610b2abf2bb02ca0c352\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  )\\n    external\\n    returns (\\n      bool\\n    );\\n\\n  function isAuthorizedSender(\\n    address node\\n  )\\n    external\\n    view\\n    returns (\\n      bool\\n    );\\n\\n  function withdraw(\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  function withdrawable()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n}\\n\",\"keccak256\":\"0x55fb2c156150379d285ab89081ff5add6f37343d7992bd2ec1485a2652af94d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  \\n  function getAddress()\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0xc3d897e7c93b02e53f21b40accd4a0bd5c38f9780a4f74a7109b70fbfde03b40\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for writing to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary BufferChainlink {\\n  /**\\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n  *      a capacity. The capacity may be longer than the current value, in\\n  *      which case it can be extended without the need to allocate more memory.\\n  */\\n  struct buffer {\\n    bytes buf;\\n    uint capacity;\\n  }\\n\\n  /**\\n  * @dev Initializes a buffer with an initial capacity.\\n  * @param buf The buffer to initialize.\\n  * @param capacity The number of bytes of space to allocate the buffer.\\n  * @return The buffer, for chaining.\\n  */\\n  function init(\\n    buffer memory buf,\\n    uint capacity\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Initializes a new buffer from an existing bytes object.\\n  *      Changes to the buffer may mutate the original value.\\n  * @param b The bytes object to initialize the buffer with.\\n  * @return A new buffer.\\n  */\\n  function fromBytes(\\n    bytes memory b\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(\\n    buffer memory buf,\\n    uint capacity\\n  )\\n    private\\n    pure\\n  {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(\\n    uint a,\\n    uint b\\n  )\\n    private\\n    pure\\n    returns(\\n      uint\\n    )\\n  {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n  * @dev Sets buffer length to 0.\\n  * @param buf The buffer to truncate.\\n  * @return The original buffer, for chaining..\\n  */\\n  function truncate(\\n    buffer memory buf\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The start offset to write to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(\\n    buffer memory buf,\\n    uint off,\\n    bytes memory data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint dest;\\n    uint src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint mask = 256 ** (32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write the byte at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint off,\\n    uint8 data\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendUint8(\\n    buffer memory buf,\\n    uint8 data\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n  *      exceed the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (left-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(\\n    buffer memory buf,\\n    uint off,\\n    bytes32 data,\\n    uint len\\n  )\\n    private\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint off,\\n    bytes20 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chhaining.\\n  */\\n  function appendBytes20(\\n    buffer memory buf,\\n    bytes20 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendBytes32(\\n    buffer memory buf,\\n    bytes32 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (right-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeInt(\\n    buffer memory buf,\\n    uint off,\\n    uint data,\\n    uint len\\n  )\\n    private\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n    * exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer.\\n    */\\n  function appendInt(\\n    buffer memory buf,\\n    uint data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x68a67e15960462bf12313307765e619de03c73949b6ef0626785e7e76cf484af\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.19;\\n\\nimport { BufferChainlink } from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeType(\\n    BufferChainlink.buffer memory buf,\\n    uint8 major,\\n    uint value\\n  )\\n    private\\n    pure\\n  {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if(value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if(value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if(value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else if(value <= 0xFFFFFFFFFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(\\n    BufferChainlink.buffer memory buf,\\n    uint8 major\\n  )\\n    private\\n    pure\\n  {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(\\n    BufferChainlink.buffer memory buf,\\n    uint value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_INT, value);\\n  }\\n\\n  function encodeInt(\\n    BufferChainlink.buffer memory buf,\\n    int value\\n  )\\n    internal\\n    pure\\n  {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else if(value >= 0) {\\n      encodeType(buf, MAJOR_TYPE_INT, uint(value));\\n    } else {\\n      encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\\n    }\\n  }\\n\\n  function encodeBytes(\\n    BufferChainlink.buffer memory buf,\\n    bytes memory value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_BYTES, value.length);\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(\\n    BufferChainlink.buffer memory buf,\\n    int value\\n  )\\n    internal\\n    pure\\n  {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint(value)));\\n  }\\n\\n  function encodeSignedBigNum(\\n    BufferChainlink.buffer memory buf,\\n    int input\\n  )\\n    internal\\n    pure\\n  {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint(-1 - input)));\\n  }\\n\\n  function encodeString(\\n    BufferChainlink.buffer memory buf,\\n    string memory value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0xe7c6e4290ac2a41a138e6bd89d89a2779f66847a5ee6fb5a6f2a3386e5ce589d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(\\n    bytes32 node\\n  )\\n    public\\n    view\\n    virtual\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0xeed48a6a522c400f024f8725ad931833205cb63cc87285b46c5c0e88ca090352\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf98cb1651a90d20ef77d8c1dd10d5fce4954e747603e5672a8292bd4368120dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/perpetual_futures/PerpetualPoolLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../polygon/Interfaces.sol\\\";\\n//import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./library/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../polygon/governance/FuturesProtocolParameters.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\ncontract PerpetualPoolLite is IPerpetualPoolLite, Initializable {\\n    using SafeMath for uint256;\\n    using SafeMath for int256;\\n    using SafeERC20 for IERC20;\\n\\n    int256 private constant ONE = 10**18;\\n\\n    uint256 private  _decimals;\\n\\n    address private  _bTokenAddress;\\n    address private  _lTokenAddress;\\n    address private  _pTokenAddress;\\n    address private  _liquidatorQualifierAddress;\\n    address private  _protocolFeeCollector;\\n    address private  _underlyingAddress;\\n    address private  _protocolAddress;\\n    FuturesProtocolParameters private _protocolParameters;\\n\\n    int256 private _liquidity;\\n\\n    uint256 private _lastUpdateBlock;\\n    int256 private _protocolFeeAccrued;\\n\\n    // symbolId => SymbolInfo\\n    SymbolInfo private _symbol;\\n\\n    bool private _mutex;\\n    modifier _lock_() {\\n        require(!_mutex, \\\"reentry\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    constructor(address[2] memory addresses) {\\n        _protocolAddress = addresses[0];\\n        _protocolParameters = FuturesProtocolParameters(addresses[0]);\\n        _decimals = 18;\\n    }\\n\\n    function initialize(address[6] memory addresses) external initializer {\\n        _bTokenAddress = addresses[0];\\n        _lTokenAddress = addresses[1];\\n        _pTokenAddress = addresses[2];\\n        _liquidatorQualifierAddress = addresses[3];\\n        _protocolFeeCollector = addresses[4];\\n        _underlyingAddress = addresses[5];\\n    }\\n\\n    function getSymbolPriceAndMultiplier() external view returns (int256 price, int256 multiplier) {\\n        return (_symbol.price, _protocolParameters.futuresMultiplier());\\n    }\\n\\n    function getParameters()\\n        external\\n        view\\n        override\\n        returns (\\n            int256 minPoolMarginRatio,\\n            int256 minInitialMarginRatio,\\n            int256 minMaintenanceMarginRatio,\\n            int256 minLiquidationReward,\\n            int256 maxLiquidationReward,\\n            int256 liquidationCutRatio,\\n            int256 protocolFeeCollectRatio\\n        )\\n    {\\n        return (\\n            _protocolParameters.minPoolMarginRatio(),\\n            _protocolParameters.minInitialMarginRatio(),\\n            _protocolParameters.minMaintenanceMarginRatio(),\\n            _protocolParameters.minLiquidationReward(),\\n            _protocolParameters.maxLiquidationReward(),\\n            _protocolParameters.liquidationCutRatio(),\\n            _protocolParameters.protocolFeeCollectRatio()\\n        );\\n    }\\n\\n    function getAddresses()\\n        external\\n        view\\n        override\\n        returns (\\n            address bTokenAddress,\\n            address lTokenAddress,\\n            address pTokenAddress,\\n            address liquidatorQualifierAddress,\\n            address protocolFeeCollector,\\n            address underlyingAddress,\\n            address protocolAddress\\n        )\\n    {\\n        return (\\n            _bTokenAddress,\\n            _lTokenAddress,\\n            _pTokenAddress,\\n            _liquidatorQualifierAddress,\\n            _protocolFeeCollector,\\n            _underlyingAddress,\\n            _protocolAddress\\n        );\\n    }\\n\\n    function getSymbol() external view override returns (SymbolInfo memory) {\\n        return _symbol;\\n    }\\n\\n    function getLiquidity() external view override returns (int256) {\\n        return _liquidity;\\n    }\\n\\n    function getLastUpdateBlock() external view override returns (uint256) {\\n        return _lastUpdateBlock;\\n    }\\n\\n    function getProtocolFeeAccrued() external view override returns (int256) {\\n        return _protocolFeeAccrued;\\n    }\\n\\n    function collectProtocolFee() external override {\\n        uint256 balance = IERC20(_bTokenAddress).balanceOf(address(this)).rescale(_decimals, 18);\\n        uint256 amount = _protocolFeeAccrued.itou();\\n        if (amount > balance) amount = balance;\\n        _protocolFeeAccrued -= amount.utoi();\\n        _transferOut(_protocolFeeCollector, amount);\\n        emit ProtocolFeeCollection(_protocolFeeCollector, amount);\\n    }\\n\\n    //================================================================================\\n    // Interactions with onchain oracles\\n    //================================================================================\\n\\n    function addLiquidity(uint256 bAmount) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _addLiquidity(msg.sender, bAmount);\\n    }\\n\\n    function removeLiquidity(uint256 lShares) external override {\\n        require(lShares > 0, \\\"PerpetualPool: 0 lShares\\\");\\n        _removeLiquidity(msg.sender, lShares);\\n    }\\n\\n    function addMargin(uint256 bAmount) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _addMargin(msg.sender, bAmount);\\n    }\\n\\n    function removeMargin(uint256 bAmount) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _removeMargin(msg.sender, bAmount);\\n    }\\n\\n    function trade(int256 tradeVolume) external override {\\n        require(\\n            tradeVolume != 0 && (tradeVolume / ONE) * ONE == tradeVolume,\\n            \\\"PerpetualPool: invalid tradeVolume\\\"\\n        );\\n        _trade(msg.sender, tradeVolume);\\n    }\\n\\n    function liquidate(address account) external override {\\n        address liquidator = msg.sender;\\n        require(\\n            _liquidatorQualifierAddress == address(0) ||\\n                ILiquidatorQualifier(_liquidatorQualifierAddress).isQualifiedLiquidator(liquidator),\\n            \\\"PerpetualPool: not qualified liquidator\\\"\\n        );\\n        _liquidate(liquidator, account);\\n    }\\n\\n    //================================================================================\\n    // Interactions with offchain oracles\\n    //================================================================================\\n\\n    function addLiquidity(uint256 bAmount, SignedPrice memory price) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _updateSymbolOracles(price);\\n        _addLiquidity(msg.sender, bAmount);\\n    }\\n\\n    function removeLiquidity(uint256 lShares, SignedPrice memory price) external override {\\n        require(lShares > 0, \\\"PerpetualPool: 0 lShares\\\");\\n        _updateSymbolOracles(price);\\n        _removeLiquidity(msg.sender, lShares);\\n    }\\n\\n    function addMargin(uint256 bAmount, SignedPrice memory price) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _updateSymbolOracles(price);\\n        _addMargin(msg.sender, bAmount);\\n    }\\n\\n    function removeMargin(uint256 bAmount, SignedPrice memory price) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _updateSymbolOracles(price);\\n        _removeMargin(msg.sender, bAmount);\\n    }\\n\\n    function trade(int256 tradeVolume, SignedPrice memory price) external override {\\n        require(\\n            tradeVolume != 0 && (tradeVolume / ONE) * ONE == tradeVolume,\\n            \\\"PerpetualPool: invalid tradeVolume\\\"\\n        );\\n        _updateSymbolOracles(price);\\n        _trade(msg.sender, tradeVolume);\\n    }\\n\\n    function liquidate(address account, SignedPrice memory price) external override {\\n        address liquidator = msg.sender;\\n        require(\\n            _liquidatorQualifierAddress == address(0) ||\\n                ILiquidatorQualifier(_liquidatorQualifierAddress).isQualifiedLiquidator(liquidator),\\n            \\\"PerpetualPool: not qualified liquidator\\\"\\n        );\\n        _updateSymbolOracles(price);\\n        _liquidate(liquidator, account);\\n    }\\n\\n    //================================================================================\\n    // Core logics\\n    //================================================================================\\n\\n    function _addLiquidity(address account, uint256 bAmount) internal _lock_ {\\n        (int256 totalDynamicEquity, ) = _updateSymbolPricesAndFundingRates();\\n        bAmount = _transferIn(account, bAmount);\\n        ILTokenLite lToken = ILTokenLite(_lTokenAddress);\\n\\n        uint256 totalSupply = lToken.totalSupply();\\n        uint256 lShares;\\n        if (totalSupply == 0) {\\n            lShares = bAmount;\\n        } else {\\n            lShares = (bAmount * totalSupply) / totalDynamicEquity.itou();\\n        }\\n\\n        lToken.mint(account, lShares);\\n        _liquidity += bAmount.utoi();\\n\\n        emit AddLiquidity(account, lShares, bAmount);\\n    }\\n\\n    function _removeLiquidity(address account, uint256 lShares) internal _lock_ {\\n        (int256 totalDynamicEquity, int256 totalAbsCost) = _updateSymbolPricesAndFundingRates();\\n        ILTokenLite lToken = ILTokenLite(_lTokenAddress);\\n\\n        uint256 totalSupply = lToken.totalSupply();\\n        uint256 bAmount = (lShares * totalDynamicEquity.itou()) / totalSupply;\\n\\n        _liquidity -= bAmount.utoi();\\n\\n        require(\\n            totalAbsCost == 0 ||\\n                ((totalDynamicEquity - bAmount.utoi()) * ONE) / totalAbsCost >=\\n                _protocolParameters.minPoolMarginRatio(),\\n            \\\"PerpetualPool: pool insufficient margin\\\"\\n        );\\n\\n        lToken.burn(account, lShares);\\n        _transferOut(account, bAmount);\\n\\n        emit RemoveLiquidity(account, lShares, bAmount);\\n    }\\n\\n    function _addMargin(address account, uint256 bAmount) internal _lock_ {\\n        bAmount = _transferIn(account, bAmount);\\n\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\n        if (!pToken.exists(account)) pToken.mint(account);\\n\\n        pToken.addMargin(account, bAmount.utoi());\\n        emit AddMargin(account, bAmount);\\n    }\\n\\n    function _removeMargin(address account, uint256 bAmount) internal _lock_ {\\n        _updateSymbolPricesAndFundingRates();\\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\\n\\n        int256 amount = bAmount.utoi();\\n        if (amount >= margin) {\\n            amount = margin;\\n            bAmount = amount.itou();\\n            margin = 0;\\n        } else {\\n            margin -= amount;\\n        }\\n\\n        require(\\n            _getTraderMarginRatio(position, margin) >= _protocolParameters.minInitialMarginRatio(),\\n            \\\"PerpetualPool: insufficient margin\\\"\\n        );\\n\\n        _updateTraderPortfolio(account, position, margin);\\n        _transferOut(account, bAmount);\\n\\n        emit RemoveMargin(account, bAmount);\\n    }\\n\\n    // struct for temp use in trade function, to prevent stack too deep error\\n    struct TradeParams {\\n        int256 tradersNetVolume;\\n        int256 price;\\n        int256 multiplier;\\n        int256 curCost;\\n        int256 fee;\\n        int256 realizedCost;\\n        int256 protocolFee;\\n    }\\n\\n    function _trade(address account, int256 tradeVolume) internal _lock_ {\\n        (int256 totalDynamicEquity, int256 totalAbsCost) = _updateSymbolPricesAndFundingRates();\\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\\n\\n        TradeParams memory params;\\n\\n        params.tradersNetVolume = _symbol.tradersNetVolume;\\n        params.price = _symbol.price;\\n        params.multiplier = _protocolParameters.futuresMultiplier();\\n        params.curCost = (((tradeVolume * params.price) / ONE) * params.multiplier) / ONE;\\n        params.fee = (params.curCost.abs() * _protocolParameters.futuresFeeRatio()) / ONE;\\n\\n        if (!(position.volume >= 0 && tradeVolume >= 0) && !(position.volume <= 0 && tradeVolume <= 0)) {\\n            int256 absVolume = position.volume.abs();\\n            int256 absTradeVolume = tradeVolume.abs();\\n            if (absVolume <= absTradeVolume) {\\n                // previous position is totally closed\\n                params.realizedCost = (params.curCost * absVolume) / absTradeVolume + position.cost;\\n            } else {\\n                // previous position is partially closed\\n                params.realizedCost = (position.cost * absTradeVolume) / absVolume + params.curCost;\\n            }\\n        }\\n\\n        // adjust totalAbsCost after trading\\n        totalAbsCost +=\\n            (((((params.tradersNetVolume + tradeVolume).abs() - params.tradersNetVolume.abs()) *\\n                params.price) / ONE) * params.multiplier) /\\n            ONE;\\n\\n        position.volume += tradeVolume;\\n        position.cost += params.curCost - params.realizedCost;\\n        position.lastCumulativeFundingRate = _symbol.cumulativeFundingRate;\\n        margin -= params.fee + params.realizedCost;\\n\\n        _symbol.tradersNetVolume += tradeVolume;\\n        _symbol.tradersNetCost += params.curCost - params.realizedCost;\\n        params.protocolFee = (params.fee * _protocolParameters.protocolFeeCollectRatio()) / ONE;\\n        _protocolFeeAccrued += params.protocolFee;\\n        _liquidity += params.fee - params.protocolFee + params.realizedCost;\\n\\n        require(\\n            totalAbsCost == 0 ||\\n                (totalDynamicEquity * ONE) / totalAbsCost >= _protocolParameters.minPoolMarginRatio(),\\n            \\\"PerpetualPool: insufficient liquidity\\\"\\n        );\\n        require(\\n            _getTraderMarginRatio(position, margin) >= _protocolParameters.minInitialMarginRatio(),\\n            \\\"PerpetualPool: insufficient margin\\\"\\n        );\\n\\n        _updateTraderPortfolio(account, position, margin);\\n\\n        emit Trade(account, tradeVolume, params.price.itou());\\n    }\\n\\n    function _liquidate(address liquidator, address account) internal _lock_ {\\n        _updateSymbolPricesAndFundingRates();\\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\\n        require(\\n            _getTraderMarginRatio(position, margin) < _protocolParameters.minMaintenanceMarginRatio(),\\n            \\\"PerpetualPool: cannot liquidate\\\"\\n        );\\n\\n        int256 netEquity = margin;\\n        if (position.volume != 0) {\\n            _symbol.tradersNetVolume -= position.volume;\\n            _symbol.tradersNetCost -= position.cost;\\n            netEquity +=\\n                (((position.volume * _symbol.price) / ONE) * _protocolParameters.futuresMultiplier()) /\\n                ONE -\\n                position.cost;\\n        }\\n\\n        int256 reward;\\n        int256 minLiquidationReward = _protocolParameters.minLiquidationReward();\\n        int256 maxLiquidationReward = _protocolParameters.maxLiquidationReward();\\n        if (netEquity <= minLiquidationReward) {\\n            reward = minLiquidationReward;\\n        } else if (netEquity >= maxLiquidationReward) {\\n            reward = maxLiquidationReward;\\n        } else {\\n            reward =\\n                ((netEquity - minLiquidationReward) * _protocolParameters.liquidationCutRatio()) /\\n                ONE +\\n                minLiquidationReward;\\n        }\\n\\n        _liquidity += margin - reward;\\n        IPTokenLite(_pTokenAddress).burn(account);\\n        _transferOut(liquidator, reward.itou());\\n\\n        emit Liquidate(account, liquidator, reward.itou());\\n    }\\n\\n    //================================================================================\\n    // Helpers\\n    //================================================================================\\n\\n    function _updateSymbolOracles(SignedPrice memory price) internal {\\n        IOracleWithUpdate(_protocolParameters.futuresOracleAddress()).updatePrice(\\n            _underlyingAddress,\\n            price.timestamp,\\n            price.price,\\n            price.v,\\n            price.r,\\n            price.s\\n        );\\n    }\\n\\n    function _updateSymbolPricesAndFundingRates()\\n        internal\\n        returns (int256 totalDynamicEquity, int256 totalAbsCost)\\n    {\\n        uint256 preBlockNumber = _lastUpdateBlock;\\n        uint256 curBlockNumber = block.number;\\n        totalDynamicEquity = _liquidity;\\n\\n        if (curBlockNumber > preBlockNumber) {\\n            _symbol.price = IOracle(_protocolParameters.futuresOracleAddress()).getPrice().utoi();\\n        }\\n        if (_symbol.tradersNetVolume != 0) {\\n            int256 cost = (((_symbol.tradersNetVolume * _symbol.price) / ONE) *\\n                _protocolParameters.futuresMultiplier()) / ONE;\\n            totalDynamicEquity -= cost - _symbol.tradersNetCost;\\n            totalAbsCost += cost.abs();\\n        }\\n\\n        if (curBlockNumber > preBlockNumber) {\\n            if (_symbol.tradersNetVolume != 0) {\\n                int256 ratePerBlock = (((((((((_symbol.tradersNetVolume * _symbol.price) / ONE) *\\n                    _symbol.price) / ONE) * _protocolParameters.futuresMultiplier()) / ONE) *\\n                    _protocolParameters.futuresMultiplier()) / ONE) *\\n                    _protocolParameters.futuresFundingRateCoefficient()) / totalDynamicEquity;\\n                int256 delta = ratePerBlock * int256(curBlockNumber - preBlockNumber);\\n                unchecked {\\n                    _symbol.cumulativeFundingRate += delta;\\n                }\\n            }\\n        }\\n\\n        _lastUpdateBlock = curBlockNumber;\\n    }\\n\\n    function getTraderPortfolio(address account)\\n        public\\n        view\\n        returns (IPTokenLite.Position memory position, int256 margin)\\n    {\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\n        position = pToken.getPosition(account);\\n        margin = pToken.getMargin(account);\\n    }\\n\\n    function _updateTraderPortfolio(\\n        address account,\\n        IPTokenLite.Position memory position,\\n        int256 margin\\n    ) internal {\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\n        pToken.updatePosition(account, position);\\n        pToken.updateMargin(account, margin);\\n    }\\n\\n    function _settleTraderFundingFee(address account)\\n        internal\\n        returns (IPTokenLite.Position memory position, int256 margin)\\n    {\\n        (position, margin) = getTraderPortfolio(account);\\n        int256 funding;\\n        if (position.volume != 0) {\\n            int256 cumulativeFundingRate = _symbol.cumulativeFundingRate;\\n            int256 delta;\\n            unchecked {\\n                delta = cumulativeFundingRate - position.lastCumulativeFundingRate;\\n            }\\n            funding += (position.volume * delta) / ONE;\\n\\n            position.lastCumulativeFundingRate = cumulativeFundingRate;\\n        }\\n        if (funding != 0) {\\n            margin -= funding;\\n            _liquidity += funding;\\n        }\\n    }\\n\\n    function _getTraderMarginRatio(IPTokenLite.Position memory position, int256 margin)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 totalDynamicEquity = margin;\\n        int256 totalAbsCost;\\n        if (position.volume != 0) {\\n            int256 cost = (((position.volume * _symbol.price) / ONE) *\\n                _protocolParameters.futuresMultiplier()) / ONE;\\n            totalDynamicEquity += cost - position.cost;\\n            totalAbsCost += cost.abs();\\n        }\\n        return totalAbsCost == 0 ? type(int256).max : (totalDynamicEquity * ONE) / totalAbsCost;\\n    }\\n\\n    function _deflationCompatibleSafeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 bAmount\\n    ) internal returns (uint256) {\\n        IERC20 bToken = IERC20(_bTokenAddress);\\n        uint256 balance1 = bToken.balanceOf(to);\\n        bToken.safeTransferFrom(from, to, bAmount);\\n        uint256 balance2 = bToken.balanceOf(to);\\n        return balance2 - balance1;\\n    }\\n\\n    function _transferIn(address from, uint256 bAmount) internal returns (uint256) {\\n        uint256 amount = _deflationCompatibleSafeTransferFrom(\\n            from,\\n            address(this),\\n            bAmount.rescale(18, _decimals)\\n        );\\n        return amount.rescale(_decimals, 18);\\n    }\\n\\n    function _transferOut(address to, uint256 bAmount) internal {\\n        uint256 amount = bAmount.rescale(18, _decimals);\\n        uint256 leftover = bAmount - amount.rescale(_decimals, 18);\\n        // leftover due to decimal precision is accrued to _protocolFeeAccrued\\n        _protocolFeeAccrued += leftover.utoi();\\n        IERC20(_bTokenAddress).safeTransfer(to, amount);\\n    }\\n\\n    // function migrationTimestamp() external view override returns (uint256) {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function migrationDestination() external view override returns (address) {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function prepareMigration(address target, uint256 graceDays) external override {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function approveMigration() external override {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function executeMigration(address source) override external {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function controller() external view override returns (address) {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function setNewController(address newController) external override {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function claimNewController() external override {\\n    //     // TODO: Implement\\n    // }\\n\\n}\\n\",\"keccak256\":\"0xee9eddef8a2751c1fcd051f6c06d4d660a3cb505d99f80b106527e1b10c2c976\",\"license\":\"MIT\"},\"contracts/perpetual_futures/library/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SafeMath {\\n    uint256 internal constant UMAX = 2**255 - 1;\\n    int256 internal constant IMIN = -2**255;\\n\\n    /// convert uint256 to int256\\n    function utoi(uint256 a) internal pure returns (int256) {\\n        require(a <= UMAX, \\\"UIO\\\");\\n        return int256(a);\\n    }\\n\\n    /// convert int256 to uint256\\n    function itou(int256 a) internal pure returns (uint256) {\\n        require(a >= 0, \\\"IUO\\\");\\n        return uint256(a);\\n    }\\n\\n    /// take abs of int256\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != IMIN, \\\"AO\\\");\\n        return a >= 0 ? a : -a;\\n    }\\n\\n    /// rescale a uint256 from base 10**decimals1 to 10**decimals2\\n    function rescale(\\n        uint256 a,\\n        uint256 decimals1,\\n        uint256 decimals2\\n    ) internal pure returns (uint256) {\\n        return decimals1 == decimals2 ? a : (a * (10**decimals2)) / (10**decimals1);\\n    }\\n\\n    /// rescale a int256 from base 10**decimals1 to 10**decimals2\\n    function rescale(\\n        int256 a,\\n        uint256 decimals1,\\n        uint256 decimals2\\n    ) internal pure returns (int256) {\\n        return decimals1 == decimals2 ? a : (a * utoi(10**decimals2)) / utoi(10**decimals1);\\n    }\\n\\n    /// reformat a uint256 to be a valid 10**decimals base value\\n    /// the reformatted value is still in 10**18 base\\n    function reformat(uint256 a, uint256 decimals) internal pure returns (uint256) {\\n        return decimals == 18 ? a : rescale(rescale(a, 18, decimals), decimals, 18);\\n    }\\n\\n    /// reformat a int256 to be a valid 10**decimals base value\\n    /// the reformatted value is still in 10**18 base\\n    function reformat(int256 a, uint256 decimals) internal pure returns (int256) {\\n        return decimals == 18 ? a : rescale(rescale(a, 18, decimals), decimals, 18);\\n    }\\n\\n    /// ceiling value away from zero, return a valid 10**decimals base value, but still in 10**18 based\\n    function ceil(int256 a, uint256 decimals) internal pure returns (int256) {\\n        if (reformat(a, decimals) == a) {\\n            return a;\\n        } else {\\n            int256 b = rescale(a, 18, decimals);\\n            b += a > 0 ? int256(1) : int256(-1);\\n            return rescale(b, decimals, 18);\\n        }\\n    }\\n\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 quotient = a / b;\\n        uint256 remainder = a - quotient * b;\\n        if (remainder > 0) {\\n            return quotient + 1;\\n        } else {\\n            return quotient;\\n        }\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = x / 2 + 1;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a <= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x3153674ee1bd4c7d5368abdcfab3b213a1adece4a8eb75c412df6fbbe63bd81c\",\"license\":\"MIT\"},\"contracts/perpetual_futures/tokens/LTokenLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../polygon/Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract LTokenLite is ILTokenLite, Initializable, AccessControl, ERC20 {\\n    bytes32 public constant ROUTER = keccak256(\\\"ROUTER\\\");\\n\\n    // proxied values for the erc20 attributes\\n    string private _proxiedName;\\n    string private _proxiedSymbol;\\n    address private _pool;\\n\\n    modifier _pool_() {\\n        require(msg.sender == _pool, \\\"LToken: only pool\\\");\\n        _;\\n    }\\n\\n    // solhint-disable-next-line\\n    constructor() ERC20(\\\"Future Liquidity Token\\\", \\\"FLT\\\") {}\\n\\n    function initialize(string memory name_, string memory symbol_) external initializer {\\n        _proxiedName = name_;\\n        _proxiedSymbol = symbol_;\\n\\n        _setupRole(ROUTER, msg.sender);\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _proxiedName;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _proxiedSymbol;\\n    }\\n\\n    function pool() public view override returns (address) {\\n        return _pool;\\n    }\\n\\n    function setPool(address newPool) public override onlyRole(ROUTER) {\\n        require(_pool == address(0), \\\"LToken.setPool: not allowed\\\");\\n        _pool = newPool;\\n    }\\n\\n    function mint(address account, uint256 amount) public override _pool_ {\\n        require(account != address(0), \\\"LToken: mint to 0 address\\\");\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public override _pool_ {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe4f95ed80dbcbfab143b9e5c97b2051edf9e7820d7258c503c1655e16dd60160\",\"license\":\"MIT\"},\"contracts/perpetual_futures/tokens/PFERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract PFERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor() {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x9d4c5ad7fb4daae93770614ae5726cc381102c90a2d41865551291c254d157ec\",\"license\":\"MIT\"},\"contracts/perpetual_futures/tokens/PFERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./PFERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 Non-Fungible Token Implementation\\n *\\n * Exert uniqueness of owner: one owner can only have one token\\n */\\ncontract PFERC721 is IERC721, PFERC165 {\\n    using Address for address;\\n\\n    /*\\n     * Equals to `bytes4(keccak256('onERC721Received(address,address,uint256,bytes)'))`\\n     * which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n     */\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x081812fc ^ 0xe985e9c5 ^\\n     *        0x095ea7b3 ^ 0xa22cb465 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    // Mapping from owner address to tokenId\\n    // tokenId starts from 1, 0 is reserved for nonexistent token\\n    // One owner can only own one token in this contract\\n    mapping(address => uint256) internal _ownerTokenId;\\n\\n    // Mapping from tokenId to owner\\n    mapping(uint256 => address) internal _tokenIdOwner;\\n\\n    // Mapping from tokenId to approved operator\\n    mapping(uint256 => address) internal _tokenIdOperator;\\n\\n    // Mapping from owner to operator for all approval\\n    mapping(address => mapping(address => bool)) internal _ownerOperator;\\n\\n    modifier _existsTokenId_(uint256 tokenId) {\\n        require(_exists(tokenId), \\\"ERC721: nonexistent tokenId\\\");\\n        _;\\n    }\\n\\n    modifier _existsOwner_(address owner) {\\n        require(_exists(owner), \\\"ERC721: nonexistent owner\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n    }\\n\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return _exists(owner) ? 1 : 0;\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view override _existsTokenId_(tokenId) returns (address) {\\n        return _tokenIdOwner[tokenId];\\n    }\\n\\n    function getTokenId(address owner) public view _existsOwner_(owner) returns (uint256) {\\n        return _ownerTokenId[owner];\\n    }\\n\\n    function getApproved(uint256 tokenId) public view override _existsTokenId_(tokenId) returns (address) {\\n        return _tokenIdOperator[tokenId];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        _existsOwner_(owner)\\n        returns (bool)\\n    {\\n        return _ownerOperator[owner][operator];\\n    }\\n\\n    function approve(address operator, uint256 tokenId) public override {\\n        require(msg.sender == ownerOf(tokenId), \\\"ERC721.approve: caller not owner\\\");\\n        _tokenIdOperator[tokenId] = operator;\\n        emit Approval(msg.sender, operator, tokenId);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        require(_exists(msg.sender), \\\"ERC721.setApprovalForAll: nonexistent owner\\\");\\n        _ownerOperator[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        _validateTransfer(msg.sender, from, to, tokenId);\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override {\\n        _validateTransfer(msg.sender, from, to, tokenId);\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    //================================================================================\\n\\n    function _exists(address owner) internal view returns (bool) {\\n        return _ownerTokenId[owner] != 0;\\n    }\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokenIdOwner[tokenId] != address(0);\\n    }\\n\\n    function _validateTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal view {\\n        require(from == ownerOf(tokenId), \\\"ERC721._validateTransfer: not owned token\\\");\\n        require(to != address(0) && !_exists(to), \\\"ERC721._validateTransfer: to address exists or 0\\\");\\n        require(\\n            operator == from || _tokenIdOperator[tokenId] == operator || _ownerOperator[from][operator],\\n            \\\"ERC721._validateTransfer: not owner nor approved\\\"\\n        );\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        // clear previous ownership and approvals\\n        delete _ownerTokenId[from];\\n        delete _tokenIdOperator[tokenId];\\n\\n        // set up new owner\\n        _ownerTokenId[to] = tokenId;\\n        _tokenIdOwner[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract\\n     * recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Validation check on parameters should be carried out before calling this function.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     *      The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID.\\n     * @param to target address that will receive the tokens.\\n     * @param tokenId uint256 ID of the token to be transferred.\\n     * @param data bytes optional data to send along with the call.\\n     * @return bool whether the call correctly returned the expected magic value.\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                msg.sender,\\n                from,\\n                tokenId,\\n                data\\n            ),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n}\\n\",\"keccak256\":\"0x2179d079deb992bef4eb6623f14e7d7fe5b2ea2c116f1b8f5d64e4d0d0a16983\",\"license\":\"MIT\"},\"contracts/perpetual_futures/tokens/PTokenLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../polygon/Interfaces.sol\\\";\\nimport \\\"./PFERC721.sol\\\";\\n\\ncontract PTokenLite is IPTokenLite, PFERC721, Initializable {\\n    // PToken name\\n    string internal _name;\\n    // PToken symbol\\n    string internal _symbol;\\n    // associative pool address\\n    address internal _pool;\\n    // total number of PToken ever minted, this number will never decease\\n    uint256 internal _totalMinted;\\n    // total PTokens hold by all traders\\n    uint256 internal _totalSupply;\\n\\n    address private _collectionManager;\\n\\n    // tokenId => margin\\n    mapping(uint256 => int256) internal _tokenIdMargin;\\n    // tokenId => (symbolId => Position)\\n    mapping(uint256 => Position) internal _tokenIdPosition;\\n\\n    // symbolId => number of position holders\\n    uint256 internal _numPositionHolders;\\n\\n    modifier _pool_() {\\n        require(msg.sender == _pool, \\\"PToken: only pool\\\");\\n        _;\\n    }\\n\\n    function initialize(string memory name_, string memory symbol_) external initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function setPool(address newPool) public override {\\n        require(_pool == address(0) || _pool == msg.sender, \\\"PToken.setPool: not allowed\\\");\\n        _pool = newPool;\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function pool() public view override returns (address) {\\n        return _pool;\\n    }\\n\\n    function totalMinted() public view override returns (uint256) {\\n        return _totalMinted;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function getNumPositionHolders() public view override returns (uint256) {\\n        return _numPositionHolders;\\n    }\\n\\n    function exists(address owner) public view override returns (bool) {\\n        return _exists(owner);\\n    }\\n\\n    function getMargin(address owner) public view override returns (int256) {\\n        return _tokenIdMargin[_ownerTokenId[owner]];\\n    }\\n\\n    function updateMargin(address owner, int256 margin) public override _pool_ {\\n        _tokenIdMargin[_ownerTokenId[owner]] = margin;\\n        emit UpdateMargin(owner, margin);\\n    }\\n\\n    function addMargin(address owner, int256 delta) public override _pool_ {\\n        int256 margin = _tokenIdMargin[_ownerTokenId[owner]] + delta;\\n        _tokenIdMargin[_ownerTokenId[owner]] = margin;\\n        emit UpdateMargin(owner, margin);\\n    }\\n\\n    function getPosition(address owner) public view override returns (Position memory) {\\n        return _tokenIdPosition[_ownerTokenId[owner]];\\n    }\\n\\n    function updatePosition(address owner, Position memory position) public override _pool_ {\\n        int256 preVolume = _tokenIdPosition[_ownerTokenId[owner]].volume;\\n        int256 curVolume = position.volume;\\n\\n        if (preVolume == 0 && curVolume != 0) {\\n            _numPositionHolders++;\\n        } else if (preVolume != 0 && curVolume == 0) {\\n            _numPositionHolders--;\\n        }\\n\\n        _tokenIdPosition[_ownerTokenId[owner]] = position;\\n        emit UpdatePosition(owner, position.volume, position.cost, position.lastCumulativeFundingRate);\\n    }\\n\\n    function mint(address owner) public override _pool_ {\\n        _totalSupply++;\\n        uint256 tokenId = ++_totalMinted;\\n        require(!_exists(tokenId), \\\"PToken.mint: existent tokenId\\\");\\n\\n        _ownerTokenId[owner] = tokenId;\\n        _tokenIdOwner[tokenId] = owner;\\n\\n        emit Transfer(address(0), owner, tokenId);\\n    }\\n\\n    function burn(address owner) public override _pool_ {\\n        uint256 tokenId = _ownerTokenId[owner];\\n\\n        _totalSupply--;\\n        delete _ownerTokenId[owner];\\n        delete _tokenIdOwner[tokenId];\\n        delete _tokenIdOperator[tokenId];\\n        delete _tokenIdMargin[tokenId];\\n\\n        if (_tokenIdPosition[tokenId].volume != 0) {\\n            _numPositionHolders--;\\n        }\\n        delete _tokenIdPosition[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x30daed57063a46db5d6526a70ca12509fbd0a429430be33263dd5c1b4103e871\",\"license\":\"MIT\"},\"contracts/polygon/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\n\\r\\ninterface IFlipCoinGenerator {\\r\\n    function generateRandom() external view returns (uint8);\\r\\n}\\r\\n\\r\\ninterface ISyntheticNFT is IERC721Metadata {\\r\\n\\r\\n    function setMetadata(uint256 tokenId,string memory metadata) external;\\r\\n\\r\\n    function isVerified(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function exists(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function safeBurn(uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ninterface ICollectionManagerFactory {\\r\\n    function deploy(\\r\\n        address originalCollectionAddress_,\\r\\n        string memory name_,\\r\\n        string memory symbol_\\r\\n    ) external returns (address);\\r\\n}\\r\\n\\r\\ninterface IJot is IERC20 {\\r\\n    function uniswapV2Pair() external view returns (address);\\r\\n\\r\\n    function safeMint(address account, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IOwnable {\\r\\n    event ChangeController(address oldController, address newController);\\r\\n\\r\\n    function controller() external view returns (address);\\r\\n\\r\\n    function setNewController(address newController) external;\\r\\n\\r\\n    function claimNewController() external;\\r\\n}\\r\\n\\r\\ninterface IMigratable is IOwnable {\\r\\n    event PrepareMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    event ExecuteMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    function migrationTimestamp() external view returns (uint256);\\r\\n\\r\\n    function migrationDestination() external view returns (address);\\r\\n\\r\\n    function prepareMigration(address target, uint256 graceDays) external;\\r\\n\\r\\n    function approveMigration() external;\\r\\n\\r\\n    function executeMigration(address source) external;\\r\\n}\\r\\n\\r\\ninterface IPerpetualPoolLite {\\r\\n// struct SymbolInfo {\\r\\n//         uint256 symbolId;\\r\\n//         string symbol;\\r\\n//         address oracleAddress;\\r\\n//         int256 multiplier;\\r\\n//         int256 feeRatio;\\r\\n//         int256 fundingRateCoefficient;\\r\\n//         int256 price;\\r\\n//         int256 cumulativeFundingRate;\\r\\n//         int256 tradersNetVolume;\\r\\n//         int256 tradersNetCost;\\r\\n//     }\\r\\n\\r\\n    struct SymbolInfo {\\r\\n        string symbol;\\r\\n        int256 price;\\r\\n        int256 cumulativeFundingRate;\\r\\n        int256 tradersNetVolume;\\r\\n        int256 tradersNetCost;\\r\\n    }\\r\\n\\r\\n    struct SignedPrice {\\r\\n        uint256 timestamp;\\r\\n        uint256 price;\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n    }\\r\\n\\r\\n    event AddLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event RemoveLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event AddMargin(address indexed account, uint256 bAmount);\\r\\n\\r\\n    event RemoveMargin(address indexed account, uint256 bAmount);\\r\\n\\r\\n    event Trade(address indexed account, int256 tradeVolume, uint256 price);\\r\\n\\r\\n    event Liquidate(address indexed account, address indexed liquidator, uint256 reward);\\r\\n\\r\\n    event ProtocolFeeCollection(address indexed collector, uint256 amount);\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            int256 minPoolMarginRatio,\\r\\n            int256 minInitialMarginRatio,\\r\\n            int256 minMaintenanceMarginRatio,\\r\\n            int256 minLiquidationReward,\\r\\n            int256 maxLiquidationReward,\\r\\n            int256 liquidationCutRatio,\\r\\n            int256 protocolFeeCollectRatio\\r\\n        );\\r\\n\\r\\n    function getAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address bTokenAddress,\\r\\n            address lTokenAddress,\\r\\n            address pTokenAddress,\\r\\n            address liquidatorQualifierAddress,\\r\\n            address protocolFeeCollector,\\r\\n            address underlyingAddress,\\r\\n            address protocolAddress\\r\\n        );\\r\\n\\r\\n    function getSymbol() external view returns (SymbolInfo memory);\\r\\n\\r\\n    function getLiquidity() external view returns (int256);\\r\\n\\r\\n    function getLastUpdateBlock() external view returns (uint256);\\r\\n\\r\\n    function getProtocolFeeAccrued() external view returns (int256);\\r\\n\\r\\n    function collectProtocolFee() external;\\r\\n\\r\\n    function addLiquidity(uint256 bAmount) external;\\r\\n\\r\\n    function removeLiquidity(uint256 lShares) external;\\r\\n\\r\\n    function addMargin(uint256 bAmount) external;\\r\\n\\r\\n    function removeMargin(uint256 bAmount) external;\\r\\n\\r\\n    function trade(int256 tradeVolume) external;\\r\\n\\r\\n    function liquidate(address account) external;\\r\\n\\r\\n    function addLiquidity(uint256 bAmount, SignedPrice memory price) external;\\r\\n\\r\\n    function removeLiquidity(uint256 lShares, SignedPrice memory price) external;\\r\\n\\r\\n    function addMargin(uint256 bAmount, SignedPrice memory price) external;\\r\\n\\r\\n    function removeMargin(uint256 bAmount, SignedPrice memory price) external;\\r\\n\\r\\n    function trade(int256 tradeVolume, SignedPrice memory price) external;\\r\\n\\r\\n    function liquidate(address account, SignedPrice memory price) external;\\r\\n}\\r\\n\\r\\ninterface IPTokenLite is IERC721 {\\r\\n    struct Position {\\r\\n        // position volume, long is positive and short is negative\\r\\n        int256 volume;\\r\\n        // the cost the establish this position\\r\\n        int256 cost;\\r\\n        // the last cumulativeFundingRate since last funding settlement for this position\\r\\n        // the overflow for this value in intended\\r\\n        int256 lastCumulativeFundingRate;\\r\\n    }\\r\\n\\r\\n    event UpdateMargin(address indexed owner, int256 amount);\\r\\n\\r\\n    event UpdatePosition(address indexed owner, int256 volume, int256 cost, int256 lastCumulativeFundingRate);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function totalMinted() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function getNumPositionHolders() external view returns (uint256);\\r\\n\\r\\n    function exists(address owner) external view returns (bool);\\r\\n\\r\\n    function getMargin(address owner) external view returns (int256);\\r\\n\\r\\n    function updateMargin(address owner, int256 margin) external;\\r\\n\\r\\n    function addMargin(address owner, int256 delta) external;\\r\\n\\r\\n    function getPosition(address owner) external view returns (Position memory);\\r\\n\\r\\n    function updatePosition(address owner, Position memory position) external;\\r\\n\\r\\n    function mint(address owner) external;\\r\\n\\r\\n    function burn(address owner) external;\\r\\n}\\r\\n\\r\\ninterface ILiquidatorQualifier {\\r\\n    function isQualifiedLiquidator(address liquidator) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface ILTokenLite is IERC20 {\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    function mint(address account, uint256 amount) external;\\r\\n\\r\\n    function burn(address account, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface IOracle {\\r\\n    function getPrice() external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IOracleWithUpdate {\\r\\n    function getPrice() external returns (uint256);\\r\\n\\r\\n    function updatePrice(\\r\\n        address address_,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x6347b0b8cd4385949509af1625cfc39477139dea81a6861c909669b15e6a7d16\",\"license\":\"MIT\"},\"contracts/polygon/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev collections struct\\n */\\nstruct SyntheticCollection {\\n    uint256 collectionID;\\n    address collectionManagerAddress;\\n    address jotAddress;\\n    address jotPoolAddress;\\n    address jotPairAddress;\\n    address syntheticNFTAddress;\\n    string originalName;\\n    string originalSymbol;\\n    address lTokenAddress;\\n    address pTokenAddress;\\n    address perpetualPoolLiteAddress;\\n}\\n\\nstruct ProtocolParametersContracts {\\n    address fractionalizeProtocol;\\n    address futuresProtocol;\\n}\\n\\nstruct FuturesParametersContracts {\\n        address lTokenLite_;\\n        address pTokenLite_;\\n        address perpetualPoolLiteAddress_;\\n}\\n\",\"keccak256\":\"0x0569614f17c5271cc570d549eacae97d010742a5bfd80a096a3745c8a6666773\",\"license\":\"MIT\"},\"contracts/polygon/SyntheticProtocolRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./chainlink/RandomNumberConsumer.sol\\\";\\nimport \\\"./chainlink/PolygonValidatorOracle.sol\\\";\\nimport \\\"./implementations/SyntheticCollectionManager.sol\\\";\\nimport \\\"./implementations/Jot.sol\\\";\\nimport \\\"./implementations/JotPool.sol\\\";\\nimport \\\"./implementations/SyntheticNFT.sol\\\";\\nimport \\\"./auctions/AuctionsManager.sol\\\";\\nimport \\\"./Structs.sol\\\";\\nimport \\\"./governance/ProtocolParameters.sol\\\";\\nimport \\\"./governance/FuturesProtocolParameters.sol\\\";\\nimport \\\"../perpetual_futures/tokens/LTokenLite.sol\\\";\\nimport \\\"../perpetual_futures/tokens/PTokenLite.sol\\\";\\nimport \\\"../perpetual_futures/PerpetualPoolLite.sol\\\";\\nimport \\\"./Interfaces.sol\\\";\\n\\ncontract SyntheticProtocolRouter is AccessControl, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant ORACLE = keccak256(\\\"ORACLE\\\");\\n\\n    /**\\n     * @dev implementation addresses for proxies\\n     */\\n    address private _jot;\\n    address private _jotPool;\\n    address private _collectionManager;\\n    address private _syntheticNFT;\\n    address private _auctionManager;\\n\\n    address private _protocol;\\n    address private _futuresProtocol;\\n    address private _fundingTokenAddress;\\n    address private _randomConsumerAddress;\\n    address private _validatorAddress;\\n\\n    address private _perpetualPoolLiteAddress;\\n    address private _lTokenLite;\\n    address private _pTokenLite;\\n\\n    address public oracleAddress;\\n    /**\\n     * @dev collections map.\\n     * collection address => collection data\\n     */\\n    mapping(address => SyntheticCollection) private _collections;\\n\\n    /**\\n     * @dev get collection address from ID\\n     */\\n    mapping(uint256 => address) private _collectionIdToAddress;\\n\\n    /**\\n     * @notice number of registered collections\\n     */\\n    Counters.Counter public protocolVaults;\\n\\n    /**\\n     * @notice QuickSwap address\\n     */\\n    address public swapAddress;\\n\\n    // a new Synthetic NFT collection manager is registered\\n    event CollectionManagerRegistered(\\n        uint256 collectionManagerID,\\n        address collectionManagerAddress,\\n        address jotAddress,\\n        address jotPoolAddress,\\n        address jotPairAddress,\\n        address syntheticNFTAddress,\\n        address quickSwapAddress,\\n        address auctionAddress,\\n        address lTokenLite_,\\n        address pTokenLite_,\\n        address perpetualPoolLiteAddress_\\n    );\\n\\n    event TokenRegistered(\\n        address collectionManagerAddress,\\n        uint256 collectionManagerID,\\n        uint256 syntheticTokenId\\n    );\\n\\n    event TokenChanged(address collectionAddress, uint256 syntheticID, uint256 previousID, uint256 newID);\\n\\n    constructor(\\n        address swapAddress_,\\n        address jot_,\\n        address jotPool_,\\n        address collectionManager_,\\n        address syntheticNFT_,\\n        address auctionManager_,\\n        address fundingTokenAddress_,\\n        address randomConsumerAddress_,\\n        address validatorAddress_,\\n        address oracleAddress_,\\n        FuturesParametersContracts memory futuresParameters,\\n        ProtocolParametersContracts memory protocolParameters\\n        ) {\\n        swapAddress = swapAddress_;\\n        _jot = jot_;\\n        _jotPool = jotPool_;\\n        _collectionManager = collectionManager_;\\n        _syntheticNFT = syntheticNFT_;\\n        _auctionManager = auctionManager_;\\n        _protocol = protocolParameters.fractionalizeProtocol;\\n        _futuresProtocol = protocolParameters.futuresProtocol;\\n        _fundingTokenAddress = fundingTokenAddress_;\\n        _randomConsumerAddress = randomConsumerAddress_;\\n        _validatorAddress = validatorAddress_;\\n        _lTokenLite = futuresParameters.lTokenLite_;\\n        _pTokenLite = futuresParameters.pTokenLite_;\\n        _perpetualPoolLiteAddress = futuresParameters.perpetualPoolLiteAddress_;\\n        oracleAddress = oracleAddress_;\\n        _setupRole(ORACLE, oracleAddress_);\\n    }\\n    \\n\\n    /**\\n     *  @notice register an NFT collection\\n     *  @param collection the address of the synthetic collection\\n     *  @param tokenId the token id\\n     *  @param supplyToKeep supply to keep\\n     *  @param priceFraction the price for a fraction\\n     *  @param originalName the original collection name\\n     *  @param originalSymbol the original collection symbol\\n     */\\n    function registerNFT(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 supplyToKeep,\\n        uint256 priceFraction,\\n        string memory originalName,\\n        string memory originalSymbol\\n    ) public {\\n        require(collection != address(0), \\\"Invalid collection\\\");\\n\\n        address collectionAddress;\\n        uint256 collectionID = protocolVaults.current();\\n        // Checks whether a collection is registered or not\\n        // If not registered, then register it and increase the Vault counter\\n        if (!isSyntheticCollectionRegistered(collection)) {\\n            // deploys a minimal proxy contract from the jot contract implementation\\n            address jotAddress = Clones.clone(_jot);\\n            Jot(jotAddress).initialize(\\n                string(abi.encodePacked(\\\"Privi Jot \\\", originalName)),\\n                string(abi.encodePacked(\\\"JOT_\\\", originalSymbol)),\\n                swapAddress,\\n                _fundingTokenAddress\\n            );\\n\\n            // deploys a minimal proxy contract from the jotPool contract implementation\\n            address jotPoolAddress = Clones.clone(_jotPool);\\n            JotPool(jotPoolAddress).initialize(jotAddress);\\n\\n            address syntheticNFTAddress = Clones.clone(_syntheticNFT);\\n\\n            // deploys a minimal proxy contract from the collectionManager contract implementation\\n            collectionAddress = Clones.clone(_collectionManager);\\n            SyntheticCollectionManager(collectionAddress).initialize(\\n                jotAddress,\\n                collection,\\n                syntheticNFTAddress,\\n                _auctionManager,\\n                _protocol,\\n                _fundingTokenAddress,\\n                jotPoolAddress\\n            );\\n\\n            AuctionsManager(_auctionManager).grantRole(\\n                AuctionsManager(_auctionManager).COLLECTION_MANAGER(),\\n                collectionAddress\\n            );\\n\\n            // Done this way because of stack limitations\\n            SyntheticCollectionManager(collectionAddress).grantRole(\\n                SyntheticCollectionManager(collectionAddress).RANDOM_ORACLE(), \\n                _randomConsumerAddress\\n            );\\n            \\n            SyntheticCollectionManager(collectionAddress).grantRole(\\n                SyntheticCollectionManager(collectionAddress).VALIDATOR_ORACLE(), \\n                _validatorAddress\\n            );\\n\\n            Jot(jotAddress).grantRole(Jot(jotAddress).MINTER(), collectionAddress);\\n\\n            // set the manager to allow control over the funds\\n            Jot(jotAddress).setManager(collectionAddress, jotPoolAddress);\\n\\n            SyntheticNFT(syntheticNFTAddress).initialize(\\n                string(abi.encodePacked(\\\"Privi Synthetic \\\", originalName)),\\n                string(abi.encodePacked(\\\"pS_\\\", originalSymbol)),\\n                collectionAddress\\n            );\\n\\n            // whitelist the new collection contract on the random number consumer and the validator\\n            RandomNumberConsumer(_randomConsumerAddress).whitelistCollection(collectionAddress);\\n            PolygonValidatorOracle(_validatorAddress).whitelistCollection(collectionAddress);\\n\\n            FuturesParametersContracts memory futuresParameters;\\n            futuresParameters.lTokenLite_ = _lTokenLite;\\n            futuresParameters.pTokenLite_ = _pTokenLite;\\n            futuresParameters.perpetualPoolLiteAddress_ = _perpetualPoolLiteAddress;\\n\\n            FuturesParametersContracts memory futuresData = deployFutures(\\n                originalName,\\n                originalSymbol,\\n                collection,\\n                futuresParameters\\n            );\\n\\n            _collections[collection] = SyntheticCollection({\\n                collectionID: collectionID,\\n                collectionManagerAddress: collectionAddress,\\n                jotAddress: jotAddress,\\n                jotPoolAddress: jotPoolAddress,\\n                jotPairAddress: Jot(jotAddress).uniswapV2Pair(),\\n                syntheticNFTAddress: syntheticNFTAddress,\\n                originalName: originalName,\\n                originalSymbol: originalSymbol,\\n                lTokenAddress: futuresData.lTokenLite_,\\n                pTokenAddress: futuresData.pTokenLite_,\\n                perpetualPoolLiteAddress: futuresData.perpetualPoolLiteAddress_\\n            });\\n\\n            _collectionIdToAddress[collectionID] = collectionAddress;\\n\\n            emit CollectionManagerRegistered(\\n                collectionID,\\n                collectionAddress,\\n                jotAddress,\\n                jotPoolAddress,\\n                Jot(jotAddress).uniswapV2Pair(),\\n                syntheticNFTAddress,\\n                swapAddress, \\n                _auctionManager,\\n                futuresData.lTokenLite_,\\n                futuresData.pTokenLite_,\\n                futuresData.perpetualPoolLiteAddress_\\n            );\\n\\n            protocolVaults.increment();\\n\\n        } else {\\n            collectionAddress = _collections[collection].collectionManagerAddress;\\n        }\\n\\n        SyntheticCollectionManager collectionManager = SyntheticCollectionManager(collectionAddress);\\n\\n        uint256 syntheticID = collectionManager.register(tokenId, supplyToKeep, priceFraction, msg.sender);\\n\\n        emit TokenRegistered(collectionAddress, collectionID, syntheticID);\\n    }\\n\\n    function deployFutures(\\n        string memory originalName,\\n        string memory originalSymbol,\\n        address collection,\\n        FuturesParametersContracts memory futuresParameters\\n    ) private returns (FuturesParametersContracts memory ) {\\n        // Deploy futures\\n        address lTokenAddress = Clones.clone(_lTokenLite);\\n        LTokenLite(lTokenAddress).initialize(\\n            string(abi.encodePacked(\\\"Liquidity Futures \\\", originalName)),\\n            string(abi.encodePacked(\\\"LF_\\\", originalSymbol))\\n        );\\n\\n        address pTokenAddress = Clones.clone(_pTokenLite);\\n        PTokenLite(pTokenAddress).initialize(\\n            string(abi.encodePacked(\\\"Position Futures \\\", originalName)),\\n            string(abi.encodePacked(\\\"PF_\\\", originalSymbol))\\n        );\\n\\n        address nftFutureAddress = Clones.clone(_perpetualPoolLiteAddress);\\n        PerpetualPoolLite(nftFutureAddress).initialize([\\n            _fundingTokenAddress,\\n            lTokenAddress,\\n            pTokenAddress,\\n            _jotPool, // TODO: change by liquidator address\\n            _jotPool,\\n            collection\\n        ]);\\n\\n        LTokenLite(lTokenAddress).setPool(nftFutureAddress);\\n        PTokenLite(pTokenAddress).setPool(nftFutureAddress);\\n\\n        return FuturesParametersContracts(lTokenAddress, pTokenAddress, nftFutureAddress);\\n    }\\n\\n    /**\\n     * @notice change an NFT for another one\\n     */\\n    function changeNFT(\\n        address collection,\\n        uint256 syntheticID,\\n        uint256 newOriginalTokenID\\n    ) public {\\n        address collectionManager = getCollectionManagerAddress(collection);\\n        SyntheticCollectionManager manager = SyntheticCollectionManager(collectionManager);\\n        uint256 originalTokenID = manager.getOriginalID(syntheticID);\\n        manager.change(syntheticID, newOriginalTokenID, msg.sender);\\n\\n        emit TokenChanged(collection, syntheticID, originalTokenID, newOriginalTokenID);\\n    }\\n\\n    /**\\n     * @dev init Perpetual Pool Lite for a specific collection\\n     */\\n\\n    // function initPerpetualPoolLite(uint256 collectionID, string memory name) internal view {\\n    //     FuturesProtocolParameters futuresProtocol = FuturesProtocolParameters(_futuresProtocol);\\n    //     address futuresOracleAddress = futuresProtocol.futuresOracleAddress();\\n    // }\\n\\n    /**\\n     * @notice checks whether a collection is registered or not\\n     */\\n    function isSyntheticCollectionRegistered(address collection) public view returns (bool) {\\n        return _collections[collection].collectionManagerAddress != address(0);\\n    }\\n\\n    /**\\n     * @notice checks whether a Synthetic NFT has been created for a given NFT or not\\n     */\\n    function isSyntheticNFTCreated(address collection, uint256 tokenId) public view returns (bool) {\\n        // Collection must be registered first\\n        require(isSyntheticCollectionRegistered(collection), \\\"Collection not registered\\\");\\n\\n        // connect to collection manager\\n        address collectionAddress = _collections[collection].collectionManagerAddress;\\n        address syntheticNFTAddress = SyntheticCollectionManager(collectionAddress).erc721address();\\n\\n        // check whether a given id was minted or not\\n        return ISyntheticNFT(syntheticNFTAddress).exists(tokenId);\\n    }\\n\\n    /**\\n     * @notice checks whether a Synthetic has been verified or not\\n     */\\n    function isNFTVerified(address collection, uint256 tokenId) public view returns (bool) {\\n        require(isSyntheticNFTCreated(collection, tokenId), \\\"NFT not registered\\\");\\n        address collectionManager = getCollectionManagerAddress(collection);\\n        return SyntheticCollectionManager(collectionManager).isVerified(tokenId);\\n    }\\n\\n    /**\\n     * @notice verify a synthetic NFT\\n     */\\n    function verifyNFT(address collection, uint256 tokenId) public onlyRole(ORACLE) {\\n        require(isSyntheticNFTCreated(collection, tokenId), \\\"NFT not registered\\\");\\n        address collectionManager = getCollectionManagerAddress(collection);\\n        SyntheticCollectionManager(collectionManager).verify(tokenId);\\n    }\\n\\n    /**\\n     * @notice getter for Jot Address of a collection\\n     */\\n    function getJotsAddress(address collection) public view returns (address) {\\n        return _collections[collection].jotAddress;\\n    }\\n\\n    /**\\n     * @notice getter for Jot Pool Address of a collection\\n     */\\n    function getJotPoolAddress(address collection) public view returns (address) {\\n        return _collections[collection].jotPoolAddress;\\n    }\\n\\n    /**\\n     * @notice get collection manager address from collection address\\n     */\\n    function getCollectionManagerAddress(address collection) public view returns (address) {\\n        return _collections[collection].collectionManagerAddress;\\n    }\\n\\n    /**\\n     * @notice get collection manager address from collection ID\\n     */\\n    function getCollectionManagerAddressFromId(uint256 collectionID) public view returns (address) {\\n        address collectionAddress = _collectionIdToAddress[collectionID];\\n        return _collections[collectionAddress].collectionManagerAddress;\\n    }\\n\\n    /**\\n     * @notice get collection ID from collection address\\n     */\\n    function getCollectionID(address collection) public view returns (uint256) {\\n        return _collections[collection].collectionID;\\n    }\\n\\n    /**\\n     * @notice get collection address from collection ID\\n     */\\n    function getOriginalCollectionAddress(uint256 collectionID) public view returns (address) {\\n        return _collectionIdToAddress[collectionID];\\n    }\\n\\n    function getCollectionlTokenAddress(address collection) public view returns (address) {\\n        return _collections[collection].lTokenAddress;\\n    }\\n\\n    function getCollectionpTokenAddress(address collection) public view returns (address) {\\n        return _collections[collection].pTokenAddress;\\n    }\\n\\n    function getCollectionPerpetualPoolAddress(address collection) public view returns (address) {\\n        return _collections[collection].perpetualPoolLiteAddress;\\n    }\\n\\n    function getCollectionUniswapPair(address collection) public view returns (address) {\\n        return _collections[collection].jotPairAddress;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x9420c1b5c83683ef0ad50d32e0d40e62966def01f920a37cc6468c2794308f5d\",\"license\":\"MIT\"},\"contracts/polygon/auctions/AuctionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\nimport \\\"../implementations/SyntheticCollectionManager.sol\\\";\\nimport \\\"../SyntheticProtocolRouter.sol\\\";\\nimport \\\"../libraries/ProtocolConstants.sol\\\";\\nimport \\\"./NFTAuction.sol\\\";\\n\\ncontract AuctionsManager is AccessControl, Initializable {\\n    bytes32 public constant COLLECTION_MANAGER = keccak256(\\\"COLLECTION_MANAGER\\\");\\n    bytes32 public constant DEPLOYER = keccak256(\\\"DEPLOYER\\\");\\n    bytes32 public constant AUCTION = keccak256(\\\"AUCTION\\\");\\n\\n    /**\\n     * @dev the implementation to deploy through minimal proxies\\n     */\\n    address private immutable _nftAuctionImplementation;\\n\\n    ProtocolParameters public protocol;\\n    SyntheticProtocolRouter public router;\\n\\n    mapping(address => mapping(uint256 => bool)) private _whitelistedTokens;\\n\\n    event AuctionStarted(\\n        address indexed collection,\\n        uint256 indexed nftId,\\n        address auctionContract,\\n        uint256 openingBid\\n    );\\n\\n    constructor(address nftAuction_) {\\n        _nftAuctionImplementation = nftAuction_;\\n\\n        _setupRole(DEPLOYER, msg.sender);\\n    }\\n\\n    function initialize(address protocol_, address router_) external initializer onlyRole(DEPLOYER) {\\n        protocol = ProtocolParameters(protocol_);\\n        router = SyntheticProtocolRouter(router_);\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, router_);\\n    }\\n\\n    function whitelistNFT(uint256 nftId_) external onlyRole(COLLECTION_MANAGER) {\\n        _whitelistedTokens[msg.sender][nftId_] = true;\\n    }\\n\\n    /**\\n     * @dev we need to pass the jobSupply here to work well even when the governance\\n     *      changes this protocol parameter in the middle of the auction\\n     */\\n    function reassignNFT(\\n        address collection_,\\n        uint256 nftId_,\\n        address newOwner_\\n    ) external onlyRole(AUCTION) {\\n        SyntheticCollectionManager(collection_).reassignNFT(nftId_, newOwner_);\\n    }\\n\\n    function startAuction(\\n        address collection_,\\n        uint256 nftId_,\\n        uint256 openingBid_\\n    ) external {\\n        require(_whitelistedTokens[collection_][nftId_], \\\"Token can't be auctioned\\\");\\n        require(openingBid_ >= ProtocolConstants.JOT_SUPPLY, \\\"Opening bid too low\\\");\\n        require(router.isSyntheticNFTCreated(collection_, nftId_), \\\"Non registered token\\\");\\n\\n        // blacklist the nft to avoid start a new auction\\n        _whitelistedTokens[collection_][nftId_] = false;\\n\\n        address jotToken = router.getJotsAddress(collection_);\\n\\n        // deploys a minimal proxy contract from privi nft auction implementation\\n        address auctionAddress = Clones.clone(_nftAuctionImplementation);\\n        NFTAuction(auctionAddress).initialize(\\n            nftId_,\\n            jotToken,\\n            router.getJotPoolAddress(collection_),\\n            router.getCollectionManagerAddress(collection_),\\n            openingBid_,\\n            protocol.auctionDuration(),\\n            msg.sender\\n        );\\n\\n        // give the AUCTION role to allow blacklisting\\n        _setupRole(AUCTION, auctionAddress);\\n\\n        // transfer funds to the auction contract\\n        require(\\n            IERC20(jotToken).transferFrom(msg.sender, auctionAddress, openingBid_),\\n            \\\"Unable to transfer jots\\\"\\n        );\\n\\n        emit AuctionStarted(collection_, nftId_, auctionAddress, openingBid_);\\n    }\\n}\\n\",\"keccak256\":\"0xf3548177be95a6c7adf901724c5414e5e44ebae1c9fa3dc25b8c1cb1bed873b4\",\"license\":\"MIT\"},\"contracts/polygon/auctions/NFTAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/ProtocolConstants.sol\\\";\\nimport \\\"./AuctionsManager.sol\\\";\\n\\ncontract NFTAuction is Initializable {\\n    // parameters of the auction. Times are either\\n    // absolute unix timestamps (seconds since 1970-01-01)\\n    // or time periods in seconds.\\n    uint256 public auctionEndTime;\\n\\n    // current state of the auction.\\n    address public highestBidder;\\n    uint256 public highestBid;\\n\\n    // getters\\n    uint256 public nftId;\\n    address public jot;\\n    address public jotPool;\\n    address public syntheticCollection;\\n    address public auctionsManager;\\n\\n    // allowed withdrawals of previous bids\\n    mapping(address => uint256) private _pendingReturns;\\n\\n    // set to true at the end, disallows any change.\\n    // by default initialized to `false`.\\n    bool private _claimed;\\n\\n    // events that will be emitted on changes.\\n    event HighestBidIncreased(address bidder, uint256 amount);\\n    event AuctionEnded(address winner, uint256 amount);\\n\\n    /// create a simple auction\\n    function initialize(\\n        uint256 nftId_,\\n        address jot_,\\n        address jotPool_,\\n        address syntheticCollection_,\\n        uint256 initialBid_,\\n        uint256 auctionDuration_,\\n        address initialBidder_\\n    ) external initializer {\\n        nftId = nftId_;\\n        auctionEndTime = block.timestamp + auctionDuration_; // solhint-disable-line\\n        highestBid = initialBid_;\\n        jot = jot_;\\n        jotPool = jotPool_;\\n        syntheticCollection = syntheticCollection_;\\n        highestBidder = initialBidder_;\\n        auctionsManager = msg.sender;\\n    }\\n\\n    /// bid on the auction.\\n    /// the value will only be refunded if the\\n    /// auction is not won.\\n    function bid(uint256 amount_) public payable {\\n        // revert the call if the bidding\\n        // period is over.\\n        // solhint-disable-next-line\\n        require(block.timestamp <= auctionEndTime, \\\"Auction already ended\\\");\\n\\n        // if the bid is not higher revert\\n        require(amount_ > highestBid, \\\"There already is a higher bid\\\");\\n\\n        // if the allowance is not enough or transfer fails revert\\n        require(IERC20(jot).transferFrom(msg.sender, address(this), amount_), \\\"Unable to transfer jots\\\");\\n\\n        if (highestBid != 0) {\\n            // sending back the money by simply using\\n            // highestBidder.send(highestBid) is a security risk\\n            // because it could execute an untrusted contract.\\n            // it is always safer to let the recipients\\n            // withdraw their money themselves.\\n            _pendingReturns[highestBidder] += highestBid;\\n        }\\n        highestBidder = msg.sender;\\n        highestBid = amount_;\\n\\n        emit HighestBidIncreased(msg.sender, amount_);\\n    }\\n\\n    /// withdraw a bid that was overbid.\\n    function withdraw() public {\\n        uint256 amount = _pendingReturns[msg.sender];\\n        if (amount > 0) {\\n            // avoid reentrancy\\n            _pendingReturns[msg.sender] = 0;\\n\\n            require(IERC20(jot).transfer(msg.sender, amount), \\\"Unable to transfer jots\\\");\\n        }\\n    }\\n\\n    /// winner can claim the token after auction end time\\n    function endAuction() public {\\n        // solhint-disable-next-line\\n        require(block.timestamp >= auctionEndTime, \\\"Auction not yet ended\\\");\\n        require(!_claimed, \\\"Token has already been claimed\\\");\\n\\n        _claimed = true;\\n\\n        // transfer the jots\\n        require(IERC20(jot).transfer(jot, ProtocolConstants.JOT_SUPPLY), \\\"Unable to transfer jots\\\");\\n\\n        if (highestBid - ProtocolConstants.JOT_SUPPLY > 0) {\\n            require(\\n                IERC20(jot).transfer(jotPool, highestBid - ProtocolConstants.JOT_SUPPLY),\\n                \\\"Unable to transfer jots\\\"\\n            );\\n        }\\n\\n        // reassign the NFT in the synthetic collection\\n        AuctionsManager(auctionsManager).reassignNFT(syntheticCollection, nftId, highestBidder);\\n\\n        emit AuctionEnded(highestBidder, highestBid);\\n    }\\n}\\n\",\"keccak256\":\"0x282f406717757b17ed8475fef67250b5b644473b6dd762646eb791ace65b705f\",\"license\":\"MIT\"},\"contracts/polygon/chainlink/OracleStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct APIOracleInfo {\\n    address linkToken;\\n    address chainlinkNode;\\n    string jobId;\\n    uint256 nodeFee;\\n}\\n\\nstruct VRFOracleInfo {\\n    address vrfCoordinator;\\n    address linkToken;\\n    bytes32 keyHash;\\n    uint256 vrfFee;\\n}\\n\\nstruct VerifyRequest {\\n    address originalCollection;\\n    address syntheticCollection;\\n    uint256 tokenId;\\n}\\n\",\"keccak256\":\"0xa88e9d35195519133eff2c727e319212bc1716b449d86896321541697c57068f\",\"license\":\"MIT\"},\"contracts/polygon/chainlink/PolygonValidatorOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../implementations/SyntheticCollectionManager.sol\\\";\\r\\nimport \\\"./OracleStructs.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev the ownership will be transferred after deployment to the router contract\\r\\n */\\r\\ncontract PolygonValidatorOracle is ChainlinkClient, Ownable {\\r\\n    /**\\r\\n     * @dev oracle configuration parameters\\r\\n     */\\r\\n    string public token;\\r\\n    string public apiURL;\\r\\n    address public chainlinkNode;\\r\\n    bytes32 public jobId;\\r\\n    uint256 public nodeFee;\\r\\n    address public linkToken;\\r\\n\\r\\n    mapping(bytes32 => VerifyRequest) private _verifyRequests;\\r\\n    mapping(address => bool) private _whitelistedCollections;\\r\\n\\r\\n    event ResponseReceived(\\r\\n        bytes32 indexed requestId,\\r\\n        address originalCollection,\\r\\n        address syntheticCollection,\\r\\n        uint256 tokenId,\\r\\n        bool verified\\r\\n    );\\r\\n\\r\\n    constructor(APIOracleInfo memory _oracleInfo) {\\r\\n        linkToken = _oracleInfo.linkToken;\\r\\n        chainlinkNode = _oracleInfo.chainlinkNode;\\r\\n        jobId = stringToBytes32(_oracleInfo.jobId);\\r\\n        nodeFee = _oracleInfo.nodeFee;\\r\\n        apiURL = \\\"SHOULD BE DEPLOYED YET\\\";\\r\\n\\r\\n        setChainlinkToken(linkToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev call to verify if a token is locked in ethereum vault,\\r\\n     * this method can be called only from the collection manager contract\\r\\n     * @param ethereumCollection the collection address in ethereum\\r\\n     * @param tokenId the id of the nft in the collection\\r\\n     * @param nonce the nonce\\r\\n     * @return requestId the id of the request to the Chainlink oracle\\r\\n     */\\r\\n    function verifyTokenInCollection(\\r\\n        address ethereumCollection,\\r\\n        uint256 tokenId,\\r\\n        uint256 nonce\\r\\n    ) external returns (bytes32 requestId) {\\r\\n        require(_whitelistedCollections[msg.sender], \\\"Invalid requester\\\");\\r\\n\\r\\n        Chainlink.Request memory request = buildChainlinkRequest(\\r\\n            jobId,\\r\\n            address(this),\\r\\n            this.processResponse.selector\\r\\n        );\\r\\n\\r\\n        // set the request params\\r\\n        Chainlink.add(\\r\\n            request,\\r\\n            \\\"get\\\",\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    apiURL,\\r\\n                    \\\"?collection=\\\",\\r\\n                    ethereumCollection,\\r\\n                    \\\"&tokenId=\\\",\\r\\n                    uint2str(tokenId),\\r\\n                    \\\"&nonce=\\\",\\r\\n                    uint2str(nonce)\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        Chainlink.add(request, \\\"path\\\", \\\"locked\\\");\\r\\n\\r\\n        // Send the request\\r\\n        requestId = sendChainlinkRequestTo(chainlinkNode, request, nodeFee);\\r\\n\\r\\n        _verifyRequests[requestId] = VerifyRequest({\\r\\n            tokenId: tokenId,\\r\\n            originalCollection: ethereumCollection,\\r\\n            syntheticCollection: msg.sender\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function to process the oracle response (only callable from oracle)\\r\\n     * @param requestId the id of the request to the Chainlink oracle\\r\\n     * @param verified wether the nft is locked or not on ethereum\\r\\n     */\\r\\n    function processResponse(bytes32 requestId, bool verified) public recordChainlinkFulfillment(requestId) {\\r\\n        VerifyRequest memory requestData = _verifyRequests[requestId];\\r\\n\\r\\n        // only call the synthetic collection contract if is locked\\r\\n        if (verified) {\\r\\n            SyntheticCollectionManager(requestData.syntheticCollection).processSuccessfulVerify(\\r\\n                requestData.tokenId\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit ResponseReceived(\\r\\n            requestId,\\r\\n            requestData.originalCollection,\\r\\n            requestData.syntheticCollection,\\r\\n            requestData.tokenId,\\r\\n            verified\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev whitelist collections in order to allow calling this contract\\r\\n     * (only router can whitelist after deploying the proxy, the router contract owns this one)\\r\\n     * @param collectionId the collection manager (sythetic collection from polygon)\\r\\n     */\\r\\n    function whitelistCollection(address collectionId) external onlyOwner {\\r\\n        _whitelistedCollections[collectionId] = true;\\r\\n    }\\r\\n\\r\\n    function stringToBytes32(string memory source) private pure returns (bytes32 result) {\\r\\n        bytes memory tempEmptyStringTest = bytes(source);\\r\\n        if (tempEmptyStringTest.length == 0) {\\r\\n            return 0x0;\\r\\n        }\\r\\n\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            result := mload(add(source, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uint2str(uint256 _i) private pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 j = _i;\\r\\n        uint256 len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint256 k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k - 1;\\r\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x50a3134978d815a4e9a5f067f439849abd798dd3d560bc5cdaeed55884ed2281\",\"license\":\"MIT\"},\"contracts/polygon/chainlink/RandomNumberConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../implementations/SyntheticCollectionManager.sol\\\";\\n\\n/**\\n * @dev the ownership will be transferred after deployment to the router contract\\n */\\ncontract RandomNumberConsumer is VRFConsumerBase, Ownable {\\n    bytes32 internal immutable keyHash;\\n    uint256 internal immutable fee;\\n\\n    mapping(bytes32 => address) private _requestIdToCollection;\\n    mapping(address => bool) private _whitelistedCollections;\\n\\n    /**\\n     * @dev constructor inherits VRFConsumerBase\\n     */\\n    constructor(VRFOracleInfo memory _oracleInfo)\\n        VRFConsumerBase(_oracleInfo.vrfCoordinator, _oracleInfo.linkToken)\\n    {\\n        keyHash = _oracleInfo.keyHash;\\n        fee = _oracleInfo.vrfFee;\\n    }\\n\\n    /**\\n     * @dev requests randomness\\n     */\\n    function getRandomNumber() external returns (bytes32 requestId) {\\n        require(_whitelistedCollections[msg.sender], \\\"Invalid requester\\\");\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\n\\n        requestId = requestRandomness(keyHash, fee);\\n        _requestIdToCollection[requestId] = msg.sender;\\n    }\\n\\n    /**\\n     * @dev callback function used by VRF Coordinator (only 200k gas allowed and should not revert)\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        SyntheticCollectionManager(_requestIdToCollection[requestId]).processFlipResult(\\n            randomness % 2,\\n            requestId\\n        );\\n    }\\n\\n    /**\\n     * @dev whitelist collections to get random from this contract\\n     */\\n    function whitelistCollection(address collectionId) external onlyOwner {\\n        _whitelistedCollections[collectionId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xa71f46afd6b6e71bcdd09beb83bccd29ac00021c5dcddd8b9a3d973beb5bb960\",\"license\":\"MIT\"},\"contracts/polygon/extensions/IERC20ManagedAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev allows to send funds from a managed account (infinite allowance)\\n */\\ninterface IERC20ManagedAccounts {\\n    function transferFromManaged(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x353fe2e73379fe78ed6aa9923e36307018a515cd792a22d3e7a9a0dacc6edffc\",\"license\":\"MIT\"},\"contracts/polygon/governance/FuturesProtocolParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\n// ! TODO: EMIT THE EVENTS AND ADD VALIDATIONS\\n\\n/**\\n * @title future parameters controlled by governance\\n * @notice the owner of this contract is the timelock controller of the governance feature\\n */\\ncontract FuturesProtocolParameters is Ownable {\\n    int256 public minPoolMarginRatio;\\n    int256 public minInitialMarginRatio;\\n    int256 public minMaintenanceMarginRatio;\\n    int256 public minLiquidationReward;\\n    int256 public maxLiquidationReward;\\n    int256 public liquidationCutRatio;\\n    int256 public protocolFeeCollectRatio;\\n    address public futuresOracleAddress;\\n    int256 public futuresMultiplier;\\n    int256 public futuresFeeRatio;\\n    int256 public futuresFundingRateCoefficient;\\n    uint256 public oracleDelay;\\n\\n    event MinPoolMarginRatioUpdated(address value);\\n    event MinInitialMarginRatioUpdated(address value);\\n    event MinMaintenanceMarginRatioUpdated(address value);\\n    event MinLiquidationRewardUpdated(address value);\\n    event MaxLiquidationRewardUpdated(address value);\\n    event LiquidationCutRatioUpdated(address value);\\n    event ProtocolFeeCollectRatioUpdated(address value);\\n    event OracleDelayUpdated(address value);\\n    event FuturesOracleAddressUpdated(address value);\\n    event FuturesMultiplierUpdated(int256 value);\\n    event FuturesFeeRatioUpdated(int256 value);\\n    event FuturesFundingRateCoefficientUpdated(int256 value);\\n\\n    /**\\n     * @dev set initial state of the data\\n     */\\n    constructor(\\n        MainParams memory mainParams,\\n        address _futuresOracleAddress,\\n        int256 _futuresMultiplier,\\n        int256 _futuresFeeRatio,\\n        int256 _futuresFundingRateCoefficient,\\n        uint256 _oracleDelay,\\n        address _governanceContractAddress\\n    ) {\\n        require(_futuresOracleAddress != address(0), \\\"Oracle address can't be zero\\\");\\n        require(_futuresMultiplier > 0, \\\"Invalid futures multiplier\\\");\\n        require(_futuresFeeRatio > 0, \\\"Invalid futures fee ratio\\\");\\n        require(_futuresFundingRateCoefficient > 0, \\\"Invalid futures funding rate coefficient\\\");\\n\\n        minPoolMarginRatio = mainParams.minPoolMarginRatio;\\n        minInitialMarginRatio = mainParams.minInitialMarginRatio;\\n        minMaintenanceMarginRatio = mainParams.minMaintenanceMarginRatio;\\n        minLiquidationReward = mainParams.minLiquidationReward;\\n        maxLiquidationReward = mainParams.maxLiquidationReward;\\n        liquidationCutRatio = mainParams.liquidationCutRatio;\\n        protocolFeeCollectRatio = mainParams.protocolFeeCollectRatio;\\n        futuresOracleAddress = _futuresOracleAddress;\\n        futuresMultiplier = _futuresMultiplier;\\n        futuresFeeRatio = _futuresFeeRatio;\\n        futuresFundingRateCoefficient = _futuresFundingRateCoefficient;\\n        oracleDelay = _oracleDelay;\\n\\n        // transfer ownership\\n        transferOwnership(_governanceContractAddress);\\n    }\\n\\n    function setMinPoolMarginRatio(int256 _minPoolMarginRatio) external onlyOwner {\\n        minPoolMarginRatio = _minPoolMarginRatio;\\n    }\\n\\n    function setMinInitialMarginRatio(int256 _minInitialMarginRatio) external onlyOwner {\\n        minInitialMarginRatio = _minInitialMarginRatio;\\n    }\\n\\n    function setMinMaintenanceMarginRatio(int256 _minMaintenanceMarginRatio) external onlyOwner {\\n        minMaintenanceMarginRatio = _minMaintenanceMarginRatio;\\n    }\\n\\n    function setMinLiquidationReward(int256 _minLiquidationReward) external onlyOwner {\\n        minLiquidationReward = _minLiquidationReward;\\n    }\\n\\n    function setMaxLiquidationReward(int256 _maxLiquidationReward) external onlyOwner {\\n        maxLiquidationReward = _maxLiquidationReward;\\n    }\\n\\n    function setLiquidationCutRatio(int256 _liquidationCutRatio) external onlyOwner {\\n        liquidationCutRatio = _liquidationCutRatio;\\n    }\\n\\n    function setProtocolFeeCollectRatio(int256 _protocolFeeCollectRatio) external onlyOwner {\\n        protocolFeeCollectRatio = _protocolFeeCollectRatio;\\n    }\\n\\n    function setFuturesOracleAddress(address futuresOracleAddress_) external onlyOwner {\\n        require(futuresOracleAddress_ != address(0), \\\"Oracle address can't be zero\\\");\\n        futuresOracleAddress = futuresOracleAddress_;\\n        emit FuturesOracleAddressUpdated(futuresOracleAddress_);\\n    }\\n\\n    function setFuturesMultiplier(int256 futuresMultiplier_) external onlyOwner {\\n        require(futuresMultiplier_ > 1 hours, \\\"Invalid futures multiplier\\\");\\n        futuresMultiplier = futuresMultiplier_;\\n        emit FuturesMultiplierUpdated(futuresMultiplier_);\\n    }\\n\\n    function setFuturesFeeRatio(int256 futuresFeeRatio_) external onlyOwner {\\n        require(futuresFeeRatio_ > 1 hours, \\\"Invalid futures fee ratio\\\");\\n        futuresFeeRatio = futuresFeeRatio_;\\n        emit FuturesFeeRatioUpdated(futuresFeeRatio_);\\n    }\\n\\n    function setFuturesFundingRateCoefficient(int256 futuresFundingRateCoefficient_) external onlyOwner {\\n        require(futuresFundingRateCoefficient_ > 1 hours, \\\"Invalid futures funding rate coefficient\\\");\\n        futuresFundingRateCoefficient = futuresFundingRateCoefficient_;\\n        emit FuturesFundingRateCoefficientUpdated(futuresFundingRateCoefficient_);\\n    }\\n\\n    function setOracleDelay(uint256 _oracleDelay) external onlyOwner {\\n        oracleDelay = _oracleDelay;\\n    }\\n}\\n\",\"keccak256\":\"0xd3f796ece8ad60835d27c94ea9e048c7b2351ab3e89f4cbd761ebfb7cd672996\",\"license\":\"MIT\"},\"contracts/polygon/governance/ProtocolParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title parameters controlled by governance\\n * @notice the owner of this contract is the timelock controller of the governance feature\\n */\\ncontract ProtocolParameters is Ownable {\\n\\n    // interval in seconds between the one flip to another in one lock contract\\n    uint256 public flippingInterval;\\n\\n    // amount of reward that the flipper gets if he is right on the outcome\\n    uint256 public flippingReward;\\n\\n    // amount of jots into play in each flip\\n    uint256 public flippingAmount;\\n\\n    // the duration of an NFT auction in seconds\\n    uint256 public auctionDuration;\\n\\n    event FlippingIntervalUpdated(uint256 value);\\n    event FlippingRewardUpdated(uint256 value);\\n    event FlippingAmountUpdated(uint256 value);\\n    event AuctionDurationUpdated(uint256 value);\\n\\n    /**\\n     * @dev sets the default (initial) values of the parameters\\n     *      also transfers the ownership to the governance\\n     */\\n    constructor(\\n        uint256 flippingInterval_,\\n        uint256 flippingReward_,\\n        uint256 flippingAmount_,\\n        uint256 auctionDuration_,\\n        address governanceContractAddress_\\n    ) {\\n        require(flippingReward_ > 0, \\\"Invalid Reward\\\");\\n        require(flippingAmount_ > 0, \\\"Invalid Amount\\\");\\n        require(flippingReward_ < flippingAmount_, \\\"Reward should be lower than Amount\\\");\\n        require(flippingInterval_ > 0 minutes, \\\"Flipping Interval should be greater than 15 minutes\\\");\\n        require(auctionDuration_ > 1 hours, \\\"Auction duration should be greater than 1 hour\\\");\\n\\n        flippingInterval = flippingInterval_;\\n        flippingReward = flippingReward_;\\n        flippingAmount = flippingAmount_;\\n        auctionDuration = auctionDuration_;\\n\\n        // transfer ownership\\n        transferOwnership(governanceContractAddress_);\\n    }\\n\\n    function setFlippingInterval(uint256 flippingInterval_) external onlyOwner {\\n        require(flippingInterval_ > 15 minutes, \\\"Flipping Interval should be greater than 15 minutes\\\");\\n        flippingInterval = flippingInterval_;\\n        emit FlippingIntervalUpdated(flippingInterval_);\\n    }\\n\\n    function setFlippingReward(uint256 flippingReward_) external onlyOwner {\\n        require(flippingReward_ > 0, \\\"Invalid Reward\\\");\\n        require(flippingReward_ < flippingAmount, \\\"Reward should be lower than Amount\\\");\\n        flippingReward = flippingReward_;\\n        emit FlippingRewardUpdated(flippingReward_);\\n    }\\n\\n    function setFlippingAmount(uint256 flippingAmount_) external onlyOwner {\\n        require(flippingAmount_ > 0, \\\"Invalid Amount\\\");\\n        require(flippingReward < flippingAmount_, \\\"Reward should be lower than Amount\\\");\\n        flippingAmount = flippingAmount_;\\n        emit FlippingAmountUpdated(flippingAmount_);\\n    }\\n\\n    function setAuctionDuration(uint256 auctionDuration_) external onlyOwner {\\n        require(auctionDuration_ > 1 hours, \\\"Auction duration should be greater than 1 hour\\\");\\n        auctionDuration = auctionDuration_;\\n        emit AuctionDurationUpdated(auctionDuration_);\\n    }\\n}\\n\",\"keccak256\":\"0xc491924a4d8ee5941416ecf14f30edff563a65774b0cea6e821368a77ad2d8aa\",\"license\":\"MIT\"},\"contracts/polygon/governance/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct MainParams {\\n    int256 minPoolMarginRatio;\\n    int256 minInitialMarginRatio;\\n    int256 minMaintenanceMarginRatio;\\n    int256 minLiquidationReward;\\n    int256 maxLiquidationReward;\\n    int256 liquidationCutRatio;\\n    int256 protocolFeeCollectRatio;\\n}\\n\",\"keccak256\":\"0x8121a2f034679ec2a98fe3d5906979582191b29ce6f15343e3096591cb06bb69\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Jot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../extensions/IERC20ManagedAccounts.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\n\\r\\ncontract Jot is ERC20, IERC20ManagedAccounts, ERC20Burnable, AccessControl, Initializable {\\r\\n    bytes32 public constant ROUTER = keccak256(\\\"ROUTER\\\");\\r\\n    bytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\r\\n\\r\\n    // proxied values for the erc20 attributes\\r\\n    string private _proxiedName;\\r\\n    string private _proxiedSymbol;\\r\\n\\r\\n    /**\\r\\n     * @notice *swap address\\r\\n     */\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n\\r\\n    /**\\r\\n     * @notice pair address\\r\\n     */\\r\\n    address public uniswapV2Pair;\\r\\n\\r\\n    mapping(address => address) private _managers;\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    constructor() ERC20(\\\"Privi Jot Token Implementation\\\", \\\"pJOTI\\\") {}\\r\\n\\r\\n    function initialize(\\r\\n        string calldata _name,\\r\\n        string calldata _symbol,\\r\\n        address swapAddress,\\r\\n        address fundingTokenAddress\\r\\n    ) external initializer {\\r\\n        _proxiedName = _name;\\r\\n        _proxiedSymbol = _symbol;\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(ROUTER, msg.sender);\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(swapAddress);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\r\\n            address(this),\\r\\n            fundingTokenAddress\\r\\n        );\\r\\n\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(\\r\\n            address(this),\\r\\n            fundingTokenAddress\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function mint(address account, uint256 amount) public onlyRole(MINTER) {\\r\\n        _mint(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev allows to send funds from a managed account (infinite allowance)\\r\\n     */\\r\\n    function transferFromManaged(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external virtual override {\\r\\n        require(_managers[sender] == msg.sender, \\\"The caller is not the manager of this account\\\");\\r\\n        _transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function setManager(address manager, address account) external onlyRole(ROUTER) {\\r\\n        _managers[account] = manager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _proxiedName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _proxiedSymbol;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x16e4ab097536659060442fea27db03774a76d71c720aeb09ef236945bd94aae9\",\"license\":\"MIT\"},\"contracts/polygon/implementations/JotPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\r\\nimport \\\"../libraries/ProtocolConstants.sol\\\";\\r\\n\\r\\ncontract JotPool is Initializable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 public totalLiquidity;\\r\\n\\r\\n    mapping(address => uint256) private liquidity;\\r\\n\\r\\n    address public jot;\\r\\n\\r\\n    ProtocolParameters private immutable protocol;\\r\\n\\r\\n    event LiquidityAdded(address provider, uint256 amount, uint256 mintedLiquidity);\\r\\n    event LiquidityRemoved(address provider, uint256 amount, uint256 liquidityBurnt);\\r\\n\\r\\n    constructor(address _protocol) {\\r\\n        require(_protocol != address(0), \\\"Invalid protocol address\\\");\\r\\n        protocol = ProtocolParameters(_protocol);\\r\\n    }\\r\\n\\r\\n    function initialize(address _jot) external initializer {\\r\\n        require(_jot != address(0), \\\"Invalid Jot token\\\");\\r\\n        jot = _jot;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n        uint256 mintedLiquidity = totalLiquidity > 0\\r\\n            ? (totalLiquidity * amount) / IERC20(jot).balanceOf(address(this))\\r\\n            : 100;\\r\\n        liquidity[msg.sender] += mintedLiquidity;\\r\\n        totalLiquidity += mintedLiquidity;\\r\\n        emit LiquidityAdded(msg.sender, amount, mintedLiquidity);\\r\\n        IERC20(jot).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(uint256 amount) external {\\r\\n        require(liquidity[msg.sender] >= amount, \\\"Remove amount exceeds balance\\\");\\r\\n        uint256 liquidityBurnt = (IERC20(jot).balanceOf(address(this)) * amount) / totalLiquidity;\\r\\n        if (totalLiquidity - amount > 0) {\\r\\n            liquidity[msg.sender] -= amount;\\r\\n            totalLiquidity -= amount;\\r\\n        } else {\\r\\n            uint256 jots = ProtocolConstants.JOT_SUPPLY;\\r\\n            liquidity[msg.sender] = jots;\\r\\n            totalLiquidity = jots;\\r\\n        }\\r\\n\\r\\n        emit LiquidityRemoved(msg.sender, amount, liquidityBurnt);\\r\\n\\r\\n        IERC20(jot).safeTransfer(msg.sender, liquidityBurnt);\\r\\n    }\\r\\n\\r\\n    function balance() external view returns (uint256) {\\r\\n        return liquidity[msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x13552d17c113c22f0de05158e1d98e18f780067fb6031b1858ff224596d30758\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct TokenData {\\n    uint256 originalTokenID;\\n    uint256 ownerSupply;\\n    uint256 sellingSupply;\\n    uint256 soldSupply;\\n    uint256 liquiditySupply;\\n    uint256 liquiditySold;\\n    uint256 fractionPrices;\\n    uint256 lastFlipTime;\\n    bool verified;\\n}\\n\\nstruct Flip {\\n    uint256 tokenId;\\n    uint64 prediction;\\n    address player;\\n}\\n\",\"keccak256\":\"0xf8e6b43ea95a7de4578a17643ddd9428696fbe223d46b6a8a2fc975fe5ad9346\",\"license\":\"MIT\"},\"contracts/polygon/implementations/SyntheticCollectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"../extensions/IERC20ManagedAccounts.sol\\\";\\r\\nimport \\\"../auctions/AuctionsManager.sol\\\";\\r\\nimport \\\"../chainlink/RandomNumberConsumer.sol\\\";\\r\\nimport \\\"../chainlink/PolygonValidatorOracle.sol\\\";\\r\\nimport \\\"../SyntheticProtocolRouter.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\r\\nimport \\\"./Jot.sol\\\";\\r\\nimport \\\"./Structs.sol\\\";\\r\\nimport \\\"../libraries/ProtocolConstants.sol\\\";\\r\\n\\r\\ncontract SyntheticCollectionManager is AccessControl, Initializable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    bytes32 public constant ROUTER = keccak256(\\\"ROUTER\\\");\\r\\n    bytes32 public constant AUCTION_MANAGER = keccak256(\\\"AUCTION_MANAGER\\\");\\r\\n    bytes32 public constant RANDOM_ORACLE = keccak256(\\\"RANDOM_ORACLE\\\");\\r\\n    bytes32 public constant VALIDATOR_ORACLE = keccak256(\\\"VALIDATOR_ORACLE\\\");\\r\\n\\r\\n    address private immutable _randomConsumerAddress;\\r\\n    address private immutable _validatorAddress;\\r\\n    address private _auctionsManagerAddress;\\r\\n\\r\\n    /**\\r\\n     * @dev ERC20 totalSupply (governance) parameter\\r\\n     * TODO: get from governance\\r\\n     */\\r\\n    uint256 private _jotsSupply;\\r\\n\\r\\n    /**\\r\\n     * @dev mapping the request id with the flip input data\\r\\n     */\\r\\n    mapping(bytes32 => Flip) private _flips;\\r\\n\\r\\n    mapping(uint256 => uint256) private _originalToSynthetic;\\r\\n\\r\\n    Counters.Counter public tokenCounter;\\r\\n\\r\\n    /**\\r\\n     * @notice the address of the Protocol Router\\r\\n     */\\r\\n    address public syntheticProtocolRouterAddress;\\r\\n\\r\\n    ProtocolParameters public protocol;\\r\\n\\r\\n    /**\\r\\n     * @notice address of the original collection\\r\\n     */\\r\\n    address public originalCollectionAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice jot Address for this collection\\r\\n     */\\r\\n    address public jotAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice funding token address\\r\\n     */\\r\\n    address public fundingTokenAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice data for each token\\r\\n     */\\r\\n    mapping(uint256 => TokenData) public tokens;\\r\\n\\r\\n    /**\\r\\n     * @dev the nonce to avoid double verification (quantity of exits for original token id)\\r\\n     */\\r\\n    mapping(uint256 => uint256) public nonces;\\r\\n    mapping(uint256 => mapping(uint256 => address)) public ownersByNonce;\\r\\n\\r\\n    /**\\r\\n     * @notice Synthetic NFT Address  for this collection\\r\\n     */\\r\\n    address public erc721address;\\r\\n\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n\\r\\n    address public jotPool;\\r\\n\\r\\n    event CoinFlipped(\\r\\n        bytes32 indexed requestId,\\r\\n        address indexed player,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 prediction\\r\\n    );\\r\\n    event FlipProcessed(\\r\\n        bytes32 indexed requestId,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 prediction,\\r\\n        uint256 randomResult\\r\\n    );\\r\\n\\r\\n    constructor(address randomConsumerAddress, address validatorAddress) {\\r\\n        _randomConsumerAddress = randomConsumerAddress;\\r\\n        _validatorAddress = validatorAddress;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _jotAddress,\\r\\n        address originalCollectionAddress_,\\r\\n        address _erc721address,\\r\\n        address auctionManagerAddress,\\r\\n        address protocol_,\\r\\n        address fundingTokenAddress_,\\r\\n        address jotPool_\\r\\n    ) external initializer {\\r\\n        jotAddress = _jotAddress;\\r\\n        erc721address = _erc721address;\\r\\n        originalCollectionAddress = originalCollectionAddress_;\\r\\n        syntheticProtocolRouterAddress = msg.sender;\\r\\n        _auctionsManagerAddress = auctionManagerAddress;\\r\\n        protocol = ProtocolParameters(protocol_);\\r\\n        jotPool = jotPool_;\\r\\n\\r\\n        _jotsSupply = ProtocolConstants.JOT_SUPPLY;\\r\\n        fundingTokenAddress = fundingTokenAddress_;\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(ROUTER, msg.sender);\\r\\n        _setupRole(AUCTION_MANAGER, auctionManagerAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev we need to pass the jobSupply here to work well even when the governance\\r\\n     *      changes this protocol parameter in the middle of the auction\\r\\n     */\\r\\n    function reassignNFT(uint256 nftId_, address newOwner_) external onlyRole(AUCTION_MANAGER) {\\r\\n        require(ISyntheticNFT(erc721address).exists(nftId_), \\\"Non existent synthetic NFT\\\");\\r\\n\\r\\n        TokenData storage data = tokens[nftId_];\\r\\n\\r\\n        // the auction could only be started if ownerSupply is 0\\r\\n        assert(data.ownerSupply == 0);\\r\\n\\r\\n        // Get original token ID\\r\\n        uint256 originalID = tokens[nftId_].originalTokenID;\\r\\n\\r\\n        // Burn synthetic NFT\\r\\n        ISyntheticNFT(erc721address).safeBurn(nftId_);\\r\\n\\r\\n        // Get new synthetic ID\\r\\n        uint256 newSyntheticID = tokenCounter.current();\\r\\n\\r\\n        // Update original to synthetic mapping\\r\\n        _originalToSynthetic[originalID] = newSyntheticID;\\r\\n\\r\\n        // Empty previous id\\r\\n        tokens[nftId_] = TokenData(0, 0, 0, 0, 0, 0, 0, 0, false);\\r\\n\\r\\n        // Fill new ID\\r\\n        uint256 tokenSupply = ProtocolConstants.JOT_SUPPLY;\\r\\n        tokens[newSyntheticID] = TokenData(originalID, tokenSupply, 0, 0, 0, 0, 0, 0, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice change an NFT for another one of the same collection\\r\\n     */\\r\\n    function change(\\r\\n        uint256 syntheticID,\\r\\n        uint256 newOriginalTokenID,\\r\\n        address caller\\r\\n    ) public onlyRole(ROUTER) {\\r\\n        // Token must be registered\\r\\n        require(ISyntheticNFT(erc721address).exists(syntheticID), \\\"token not registered!\\\");\\r\\n        require(tokens[syntheticID].ownerSupply != 0, \\\"Token is locked\\\");\\r\\n\\r\\n        // Caller must be token owner\\r\\n        address tokenOwner = IERC721(erc721address).ownerOf(syntheticID);\\r\\n        require(tokenOwner == caller, \\\"You are not the owner of the NFT!\\\");\\r\\n\\r\\n        // Change original token ID and set verified = false\\r\\n        uint256 originalID = tokens[syntheticID].originalTokenID;\\r\\n\\r\\n        _originalToSynthetic[originalID] = 0;\\r\\n        _originalToSynthetic[newOriginalTokenID] = syntheticID;\\r\\n\\r\\n        tokens[syntheticID].originalTokenID = newOriginalTokenID;\\r\\n        tokens[syntheticID].verified = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the owner of the NFT\\r\\n     */\\r\\n    function getSyntheticNFTOwner(uint256 tokenId) private view returns (address) {\\r\\n        //TODO: get owner from Oracle\\r\\n        return IERC721(erc721address).ownerOf(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice returns the Quickswap pool address\\r\\n     */\\r\\n    function poolAddress() public view returns (address) {\\r\\n        //TODO: check if pool is initiated\\r\\n        return IJot(jotAddress).uniswapV2Pair();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice public function. Checks if an NFT has\\r\\n     * been already fractionalized\\r\\n     */\\r\\n    function isSyntheticNFTCreated(uint256 tokenId) public view returns (bool) {\\r\\n        return _originalToSynthetic[tokenId] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice public function. Checks if an NFT has\\r\\n     * been already fractionalised.\\r\\n     */\\r\\n    function isSyntheticNFTFractionalised(uint256 tokenId) public view returns (bool) {\\r\\n        return tokens[tokenId].originalTokenID != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks isSyntheticNFTCreated(address, id) is False.\\r\\n     * Then it mints a new NFT with: \\u201dto\\u201d, \\u201did\\u201d and \\u201dmetadata\\u201d\\r\\n     */\\r\\n    function generateSyntheticNFT(address to, uint256 tokenId) private {\\r\\n        ISyntheticNFT(erc721address).safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice First\\r\\n     * it updates counter syntheticID++. Then:\\r\\n     * \\u2022 generateSyntheticNFT(address, id)\\r\\n     * \\u2022 Interacts with JOT contract for that address and:\\r\\n     * (a) Mints JotSupply (governance parameter)\\r\\n     * (b) Register ownerSupply (DO NOT SEND HIM/HER)\\r\\n     * (c) Register sellingSupply = (JotSupply-supplyToKeep)/2\\r\\n     * (d) Register soldSupply = 0\\r\\n     * (e) Register liquiditySupply = (JotSupply-supplyToKeep)/2.\\r\\n     * (f) Register liquiditySold = 0\\r\\n     *\\r\\n     */\\r\\n    function register(\\r\\n        uint256 tokenId,\\r\\n        uint256 supplyToKeep,\\r\\n        uint256 priceFraction,\\r\\n        address nftOwner\\r\\n    ) public onlyRole(ROUTER) returns (uint256) {\\r\\n        require(priceFraction > 0, \\\"priceFraction can't be zero\\\");\\r\\n        require(isSyntheticNFTCreated(tokenId) == false, \\\"Synthetic NFT already generated!\\\");\\r\\n\\r\\n        uint256 syntheticID = tokenCounter.current();\\r\\n\\r\\n        generateSyntheticNFT(nftOwner, syntheticID);\\r\\n\\r\\n        Jot(jotAddress).mint(address(this), _jotsSupply);\\r\\n\\r\\n        uint256 sellingSupply = (_jotsSupply - supplyToKeep) / 2;\\r\\n        uint256 liquiditySupply = (_jotsSupply - supplyToKeep) / 2;\\r\\n\\r\\n        TokenData memory data = TokenData({\\r\\n            originalTokenID: tokenId,\\r\\n            ownerSupply: supplyToKeep,\\r\\n            sellingSupply: sellingSupply,\\r\\n            soldSupply: 0,\\r\\n            liquiditySupply: liquiditySupply,\\r\\n            liquiditySold: 0,\\r\\n            fractionPrices: priceFraction,\\r\\n            lastFlipTime: 0,\\r\\n            verified: false\\r\\n        });\\r\\n\\r\\n        tokens[syntheticID] = data;\\r\\n\\r\\n        tokenCounter.increment();\\r\\n\\r\\n        return syntheticID;\\r\\n    }\\r\\n\\r\\n    function getOwnerSupply(uint256 tokenId) public view returns (uint256) {\\r\\n        return tokens[tokenId].ownerSupply;\\r\\n    }\\r\\n\\r\\n    function getSellingSupply(uint256 tokenId) public view returns (uint256) {\\r\\n        return tokens[tokenId].sellingSupply;\\r\\n    }\\r\\n\\r\\n    function getSoldSupply(uint256 tokenId) public view returns (uint256) {\\r\\n        return tokens[tokenId].soldSupply;\\r\\n    }\\r\\n\\r\\n    function getJotFractionPrice(uint256 tokenId) public view returns (uint256) {\\r\\n        return tokens[tokenId].fractionPrices;\\r\\n    }\\r\\n\\r\\n    function getJotAmountLeft(uint256 tokenId) public view returns (uint256) {\\r\\n        TokenData storage token = tokens[tokenId];\\r\\n        return token.sellingSupply - token.soldSupply;\\r\\n    }\\r\\n\\r\\n    function getSalePrice(uint256 tokenId, uint256 buyAmount) public view returns (uint256) {\\r\\n        uint256 amount = (buyAmount * tokens[tokenId].fractionPrices) / 10**18;\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function getFundingTokenAllowance() public view returns (uint256) {\\r\\n        return IERC20(fundingTokenAddress).allowance(msg.sender, address(this));\\r\\n    }\\r\\n\\r\\n    function getContractJotsBalance() public view returns (uint256) {\\r\\n        return IJot(jotAddress).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows the caller to buy jots using the Funding token\\r\\n     */\\r\\n    function buyJotTokens(uint256 tokenId, uint256 buyAmount) public {\\r\\n        TokenData storage token = tokens[tokenId];\\r\\n        require(ISyntheticNFT(erc721address).exists(tokenId), \\\"Token not registered\\\");\\r\\n        require(token.fractionPrices > 0, \\\"Token price not set\\\");\\r\\n        require(token.verified, \\\"Token not verified yet\\\");\\r\\n        require(token.ownerSupply != 0, \\\"Token is locked\\\");\\r\\n\\r\\n        // Calculate amount left\\r\\n        uint256 amountLeft = token.sellingSupply - token.soldSupply;\\r\\n\\r\\n        // If amount left is lesser than buying amount\\r\\n        // then buying amount = amount left\\r\\n        if (amountLeft < buyAmount) {\\r\\n            buyAmount = amountLeft;\\r\\n        }\\r\\n        uint256 amount = (buyAmount * token.fractionPrices) / 10**18;\\r\\n        // Can't sell zero tokens\\r\\n        require(amount != 0, \\\"No tokens left!\\\");\\r\\n\\r\\n        // Transfer funding tokens\\r\\n        IERC20(fundingTokenAddress).transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        // Transfer Jots\\r\\n        IJot(jotAddress).transfer(msg.sender, buyAmount);\\r\\n\\r\\n        //Increase sold supply (amount in token) and liquidity sold (amount in ether)\\r\\n        token.soldSupply += buyAmount;\\r\\n        token.liquiditySold += amount;\\r\\n\\r\\n        //If all jots have been sold, then add liquidity\\r\\n        if (amount == amountLeft) {\\r\\n            addLiquidityToPool(tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice increase selling supply for a given NFT\\r\\n     * caller must be the owner of the NFT\\r\\n     */\\r\\n\\r\\n    function increaseSellingSupply(uint256 tokenId, uint256 amount) public {\\r\\n        TokenData storage token = tokens[tokenId];\\r\\n        require(msg.sender == getSyntheticNFTOwner(tokenId), \\\"You are not the owner of the NFT!\\\");\\r\\n\\r\\n        require(token.verified, \\\"Token not verified yet\\\");\\r\\n        require(token.ownerSupply != 0, \\\"Token is locked\\\");\\r\\n\\r\\n        require(token.ownerSupply >= amount, \\\"You do not have enough tokens left\\\");\\r\\n        token.ownerSupply -= amount;\\r\\n        token.sellingSupply += amount / 2;\\r\\n        token.liquiditySupply += amount / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice decrease selling supply for a given NFT\\r\\n     * caller must be the owner of the NFT\\r\\n     */\\r\\n    function decreaseSellingSupply(uint256 tokenId, uint256 amount) public {\\r\\n        require(msg.sender == getSyntheticNFTOwner(tokenId), \\\"You are not the owner of the NFT!\\\");\\r\\n\\r\\n        TokenData storage token = tokens[tokenId];\\r\\n\\r\\n        require(token.verified, \\\"Token not verified yet\\\");\\r\\n        require(token.ownerSupply != 0, \\\"Token is locked\\\");\\r\\n\\r\\n        require(token.liquiditySupply >= amount / 2, \\\"You do not have enough liquidity left\\\");\\r\\n        require(token.sellingSupply >= amount / 2, \\\"You do not have enough selling supply left\\\");\\r\\n\\r\\n        token.ownerSupply += amount;\\r\\n        token.sellingSupply -= amount / 2;\\r\\n        token.liquiditySupply -= amount / 2;\\r\\n    }\\r\\n\\r\\n    function lockedNFT(uint256 tokenId) public view returns (bool) {\\r\\n        TokenData storage token = tokens[tokenId];\\r\\n        return !token.verified || token.ownerSupply == 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update the price of a fraction for a given NFT\\r\\n     * caller must be the owner\\r\\n     */\\r\\n    function updatePriceFraction(uint256 tokenId, uint256 newFractionPrice) public {\\r\\n        require(ISyntheticNFT(erc721address).exists(tokenId), \\\"Token not registered\\\");\\r\\n\\r\\n        TokenData storage token = tokens[tokenId];\\r\\n\\r\\n        require(token.verified, \\\"Token not verified yet\\\");\\r\\n        require(token.ownerSupply != 0, \\\"Token is locked\\\");\\r\\n\\r\\n        require(msg.sender == getSyntheticNFTOwner(tokenId), \\\"You are not the owner of the NFT!\\\");\\r\\n        token.fractionPrices = newFractionPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice add available liquidity for a given token to UniSwap pool\\r\\n     */\\r\\n    function addLiquidityToPool(uint256 tokenId) internal {\\r\\n        TokenData storage token = tokens[tokenId];\\r\\n\\r\\n        uint256 liquiditySupply = token.liquiditySupply;\\r\\n        uint256 liquiditySold = token.liquiditySold;\\r\\n\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        IJot(jotAddress).approve(address(uniswapV2Router), liquiditySupply);\\r\\n\\r\\n        IERC20(fundingTokenAddress).approve(address(uniswapV2Router), liquiditySold);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidity(\\r\\n            jotAddress,\\r\\n            fundingTokenAddress,\\r\\n            liquiditySupply,\\r\\n            liquiditySold,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            address(0),\\r\\n            block.timestamp // solhint-disable-line\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function isAllowedToFlip(uint256 tokenId) public view returns (bool) {\\r\\n        return\\r\\n            ISyntheticNFT(erc721address).exists(tokenId) &&\\r\\n            block.timestamp - tokens[tokenId].lastFlipTime >= protocol.flippingInterval() && // solhint-disable-line\\r\\n            IERC20(jotAddress).balanceOf(jotPool) > protocol.flippingAmount() &&\\r\\n            isSyntheticNFTFractionalised(tokenId);\\r\\n    }\\r\\n\\r\\n    function flipJot(uint256 tokenId, uint64 prediction) external {\\r\\n        TokenData storage token = tokens[tokenId];\\r\\n\\r\\n        require(isAllowedToFlip(tokenId), \\\"Flip is not allowed yet\\\");\\r\\n        require(token.ownerSupply != 0, \\\"Token is locked\\\");\\r\\n\\r\\n        token.lastFlipTime = block.timestamp; // solhint-disable-line\\r\\n\\r\\n        bytes32 requestId = RandomNumberConsumer(_randomConsumerAddress).getRandomNumber();\\r\\n        _flips[requestId] = Flip({tokenId: tokenId, prediction: prediction, player: msg.sender});\\r\\n\\r\\n        emit CoinFlipped(requestId, msg.sender, tokenId, prediction);\\r\\n    }\\r\\n\\r\\n    function processFlipResult(uint256 randomNumber, bytes32 requestId) external onlyRole(RANDOM_ORACLE) {\\r\\n        uint256 poolAmount;\\r\\n        uint256 fAmount = protocol.flippingAmount();\\r\\n        uint256 fReward = protocol.flippingReward();\\r\\n\\r\\n        Flip memory flip = _flips[requestId];\\r\\n        uint256 ownerSupply = tokens[flip.tokenId].ownerSupply;\\r\\n\\r\\n        // avoid underflow in math operations\\r\\n        if (fAmount > ownerSupply) {\\r\\n            fAmount = ownerSupply;\\r\\n        }\\r\\n        if (fReward > fAmount) {\\r\\n            fReward = fAmount;\\r\\n        }\\r\\n\\r\\n        if (randomNumber == 0) {\\r\\n            tokens[flip.tokenId].ownerSupply -= fAmount;\\r\\n            if (randomNumber != flip.prediction) {\\r\\n                poolAmount = fAmount;\\r\\n            } else {\\r\\n                poolAmount = fAmount - fReward;\\r\\n                IERC20(jotAddress).safeTransfer(_flips[requestId].player, fReward);\\r\\n            }\\r\\n            if (poolAmount > 0) {\\r\\n                IERC20(jotAddress).safeTransfer(jotPool, poolAmount);\\r\\n            }\\r\\n        } else {\\r\\n            tokens[flip.tokenId].ownerSupply += fAmount;\\r\\n            if (randomNumber != flip.prediction) {\\r\\n                poolAmount = fAmount;\\r\\n            } else {\\r\\n                poolAmount = fAmount - fReward;\\r\\n                IERC20(jotAddress).safeTransfer(_flips[requestId].player, fReward);\\r\\n            }\\r\\n            if (poolAmount > 0) {\\r\\n                IERC20ManagedAccounts(jotAddress).transferFromManaged(jotPool, address(this), poolAmount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // lock the nft and make it auctionable\\r\\n        if (tokens[flip.tokenId].ownerSupply == 0) {\\r\\n            AuctionsManager(_auctionsManagerAddress).whitelistNFT(flip.tokenId);\\r\\n        }\\r\\n\\r\\n        emit FlipProcessed(requestId, flip.tokenId, flip.prediction, randomNumber);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This method calls chainlink oracle and\\r\\n     * verifies if the NFT has been locked on NFTVaultManager. In addition\\r\\n     * gets the metadata of the NFT\\r\\n     */\\r\\n    function verify(uint256 tokenId) external {\\r\\n        TokenData storage token = tokens[tokenId];\\r\\n        require(ISyntheticNFT(erc721address).exists(tokenId), \\\"Token not registered\\\");\\r\\n        require(!token.verified, \\\"Token already verified\\\");\\r\\n        PolygonValidatorOracle(_validatorAddress).verifyTokenInCollection(\\r\\n            originalCollectionAddress,\\r\\n            token.originalTokenID,\\r\\n            nonces[token.originalTokenID]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function processSuccessfulVerify(uint256 tokenId) external onlyRole(VALIDATOR_ORACLE) {\\r\\n        tokens[tokenId].verified = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows to exit the protocol (retrieve the token)\\r\\n     */\\r\\n    function exitProtocol(uint256 tokenId) external {\\r\\n        TokenData storage token = tokens[tokenId];\\r\\n        uint256 ownerSupply = token.ownerSupply;\\r\\n        require(ISyntheticNFT(erc721address).ownerOf(tokenId) == msg.sender, \\\"Only owner allowed\\\");\\r\\n        require(ownerSupply >= ProtocolConstants.JOT_SUPPLY, \\\"Insufficient jot supply in the token\\\");\\r\\n\\r\\n        // increase nonce to avoid double verification\\r\\n        uint256 currentNonce = nonces[token.originalTokenID];\\r\\n        ownersByNonce[tokenId][currentNonce] = msg.sender;\\r\\n        nonces[token.originalTokenID] = currentNonce + 1;\\r\\n\\r\\n        // free space and get refunds\\r\\n        delete tokens[tokenId];\\r\\n\\r\\n        // burn the jots and the nft\\r\\n        Jot(jotAddress).burn(ownerSupply);\\r\\n        safeBurn(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev burn a token\\r\\n     */\\r\\n    function safeBurn(uint256 tokenId) public onlyRole(ROUTER) {\\r\\n        ISyntheticNFT(erc721address).safeBurn(tokenId);\\r\\n        tokenCounter.decrement();\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function isVerified(uint256 tokenId) public view returns (bool) {\\r\\n        require(ISyntheticNFT(erc721address).exists(tokenId), \\\"NFT not minted\\\");\\r\\n        return tokens[tokenId].verified;\\r\\n    }\\r\\n\\r\\n    function getOriginalID(uint256 tokenId) public view returns (uint256) {\\r\\n        require(ISyntheticNFT(erc721address).exists(tokenId));\\r\\n        return tokens[tokenId].originalTokenID;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x643d9861f98232a1cbb62acc639459f64bd2c2d1673a0f47e96bd3240c271a86\",\"license\":\"MIT\"},\"contracts/polygon/implementations/SyntheticNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\nimport \\\"./SyntheticCollectionManager.sol\\\";\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract SyntheticNFT is ERC721, Initializable, AccessControl {\\r\\n    bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\r\\n\\r\\n    // token metadata\\r\\n    mapping(uint256 => string) private _tokenMetadata;\\r\\n\\r\\n    // proxied values for the erc721 attributes\\r\\n    string private _proxiedName;\\r\\n    string private _proxiedSymbol;\\r\\n\\r\\n    address private _collectionManager;\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    constructor() ERC721(\\\"Privi Collection Token\\\", \\\"PCT\\\") {}\\r\\n\\r\\n    function initialize(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address collectionManager_\\r\\n    ) external initializer {\\r\\n        _proxiedName = name_;\\r\\n        _proxiedSymbol = symbol_;\\r\\n        _collectionManager = collectionManager_;\\r\\n\\r\\n        _setupRole(MANAGER, collectionManager_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _proxiedName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _proxiedSymbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        return _tokenMetadata[tokenId];\\r\\n    }\\r\\n\\r\\n    function exists(uint256 tokenId) public view returns (bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n\\r\\n    function safeMint(address to, uint256 tokenId) public onlyRole(MANAGER) {\\r\\n        _mint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function setMetadata(uint256 tokenId, string memory metadata) public onlyRole(MANAGER) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        _tokenMetadata[tokenId] = metadata;\\r\\n    }\\r\\n\\r\\n    function safeBurn(uint256 tokenId) public onlyRole(MANAGER) {\\r\\n        _burn(tokenId);\\r\\n        _tokenMetadata[tokenId] = \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(AccessControl, ERC721)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev override the before transfer hook to allow locking the nft\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address,\\r\\n        address,\\r\\n        uint256 tokenId\\r\\n    ) internal view override {\\r\\n        if (_exists(tokenId)) {\\r\\n            require(!SyntheticCollectionManager(_collectionManager).lockedNFT(tokenId), \\\"Token is locked\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbdfabb3489328c6f2bba78745202d43b41e2eaf99f6c3e63da8b5f9220f6e2c9\",\"license\":\"MIT\"},\"contracts/polygon/libraries/ProtocolConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary ProtocolConstants {\\r\\n    uint256 public constant JOT_SUPPLY = 100000000000000000000000;\\r\\n}\\r\\n\",\"keccak256\":\"0xae3da923916bf5e87ce57eece92b593a72eacae7c7a5cfba8fe7ca7849f90437\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806363779c7411610097578063a217fddf11610066578063a217fddf14610264578063c1b8411a1461026c578063d547741f14610293578063f887ea40146102a657600080fd5b806363779c74146101e65780638ce744261461020d5780638e1af0f41461023e57806391d148541461025157600080fd5b80632f2ff15d116100d35780632f2ff15d1461019a57806336568abe146101ad578063485cc955146101c057806356dd4755146101d357600080fd5b806301ffc9a7146101055780630e61f93f1461012d578063248a9ca3146101625780632d7f68ae14610185575b600080fd5b6101186101133660046110bb565b6102b9565b60405190151581526020015b60405180910390f35b6101547f37f0a33db78f4b8b1fc9993513f501082a3b9277a40f61dd84f51f2dd2bd7eaf81565b604051908152602001610124565b61015461017036600461107f565b60009081526020819052604090206001015490565b61019861019336600461107f565b6102f0565b005b6101986101a8366004611097565b610342565b6101986101bb366004611097565b61036d565b6101986101ce366004610fb2565b6103f0565b6101986101e136600461102b565b61051c565b6101547f2a86bfecab7c1dc1a00b694d14a5a3c91a3ce748c12f853f875c4c7b4b254eb781565b600154610226906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610124565b61019861024c366004610fea565b610ad7565b61011861025f366004611097565b610b6a565b610154600081565b6101547f503cf060389b91af8851125bd70ce66d16d12330718b103fc7674ef6d27e70c981565b6101986102a1366004611097565b610b93565b600254610226906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806102ea57506301ffc9a760e01b6001600160e01b03198316145b92915050565b7f37f0a33db78f4b8b1fc9993513f501082a3b9277a40f61dd84f51f2dd2bd7eaf61031b8133610bb9565b5033600090815260036020908152604080832093835292905220805460ff19166001179055565b60008281526020819052604090206001015461035e8133610bb9565b6103688383610c1d565b505050565b6001600160a01b03811633146103e25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6103ec8282610ca1565b5050565b600154610100900460ff1680610409575060015460ff16155b61046c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103d9565b600154610100900460ff1615801561048e576001805461ffff19166101011790555b7f503cf060389b91af8851125bd70ce66d16d12330718b103fc7674ef6d27e70c96104b98133610bb9565b6001805462010000600160b01b031916620100006001600160a01b038781169190910291909117909155600280546001600160a01b031916918516919091179055610505600084610d06565b508015610368576001805461ff0019169055505050565b6001600160a01b038316600090815260036020908152604080832085845290915290205460ff1661058f5760405162461bcd60e51b815260206004820152601860248201527f546f6b656e2063616e27742062652061756374696f6e6564000000000000000060448201526064016103d9565b69152d02c7e14af68000008110156105df5760405162461bcd60e51b81526020600482015260136024820152724f70656e696e672062696420746f6f206c6f7760681b60448201526064016103d9565b60025460405163c3e7e12d60e01b81526001600160a01b038581166004830152602482018590529091169063c3e7e12d9060440160206040518083038186803b15801561062b57600080fd5b505afa15801561063f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610663919061105f565b6106a65760405162461bcd60e51b81526020600482015260146024820152732737b7103932b3b4b9ba32b932b2103a37b5b2b760611b60448201526064016103d9565b6001600160a01b038381166000818152600360209081526040808320878452909152808220805460ff191690556002549051637546d98560e01b8152600481019390935290921690637546d9859060240160206040518083038186803b15801561070f57600080fd5b505afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107479190610f96565b905060006107747f0000000000000000000000000000000000000000000000000000000000000000610d10565b600254604051630509f64560e41b81526001600160a01b0388811660048301529293508284169263d85b9fb892889287929091169063509f64509060240160206040518083038186803b1580156107ca57600080fd5b505afa1580156107de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108029190610f96565b60025460405163056f4f1f60e41b81526001600160a01b038c81166004830152909116906356f4f1f09060240160206040518083038186803b15801561084757600080fd5b505afa15801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f9190610f96565b88600160029054906101000a90046001600160a01b03166001600160a01b0316630cbf54c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ce57600080fd5b505afa1580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090691906110e3565b6040516001600160e01b031960e089901b16815260048101969096526001600160a01b039485166024870152928416604486015292166064840152608483019190915260a48201523360c482015260e401600060405180830381600087803b15801561097157600080fd5b505af1158015610985573d6000803e3d6000fd5b505050506109b37f2a86bfecab7c1dc1a00b694d14a5a3c91a3ce748c12f853f875c4c7b4b254eb782610d06565b6040516323b872dd60e01b81523360048201526001600160a01b038281166024830152604482018590528316906323b872dd90606401602060405180830381600087803b158015610a0357600080fd5b505af1158015610a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3b919061105f565b610a875760405162461bcd60e51b815260206004820152601760248201527f556e61626c6520746f207472616e73666572206a6f747300000000000000000060448201526064016103d9565b604080516001600160a01b038381168252602082018690528692908816917f3f56989faf73e0fa48db704c98688b152de2669b2c98b59b7e6c22a7998fe5f9910160405180910390a35050505050565b7f2a86bfecab7c1dc1a00b694d14a5a3c91a3ce748c12f853f875c4c7b4b254eb7610b028133610bb9565b60405163016bcb2960e11b8152600481018490526001600160a01b0383811660248301528516906302d7965290604401600060405180830381600087803b158015610b4c57600080fd5b505af1158015610b60573d6000803e3d6000fd5b5050505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600082815260208190526040902060010154610baf8133610bb9565b6103688383610ca1565b610bc38282610b6a565b6103ec57610bdb816001600160a01b03166014610dad565b610be6836020610dad565b604051602001610bf79291906110fb565b60408051601f198184030181529082905262461bcd60e51b82526103d991600401611170565b610c278282610b6a565b6103ec576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610c5d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610cab8282610b6a565b156103ec576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6103ec8282610c1d565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116610da85760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016103d9565b919050565b60606000610dbc8360026111bb565b610dc79060026111a3565b67ffffffffffffffff811115610ded57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610e17576020820181803683370190505b509050600360fc1b81600081518110610e4057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610e7d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000610ea18460026111bb565b610eac9060016111a3565b90505b6001811115610f40576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610eee57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110610f1257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93610f398161120a565b9050610eaf565b508315610f8f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103d9565b9392505050565b600060208284031215610fa7578081fd5b8151610f8f81611237565b60008060408385031215610fc4578081fd5b8235610fcf81611237565b91506020830135610fdf81611237565b809150509250929050565b600080600060608486031215610ffe578081fd5b833561100981611237565b925060208401359150604084013561102081611237565b809150509250925092565b60008060006060848603121561103f578283fd5b833561104a81611237565b95602085013595506040909401359392505050565b600060208284031215611070578081fd5b81518015158114610f8f578182fd5b600060208284031215611090578081fd5b5035919050565b600080604083850312156110a9578182fd5b823591506020830135610fdf81611237565b6000602082840312156110cc578081fd5b81356001600160e01b031981168114610f8f578182fd5b6000602082840312156110f4578081fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516111338160178501602088016111da565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516111648160288401602088016111da565b01602801949350505050565b602081526000825180602084015261118f8160408501602087016111da565b601f01601f19169190910160400192915050565b600082198211156111b6576111b6611221565b500190565b60008160001904831182151516156111d5576111d5611221565b500290565b60005b838110156111f55781810151838201526020016111dd565b83811115611204576000848401525b50505050565b60008161121957611219611221565b506000190190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461124c57600080fd5b5056fea26469706673582212208b07d3c115be20a1cf93800fe52b38476a4f7c0364d2fc5e03f959b7c43fe3c364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "reassignNFT(address,uint256,address)": {
        "details": "we need to pass the jobSupply here to work well even when the governance      changes this protocol parameter in the middle of the auction"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "_nftAuctionImplementation": {
        "details": "the implementation to deploy through minimal proxies"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2284,
        "contract": "contracts/polygon/auctions/AuctionsManager.sol:AuctionsManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2279_storage)"
      },
      {
        "astId": 5456,
        "contract": "contracts/polygon/auctions/AuctionsManager.sol:AuctionsManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5459,
        "contract": "contracts/polygon/auctions/AuctionsManager.sol:AuctionsManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 17418,
        "contract": "contracts/polygon/auctions/AuctionsManager.sol:AuctionsManager",
        "label": "protocol",
        "offset": 2,
        "slot": "1",
        "type": "t_contract(ProtocolParameters)19319"
      },
      {
        "astId": 17421,
        "contract": "contracts/polygon/auctions/AuctionsManager.sol:AuctionsManager",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(SyntheticProtocolRouter)17382"
      },
      {
        "astId": 17427,
        "contract": "contracts/polygon/auctions/AuctionsManager.sol:AuctionsManager",
        "label": "_whitelistedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ProtocolParameters)19319": {
        "encoding": "inplace",
        "label": "contract ProtocolParameters",
        "numberOfBytes": "20"
      },
      "t_contract(SyntheticProtocolRouter)17382": {
        "encoding": "inplace",
        "label": "contract SyntheticProtocolRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2279_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2279_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(RoleData)2279_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2276,
            "contract": "contracts/polygon/auctions/AuctionsManager.sol:AuctionsManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2278,
            "contract": "contracts/polygon/auctions/AuctionsManager.sol:AuctionsManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}