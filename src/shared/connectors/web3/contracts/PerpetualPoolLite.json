{
  "address": "0x8bDb35bB87EAe5278790BE4BA5f9a6CCC00347a9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[7]",
          "name": "addresses",
          "type": "address[7]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "AddMargin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeCollection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveMargin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "tradeVolume",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SignedPrice",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SignedPrice",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "addMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "addMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "bTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidatorQualifierAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolFeeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlyingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidity",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParameters",
      "outputs": [
        {
          "internalType": "int256",
          "name": "minPoolMarginRatio",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "minInitialMarginRatio",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "minMaintenanceMarginRatio",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "minLiquidationReward",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "maxLiquidationReward",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "liquidationCutRatio",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "protocolFeeCollectRatio",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeeAccrued",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSymbol",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cumulativeFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "tradersNetVolume",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "tradersNetCost",
              "type": "int256"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SymbolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSymbolPriceAndMultiplier",
      "outputs": [
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "multiplier",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTraderPortfolio",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "volume",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cost",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lastCumulativeFundingRate",
              "type": "int256"
            }
          ],
          "internalType": "struct IPTokenLite.Position",
          "name": "position",
          "type": "tuple"
        },
        {
          "internalType": "int256",
          "name": "margin",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SignedPrice",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lShares",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lShares",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SignedPrice",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SignedPrice",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "removeMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bAmount",
          "type": "uint256"
        }
      ],
      "name": "removeMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "tradeVolume",
          "type": "int256"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "tradeVolume",
          "type": "int256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPerpetualPoolLite.SignedPrice",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2868be14faed0c4ac0d39962e0d37e989753419084651a570fb0f83970f6219d",
  "receipt": {
    "to": null,
    "from": "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
    "contractAddress": "0x8bDb35bB87EAe5278790BE4BA5f9a6CCC00347a9",
    "transactionIndex": 1,
    "gasUsed": "3335701",
    "logsBloom": "0x
    "blockHash": "0xb407111d2e767c7dc7859d40cb414771f3694b3eb9a15e6cced0a7f556f1d1dd",
    "transactionHash": "0x2868be14faed0c4ac0d39962e0d37e989753419084651a570fb0f83970f6219d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 19354304,
        "transactionHash": "0x2868be14faed0c4ac0d39962e0d37e989753419084651a570fb0f83970f6219d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d",
          "0x00000000000000000000000092da9f8f3ee16a276896fc7b2550b2151aae0332"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000238d683b8bb600000000000000000000000000000000000000000000000000447d61ee1054fb4c000000000000000000000000000000000000000000000007e295becc9d6a45f40000000000000000000000000000000000000000000000004459d485d4c9454c000000000000000000000000000000000000000000000007e2b94c34d8f5fbf4",
        "logIndex": 3,
        "blockHash": "0xb407111d2e767c7dc7859d40cb414771f3694b3eb9a15e6cced0a7f556f1d1dd"
      }
    ],
    "blockNumber": 19354304,
    "cumulativeGasUsed": "3569627",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x2EA2874aD0B92a3d929C585d718a7b90b8EC8CCE",
      "0x9984Ea1055eEb242BbEd8C08040e659a6d6Eea26",
      "0xB3A1aDbf2aA87611A7A94C5b1081654381D5db7c",
      "0x0000000000000000000000000000000000000000",
      "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
      "0x580d6ebC53BB4239f52C5E28a9c2bD037faB0089",
      "0x20991f4c1956B2CB19835a1fD8935141dA275094"
    ]
  ],
  "solcInputHash": "607a69e31484798c31354cc363f2d7ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[7]\",\"name\":\"addresses\",\"type\":\"address[7]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidatorQualifierAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"minPoolMarginRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minInitialMarginRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minLiquidationReward\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maxLiquidationReward\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"liquidationCutRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"protocolFeeCollectRatio\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeAccrued\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cumulativeFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"internalType\":\"struct IPerpetualPoolLite.SymbolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbolPriceAndMultiplier\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"multiplier\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTraderPortfolio\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumulativeFundingRate\",\"type\":\"int256\"}],\"internalType\":\"struct IPTokenLite.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"margin\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"removeMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"removeMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/perpetual_futures/PerpetualPoolLite.sol\":\"PerpetualPoolLite\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/polygon/governance/FuturesProtocolParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\n// ! TODO: EMIT THE EVENTS AND ADD VALIDATIONS\\n\\n/**\\n * @title future parameters controlled by governance\\n * @notice the owner of this contract is the timelock controller of the governance feature\\n */\\ncontract FuturesProtocolParameters is Ownable {\\n    int256 public minPoolMarginRatio;\\n    int256 public minInitialMarginRatio;\\n    int256 public minMaintenanceMarginRatio;\\n    int256 public minLiquidationReward;\\n    int256 public maxLiquidationReward;\\n    int256 public liquidationCutRatio;\\n    int256 public protocolFeeCollectRatio;\\n    address public futuresOracleAddress;\\n    int256 public futuresMultiplier;\\n    int256 public futuresFeeRatio;\\n    int256 public futuresFundingRateCoefficient;\\n    uint256 public oracleDelay;\\n\\n    event MinPoolMarginRatioUpdated(address value);\\n    event MinInitialMarginRatioUpdated(address value);\\n    event MinMaintenanceMarginRatioUpdated(address value);\\n    event MinLiquidationRewardUpdated(address value);\\n    event MaxLiquidationRewardUpdated(address value);\\n    event LiquidationCutRatioUpdated(address value);\\n    event ProtocolFeeCollectRatioUpdated(address value);\\n    event OracleDelayUpdated(address value);\\n    event FuturesOracleAddressUpdated(address value);\\n    event FuturesMultiplierUpdated(int256 value);\\n    event FuturesFeeRatioUpdated(int256 value);\\n    event FuturesFundingRateCoefficientUpdated(int256 value);\\n\\n    /**\\n     * @dev set initial state of the data\\n     */\\n    constructor(\\n        MainParams memory mainParams,\\n        address _futuresOracleAddress,\\n        int256 _futuresMultiplier,\\n        int256 _futuresFeeRatio,\\n        int256 _futuresFundingRateCoefficient,\\n        uint256 _oracleDelay,\\n        address _governanceContractAddress\\n    ) {\\n        require(_futuresOracleAddress != address(0), \\\"Oracle address can't be zero\\\");\\n        require(_futuresMultiplier > 0, \\\"Invalid futures multiplier\\\");\\n        require(_futuresFeeRatio > 0, \\\"Invalid futures fee ratio\\\");\\n        require(_futuresFundingRateCoefficient > 0, \\\"Invalid futures funding rate coefficient\\\");\\n\\n        minPoolMarginRatio = mainParams.minPoolMarginRatio;\\n        minInitialMarginRatio = mainParams.minInitialMarginRatio;\\n        minMaintenanceMarginRatio = mainParams.minMaintenanceMarginRatio;\\n        minLiquidationReward = mainParams.minLiquidationReward;\\n        maxLiquidationReward = mainParams.maxLiquidationReward;\\n        liquidationCutRatio = mainParams.liquidationCutRatio;\\n        protocolFeeCollectRatio = mainParams.protocolFeeCollectRatio;\\n        futuresOracleAddress = _futuresOracleAddress;\\n        futuresMultiplier = _futuresMultiplier;\\n        futuresFeeRatio = _futuresFeeRatio;\\n        futuresFundingRateCoefficient = _futuresFundingRateCoefficient;\\n        oracleDelay = _oracleDelay;\\n\\n        // transfer ownership\\n        transferOwnership(_governanceContractAddress);\\n    }\\n\\n    function setMinPoolMarginRatio(int256 _minPoolMarginRatio) external onlyOwner {\\n        minPoolMarginRatio = _minPoolMarginRatio;\\n    }\\n\\n    function setMinInitialMarginRatio(int256 _minInitialMarginRatio) external onlyOwner {\\n        minInitialMarginRatio = _minInitialMarginRatio;\\n    }\\n\\n    function setMinMaintenanceMarginRatio(int256 _minMaintenanceMarginRatio) external onlyOwner {\\n        minMaintenanceMarginRatio = _minMaintenanceMarginRatio;\\n    }\\n\\n    function setMinLiquidationReward(int256 _minLiquidationReward) external onlyOwner {\\n        minLiquidationReward = _minLiquidationReward;\\n    }\\n\\n    function setMaxLiquidationReward(int256 _maxLiquidationReward) external onlyOwner {\\n        maxLiquidationReward = _maxLiquidationReward;\\n    }\\n\\n    function setLiquidationCutRatio(int256 _liquidationCutRatio) external onlyOwner {\\n        liquidationCutRatio = _liquidationCutRatio;\\n    }\\n\\n    function setProtocolFeeCollectRatio(int256 _protocolFeeCollectRatio) external onlyOwner {\\n        protocolFeeCollectRatio = _protocolFeeCollectRatio;\\n    }\\n\\n    function setFuturesOracleAddress(address futuresOracleAddress_) external onlyOwner {\\n        require(futuresOracleAddress_ != address(0), \\\"Oracle address can't be zero\\\");\\n        futuresOracleAddress = futuresOracleAddress_;\\n        emit FuturesOracleAddressUpdated(futuresOracleAddress_);\\n    }\\n\\n    function setFuturesMultiplier(int256 futuresMultiplier_) external onlyOwner {\\n        require(futuresMultiplier_ > 1 hours, \\\"Invalid futures multiplier\\\");\\n        futuresMultiplier = futuresMultiplier_;\\n        emit FuturesMultiplierUpdated(futuresMultiplier_);\\n    }\\n\\n    function setFuturesFeeRatio(int256 futuresFeeRatio_) external onlyOwner {\\n        require(futuresFeeRatio_ > 1 hours, \\\"Invalid futures fee ratio\\\");\\n        futuresFeeRatio = futuresFeeRatio_;\\n        emit FuturesFeeRatioUpdated(futuresFeeRatio_);\\n    }\\n\\n    function setFuturesFundingRateCoefficient(int256 futuresFundingRateCoefficient_) external onlyOwner {\\n        require(futuresFundingRateCoefficient_ > 1 hours, \\\"Invalid futures funding rate coefficient\\\");\\n        futuresFundingRateCoefficient = futuresFundingRateCoefficient_;\\n        emit FuturesFundingRateCoefficientUpdated(futuresFundingRateCoefficient_);\\n    }\\n\\n    function setOracleDelay(uint256 _oracleDelay) external onlyOwner {\\n        oracleDelay = _oracleDelay;\\n    }\\n}\\n\",\"keccak256\":\"0xd3f796ece8ad60835d27c94ea9e048c7b2351ab3e89f4cbd761ebfb7cd672996\",\"license\":\"MIT\"},\"contracts/polygon/governance/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct MainParams {\\n    int256 minPoolMarginRatio;\\n    int256 minInitialMarginRatio;\\n    int256 minMaintenanceMarginRatio;\\n    int256 minLiquidationReward;\\n    int256 maxLiquidationReward;\\n    int256 liquidationCutRatio;\\n    int256 protocolFeeCollectRatio;\\n}\\n\",\"keccak256\":\"0x8121a2f034679ec2a98fe3d5906979582191b29ce6f15343e3096591cb06bb69\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/PerpetualPoolLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./interfaces/IPerpetualPoolLite.sol\\\";\\nimport \\\"./interfaces/ILTokenLite.sol\\\";\\nimport \\\"./interfaces/IPTokenLite.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IOracleWithUpdate.sol\\\";\\nimport \\\"./interfaces/ILiquidatorQualifier.sol\\\";\\nimport \\\"./library/SafeMath.sol\\\";\\nimport \\\"./library/SafeERC20.sol\\\";\\nimport \\\"../governance/FuturesProtocolParameters.sol\\\";\\n\\ncontract PerpetualPoolLite is IPerpetualPoolLite {\\n    using SafeMath for uint256;\\n    using SafeMath for int256;\\n    using SafeERC20 for IERC20;\\n\\n    int256 private constant ONE = 10**18;\\n\\n    uint256 private immutable _decimals;\\n\\n    address private immutable _bTokenAddress;\\n    address private immutable _lTokenAddress;\\n    address private immutable _pTokenAddress;\\n    address private immutable _liquidatorQualifierAddress;\\n    address private immutable _protocolFeeCollector;\\n    address private immutable _underlyingAddress;\\n    address private immutable _protocolAddress;\\n    FuturesProtocolParameters private _protocolParameters;\\n\\n    int256 private _liquidity;\\n\\n    uint256 private _lastUpdateBlock;\\n    int256 private _protocolFeeAccrued;\\n\\n    // symbolId => SymbolInfo\\n    SymbolInfo private _symbol;\\n\\n    bool private _mutex;\\n    modifier _lock_() {\\n        require(!_mutex, \\\"reentry\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    constructor(address[7] memory addresses) {\\n        _bTokenAddress = addresses[0];\\n        _lTokenAddress = addresses[1];\\n        _pTokenAddress = addresses[2];\\n        _liquidatorQualifierAddress = addresses[3];\\n        _protocolFeeCollector = addresses[4];\\n        _underlyingAddress = addresses[5];\\n        _protocolAddress = addresses[6];\\n\\n        _protocolParameters = FuturesProtocolParameters(addresses[6]);\\n        _decimals = IERC20(addresses[0]).decimals();\\n    }\\n\\n    function getSymbolPriceAndMultiplier() external view returns (int256 price, int256 multiplier) {\\n        return (_symbol.price, _protocolParameters.futuresMultiplier());\\n    }\\n\\n    function getParameters()\\n        external\\n        view\\n        override\\n        returns (\\n            int256 minPoolMarginRatio,\\n            int256 minInitialMarginRatio,\\n            int256 minMaintenanceMarginRatio,\\n            int256 minLiquidationReward,\\n            int256 maxLiquidationReward,\\n            int256 liquidationCutRatio,\\n            int256 protocolFeeCollectRatio\\n        )\\n    {\\n        return (\\n            _protocolParameters.minPoolMarginRatio(),\\n            _protocolParameters.minInitialMarginRatio(),\\n            _protocolParameters.minMaintenanceMarginRatio(),\\n            _protocolParameters.minLiquidationReward(),\\n            _protocolParameters.maxLiquidationReward(),\\n            _protocolParameters.liquidationCutRatio(),\\n            _protocolParameters.protocolFeeCollectRatio()\\n        );\\n    }\\n\\n    function getAddresses()\\n        external\\n        view\\n        override\\n        returns (\\n            address bTokenAddress,\\n            address lTokenAddress,\\n            address pTokenAddress,\\n            address liquidatorQualifierAddress,\\n            address protocolFeeCollector,\\n            address underlyingAddress,\\n            address protocolAddress\\n        )\\n    {\\n        return (\\n            _bTokenAddress,\\n            _lTokenAddress,\\n            _pTokenAddress,\\n            _liquidatorQualifierAddress,\\n            _protocolFeeCollector,\\n            _underlyingAddress,\\n            _protocolAddress\\n        );\\n    }\\n\\n    function getSymbol() external view override returns (SymbolInfo memory) {\\n        return _symbol;\\n    }\\n\\n    function getLiquidity() external view override returns (int256) {\\n        return _liquidity;\\n    }\\n\\n    function getLastUpdateBlock() external view override returns (uint256) {\\n        return _lastUpdateBlock;\\n    }\\n\\n    function getProtocolFeeAccrued() external view override returns (int256) {\\n        return _protocolFeeAccrued;\\n    }\\n\\n    function collectProtocolFee() external override {\\n        uint256 balance = IERC20(_bTokenAddress).balanceOf(address(this)).rescale(_decimals, 18);\\n        uint256 amount = _protocolFeeAccrued.itou();\\n        if (amount > balance) amount = balance;\\n        _protocolFeeAccrued -= amount.utoi();\\n        _transferOut(_protocolFeeCollector, amount);\\n        emit ProtocolFeeCollection(_protocolFeeCollector, amount);\\n    }\\n\\n    //================================================================================\\n    // Interactions with onchain oracles\\n    //================================================================================\\n\\n    function addLiquidity(uint256 bAmount) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _addLiquidity(msg.sender, bAmount);\\n    }\\n\\n    function removeLiquidity(uint256 lShares) external override {\\n        require(lShares > 0, \\\"PerpetualPool: 0 lShares\\\");\\n        _removeLiquidity(msg.sender, lShares);\\n    }\\n\\n    function addMargin(uint256 bAmount) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _addMargin(msg.sender, bAmount);\\n    }\\n\\n    function removeMargin(uint256 bAmount) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _removeMargin(msg.sender, bAmount);\\n    }\\n\\n    function trade(int256 tradeVolume) external override {\\n        require(\\n            tradeVolume != 0 && (tradeVolume / ONE) * ONE == tradeVolume,\\n            \\\"PerpetualPool: invalid tradeVolume\\\"\\n        );\\n        _trade(msg.sender, tradeVolume);\\n    }\\n\\n    function liquidate(address account) external override {\\n        address liquidator = msg.sender;\\n        require(\\n            _liquidatorQualifierAddress == address(0) ||\\n                ILiquidatorQualifier(_liquidatorQualifierAddress).isQualifiedLiquidator(liquidator),\\n            \\\"PerpetualPool: not qualified liquidator\\\"\\n        );\\n        _liquidate(liquidator, account);\\n    }\\n\\n    //================================================================================\\n    // Interactions with offchain oracles\\n    //================================================================================\\n\\n    function addLiquidity(uint256 bAmount, SignedPrice memory price) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _updateSymbolOracles(price);\\n        _addLiquidity(msg.sender, bAmount);\\n    }\\n\\n    function removeLiquidity(uint256 lShares, SignedPrice memory price) external override {\\n        require(lShares > 0, \\\"PerpetualPool: 0 lShares\\\");\\n        _updateSymbolOracles(price);\\n        _removeLiquidity(msg.sender, lShares);\\n    }\\n\\n    function addMargin(uint256 bAmount, SignedPrice memory price) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _updateSymbolOracles(price);\\n        _addMargin(msg.sender, bAmount);\\n    }\\n\\n    function removeMargin(uint256 bAmount, SignedPrice memory price) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _updateSymbolOracles(price);\\n        _removeMargin(msg.sender, bAmount);\\n    }\\n\\n    function trade(int256 tradeVolume, SignedPrice memory price) external override {\\n        require(\\n            tradeVolume != 0 && (tradeVolume / ONE) * ONE == tradeVolume,\\n            \\\"PerpetualPool: invalid tradeVolume\\\"\\n        );\\n        _updateSymbolOracles(price);\\n        _trade(msg.sender, tradeVolume);\\n    }\\n\\n    function liquidate(address account, SignedPrice memory price) external override {\\n        address liquidator = msg.sender;\\n        require(\\n            _liquidatorQualifierAddress == address(0) ||\\n                ILiquidatorQualifier(_liquidatorQualifierAddress).isQualifiedLiquidator(liquidator),\\n            \\\"PerpetualPool: not qualified liquidator\\\"\\n        );\\n        _updateSymbolOracles(price);\\n        _liquidate(liquidator, account);\\n    }\\n\\n    //================================================================================\\n    // Core logics\\n    //================================================================================\\n\\n    function _addLiquidity(address account, uint256 bAmount) internal _lock_ {\\n        (int256 totalDynamicEquity, ) = _updateSymbolPricesAndFundingRates();\\n        bAmount = _transferIn(account, bAmount);\\n        ILTokenLite lToken = ILTokenLite(_lTokenAddress);\\n\\n        uint256 totalSupply = lToken.totalSupply();\\n        uint256 lShares;\\n        if (totalSupply == 0) {\\n            lShares = bAmount;\\n        } else {\\n            lShares = (bAmount * totalSupply) / totalDynamicEquity.itou();\\n        }\\n\\n        lToken.mint(account, lShares);\\n        _liquidity += bAmount.utoi();\\n\\n        emit AddLiquidity(account, lShares, bAmount);\\n    }\\n\\n    function _removeLiquidity(address account, uint256 lShares) internal _lock_ {\\n        (int256 totalDynamicEquity, int256 totalAbsCost) = _updateSymbolPricesAndFundingRates();\\n        ILTokenLite lToken = ILTokenLite(_lTokenAddress);\\n\\n        uint256 totalSupply = lToken.totalSupply();\\n        uint256 bAmount = (lShares * totalDynamicEquity.itou()) / totalSupply;\\n\\n        _liquidity -= bAmount.utoi();\\n\\n        require(\\n            totalAbsCost == 0 ||\\n                ((totalDynamicEquity - bAmount.utoi()) * ONE) / totalAbsCost >=\\n                _protocolParameters.minPoolMarginRatio(),\\n            \\\"PerpetualPool: pool insufficient margin\\\"\\n        );\\n\\n        lToken.burn(account, lShares);\\n        _transferOut(account, bAmount);\\n\\n        emit RemoveLiquidity(account, lShares, bAmount);\\n    }\\n\\n    function _addMargin(address account, uint256 bAmount) internal _lock_ {\\n        bAmount = _transferIn(account, bAmount);\\n\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\n        if (!pToken.exists(account)) pToken.mint(account);\\n\\n        pToken.addMargin(account, bAmount.utoi());\\n        emit AddMargin(account, bAmount);\\n    }\\n\\n    function _removeMargin(address account, uint256 bAmount) internal _lock_ {\\n        _updateSymbolPricesAndFundingRates();\\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\\n\\n        int256 amount = bAmount.utoi();\\n        if (amount >= margin) {\\n            amount = margin;\\n            bAmount = amount.itou();\\n            margin = 0;\\n        } else {\\n            margin -= amount;\\n        }\\n\\n        require(\\n            _getTraderMarginRatio(position, margin) >= _protocolParameters.minInitialMarginRatio(),\\n            \\\"PerpetualPool: insufficient margin\\\"\\n        );\\n\\n        _updateTraderPortfolio(account, position, margin);\\n        _transferOut(account, bAmount);\\n\\n        emit RemoveMargin(account, bAmount);\\n    }\\n\\n    // struct for temp use in trade function, to prevent stack too deep error\\n    struct TradeParams {\\n        int256 tradersNetVolume;\\n        int256 price;\\n        int256 multiplier;\\n        int256 curCost;\\n        int256 fee;\\n        int256 realizedCost;\\n        int256 protocolFee;\\n    }\\n\\n    function _trade(address account, int256 tradeVolume) internal _lock_ {\\n        (int256 totalDynamicEquity, int256 totalAbsCost) = _updateSymbolPricesAndFundingRates();\\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\\n\\n        TradeParams memory params;\\n\\n        params.tradersNetVolume = _symbol.tradersNetVolume;\\n        params.price = _symbol.price;\\n        params.multiplier = _protocolParameters.futuresMultiplier();\\n        params.curCost = (((tradeVolume * params.price) / ONE) * params.multiplier) / ONE;\\n        params.fee = (params.curCost.abs() * _protocolParameters.futuresFeeRatio()) / ONE;\\n\\n        if (!(position.volume >= 0 && tradeVolume >= 0) && !(position.volume <= 0 && tradeVolume <= 0)) {\\n            int256 absVolume = position.volume.abs();\\n            int256 absTradeVolume = tradeVolume.abs();\\n            if (absVolume <= absTradeVolume) {\\n                // previous position is totally closed\\n                params.realizedCost = (params.curCost * absVolume) / absTradeVolume + position.cost;\\n            } else {\\n                // previous position is partially closed\\n                params.realizedCost = (position.cost * absTradeVolume) / absVolume + params.curCost;\\n            }\\n        }\\n\\n        // adjust totalAbsCost after trading\\n        totalAbsCost +=\\n            (((((params.tradersNetVolume + tradeVolume).abs() - params.tradersNetVolume.abs()) *\\n                params.price) / ONE) * params.multiplier) /\\n            ONE;\\n\\n        position.volume += tradeVolume;\\n        position.cost += params.curCost - params.realizedCost;\\n        position.lastCumulativeFundingRate = _symbol.cumulativeFundingRate;\\n        margin -= params.fee + params.realizedCost;\\n\\n        _symbol.tradersNetVolume += tradeVolume;\\n        _symbol.tradersNetCost += params.curCost - params.realizedCost;\\n        params.protocolFee = (params.fee * _protocolParameters.protocolFeeCollectRatio()) / ONE;\\n        _protocolFeeAccrued += params.protocolFee;\\n        _liquidity += params.fee - params.protocolFee + params.realizedCost;\\n\\n        require(\\n            totalAbsCost == 0 ||\\n                (totalDynamicEquity * ONE) / totalAbsCost >= _protocolParameters.minPoolMarginRatio(),\\n            \\\"PerpetualPool: insufficient liquidity\\\"\\n        );\\n        require(\\n            _getTraderMarginRatio(position, margin) >= _protocolParameters.minInitialMarginRatio(),\\n            \\\"PerpetualPool: insufficient margin\\\"\\n        );\\n\\n        _updateTraderPortfolio(account, position, margin);\\n\\n        emit Trade(account, tradeVolume, params.price.itou());\\n    }\\n\\n    function _liquidate(address liquidator, address account) internal _lock_ {\\n        _updateSymbolPricesAndFundingRates();\\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\\n        require(\\n            _getTraderMarginRatio(position, margin) < _protocolParameters.minMaintenanceMarginRatio(),\\n            \\\"PerpetualPool: cannot liquidate\\\"\\n        );\\n\\n        int256 netEquity = margin;\\n        if (position.volume != 0) {\\n            _symbol.tradersNetVolume -= position.volume;\\n            _symbol.tradersNetCost -= position.cost;\\n            netEquity +=\\n                (((position.volume * _symbol.price) / ONE) * _protocolParameters.futuresMultiplier()) /\\n                ONE -\\n                position.cost;\\n        }\\n\\n        int256 reward;\\n        int256 minLiquidationReward = _protocolParameters.minLiquidationReward();\\n        int256 maxLiquidationReward = _protocolParameters.maxLiquidationReward();\\n        if (netEquity <= minLiquidationReward) {\\n            reward = minLiquidationReward;\\n        } else if (netEquity >= maxLiquidationReward) {\\n            reward = maxLiquidationReward;\\n        } else {\\n            reward =\\n                ((netEquity - minLiquidationReward) * _protocolParameters.liquidationCutRatio()) /\\n                ONE +\\n                minLiquidationReward;\\n        }\\n\\n        _liquidity += margin - reward;\\n        IPTokenLite(_pTokenAddress).burn(account);\\n        _transferOut(liquidator, reward.itou());\\n\\n        emit Liquidate(account, liquidator, reward.itou());\\n    }\\n\\n    //================================================================================\\n    // Helpers\\n    //================================================================================\\n\\n    function _updateSymbolOracles(SignedPrice memory price) internal {\\n        IOracleWithUpdate(_protocolParameters.futuresOracleAddress()).updatePrice(\\n            _underlyingAddress,\\n            price.timestamp,\\n            price.price,\\n            price.v,\\n            price.r,\\n            price.s\\n        );\\n    }\\n\\n    function _updateSymbolPricesAndFundingRates()\\n        internal\\n        returns (int256 totalDynamicEquity, int256 totalAbsCost)\\n    {\\n        uint256 preBlockNumber = _lastUpdateBlock;\\n        uint256 curBlockNumber = block.number;\\n        totalDynamicEquity = _liquidity;\\n\\n        if (curBlockNumber > preBlockNumber) {\\n            _symbol.price = IOracle(_protocolParameters.futuresOracleAddress()).getPrice().utoi();\\n        }\\n        if (_symbol.tradersNetVolume != 0) {\\n            int256 cost = (((_symbol.tradersNetVolume * _symbol.price) / ONE) *\\n                _protocolParameters.futuresMultiplier()) / ONE;\\n            totalDynamicEquity -= cost - _symbol.tradersNetCost;\\n            totalAbsCost += cost.abs();\\n        }\\n\\n        if (curBlockNumber > preBlockNumber) {\\n            if (_symbol.tradersNetVolume != 0) {\\n                int256 ratePerBlock = (((((((((_symbol.tradersNetVolume * _symbol.price) / ONE) *\\n                    _symbol.price) / ONE) * _protocolParameters.futuresMultiplier()) / ONE) *\\n                    _protocolParameters.futuresMultiplier()) / ONE) *\\n                    _protocolParameters.futuresFundingRateCoefficient()) / totalDynamicEquity;\\n                int256 delta = ratePerBlock * int256(curBlockNumber - preBlockNumber);\\n                unchecked {\\n                    _symbol.cumulativeFundingRate += delta;\\n                }\\n            }\\n        }\\n\\n        _lastUpdateBlock = curBlockNumber;\\n    }\\n\\n    function getTraderPortfolio(address account)\\n        public\\n        view\\n        returns (IPTokenLite.Position memory position, int256 margin)\\n    {\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\n        position = pToken.getPosition(account);\\n        margin = pToken.getMargin(account);\\n    }\\n\\n    function _updateTraderPortfolio(\\n        address account,\\n        IPTokenLite.Position memory position,\\n        int256 margin\\n    ) internal {\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\n        pToken.updatePosition(account, position);\\n        pToken.updateMargin(account, margin);\\n    }\\n\\n    function _settleTraderFundingFee(address account)\\n        internal\\n        returns (IPTokenLite.Position memory position, int256 margin)\\n    {\\n        (position, margin) = getTraderPortfolio(account);\\n        int256 funding;\\n        if (position.volume != 0) {\\n            int256 cumulativeFundingRate = _symbol.cumulativeFundingRate;\\n            int256 delta;\\n            unchecked {\\n                delta = cumulativeFundingRate - position.lastCumulativeFundingRate;\\n            }\\n            funding += (position.volume * delta) / ONE;\\n\\n            position.lastCumulativeFundingRate = cumulativeFundingRate;\\n        }\\n        if (funding != 0) {\\n            margin -= funding;\\n            _liquidity += funding;\\n        }\\n    }\\n\\n    function _getTraderMarginRatio(IPTokenLite.Position memory position, int256 margin)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 totalDynamicEquity = margin;\\n        int256 totalAbsCost;\\n        if (position.volume != 0) {\\n            int256 cost = (((position.volume * _symbol.price) / ONE) *\\n                _protocolParameters.futuresMultiplier()) / ONE;\\n            totalDynamicEquity += cost - position.cost;\\n            totalAbsCost += cost.abs();\\n        }\\n        return totalAbsCost == 0 ? type(int256).max : (totalDynamicEquity * ONE) / totalAbsCost;\\n    }\\n\\n    function _deflationCompatibleSafeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 bAmount\\n    ) internal returns (uint256) {\\n        IERC20 bToken = IERC20(_bTokenAddress);\\n        uint256 balance1 = bToken.balanceOf(to);\\n        bToken.safeTransferFrom(from, to, bAmount);\\n        uint256 balance2 = bToken.balanceOf(to);\\n        return balance2 - balance1;\\n    }\\n\\n    function _transferIn(address from, uint256 bAmount) internal returns (uint256) {\\n        uint256 amount = _deflationCompatibleSafeTransferFrom(\\n            from,\\n            address(this),\\n            bAmount.rescale(18, _decimals)\\n        );\\n        return amount.rescale(_decimals, 18);\\n    }\\n\\n    function _transferOut(address to, uint256 bAmount) internal {\\n        uint256 amount = bAmount.rescale(18, _decimals);\\n        uint256 leftover = bAmount - amount.rescale(_decimals, 18);\\n        // leftover due to decimal precision is accrued to _protocolFeeAccrued\\n        _protocolFeeAccrued += leftover.utoi();\\n        IERC20(_bTokenAddress).safeTransfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x95d7af689f9841515263b429a18ab155c41096579139e1a5210c48d9ca519d8b\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdaf482a8cd21ed3e200f548ec30dbcad2fd6532ad90fe537ef12e2bbb826e485\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf4decd38ca100d2b45b7cc7b1f375b7e88646d7759117cdd30bbbdbebf288fdb\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `operator` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed operator, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the 'tokenId' owned by 'owner'\\n     *\\n     * Requirements:\\n     *\\n     *  - `owner` must exist\\n     */\\n    function getTokenId(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Gives permission to `operator` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address\\n     * clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address operator, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     *   by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first\\n     * that contract recipients are aware of the ERC721 protocol to prevent\\n     * tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token\\n     *   by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     *   by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xada012cd8e453427cb9a6ebb44efd1d952bced46067fa047e7d63ed1c6a4a182\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/interfaces/ILTokenLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface ILTokenLite is IERC20 {\\n    function pool() external view returns (address);\\n\\n    function setPool(address newPool) external;\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5d55bd22802576f2c55de9b97638da61bedaa15d674a37a31a0bca6a1163fc62\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/interfaces/ILiquidatorQualifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface ILiquidatorQualifier {\\n    function isQualifiedLiquidator(address liquidator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x402c6ede86a5f33c0b9ad6c6f1ba5b39692fd65ecd2f69dd78c649064e38d9e0\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IOracle {\\n    function getPrice() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc386bfad3ac37a0be2428a5c4a911508c4d6897ac335b0acfb2ff39ee6dc1892\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/interfaces/IOracleWithUpdate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IOracleWithUpdate {\\n    function getPrice() external returns (uint256);\\n\\n    function updatePrice(\\n        address address_,\\n        uint256 timestamp,\\n        uint256 price,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x58accbd08ad4a41e75776d47c3e47ce2546854183b2575294f978b3186ecacd2\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/interfaces/IPTokenLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface IPTokenLite is IERC721 {\\n    struct Position {\\n        // position volume, long is positive and short is negative\\n        int256 volume;\\n        // the cost the establish this position\\n        int256 cost;\\n        // the last cumulativeFundingRate since last funding settlement for this position\\n        // the overflow for this value in intended\\n        int256 lastCumulativeFundingRate;\\n    }\\n\\n    event UpdateMargin(address indexed owner, int256 amount);\\n\\n    event UpdatePosition(address indexed owner, int256 volume, int256 cost, int256 lastCumulativeFundingRate);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function setPool(address newPool) external;\\n\\n    function pool() external view returns (address);\\n\\n    function totalMinted() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getNumPositionHolders() external view returns (uint256);\\n\\n    function exists(address owner) external view returns (bool);\\n\\n    function getMargin(address owner) external view returns (int256);\\n\\n    function updateMargin(address owner, int256 margin) external;\\n\\n    function addMargin(address owner, int256 delta) external;\\n\\n    function getPosition(address owner) external view returns (Position memory);\\n\\n    function updatePosition(address owner, Position memory position) external;\\n\\n    function mint(address owner) external;\\n\\n    function burn(address owner) external;\\n}\\n\",\"keccak256\":\"0xa60644d583853b3398dc6e0252a9034b6d69260c1f630effb5be4ce29e7c21e1\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/interfaces/IPerpetualPoolLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPerpetualPoolLite {\\n    struct SymbolInfo {\\n        string symbol;\\n        int256 price;\\n        int256 cumulativeFundingRate;\\n        int256 tradersNetVolume;\\n        int256 tradersNetCost;\\n    }\\n\\n    struct SignedPrice {\\n        uint256 timestamp;\\n        uint256 price;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    event AddLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\n\\n    event RemoveLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\n\\n    event AddMargin(address indexed account, uint256 bAmount);\\n\\n    event RemoveMargin(address indexed account, uint256 bAmount);\\n\\n    event Trade(address indexed account, int256 tradeVolume, uint256 price);\\n\\n    event Liquidate(address indexed account, address indexed liquidator, uint256 reward);\\n\\n    event ProtocolFeeCollection(address indexed collector, uint256 amount);\\n\\n    function getParameters()\\n        external\\n        view\\n        returns (\\n            int256 minPoolMarginRatio,\\n            int256 minInitialMarginRatio,\\n            int256 minMaintenanceMarginRatio,\\n            int256 minLiquidationReward,\\n            int256 maxLiquidationReward,\\n            int256 liquidationCutRatio,\\n            int256 protocolFeeCollectRatio\\n        );\\n\\n    function getAddresses()\\n        external\\n        view\\n        returns (\\n            address bTokenAddress,\\n            address lTokenAddress,\\n            address pTokenAddress,\\n            address liquidatorQualifierAddress,\\n            address protocolFeeCollector,\\n            address underlyingAddress,\\n            address protocolAddress\\n        );\\n\\n    function getSymbol() external view returns (SymbolInfo memory);\\n\\n    function getLiquidity() external view returns (int256);\\n\\n    function getLastUpdateBlock() external view returns (uint256);\\n\\n    function getProtocolFeeAccrued() external view returns (int256);\\n\\n    function collectProtocolFee() external;\\n\\n    function addLiquidity(uint256 bAmount) external;\\n\\n    function removeLiquidity(uint256 lShares) external;\\n\\n    function addMargin(uint256 bAmount) external;\\n\\n    function removeMargin(uint256 bAmount) external;\\n\\n    function trade(int256 tradeVolume) external;\\n\\n    function liquidate(address account) external;\\n\\n    function addLiquidity(uint256 bAmount, SignedPrice memory price) external;\\n\\n    function removeLiquidity(uint256 lShares, SignedPrice memory price) external;\\n\\n    function addMargin(uint256 bAmount, SignedPrice memory price) external;\\n\\n    function removeMargin(uint256 bAmount, SignedPrice memory price) external;\\n\\n    function trade(int256 tradeVolume, SignedPrice memory price) external;\\n\\n    function liquidate(address account, SignedPrice memory price) external;\\n}\\n\",\"keccak256\":\"0x290798d14da9d8cc5c46099c80763e6d5b8923cafc1efe4796a93d5387387227\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/library/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85256cdecf5b0cced644cd2621c3c9aca2f488c5003496421daaf112b0ad79d4\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/library/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) - value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd1f68e2f39cc68c9550cfda9d9648ecc6e52cadddd40ac1d4dbaa59276cb8f0\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/library/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary SafeMath {\\n    uint256 internal constant UMAX = 2**255 - 1;\\n    int256 internal constant IMIN = -2**255;\\n\\n    /// convert uint256 to int256\\n    function utoi(uint256 a) internal pure returns (int256) {\\n        require(a <= UMAX, \\\"UIO\\\");\\n        return int256(a);\\n    }\\n\\n    /// convert int256 to uint256\\n    function itou(int256 a) internal pure returns (uint256) {\\n        require(a >= 0, \\\"IUO\\\");\\n        return uint256(a);\\n    }\\n\\n    /// take abs of int256\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != IMIN, \\\"AO\\\");\\n        return a >= 0 ? a : -a;\\n    }\\n\\n    /// rescale a uint256 from base 10**decimals1 to 10**decimals2\\n    function rescale(\\n        uint256 a,\\n        uint256 decimals1,\\n        uint256 decimals2\\n    ) internal pure returns (uint256) {\\n        return decimals1 == decimals2 ? a : (a * (10**decimals2)) / (10**decimals1);\\n    }\\n\\n    /// rescale a int256 from base 10**decimals1 to 10**decimals2\\n    function rescale(\\n        int256 a,\\n        uint256 decimals1,\\n        uint256 decimals2\\n    ) internal pure returns (int256) {\\n        return decimals1 == decimals2 ? a : (a * utoi(10**decimals2)) / utoi(10**decimals1);\\n    }\\n\\n    /// reformat a uint256 to be a valid 10**decimals base value\\n    /// the reformatted value is still in 10**18 base\\n    function reformat(uint256 a, uint256 decimals) internal pure returns (uint256) {\\n        return decimals == 18 ? a : rescale(rescale(a, 18, decimals), decimals, 18);\\n    }\\n\\n    /// reformat a int256 to be a valid 10**decimals base value\\n    /// the reformatted value is still in 10**18 base\\n    function reformat(int256 a, uint256 decimals) internal pure returns (int256) {\\n        return decimals == 18 ? a : rescale(rescale(a, 18, decimals), decimals, 18);\\n    }\\n\\n    /// ceiling value away from zero, return a valid 10**decimals base value, but still in 10**18 based\\n    function ceil(int256 a, uint256 decimals) internal pure returns (int256) {\\n        if (reformat(a, decimals) == a) {\\n            return a;\\n        } else {\\n            int256 b = rescale(a, 18, decimals);\\n            b += a > 0 ? int256(1) : int256(-1);\\n            return rescale(b, decimals, 18);\\n        }\\n    }\\n\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 quotient = a / b;\\n        uint256 remainder = a - quotient * b;\\n        if (remainder > 0) {\\n            return quotient + 1;\\n        } else {\\n            return quotient;\\n        }\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = x / 2 + 1;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a <= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x3f324920ada499395f4ff94bf9828c1b94cf9e2a35d1adfc21ad36f869c2f38f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b5060405162003e0138038062003e01833981016040819052620000359162000155565b8051606090811b6001600160601b031990811660a0908152602080850151841b831660c0908152604080870151861b851660e05285870151861b8516610100526080870151861b85166101205292860151851b8416610140528501805190941b909216610160529151600080546001600160a01b0319166001600160a01b039283161790558351835163313ce56760e01b8152935191169263313ce567926004808301939192829003018186803b158015620000f057600080fd5b505afa15801562000105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012b9190620001e8565b60ff166080525062000228565b80516001600160a01b03811681146200015057600080fd5b919050565b600060e0828403121562000167578081fd5b82601f83011262000176578081fd5b60405160e081016001600160401b03811182821017156200019b576200019b62000212565b604052808360e08101861015620001b0578384fd5b835b6007811015620001dd57620001c78262000138565b83526020928301929190910190600101620001b2565b509195945050505050565b600060208284031215620001fa578081fd5b815160ff811681146200020b578182fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c6101605160601c613ad26200032f60003960006102f40152600081816102cc01526111790152600081816102a401528181610cdf0152610d0601526000818161027c01528181610568015281816105b601528181610d6e0152610dbc01526000818161025201528181610f6f015281816117fc015281816122160152612e5701526000818161022a0152818161201f01526123fe01526000818161020501528181610c1d015281816127f40152613073015260008181610bf0015281816127670152818161279501528181612f8f0152612fc00152613ad26000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063a39fac12116100b8578063d608c07d1161007c578063d608c07d1461038f578063de61838c14610397578063dfd19898146103aa578063f11f854f146103c7578063f12c9f0e146103da578063fcd33b511461041457600080fd5b8063a39fac12146101f7578063a43be94814610324578063a5ea11da14610337578063b5d4034514610374578063caa4b46a1461038757600080fd5b80633dc07fda116100ff5780633dc07fda1461019857806351c6590a146101ab5780635756e84c146101be57806375fe9c7f146101d15780639c8f9f23146101e457600080fd5b806307e2ee0f1461013c5780630910a5101461015357806314e841b91461015b57806315070401146101705780632f86556814610185575b600080fd5b6002545b6040519081526020015b60405180910390f35b600154610140565b61016e6101693660046134eb565b610427565b005b610178610467565b60405161014a9190613724565b61016e61019336600461342e565b610565565b61016e6101a63660046134bb565b610656565b61016e6101b93660046134bb565b6106a9565b61016e6101cc3660046134eb565b6106d3565b61016e6101df3660046134eb565b610706565b61016e6101f23660046134bb565b610739565b604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000811660208301527f00000000000000000000000000000000000000000000000000000000000000008116928201929092527f0000000000000000000000000000000000000000000000000000000000000000821660608201527f0000000000000000000000000000000000000000000000000000000000000000821660808201527f0000000000000000000000000000000000000000000000000000000000000000821660a08201527f00000000000000000000000000000000000000000000000000000000000000009190911660c082015260e00161014a565b61016e6103323660046134bb565b61078e565b61033f6107b8565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00161014a565b61016e6103823660046134eb565b610b76565b61016e610bd4565b600354610140565b61016e6103a5366004613466565b610d6b565b6103b2610e6a565b6040805192835260208301919091520161014a565b61016e6103d53660046134bb565b610eff565b6103ed6103e836600461342e565b610f29565b6040805183518152602080850151908201529281015190830152606082015260800161014a565b61016e6104223660046134eb565b611070565b600082116104505760405162461bcd60e51b815260040161044790613643565b60405180910390fd5b610459816110c9565b6104633383611204565b5050565b6104996040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b60046040518060a00160405290816000820180546104b690613a06565b80601f01602080910402602001604051908101604052809291908181526020018280546104e290613a06565b801561052f5780601f106105045761010080835404028352916020019161052f565b820191906000526020600020905b81548152906001019060200180831161051257829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316158061063057506040516337c203bd60e21b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063df080ef49060240160206040518083038186803b1580156105f857600080fd5b505afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610630919061349b565b61064c5760405162461bcd60e51b81526004016104479061367a565b610463818361139a565b8015801590610680575080670de0b6b3a764000061067481836137b5565b61067e91906138e2565b145b61069c5760405162461bcd60e51b815260040161044790613601565b6106a633826118cd565b50565b600081116106c95760405162461bcd60e51b815260040161044790613643565b6106a63382611fd2565b600082116106f35760405162461bcd60e51b815260040161044790613643565b6106fc816110c9565b61046333836121ba565b600082116107265760405162461bcd60e51b815260040161044790613643565b61072f816110c9565b6104633383611fd2565b600081116107845760405162461bcd60e51b815260206004820152601860248201527750657270657475616c506f6f6c3a2030206c53686172657360401b6044820152606401610447565b6106a633826123bb565b600081116107ae5760405162461bcd60e51b815260040161044790613643565b6106a633826121ba565b60008060008060008060008060009054906101000a90046001600160a01b03166001600160a01b031663c42243c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561081057600080fd5b505afa158015610824573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084891906134d3565b60008054906101000a90046001600160a01b03166001600160a01b0316638ac848ca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561089457600080fd5b505afa1580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc91906134d3565b60008054906101000a90046001600160a01b03166001600160a01b0316630adf8e926040518163ffffffff1660e01b815260040160206040518083038186803b15801561091857600080fd5b505afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095091906134d3565b60008054906101000a90046001600160a01b03166001600160a01b031663ddd18d306040518163ffffffff1660e01b815260040160206040518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d491906134d3565b60008054906101000a90046001600160a01b03166001600160a01b031663ab78ace46040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2057600080fd5b505afa158015610a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5891906134d3565b60008054906101000a90046001600160a01b03166001600160a01b03166346d2d2d86040518163ffffffff1660e01b815260040160206040518083038186803b158015610aa457600080fd5b505afa158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc91906134d3565b60008054906101000a90046001600160a01b03166001600160a01b031663f94835646040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2857600080fd5b505afa158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6091906134d3565b959d949c50929a50909850965094509092509050565b60008211610bc15760405162461bcd60e51b815260206004820152601860248201527750657270657475616c506f6f6c3a2030206c53686172657360401b6044820152606401610447565b610bca816110c9565b61046333836123bb565b6040516370a0823160e01b8152306004820152600090610c9e907f0000000000000000000000000000000000000000000000000000000000000000906012906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610c5f57600080fd5b505afa158015610c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9791906134d3565b919061269e565b90506000610cad6003546126e2565b905081811115610cba5750805b610cc38161271e565b60036000828254610cd49190613984565b90915550610d0490507f00000000000000000000000000000000000000000000000000000000000000008261275d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167fdc9b9c7c232fac9d635ce55b58e41cca2c16aa6ad39a73973ce276d479ad6f2d82604051610d5f91815260200190565b60405180910390a25050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161580610e3657506040516337c203bd60e21b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063df080ef49060240160206040518083038186803b158015610dfe57600080fd5b505afa158015610e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e36919061349b565b610e525760405162461bcd60e51b81526004016104479061367a565b610e5b826110c9565b610e65818461139a565b505050565b60008060046001015460008054906101000a90046001600160a01b03166001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b158015610ebf57600080fd5b505afa158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef791906134d3565b915091509091565b60008111610f1f5760405162461bcd60e51b815260040161044790613643565b6106a63382611204565b610f4d60405180606001604052806000815260200160008152602001600081525090565b6040516316c1973960e01b81526001600160a01b0383811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000918216906316c197399060240160606040518083038186803b158015610fb357600080fd5b505afa158015610fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610feb919061350e565b604051637c27c4d160e11b81526001600160a01b0386811660048301529194509082169063f84f89a29060240160206040518083038186803b15801561103057600080fd5b505afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106891906134d3565b915050915091565b811580159061109a575081670de0b6b3a764000061108e81836137b5565b61109891906138e2565b145b6110b65760405162461bcd60e51b815260040161044790613601565b6110bf816110c9565b61046333836118cd565b60008054906101000a90046001600160a01b03166001600160a01b0316636bb9e4cb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111557600080fd5b505afa158015611129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114d919061344a565b8151602083015160408085015160608601516080870151925162da15e960e71b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820196909652604481019490945260ff9091166064840152608483015260a4820152911690636d0af4809060c401600060405180830381600087803b1580156111e957600080fd5b505af11580156111fd573d6000803e3d6000fd5b5050505050565b60095460ff16156112275760405162461bcd60e51b815260040161044790613703565b6009805460ff1916600117905561123c612821565b505060008061124a84612c5d565b9150915060006112598461271e565b905081811261127857508061126d816126e2565b935060009150611285565b6112828183613984565b91505b60008054906101000a90046001600160a01b03166001600160a01b0316638ac848ca6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112d157600080fd5b505afa1580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130991906134d3565b6113138484612d0e565b12156113315760405162461bcd60e51b8152600401610447906136c1565b61133c858484612e48565b611346858561275d565b846001600160a01b03167f318a9cd646c737e6331915189b674d6d06ae71b28df0f50e7a6dfe101a1293878560405161138191815260200190565b60405180910390a250506009805460ff19169055505050565b60095460ff16156113bd5760405162461bcd60e51b815260040161044790613703565b6009805460ff191660011790556113d2612821565b50506000806113e083612c5d565b9150915060008054906101000a90046001600160a01b03166001600160a01b0316630adf8e926040518163ffffffff1660e01b815260040160206040518083038186803b15801561143057600080fd5b505afa158015611444573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146891906134d3565b6114728383612d0e565b126114bf5760405162461bcd60e51b815260206004820152601f60248201527f50657270657475616c506f6f6c3a2063616e6e6f74206c6971756964617465006044820152606401610447565b81518190156115de578251600780546000906114dc908490613984565b90915550506020830151600880546000906114f8908490613984565b925050819055508260200151670de0b6b3a764000060008054906101000a90046001600160a01b03166001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b15801561155957600080fd5b505afa15801561156d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159191906134d3565b6005548651670de0b6b3a7640000916115a9916138e2565b6115b391906137b5565b6115bd91906138e2565b6115c791906137b5565b6115d19190613984565b6115db9082613774565b90505b6000805460408051630ddd18d360e41b8152905183926001600160a01b03169163ddd18d30916004808301926020929190829003018186803b15801561162357600080fd5b505afa158015611637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165b91906134d3565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663ab78ace46040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ac57600080fd5b505afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e491906134d3565b90508184136116f5578192506117bd565b808412611704578092506117bd565b81670de0b6b3a764000060008054906101000a90046001600160a01b03166001600160a01b03166346d2d2d86040518163ffffffff1660e01b815260040160206040518083038186803b15801561175a57600080fd5b505afa15801561176e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179291906134d3565b61179c8588613984565b6117a691906138e2565b6117b091906137b5565b6117ba9190613774565b92505b6117c78386613984565b600160008282546117d89190613774565b909155505060405163226bf2d160e21b81526001600160a01b0388811660048301527f000000000000000000000000000000000000000000000000000000000000000016906389afcb4490602401600060405180830381600087803b15801561184057600080fd5b505af1158015611854573d6000803e3d6000fd5b5050505061186a88611865856126e2565b61275d565b876001600160a01b0316876001600160a01b03167faef3faf684172084346f7dc2cc3bb1328d1cc23caec12dd9a82d4a4e56c00b176118a8866126e2565b60405190815260200160405180910390a350506009805460ff19169055505050505050565b60095460ff16156118f05760405162461bcd60e51b815260040161044790613703565b6009805460ff19166001179055600080611908612821565b9150915060008061191886612c5d565b9150915061195c6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6007548152600554602080830191909152600054604080516333f359d160e21b815290516001600160a01b039092169263cfcd674492600483810193829003018186803b1580156119ac57600080fd5b505afa1580156119c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e491906134d3565b604082018190526020820151670de0b6b3a764000091908290611a07908a6138e2565b611a1191906137b5565b611a1b91906138e2565b611a2591906137b5565b606082015260005460408051638b3415b960e01b81529051670de0b6b3a7640000926001600160a01b031691638b3415b9916004808301926020929190829003018186803b158015611a7657600080fd5b505afa158015611a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aae91906134d3565b611abb8360600151612f32565b611ac591906138e2565b611acf91906137b5565b60808201528251600013801590611ae7575060008612155b158015611b0457508251600012801590611b02575060008613155b155b15611b95576000611b188460000151612f32565b90506000611b2588612f32565b9050808213611b6257846020015181838560600151611b4491906138e2565b611b4e91906137b5565b611b589190613774565b60a0840152611b92565b826060015182828760200151611b7891906138e2565b611b8291906137b5565b611b8c9190613774565b60a08401525b50505b670de0b6b3a76400008160400151670de0b6b3a76400008360200151611bbe8560000151612f32565b8551611bd490611bcf908d90613774565b612f32565b611bde9190613984565b611be891906138e2565b611bf291906137b5565b611bfc91906138e2565b611c0691906137b5565b611c109085613774565b93508583600001818151611c249190613774565b90525060a08101516060820151611c3b9190613984565b83602001818151611c4c9190613774565b905250600654604084015260a08101516080820151611c6b9190613774565b611c759083613984565b91508560046003016000828254611c8c9190613774565b909155505060a08101516060820151611ca59190613984565b60088054600090611cb7908490613774565b909155505060005460408051633e520d5960e21b81529051670de0b6b3a7640000926001600160a01b03169163f9483564916004808301926020929190829003018186803b158015611d0857600080fd5b505afa158015611d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4091906134d3565b8260800151611d4f91906138e2565b611d5991906137b5565b60c0820181905260038054600090611d72908490613774565b909155505060a081015160c08201516080830151611d909190613984565b611d9a9190613774565b60016000828254611dab9190613774565b9091555050831580611e5c575060008054906101000a90046001600160a01b03166001600160a01b031663c42243c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611e0457600080fd5b505afa158015611e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3c91906134d3565b84611e4f670de0b6b3a7640000886138e2565b611e5991906137b5565b12155b611eb65760405162461bcd60e51b815260206004820152602560248201527f50657270657475616c506f6f6c3a20696e73756666696369656e74206c697175604482015264696469747960d81b6064820152608401610447565b60008054906101000a90046001600160a01b03166001600160a01b0316638ac848ca6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0257600080fd5b505afa158015611f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3a91906134d3565b611f448484612d0e565b1215611f625760405162461bcd60e51b8152600401610447906136c1565b611f6d878484612e48565b866001600160a01b03167fe9b9a6b9b3b7df275a3b89328628d89ee68f326bff47da3b67e7e56a5eeead9f87611fa684602001516126e2565b604080519283526020830191909152015b60405180910390a250506009805460ff191690555050505050565b60095460ff1615611ff55760405162461bcd60e51b815260040161044790613703565b6009805460ff19166001179055600061200c612821565b5090506120198383612f7f565b915060007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561207b57600080fd5b505afa15801561208f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b391906134d3565b90506000816120c35750836120e3565b6120cc846126e2565b6120d68387613965565b6120e091906137e3565b90505b6040516340c10f1960e01b81526001600160a01b038781166004830152602482018390528416906340c10f1990604401600060405180830381600087803b15801561212d57600080fd5b505af1158015612141573d6000803e3d6000fd5b5050505061214e8561271e565b6001600082825461215f9190613774565b909155505060408051828152602081018790526001600160a01b038816917f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca910160405180910390a250506009805460ff1916905550505050565b60095460ff16156121dd5760405162461bcd60e51b815260040161044790613703565b6009805460ff191660011790556121f48282612f7f565b604051637b51e92760e11b81526001600160a01b0384811660048301529192507f00000000000000000000000000000000000000000000000000000000000000009182169063f6a3d24e9060240160206040518083038186803b15801561225a57600080fd5b505afa15801561226e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612292919061349b565b6122f2576040516335313c2160e11b81526001600160a01b038481166004830152821690636a62784290602401600060405180830381600087803b1580156122d957600080fd5b505af11580156122ed573d6000803e3d6000fd5b505050505b806001600160a01b031663ac2681c68461230b8561271e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561235157600080fd5b505af1158015612365573d6000803e3d6000fd5b50505050826001600160a01b03167f278e696bd0cd4a7d1260ced26c40cd01c2b088f441889e4148240ac81069b348836040516123a491815260200190565b60405180910390a250506009805460ff1916905550565b60095460ff16156123de5760405162461bcd60e51b815260040161044790613703565b6009805460ff191660011790556000806123f6612821565b9150915060007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561245a57600080fd5b505afa15801561246e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249291906134d3565b90506000816124a0866126e2565b6124aa9088613965565b6124b491906137e3565b90506124bf8161271e565b600160008282546124d09190613984565b9091555050831580612595575060008054906101000a90046001600160a01b03166001600160a01b031663c42243c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561252957600080fd5b505afa15801561253d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256191906134d3565b84670de0b6b3a76400006125748461271e565b61257e9089613984565b61258891906138e2565b61259291906137b5565b12155b6125f15760405162461bcd60e51b815260206004820152602760248201527f50657270657475616c506f6f6c3a20706f6f6c20696e73756666696369656e746044820152661036b0b933b4b760c91b6064820152608401610447565b604051632770a7eb60e21b81526001600160a01b03888116600483015260248201889052841690639dc29fac90604401600060405180830381600087803b15801561263b57600080fd5b505af115801561264f573d6000803e3d6000fd5b5050505061265d878261275d565b60408051878152602081018390526001600160a01b038916917f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e89101611fb7565b60008183146126d6576126b283600a61383a565b6126bd83600a61383a565b6126c79086613965565b6126d191906137e3565b6126d8565b835b90505b9392505050565b60008082121561271a5760405162461bcd60e51b815260206004820152600360248201526249554f60e81b6044820152606401610447565b5090565b60006001600160ff1b0382111561271a5760405162461bcd60e51b815260206004820152600360248201526255494f60e81b6044820152606401610447565b600061278b8260127f000000000000000000000000000000000000000000000000000000000000000061269e565b905060006127bb827f0000000000000000000000000000000000000000000000000000000000000000601261269e565b6127c590846139c3565b90506127d08161271e565b600360008282546127e19190613774565b9091555061281b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168584612fee565b50505050565b60025460015490600090438181111561292d5760005460408051636bb9e4cb60e01b81529051612929926001600160a01b031691636bb9e4cb916004808301926020929190829003018186803b15801561287a57600080fd5b505afa15801561288e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b2919061344a565b6001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156128ec57600080fd5b505af1158015612900573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292491906134d3565b61271e565b6005555b60075415612a245760008054604080516333f359d160e21b81529051670de0b6b3a7640000926001600160a01b03169163cfcd6744916004808301926020929190829003018186803b15801561298257600080fd5b505afa158015612996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ba91906134d3565b600554600754670de0b6b3a7640000916129d3916138e2565b6129dd91906137b5565b6129e791906138e2565b6129f191906137b5565b600854909150612a019082613984565b612a0b9086613984565b9450612a1681612f32565b612a209085613774565b9350505b81811115612c555760075415612c555760008054604080516373d037ff60e11b8152905187926001600160a01b03169163e7a06ffe916004808301926020929190829003018186803b158015612a7957600080fd5b505afa158015612a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab191906134d3565b600054604080516333f359d160e21b81529051670de0b6b3a7640000926001600160a01b03169163cfcd6744916004808301926020929190829003018186803b158015612afd57600080fd5b505afa158015612b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3591906134d3565b600054604080516333f359d160e21b81529051670de0b6b3a7640000926001600160a01b03169163cfcd6744916004808301926020929190829003018186803b158015612b8157600080fd5b505afa158015612b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb991906134d3565b600554600754670de0b6b3a764000091908290612bd79083906138e2565b612be191906137b5565b612beb91906138e2565b612bf591906137b5565b612bff91906138e2565b612c0991906137b5565b612c1391906138e2565b612c1d91906137b5565b612c2791906138e2565b612c3191906137b5565b90506000612c3f84846139c3565b612c4990836138e2565b60068054909101905550505b600255509091565b612c8160405180606001604052806000815260200160008152602001600081525090565b6000612c8c83610f29565b8151919350915060009015612cde576006546040840151845190820390670de0b6b3a764000090612cbe9083906138e2565b612cc891906137b5565b612cd29084613774565b60408601929092525090505b8015612d0857612cee8183613984565b91508060016000828254612d029190613774565b90915550505b50915091565b81516000908290829015612e0c5760008054604080516333f359d160e21b81529051670de0b6b3a7640000926001600160a01b03169163cfcd6744916004808301926020929190829003018186803b158015612d6957600080fd5b505afa158015612d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da191906134d3565b6005548851670de0b6b3a764000091612db9916138e2565b612dc391906137b5565b612dcd91906138e2565b612dd791906137b5565b9050856020015181612de99190613984565b612df39084613774565b9250612dfe81612f32565b612e089083613774565b9150505b8015612e345780612e25670de0b6b3a7640000846138e2565b612e2f91906137b5565b612e3d565b6001600160ff1b035b925050505b92915050565b6040516388f74d0960e01b81527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038216906388f74d0990612e9890879087906004016135bd565b600060405180830381600087803b158015612eb257600080fd5b505af1158015612ec6573d6000803e3d6000fd5b5050604051631a9c941f60e01b81526001600160a01b0387811660048301526024820186905284169250631a9c941f9150604401600060405180830381600087803b158015612f1457600080fd5b505af1158015612f28573d6000803e3d6000fd5b5050505050505050565b6000600160ff1b821415612f6d5760405162461bcd60e51b8152602060048201526002602482015261414f60f01b6044820152606401610447565b600082121561271a57612e4282613a41565b600080612fb88430612fb38660127f000000000000000000000000000000000000000000000000000000000000000061269e565b613051565b9050612fe6817f0000000000000000000000000000000000000000000000000000000000000000601261269e565b949350505050565b6040516001600160a01b038316602482015260448101829052610e6590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261319d565b6040516370a0823160e01b81526001600160a01b0383811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000918391908316906370a082319060240160206040518083038186803b1580156130ba57600080fd5b505afa1580156130ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f291906134d3565b90506131096001600160a01b03831687878761326f565b6040516370a0823160e01b81526001600160a01b038681166004830152600091908416906370a082319060240160206040518083038186803b15801561314e57600080fd5b505afa158015613162573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318691906134d3565b905061319282826139c3565b979650505050505050565b60006131f2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132a79092919063ffffffff16565b805190915015610e655780806020019051810190613210919061349b565b610e655760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610447565b6040516001600160a01b038085166024830152831660448201526064810182905261281b9085906323b872dd60e01b9060840161301a565b60606126d8848460008585843b6133005760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610447565b600080866001600160a01b0316858760405161331c91906135a1565b60006040518083038185875af1925050503d8060008114613359576040519150601f19603f3d011682016040523d82523d6000602084013e61335e565b606091505b5091509150613192828286606083156133785750816126db565b8251156133885782518084602001fd5b8160405162461bcd60e51b815260040161044791906135ee565b600060a082840312156133b3578081fd5b60405160a0810181811067ffffffffffffffff821117156133e257634e487b7160e01b83526041600452602483fd5b80604052508091508235815260208301356020820152604083013560ff8116811461340c57600080fd5b8060408301525060608301356060820152608083013560808201525092915050565b60006020828403121561343f578081fd5b81356126db81613a87565b60006020828403121561345b578081fd5b81516126db81613a87565b60008060c08385031215613478578081fd5b823561348381613a87565b915061349284602085016133a2565b90509250929050565b6000602082840312156134ac578081fd5b815180151581146126db578182fd5b6000602082840312156134cc578081fd5b5035919050565b6000602082840312156134e4578081fd5b5051919050565b60008060c083850312156134fd578182fd5b8235915061349284602085016133a2565b60006060828403121561351f578081fd5b6040516060810181811067ffffffffffffffff8211171561354e57634e487b7160e01b83526041600452602483fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b6000815180845261358d8160208601602086016139da565b601f01601f19169290920160200192915050565b600082516135b38184602087016139da565b9190910192915050565b6001600160a01b0383168152608081016126db60208301848051825260208082015190830152604090810151910152565b6020815260006126db6020830184613575565b60208082526022908201527f50657270657475616c506f6f6c3a20696e76616c6964207472616465566f6c756040820152616d6560f01b606082015260800190565b60208082526018908201527f50657270657475616c506f6f6c3a20302062416d6f756e740000000000000000604082015260600190565b60208082526027908201527f50657270657475616c506f6f6c3a206e6f74207175616c6966696564206c69716040820152663ab4b230ba37b960c91b606082015260800190565b60208082526022908201527f50657270657475616c506f6f6c3a20696e73756666696369656e74206d61726760408201526134b760f11b606082015260800190565b6020808252600790820152667265656e74727960c81b604082015260600190565b602081526000825160a0602084015261374060c0840182613575565b9050602084015160408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b600080821280156001600160ff1b038490038513161561379657613796613a5b565b600160ff1b83900384128116156137af576137af613a5b565b50500190565b6000826137c4576137c4613a71565b600160ff1b8214600019841416156137de576137de613a5b565b500590565b6000826137f2576137f2613a71565b500490565b600181815b8085111561383257816000190482111561381857613818613a5b565b8085161561382557918102915b93841c93908002906137fc565b509250929050565b60006126db838360008261385057506001612e42565b8161385d57506000612e42565b8160018114613873576002811461387d57613899565b6001915050612e42565b60ff84111561388e5761388e613a5b565b50506001821b612e42565b5060208310610133831016604e8410600b84101617156138bc575081810a612e42565b6138c683836137f7565b80600019048211156138da576138da613a5b565b029392505050565b60006001600160ff1b038184138284138082168684048611161561390857613908613a5b565b600160ff1b8487128281168783058912161561392657613926613a5b565b85871292508782058712848416161561394157613941613a5b565b8785058712818416161561395757613957613a5b565b505050929093029392505050565b600081600019048311821515161561397f5761397f613a5b565b500290565b60008083128015600160ff1b8501841216156139a2576139a2613a5b565b6001600160ff1b03840183138116156139bd576139bd613a5b565b50500390565b6000828210156139d5576139d5613a5b565b500390565b60005b838110156139f55781810151838201526020016139dd565b8381111561281b5750506000910152565b600181811c90821680613a1a57607f821691505b60208210811415613a3b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600160ff1b821415613a5757613a57613a5b565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b03811681146106a657600080fdfea264697066735822122000b258287535bc1492944c6d1a57502de57f65b6fa86e750222cff3dbc12af9e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c8063a39fac12116100b8578063d608c07d1161007c578063d608c07d1461038f578063de61838c14610397578063dfd19898146103aa578063f11f854f146103c7578063f12c9f0e146103da578063fcd33b511461041457600080fd5b8063a39fac12146101f7578063a43be94814610324578063a5ea11da14610337578063b5d4034514610374578063caa4b46a1461038757600080fd5b80633dc07fda116100ff5780633dc07fda1461019857806351c6590a146101ab5780635756e84c146101be57806375fe9c7f146101d15780639c8f9f23146101e457600080fd5b806307e2ee0f1461013c5780630910a5101461015357806314e841b91461015b57806315070401146101705780632f86556814610185575b600080fd5b6002545b6040519081526020015b60405180910390f35b600154610140565b61016e6101693660046134eb565b610427565b005b610178610467565b60405161014a9190613724565b61016e61019336600461342e565b610565565b61016e6101a63660046134bb565b610656565b61016e6101b93660046134bb565b6106a9565b61016e6101cc3660046134eb565b6106d3565b61016e6101df3660046134eb565b610706565b61016e6101f23660046134bb565b610739565b604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000811660208301527f00000000000000000000000000000000000000000000000000000000000000008116928201929092527f0000000000000000000000000000000000000000000000000000000000000000821660608201527f0000000000000000000000000000000000000000000000000000000000000000821660808201527f0000000000000000000000000000000000000000000000000000000000000000821660a08201527f00000000000000000000000000000000000000000000000000000000000000009190911660c082015260e00161014a565b61016e6103323660046134bb565b61078e565b61033f6107b8565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00161014a565b61016e6103823660046134eb565b610b76565b61016e610bd4565b600354610140565b61016e6103a5366004613466565b610d6b565b6103b2610e6a565b6040805192835260208301919091520161014a565b61016e6103d53660046134bb565b610eff565b6103ed6103e836600461342e565b610f29565b6040805183518152602080850151908201529281015190830152606082015260800161014a565b61016e6104223660046134eb565b611070565b600082116104505760405162461bcd60e51b815260040161044790613643565b60405180910390fd5b610459816110c9565b6104633383611204565b5050565b6104996040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b60046040518060a00160405290816000820180546104b690613a06565b80601f01602080910402602001604051908101604052809291908181526020018280546104e290613a06565b801561052f5780601f106105045761010080835404028352916020019161052f565b820191906000526020600020905b81548152906001019060200180831161051257829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316158061063057506040516337c203bd60e21b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063df080ef49060240160206040518083038186803b1580156105f857600080fd5b505afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610630919061349b565b61064c5760405162461bcd60e51b81526004016104479061367a565b610463818361139a565b8015801590610680575080670de0b6b3a764000061067481836137b5565b61067e91906138e2565b145b61069c5760405162461bcd60e51b815260040161044790613601565b6106a633826118cd565b50565b600081116106c95760405162461bcd60e51b815260040161044790613643565b6106a63382611fd2565b600082116106f35760405162461bcd60e51b815260040161044790613643565b6106fc816110c9565b61046333836121ba565b600082116107265760405162461bcd60e51b815260040161044790613643565b61072f816110c9565b6104633383611fd2565b600081116107845760405162461bcd60e51b815260206004820152601860248201527750657270657475616c506f6f6c3a2030206c53686172657360401b6044820152606401610447565b6106a633826123bb565b600081116107ae5760405162461bcd60e51b815260040161044790613643565b6106a633826121ba565b60008060008060008060008060009054906101000a90046001600160a01b03166001600160a01b031663c42243c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561081057600080fd5b505afa158015610824573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084891906134d3565b60008054906101000a90046001600160a01b03166001600160a01b0316638ac848ca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561089457600080fd5b505afa1580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc91906134d3565b60008054906101000a90046001600160a01b03166001600160a01b0316630adf8e926040518163ffffffff1660e01b815260040160206040518083038186803b15801561091857600080fd5b505afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095091906134d3565b60008054906101000a90046001600160a01b03166001600160a01b031663ddd18d306040518163ffffffff1660e01b815260040160206040518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d491906134d3565b60008054906101000a90046001600160a01b03166001600160a01b031663ab78ace46040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2057600080fd5b505afa158015610a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5891906134d3565b60008054906101000a90046001600160a01b03166001600160a01b03166346d2d2d86040518163ffffffff1660e01b815260040160206040518083038186803b158015610aa457600080fd5b505afa158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc91906134d3565b60008054906101000a90046001600160a01b03166001600160a01b031663f94835646040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2857600080fd5b505afa158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6091906134d3565b959d949c50929a50909850965094509092509050565b60008211610bc15760405162461bcd60e51b815260206004820152601860248201527750657270657475616c506f6f6c3a2030206c53686172657360401b6044820152606401610447565b610bca816110c9565b61046333836123bb565b6040516370a0823160e01b8152306004820152600090610c9e907f0000000000000000000000000000000000000000000000000000000000000000906012906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610c5f57600080fd5b505afa158015610c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9791906134d3565b919061269e565b90506000610cad6003546126e2565b905081811115610cba5750805b610cc38161271e565b60036000828254610cd49190613984565b90915550610d0490507f00000000000000000000000000000000000000000000000000000000000000008261275d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167fdc9b9c7c232fac9d635ce55b58e41cca2c16aa6ad39a73973ce276d479ad6f2d82604051610d5f91815260200190565b60405180910390a25050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161580610e3657506040516337c203bd60e21b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063df080ef49060240160206040518083038186803b158015610dfe57600080fd5b505afa158015610e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e36919061349b565b610e525760405162461bcd60e51b81526004016104479061367a565b610e5b826110c9565b610e65818461139a565b505050565b60008060046001015460008054906101000a90046001600160a01b03166001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b158015610ebf57600080fd5b505afa158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef791906134d3565b915091509091565b60008111610f1f5760405162461bcd60e51b815260040161044790613643565b6106a63382611204565b610f4d60405180606001604052806000815260200160008152602001600081525090565b6040516316c1973960e01b81526001600160a01b0383811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000918216906316c197399060240160606040518083038186803b158015610fb357600080fd5b505afa158015610fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610feb919061350e565b604051637c27c4d160e11b81526001600160a01b0386811660048301529194509082169063f84f89a29060240160206040518083038186803b15801561103057600080fd5b505afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106891906134d3565b915050915091565b811580159061109a575081670de0b6b3a764000061108e81836137b5565b61109891906138e2565b145b6110b65760405162461bcd60e51b815260040161044790613601565b6110bf816110c9565b61046333836118cd565b60008054906101000a90046001600160a01b03166001600160a01b0316636bb9e4cb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111557600080fd5b505afa158015611129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114d919061344a565b8151602083015160408085015160608601516080870151925162da15e960e71b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820196909652604481019490945260ff9091166064840152608483015260a4820152911690636d0af4809060c401600060405180830381600087803b1580156111e957600080fd5b505af11580156111fd573d6000803e3d6000fd5b5050505050565b60095460ff16156112275760405162461bcd60e51b815260040161044790613703565b6009805460ff1916600117905561123c612821565b505060008061124a84612c5d565b9150915060006112598461271e565b905081811261127857508061126d816126e2565b935060009150611285565b6112828183613984565b91505b60008054906101000a90046001600160a01b03166001600160a01b0316638ac848ca6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112d157600080fd5b505afa1580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130991906134d3565b6113138484612d0e565b12156113315760405162461bcd60e51b8152600401610447906136c1565b61133c858484612e48565b611346858561275d565b846001600160a01b03167f318a9cd646c737e6331915189b674d6d06ae71b28df0f50e7a6dfe101a1293878560405161138191815260200190565b60405180910390a250506009805460ff19169055505050565b60095460ff16156113bd5760405162461bcd60e51b815260040161044790613703565b6009805460ff191660011790556113d2612821565b50506000806113e083612c5d565b9150915060008054906101000a90046001600160a01b03166001600160a01b0316630adf8e926040518163ffffffff1660e01b815260040160206040518083038186803b15801561143057600080fd5b505afa158015611444573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146891906134d3565b6114728383612d0e565b126114bf5760405162461bcd60e51b815260206004820152601f60248201527f50657270657475616c506f6f6c3a2063616e6e6f74206c6971756964617465006044820152606401610447565b81518190156115de578251600780546000906114dc908490613984565b90915550506020830151600880546000906114f8908490613984565b925050819055508260200151670de0b6b3a764000060008054906101000a90046001600160a01b03166001600160a01b031663cfcd67446040518163ffffffff1660e01b815260040160206040518083038186803b15801561155957600080fd5b505afa15801561156d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159191906134d3565b6005548651670de0b6b3a7640000916115a9916138e2565b6115b391906137b5565b6115bd91906138e2565b6115c791906137b5565b6115d19190613984565b6115db9082613774565b90505b6000805460408051630ddd18d360e41b8152905183926001600160a01b03169163ddd18d30916004808301926020929190829003018186803b15801561162357600080fd5b505afa158015611637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165b91906134d3565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663ab78ace46040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ac57600080fd5b505afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e491906134d3565b90508184136116f5578192506117bd565b808412611704578092506117bd565b81670de0b6b3a764000060008054906101000a90046001600160a01b03166001600160a01b03166346d2d2d86040518163ffffffff1660e01b815260040160206040518083038186803b15801561175a57600080fd5b505afa15801561176e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179291906134d3565b61179c8588613984565b6117a691906138e2565b6117b091906137b5565b6117ba9190613774565b92505b6117c78386613984565b600160008282546117d89190613774565b909155505060405163226bf2d160e21b81526001600160a01b0388811660048301527f000000000000000000000000000000000000000000000000000000000000000016906389afcb4490602401600060405180830381600087803b15801561184057600080fd5b505af1158015611854573d6000803e3d6000fd5b5050505061186a88611865856126e2565b61275d565b876001600160a01b0316876001600160a01b03167faef3faf684172084346f7dc2cc3bb1328d1cc23caec12dd9a82d4a4e56c00b176118a8866126e2565b60405190815260200160405180910390a350506009805460ff19169055505050505050565b60095460ff16156118f05760405162461bcd60e51b815260040161044790613703565b6009805460ff19166001179055600080611908612821565b9150915060008061191886612c5d565b9150915061195c6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6007548152600554602080830191909152600054604080516333f359d160e21b815290516001600160a01b039092169263cfcd674492600483810193829003018186803b1580156119ac57600080fd5b505afa1580156119c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e491906134d3565b604082018190526020820151670de0b6b3a764000091908290611a07908a6138e2565b611a1191906137b5565b611a1b91906138e2565b611a2591906137b5565b606082015260005460408051638b3415b960e01b81529051670de0b6b3a7640000926001600160a01b031691638b3415b9916004808301926020929190829003018186803b158015611a7657600080fd5b505afa158015611a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aae91906134d3565b611abb8360600151612f32565b611ac591906138e2565b611acf91906137b5565b60808201528251600013801590611ae7575060008612155b158015611b0457508251600012801590611b02575060008613155b155b15611b95576000611b188460000151612f32565b90506000611b2588612f32565b9050808213611b6257846020015181838560600151611b4491906138e2565b611b4e91906137b5565b611b589190613774565b60a0840152611b92565b826060015182828760200151611b7891906138e2565b611b8291906137b5565b611b8c9190613774565b60a08401525b50505b670de0b6b3a76400008160400151670de0b6b3a76400008360200151611bbe8560000151612f32565b8551611bd490611bcf908d90613774565b612f32565b611bde9190613984565b611be891906138e2565b611bf291906137b5565b611bfc91906138e2565b611c0691906137b5565b611c109085613774565b93508583600001818151611c249190613774565b90525060a08101516060820151611c3b9190613984565b83602001818151611c4c9190613774565b905250600654604084015260a08101516080820151611c6b9190613774565b611c759083613984565b91508560046003016000828254611c8c9190613774565b909155505060a08101516060820151611ca59190613984565b60088054600090611cb7908490613774565b909155505060005460408051633e520d5960e21b81529051670de0b6b3a7640000926001600160a01b03169163f9483564916004808301926020929190829003018186803b158015611d0857600080fd5b505afa158015611d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4091906134d3565b8260800151611d4f91906138e2565b611d5991906137b5565b60c0820181905260038054600090611d72908490613774565b909155505060a081015160c08201516080830151611d909190613984565b611d9a9190613774565b60016000828254611dab9190613774565b9091555050831580611e5c575060008054906101000a90046001600160a01b03166001600160a01b031663c42243c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611e0457600080fd5b505afa158015611e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3c91906134d3565b84611e4f670de0b6b3a7640000886138e2565b611e5991906137b5565b12155b611eb65760405162461bcd60e51b815260206004820152602560248201527f50657270657475616c506f6f6c3a20696e73756666696369656e74206c697175604482015264696469747960d81b6064820152608401610447565b60008054906101000a90046001600160a01b03166001600160a01b0316638ac848ca6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0257600080fd5b505afa158015611f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3a91906134d3565b611f448484612d0e565b1215611f625760405162461bcd60e51b8152600401610447906136c1565b611f6d878484612e48565b866001600160a01b03167fe9b9a6b9b3b7df275a3b89328628d89ee68f326bff47da3b67e7e56a5eeead9f87611fa684602001516126e2565b604080519283526020830191909152015b60405180910390a250506009805460ff191690555050505050565b60095460ff1615611ff55760405162461bcd60e51b815260040161044790613703565b6009805460ff19166001179055600061200c612821565b5090506120198383612f7f565b915060007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561207b57600080fd5b505afa15801561208f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b391906134d3565b90506000816120c35750836120e3565b6120cc846126e2565b6120d68387613965565b6120e091906137e3565b90505b6040516340c10f1960e01b81526001600160a01b038781166004830152602482018390528416906340c10f1990604401600060405180830381600087803b15801561212d57600080fd5b505af1158015612141573d6000803e3d6000fd5b5050505061214e8561271e565b6001600082825461215f9190613774565b909155505060408051828152602081018790526001600160a01b038816917f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca910160405180910390a250506009805460ff1916905550505050565b60095460ff16156121dd5760405162461bcd60e51b815260040161044790613703565b6009805460ff191660011790556121f48282612f7f565b604051637b51e92760e11b81526001600160a01b0384811660048301529192507f00000000000000000000000000000000000000000000000000000000000000009182169063f6a3d24e9060240160206040518083038186803b15801561225a57600080fd5b505afa15801561226e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612292919061349b565b6122f2576040516335313c2160e11b81526001600160a01b038481166004830152821690636a62784290602401600060405180830381600087803b1580156122d957600080fd5b505af11580156122ed573d6000803e3d6000fd5b505050505b806001600160a01b031663ac2681c68461230b8561271e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561235157600080fd5b505af1158015612365573d6000803e3d6000fd5b50505050826001600160a01b03167f278e696bd0cd4a7d1260ced26c40cd01c2b088f441889e4148240ac81069b348836040516123a491815260200190565b60405180910390a250506009805460ff1916905550565b60095460ff16156123de5760405162461bcd60e51b815260040161044790613703565b6009805460ff191660011790556000806123f6612821565b9150915060007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561245a57600080fd5b505afa15801561246e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249291906134d3565b90506000816124a0866126e2565b6124aa9088613965565b6124b491906137e3565b90506124bf8161271e565b600160008282546124d09190613984565b9091555050831580612595575060008054906101000a90046001600160a01b03166001600160a01b031663c42243c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561252957600080fd5b505afa15801561253d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256191906134d3565b84670de0b6b3a76400006125748461271e565b61257e9089613984565b61258891906138e2565b61259291906137b5565b12155b6125f15760405162461bcd60e51b815260206004820152602760248201527f50657270657475616c506f6f6c3a20706f6f6c20696e73756666696369656e746044820152661036b0b933b4b760c91b6064820152608401610447565b604051632770a7eb60e21b81526001600160a01b03888116600483015260248201889052841690639dc29fac90604401600060405180830381600087803b15801561263b57600080fd5b505af115801561264f573d6000803e3d6000fd5b5050505061265d878261275d565b60408051878152602081018390526001600160a01b038916917f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e89101611fb7565b60008183146126d6576126b283600a61383a565b6126bd83600a61383a565b6126c79086613965565b6126d191906137e3565b6126d8565b835b90505b9392505050565b60008082121561271a5760405162461bcd60e51b815260206004820152600360248201526249554f60e81b6044820152606401610447565b5090565b60006001600160ff1b0382111561271a5760405162461bcd60e51b815260206004820152600360248201526255494f60e81b6044820152606401610447565b600061278b8260127f000000000000000000000000000000000000000000000000000000000000000061269e565b905060006127bb827f0000000000000000000000000000000000000000000000000000000000000000601261269e565b6127c590846139c3565b90506127d08161271e565b600360008282546127e19190613774565b9091555061281b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168584612fee565b50505050565b60025460015490600090438181111561292d5760005460408051636bb9e4cb60e01b81529051612929926001600160a01b031691636bb9e4cb916004808301926020929190829003018186803b15801561287a57600080fd5b505afa15801561288e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b2919061344a565b6001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156128ec57600080fd5b505af1158015612900573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292491906134d3565b61271e565b6005555b60075415612a245760008054604080516333f359d160e21b81529051670de0b6b3a7640000926001600160a01b03169163cfcd6744916004808301926020929190829003018186803b15801561298257600080fd5b505afa158015612996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ba91906134d3565b600554600754670de0b6b3a7640000916129d3916138e2565b6129dd91906137b5565b6129e791906138e2565b6129f191906137b5565b600854909150612a019082613984565b612a0b9086613984565b9450612a1681612f32565b612a209085613774565b9350505b81811115612c555760075415612c555760008054604080516373d037ff60e11b8152905187926001600160a01b03169163e7a06ffe916004808301926020929190829003018186803b158015612a7957600080fd5b505afa158015612a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab191906134d3565b600054604080516333f359d160e21b81529051670de0b6b3a7640000926001600160a01b03169163cfcd6744916004808301926020929190829003018186803b158015612afd57600080fd5b505afa158015612b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3591906134d3565b600054604080516333f359d160e21b81529051670de0b6b3a7640000926001600160a01b03169163cfcd6744916004808301926020929190829003018186803b158015612b8157600080fd5b505afa158015612b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb991906134d3565b600554600754670de0b6b3a764000091908290612bd79083906138e2565b612be191906137b5565b612beb91906138e2565b612bf591906137b5565b612bff91906138e2565b612c0991906137b5565b612c1391906138e2565b612c1d91906137b5565b612c2791906138e2565b612c3191906137b5565b90506000612c3f84846139c3565b612c4990836138e2565b60068054909101905550505b600255509091565b612c8160405180606001604052806000815260200160008152602001600081525090565b6000612c8c83610f29565b8151919350915060009015612cde576006546040840151845190820390670de0b6b3a764000090612cbe9083906138e2565b612cc891906137b5565b612cd29084613774565b60408601929092525090505b8015612d0857612cee8183613984565b91508060016000828254612d029190613774565b90915550505b50915091565b81516000908290829015612e0c5760008054604080516333f359d160e21b81529051670de0b6b3a7640000926001600160a01b03169163cfcd6744916004808301926020929190829003018186803b158015612d6957600080fd5b505afa158015612d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da191906134d3565b6005548851670de0b6b3a764000091612db9916138e2565b612dc391906137b5565b612dcd91906138e2565b612dd791906137b5565b9050856020015181612de99190613984565b612df39084613774565b9250612dfe81612f32565b612e089083613774565b9150505b8015612e345780612e25670de0b6b3a7640000846138e2565b612e2f91906137b5565b612e3d565b6001600160ff1b035b925050505b92915050565b6040516388f74d0960e01b81527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038216906388f74d0990612e9890879087906004016135bd565b600060405180830381600087803b158015612eb257600080fd5b505af1158015612ec6573d6000803e3d6000fd5b5050604051631a9c941f60e01b81526001600160a01b0387811660048301526024820186905284169250631a9c941f9150604401600060405180830381600087803b158015612f1457600080fd5b505af1158015612f28573d6000803e3d6000fd5b5050505050505050565b6000600160ff1b821415612f6d5760405162461bcd60e51b8152602060048201526002602482015261414f60f01b6044820152606401610447565b600082121561271a57612e4282613a41565b600080612fb88430612fb38660127f000000000000000000000000000000000000000000000000000000000000000061269e565b613051565b9050612fe6817f0000000000000000000000000000000000000000000000000000000000000000601261269e565b949350505050565b6040516001600160a01b038316602482015260448101829052610e6590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261319d565b6040516370a0823160e01b81526001600160a01b0383811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000918391908316906370a082319060240160206040518083038186803b1580156130ba57600080fd5b505afa1580156130ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f291906134d3565b90506131096001600160a01b03831687878761326f565b6040516370a0823160e01b81526001600160a01b038681166004830152600091908416906370a082319060240160206040518083038186803b15801561314e57600080fd5b505afa158015613162573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318691906134d3565b905061319282826139c3565b979650505050505050565b60006131f2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132a79092919063ffffffff16565b805190915015610e655780806020019051810190613210919061349b565b610e655760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610447565b6040516001600160a01b038085166024830152831660448201526064810182905261281b9085906323b872dd60e01b9060840161301a565b60606126d8848460008585843b6133005760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610447565b600080866001600160a01b0316858760405161331c91906135a1565b60006040518083038185875af1925050503d8060008114613359576040519150601f19603f3d011682016040523d82523d6000602084013e61335e565b606091505b5091509150613192828286606083156133785750816126db565b8251156133885782518084602001fd5b8160405162461bcd60e51b815260040161044791906135ee565b600060a082840312156133b3578081fd5b60405160a0810181811067ffffffffffffffff821117156133e257634e487b7160e01b83526041600452602483fd5b80604052508091508235815260208301356020820152604083013560ff8116811461340c57600080fd5b8060408301525060608301356060820152608083013560808201525092915050565b60006020828403121561343f578081fd5b81356126db81613a87565b60006020828403121561345b578081fd5b81516126db81613a87565b60008060c08385031215613478578081fd5b823561348381613a87565b915061349284602085016133a2565b90509250929050565b6000602082840312156134ac578081fd5b815180151581146126db578182fd5b6000602082840312156134cc578081fd5b5035919050565b6000602082840312156134e4578081fd5b5051919050565b60008060c083850312156134fd578182fd5b8235915061349284602085016133a2565b60006060828403121561351f578081fd5b6040516060810181811067ffffffffffffffff8211171561354e57634e487b7160e01b83526041600452602483fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b6000815180845261358d8160208601602086016139da565b601f01601f19169290920160200192915050565b600082516135b38184602087016139da565b9190910192915050565b6001600160a01b0383168152608081016126db60208301848051825260208082015190830152604090810151910152565b6020815260006126db6020830184613575565b60208082526022908201527f50657270657475616c506f6f6c3a20696e76616c6964207472616465566f6c756040820152616d6560f01b606082015260800190565b60208082526018908201527f50657270657475616c506f6f6c3a20302062416d6f756e740000000000000000604082015260600190565b60208082526027908201527f50657270657475616c506f6f6c3a206e6f74207175616c6966696564206c69716040820152663ab4b230ba37b960c91b606082015260800190565b60208082526022908201527f50657270657475616c506f6f6c3a20696e73756666696369656e74206d61726760408201526134b760f11b606082015260800190565b6020808252600790820152667265656e74727960c81b604082015260600190565b602081526000825160a0602084015261374060c0840182613575565b9050602084015160408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b600080821280156001600160ff1b038490038513161561379657613796613a5b565b600160ff1b83900384128116156137af576137af613a5b565b50500190565b6000826137c4576137c4613a71565b600160ff1b8214600019841416156137de576137de613a5b565b500590565b6000826137f2576137f2613a71565b500490565b600181815b8085111561383257816000190482111561381857613818613a5b565b8085161561382557918102915b93841c93908002906137fc565b509250929050565b60006126db838360008261385057506001612e42565b8161385d57506000612e42565b8160018114613873576002811461387d57613899565b6001915050612e42565b60ff84111561388e5761388e613a5b565b50506001821b612e42565b5060208310610133831016604e8410600b84101617156138bc575081810a612e42565b6138c683836137f7565b80600019048211156138da576138da613a5b565b029392505050565b60006001600160ff1b038184138284138082168684048611161561390857613908613a5b565b600160ff1b8487128281168783058912161561392657613926613a5b565b85871292508782058712848416161561394157613941613a5b565b8785058712818416161561395757613957613a5b565b505050929093029392505050565b600081600019048311821515161561397f5761397f613a5b565b500290565b60008083128015600160ff1b8501841216156139a2576139a2613a5b565b6001600160ff1b03840183138116156139bd576139bd613a5b565b50500390565b6000828210156139d5576139d5613a5b565b500390565b60005b838110156139f55781810151838201526020016139dd565b8381111561281b5750506000910152565b600181811c90821680613a1a57607f821691505b60208210811415613a3b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600160ff1b821415613a5757613a57613a5b565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b03811681146106a657600080fdfea264697066735822122000b258287535bc1492944c6d1a57502de57f65b6fa86e750222cff3dbc12af9e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17134,
        "contract": "contracts/polygon/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_protocolParameters",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(FuturesProtocolParameters)13717"
      },
      {
        "astId": 17136,
        "contract": "contracts/polygon/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_liquidity",
        "offset": 0,
        "slot": "1",
        "type": "t_int256"
      },
      {
        "astId": 17138,
        "contract": "contracts/polygon/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_lastUpdateBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 17140,
        "contract": "contracts/polygon/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_protocolFeeAccrued",
        "offset": 0,
        "slot": "3",
        "type": "t_int256"
      },
      {
        "astId": 17143,
        "contract": "contracts/polygon/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(SymbolInfo)19810_storage"
      },
      {
        "astId": 17145,
        "contract": "contracts/polygon/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
        "label": "_mutex",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FuturesProtocolParameters)13717": {
        "encoding": "inplace",
        "label": "contract FuturesProtocolParameters",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SymbolInfo)19810_storage": {
        "encoding": "inplace",
        "label": "struct IPerpetualPoolLite.SymbolInfo",
        "members": [
          {
            "astId": 19801,
            "contract": "contracts/polygon/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
            "label": "symbol",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 19803,
            "contract": "contracts/polygon/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 19805,
            "contract": "contracts/polygon/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
            "label": "cumulativeFundingRate",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 19807,
            "contract": "contracts/polygon/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
            "label": "tradersNetVolume",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 19809,
            "contract": "contracts/polygon/perpetual_futures/PerpetualPoolLite.sol:PerpetualPoolLite",
            "label": "tradersNetCost",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}