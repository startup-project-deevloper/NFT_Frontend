{
  "address": "0x524f183191aB296f20c83c7737694CF3215Be098",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[10]",
          "name": "addresses_",
          "type": "address[10]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "lTokenLite_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pTokenLite_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "perpetualPoolLiteAddress_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolInfo_",
              "type": "address"
            }
          ],
          "internalType": "struct FuturesParametersContracts",
          "name": "futuresParameters",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "fractionalizeProtocol",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "futuresProtocol",
              "type": "address"
            }
          ],
          "internalType": "struct ProtocolParametersContracts",
          "name": "protocolParameters",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectionManagerID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collectionManagerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "jotAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "jotPoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "redemptionPoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "jotPairAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "syntheticNFTAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quickSwapAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "auctionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lTokenLite_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pTokenLite_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "perpetualPoolLiteAddress_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolInfo",
          "type": "address"
        }
      ],
      "name": "CollectionManagerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "syntheticID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newID",
          "type": "uint256"
        }
      ],
      "name": "TokenChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "collectionManagerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "syntheticTokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "syntheticId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newOriginalId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "changeNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getCollectionID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getCollectionManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionID",
          "type": "uint256"
        }
      ],
      "name": "getCollectionManagerAddressFromId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getCollectionPerpetualPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getCollectionUniswapPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getCollectionlTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getCollectionpTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getJotPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getJotsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionID",
          "type": "uint256"
        }
      ],
      "name": "getOriginalCollectionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isNFTVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "isSyntheticCollectionRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isSyntheticNFTCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolVaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyToKeep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceFraction",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "originalName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "originalSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct RegistrationMetadata",
          "name": "registrationMetadata",
          "type": "tuple"
        }
      ],
      "name": "registerNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "verifyNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd523ea05c4d3cbef053dd3a07e0f226bd593911e2e444728bde421c77590b385",
  "receipt": {
    "to": null,
    "from": "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
    "contractAddress": "0x524f183191aB296f20c83c7737694CF3215Be098",
    "transactionIndex": 0,
    "gasUsed": "3158400",
    "logsBloom": "0x
    "blockHash": "0x38c5e8333a01685c7fe5f9b18fc7e50978ffe395591cef74ea4e0ca358f9f35f",
    "transactionHash": "0xd523ea05c4d3cbef053dd3a07e0f226bd593911e2e444728bde421c77590b385",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21134109,
        "transactionHash": "0xd523ea05c4d3cbef053dd3a07e0f226bd593911e2e444728bde421c77590b385",
        "address": "0x524f183191aB296f20c83c7737694CF3215Be098",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x38c5e8333a01685c7fe5f9b18fc7e50978ffe395591cef74ea4e0ca358f9f35f"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 21134109,
        "transactionHash": "0xd523ea05c4d3cbef053dd3a07e0f226bd593911e2e444728bde421c77590b385",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000059c462707800000000000000000000000000000000000000000000000000001e183737076737860000000000000000000000000000000000000000000001f11da087efee8ed3100000000000000000000000000000000000000000000000001dbe72d496ef37860000000000000000000000000000000000000000000001f11dfa4c525f06d310",
        "logIndex": 1,
        "blockHash": "0x38c5e8333a01685c7fe5f9b18fc7e50978ffe395591cef74ea4e0ca358f9f35f"
      }
    ],
    "blockNumber": 21134109,
    "cumulativeGasUsed": "3158400",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x4CeBfcDA07A08B1C7169E5eb77AC117FF87EEae9",
      "0xad1E2D39bDBe50d774C465cD0236badC9c0b21b9",
      "0x9474feffDff8c49b655eDf59Ac985Ad257Cd5989",
      "0x3613a458d4a2Fd9D52433860F5B73869c991BeB6",
      "0xf7a819c6f37aD571cD21FF28385E71d7d981Cff6",
      "0x6DE06E868babd79ffB87CAb423377956F6d41557",
      "0x432B3d07e2B1A04117bcd8d747685358b82D88d9",
      "0xf80573193040B2E4D56A3D159D9136FD9Ae11327",
      "0x1e5B1709812b0C7C491ccAA72e14d41a769d339a",
      "0x8707ba3af78cf237cA06fE6dFC3cc0E2a430Ca18"
    ],
    {
      "lTokenLite_": "0x2F7c2ABf3518201AD2C5D2D2b3e13259C8d490f4",
      "pTokenLite_": "0xbe5429127CE3294fdB15ebc5B9446E4B64f18Ec4",
      "perpetualPoolLiteAddress_": "0x848BE6590FFE20Ac02473244d1eADA62646c1dBc",
      "poolInfo_": "0x76c1dcE7cd77A15e19e933c26d8019856c457489"
    },
    {
      "fractionalizeProtocol": "0x67A13399A139D970e0832bA2837998bb5f805b3b",
      "futuresProtocol": "0x53dFA87B75009FaAEBA37746c1332c1c2B75A620"
    }
  ],
  "solcInputHash": "5d03c508273f8c552e37f1ebff990a5f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[10]\",\"name\":\"addresses_\",\"type\":\"address[10]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lTokenLite_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pTokenLite_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"perpetualPoolLiteAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolInfo_\",\"type\":\"address\"}],\"internalType\":\"struct FuturesParametersContracts\",\"name\":\"futuresParameters\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fractionalizeProtocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"futuresProtocol\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolParametersContracts\",\"name\":\"protocolParameters\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionManagerID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"jotAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"jotPoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redemptionPoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"jotPairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"syntheticNFTAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quickSwapAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lTokenLite_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pTokenLite_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"perpetualPoolLiteAddress_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolInfo\",\"type\":\"address\"}],\"name\":\"CollectionManagerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"syntheticID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newID\",\"type\":\"uint256\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"syntheticTokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"syntheticId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newOriginalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"changeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionID\",\"type\":\"uint256\"}],\"name\":\"getCollectionManagerAddressFromId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionPerpetualPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionUniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionlTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionpTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getJotPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getJotsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionID\",\"type\":\"uint256\"}],\"name\":\"getOriginalCollectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isNFTVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"isSyntheticCollectionRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isSyntheticNFTCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyToKeep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceFraction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"originalName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"originalSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct RegistrationMetadata\",\"name\":\"registrationMetadata\",\"type\":\"tuple\"}],\"name\":\"registerNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"verifyNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerNFT(address,uint256,uint256,uint256,(string,string,string))\":{\"params\":{\"collection\":\"the address of the synthetic collection\",\"registrationMetadata\":\"the metadata for the registration\",\"supplyToKeep\":\"supply to keep\",\"tokenId\":\"the token id\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_collectionIdToAddress\":{\"details\":\"get collection address from ID\"},\"_collections\":{\"details\":\"collections map. collection address => collection data\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeNFT(address,uint256,uint256,string)\":{\"notice\":\"change an NFT for another one\"},\"getCollectionID(address)\":{\"notice\":\"get collection ID from collection address\"},\"getCollectionManagerAddress(address)\":{\"notice\":\"get collection manager address from collection address\"},\"getCollectionManagerAddressFromId(uint256)\":{\"notice\":\"get collection manager address from collection ID\"},\"getJotPoolAddress(address)\":{\"notice\":\"getter for Jot Pool Address of a collection\"},\"getJotsAddress(address)\":{\"notice\":\"getter for Jot Address of a collection\"},\"getOriginalCollectionAddress(uint256)\":{\"notice\":\"get collection address from collection ID\"},\"isNFTVerified(address,uint256)\":{\"notice\":\"checks whether a Synthetic has been verified or not\"},\"isSyntheticCollectionRegistered(address)\":{\"notice\":\"checks whether a collection is registered or not\"},\"isSyntheticNFTCreated(address,uint256)\":{\"notice\":\"checks whether a Synthetic NFT has been created for a given NFT or not\"},\"protocolVaults()\":{\"notice\":\"number of registered collections\"},\"registerNFT(address,uint256,uint256,uint256,(string,string,string))\":{\"notice\":\"register an NFT collection\"},\"swapAddress()\":{\"notice\":\"QuickSwap address\"},\"verifyNFT(address,uint256)\":{\"notice\":\"verify a synthetic NFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/SyntheticProtocolRouter.sol\":\"SyntheticProtocolRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { CBORChainlink } from \\\"./vendor/CBORChainlink.sol\\\";\\nimport { BufferChainlink } from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  )\\n    internal\\n    pure\\n    returns (\\n      Chainlink.Request memory\\n    )\\n  {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(\\n    Request memory self,\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n  {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x12e1313c62b0dae9684b7ca52f0a05be3ddef6926f5a714ec723ef9587b08222\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport { ENSResolver as ENSResolver_Chainlink } from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\ncontract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 constant internal LINK_DIVISIBILITY = 10**18;\\n  uint256 constant private AMOUNT_OVERRIDE = 0;\\n  address constant private SENDER_OVERRIDE = address(0);\\n  uint256 constant private ORACLE_ARGS_VERSION = 1;\\n  uint256 constant private OPERATOR_ARGS_VERSION = 2;\\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private ens;\\n  bytes32 private ensNode;\\n  LinkTokenInterface private link;\\n  OperatorInterface private oracle;\\n  uint256 private requestCount = 1;\\n  mapping(bytes32 => address) private pendingRequests;\\n\\n  event ChainlinkRequested(\\n    bytes32 indexed id\\n  );\\n  event ChainlinkFulfilled(\\n    bytes32 indexed id\\n  );\\n  event ChainlinkCancelled(\\n    bytes32 indexed id\\n  );\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddress The callback address that the response will be sent to\\n   * @param callbackFunctionSignature The callback function signature to use for the callback address\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddress,\\n    bytes4 callbackFunctionSignature\\n  )\\n    internal\\n    pure\\n    returns (\\n      Chainlink.Request memory\\n    )\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddress, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return sendChainlinkRequestTo(address(oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    return rawRequest(oracleAddress, req, payment, ORACLE_ARGS_VERSION, oracle.oracleRequest.selector);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `requestOracleDataFrom` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function requestOracleData(\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return requestOracleDataFrom(address(oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function requestOracleDataFrom(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    return rawRequest(oracleAddress, req, payment, OPERATOR_ARGS_VERSION, oracle.requestOracleData.selector);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @param argsVersion The version of data support (single word, multi word)\\n   * @return requestId The request ID\\n   */\\n  function rawRequest(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment,\\n    uint256 argsVersion,\\n    bytes4 funcSelector\\n  )\\n    private\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    requestId = keccak256(abi.encodePacked(this, requestCount));\\n    req.nonce = requestCount;\\n    pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    bytes memory encodedData = abi.encodeWithSelector(\\n      funcSelector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackAddress,\\n      req.callbackFunctionId,\\n      req.nonce,\\n      argsVersion,\\n      req.buf.buf);\\n    require(link.transferAndCall(oracleAddress, payment, encodedData), \\\"unable to transferAndCall to oracle\\\");\\n    requestCount += 1;\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  )\\n    internal\\n  {\\n    OperatorInterface requested = OperatorInterface(pendingRequests[requestId]);\\n    delete pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(\\n    address oracleAddress\\n  )\\n    internal\\n  {\\n    oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(\\n    address linkAddress\\n  )\\n    internal\\n  {\\n    link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() \\n    internal\\n  {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress()\\n    internal\\n    view\\n    returns (\\n      address\\n    )\\n  {\\n    return address(link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress()\\n    internal\\n    view\\n    returns (\\n      address\\n    )\\n  {\\n    return address(oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(\\n    address oracleAddress,\\n    bytes32 requestId\\n  )\\n    internal\\n    notPendingRequest(requestId)\\n  {\\n    pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(\\n    address ensAddress,\\n    bytes32 node\\n  )\\n    internal\\n  {\\n    ens = ENSInterface(ensAddress);\\n    ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS()\\n    internal\\n  {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(\\n    bytes32 requestId\\n  )\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n    // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(\\n    bytes32 requestId\\n  )\\n  {\\n    require(msg.sender == pendingRequests[requestId],\\n            \\\"Source must be the oracle of the request\\\");\\n    delete pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(\\n    bytes32 requestId\\n  )\\n  {\\n    require(pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x15f8b423b9a4417b916e076b77ce59bcaeee8947807b3efca9e0e864888afddf\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(\\n    bytes32 indexed node,\\n    bytes32 indexed label,\\n    address owner\\n  );\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(\\n    bytes32 indexed node,\\n    address owner\\n  );\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(\\n    bytes32 indexed node,\\n    address resolver\\n  );\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(\\n    bytes32 indexed node,\\n    uint64 ttl\\n  );\\n\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(\\n    bytes32 node,\\n    address resolver\\n  ) external;\\n\\n  function setOwner(\\n    bytes32 node,\\n    address owner\\n  ) external;\\n\\n  function setTTL(\\n    bytes32 node,\\n    uint64 ttl\\n  ) external;\\n\\n  function owner(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n\\n  function resolver(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n\\n  function ttl(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      uint64\\n    );\\n\\n}\\n\",\"keccak256\":\"0xd8545d2e73f7aa517543d97e1763d95c11ddd52a5050cf1933047c9f22f10b5a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n\\n  function requestOracleData(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  )\\n    external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool\\n    );\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function distributeFunds(\\n    address payable[] calldata receivers,\\n    uint[] calldata amounts\\n  )\\n    external\\n    payable;\\n\\n  function getAuthorizedSenders()\\n    external\\n    returns (\\n      address[] memory\\n    );\\n\\n  function setAuthorizedSenders(\\n    address[] calldata senders\\n  ) external;\\n\\n  function getForwarder()\\n    external\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0x71dcc45bae7384cfb47c74de767a7ec56df21e165468610b2abf2bb02ca0c352\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  )\\n    external\\n    returns (\\n      bool\\n    );\\n\\n  function isAuthorizedSender(\\n    address node\\n  )\\n    external\\n    view\\n    returns (\\n      bool\\n    );\\n\\n  function withdraw(\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  function withdrawable()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n}\\n\",\"keccak256\":\"0x55fb2c156150379d285ab89081ff5add6f37343d7992bd2ec1485a2652af94d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  \\n  function getAddress()\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0xc3d897e7c93b02e53f21b40accd4a0bd5c38f9780a4f74a7109b70fbfde03b40\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for writing to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary BufferChainlink {\\n  /**\\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n  *      a capacity. The capacity may be longer than the current value, in\\n  *      which case it can be extended without the need to allocate more memory.\\n  */\\n  struct buffer {\\n    bytes buf;\\n    uint capacity;\\n  }\\n\\n  /**\\n  * @dev Initializes a buffer with an initial capacity.\\n  * @param buf The buffer to initialize.\\n  * @param capacity The number of bytes of space to allocate the buffer.\\n  * @return The buffer, for chaining.\\n  */\\n  function init(\\n    buffer memory buf,\\n    uint capacity\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Initializes a new buffer from an existing bytes object.\\n  *      Changes to the buffer may mutate the original value.\\n  * @param b The bytes object to initialize the buffer with.\\n  * @return A new buffer.\\n  */\\n  function fromBytes(\\n    bytes memory b\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(\\n    buffer memory buf,\\n    uint capacity\\n  )\\n    private\\n    pure\\n  {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(\\n    uint a,\\n    uint b\\n  )\\n    private\\n    pure\\n    returns(\\n      uint\\n    )\\n  {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n  * @dev Sets buffer length to 0.\\n  * @param buf The buffer to truncate.\\n  * @return The original buffer, for chaining..\\n  */\\n  function truncate(\\n    buffer memory buf\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The start offset to write to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(\\n    buffer memory buf,\\n    uint off,\\n    bytes memory data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint dest;\\n    uint src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint mask = (256 ** (32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write the byte at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint off,\\n    uint8 data\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendUint8(\\n    buffer memory buf,\\n    uint8 data\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n  *      exceed the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (left-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(\\n    buffer memory buf,\\n    uint off,\\n    bytes32 data,\\n    uint len\\n  )\\n    private\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint mask = (256 ** len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint off,\\n    bytes20 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chhaining.\\n  */\\n  function appendBytes20(\\n    buffer memory buf,\\n    bytes20 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendBytes32(\\n    buffer memory buf,\\n    bytes32 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (right-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeInt(\\n    buffer memory buf,\\n    uint off,\\n    uint data,\\n    uint len\\n  )\\n    private\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = (256 ** len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n    * exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer.\\n    */\\n  function appendInt(\\n    buffer memory buf,\\n    uint data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0xc110af8d5a44b3bfbc5cdb1cbfc78b472346703c13c5e5288aa4e980a6b94519\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.19;\\n\\nimport { BufferChainlink } from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeType(\\n    BufferChainlink.buffer memory buf,\\n    uint8 major,\\n    uint value\\n  )\\n    private\\n    pure\\n  {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if(value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if(value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if(value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else if(value <= 0xFFFFFFFFFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(\\n    BufferChainlink.buffer memory buf,\\n    uint8 major\\n  )\\n    private\\n    pure\\n  {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(\\n    BufferChainlink.buffer memory buf,\\n    uint value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_INT, value);\\n  }\\n\\n  function encodeInt(\\n    BufferChainlink.buffer memory buf,\\n    int value\\n  )\\n    internal\\n    pure\\n  {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else if(value >= 0) {\\n      encodeType(buf, MAJOR_TYPE_INT, uint(value));\\n    } else {\\n      encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\\n    }\\n  }\\n\\n  function encodeBytes(\\n    BufferChainlink.buffer memory buf,\\n    bytes memory value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_BYTES, value.length);\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(\\n    BufferChainlink.buffer memory buf,\\n    int value\\n  )\\n    internal\\n    pure\\n  {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint(value)));\\n  }\\n\\n  function encodeSignedBigNum(\\n    BufferChainlink.buffer memory buf,\\n    int input\\n  )\\n    internal\\n    pure\\n  {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint(-1 - input)));\\n  }\\n\\n  function encodeString(\\n    BufferChainlink.buffer memory buf,\\n    string memory value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0xe7c6e4290ac2a41a138e6bd89d89a2779f66847a5ee6fb5a6f2a3386e5ce589d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(\\n    bytes32 node\\n  )\\n    public\\n    view\\n    virtual\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0xeed48a6a522c400f024f8725ad931833205cb63cc87285b46c5c0e88ca090352\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcc3fca7831523600d2cac44ec77ee7e079f70c6910b6d7229ff774eaa5f04cdc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6eecf5abec3cd10b2e9234936b80b6cb7c174e926542a2fe690a0186558deb40\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbccf806d646bd9e2594650917208245d45998b887d5fc914de424247f5f9f9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\",\"keccak256\":\"0x617614c3aaada8d7a901da2126a7407ae7e06b0410807f5c1b49cea9076199e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf98cb1651a90d20ef77d8c1dd10d5fce4954e747603e5672a8292bd4368120dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/libraries/Stringify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\n/**\\n * @title library for string parsing to and from\\n * @author priviprotocol\\n */\\nlibrary Stringify {\\n    /**\\n     * @dev converts a uint256 to string\\n     * @param i_ the uint256 to convert\\n     * @return uintAsString the string representation of the input\\n     */\\n    function toString(uint256 i_) internal pure returns (string memory uintAsString) {\\n        // match 0 case\\n        if (i_ == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 len;\\n        uint256 j = i_;\\n\\n        // count the uint256 input length\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n\\n        // creates a byte string of size length of i_\\n        bytes memory bstr = new bytes(len);\\n\\n        uint256 k = len;\\n\\n        while (i_ != 0) {\\n            k = k - 1;\\n\\n            // get the ASCII representation of the current last digit\\n            uint8 temp = (48 + uint8(i_ - (i_ / 10) * 10));\\n\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n\\n            i_ /= 10;\\n        }\\n\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @dev converts an address to string\\n     * @param x_ the address to convert\\n     * @return addressAsString the string representation of the input\\n     */\\n    function toString(address x_) internal pure returns (string memory addressAsString) {\\n        bytes memory s = new bytes(40);\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint256(uint160(x_)) / (2**(8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n\\n        return string(s);\\n    }\\n\\n    /**\\n     * @dev converts a byte to char (byte representation)\\n     * @param b_ the byte to convert\\n     * @return c the char representation of the input\\n     */\\n    function char(bytes1 b_) internal pure returns (bytes1 c) {\\n        if (uint8(b_) < 10) return bytes1(uint8(b_) + 0x30);\\n        else return bytes1(uint8(b_) + 0x57);\\n    }\\n\\n    /**\\n     * @dev converts a string to bytes32\\n     * @param source_ the string to convert\\n     * @return stringAsBytes32 the bytes32 representation of the input\\n     */\\n    function toBytes32(string memory source_) internal pure returns (bytes32 stringAsBytes32) {\\n        bytes memory tempEmptyStringTest = bytes(source_);\\n\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            stringAsBytes32 := mload(add(source_, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8956332df86e6f0890932ab9b930e1f0254eeeca539a8762d04dd5930e0f77a9\",\"license\":\"MIT\"},\"contracts/perpetual_futures/PerpetualPoolLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../polygon/Interfaces.sol\\\";\\n//import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./library/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../polygon/governance/FuturesProtocolParameters.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract PerpetualPoolLite is IPerpetualPoolLite, Initializable {\\n    using SafeMath for uint256;\\n    using SafeMath for int256;\\n    using SafeERC20 for IERC20;\\n\\n    int256 private constant ONE = 10**18;\\n\\n    uint256 private _decimals;\\n\\n    address private _bTokenAddress;\\n    address private _lTokenAddress;\\n    address private _pTokenAddress;\\n    address private _liquidatorQualifierAddress;\\n    address private _protocolFeeCollector;\\n    address private _underlyingAddress;\\n    address private immutable _protocolAddress;\\n    FuturesProtocolParameters private immutable _protocolParameters;\\n\\n    int256 private _liquidity;\\n\\n    uint256 private _lastUpdateBlock;\\n    int256 private _protocolFeeAccrued;\\n\\n    // symbolId => SymbolInfo\\n    SymbolInfo private _symbol;\\n\\n    bool private _mutex;\\n    modifier _lock_() {\\n        require(!_mutex, \\\"reentry\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    constructor(address[2] memory addresses) {\\n        _protocolAddress = addresses[0];\\n        _protocolParameters = FuturesProtocolParameters(addresses[0]);\\n    }\\n\\n    function initialize(address[6] memory addresses) external initializer {\\n        _bTokenAddress = addresses[0];\\n        _lTokenAddress = addresses[1];\\n        _pTokenAddress = addresses[2];\\n        _liquidatorQualifierAddress = addresses[3];\\n        _protocolFeeCollector = addresses[4];\\n        _underlyingAddress = addresses[5];\\n\\n        _decimals = 6;\\n    }\\n\\n    function getSymbolPriceAndMultiplier() external view returns (int256 price, int256 multiplier) {\\n        return (_symbol.price, _protocolParameters.futuresMultiplier());\\n    }\\n\\n    function getParameters()\\n        external\\n        view\\n        override\\n        returns (\\n            int256 minPoolMarginRatio,\\n            int256 minInitialMarginRatio,\\n            int256 minMaintenanceMarginRatio,\\n            int256 minLiquidationReward,\\n            int256 maxLiquidationReward,\\n            int256 liquidationCutRatio,\\n            int256 protocolFeeCollectRatio\\n        )\\n    {\\n        return (\\n            _protocolParameters.minPoolMarginRatio(),\\n            _protocolParameters.minInitialMarginRatio(),\\n            _protocolParameters.minMaintenanceMarginRatio(),\\n            _protocolParameters.minLiquidationReward(),\\n            _protocolParameters.maxLiquidationReward(),\\n            _protocolParameters.liquidationCutRatio(),\\n            _protocolParameters.protocolFeeCollectRatio()\\n        );\\n    }\\n\\n    function getAddresses()\\n        external\\n        view\\n        override\\n        returns (\\n            address bTokenAddress,\\n            address lTokenAddress,\\n            address pTokenAddress,\\n            address liquidatorQualifierAddress,\\n            address protocolFeeCollector,\\n            address underlyingAddress,\\n            address protocolAddress\\n        )\\n    {\\n        return (\\n            _bTokenAddress,\\n            _lTokenAddress,\\n            _pTokenAddress,\\n            _liquidatorQualifierAddress,\\n            _protocolFeeCollector,\\n            _underlyingAddress,\\n            _protocolAddress\\n        );\\n    }\\n\\n    function getSymbol() external view override returns (SymbolInfo memory) {\\n        return _symbol;\\n    }\\n\\n    function getLiquidity() external view override returns (int256) {\\n        return _liquidity;\\n    }\\n\\n    function getLastUpdateBlock() external view override returns (uint256) {\\n        return _lastUpdateBlock;\\n    }\\n\\n    function getProtocolFeeAccrued() external view override returns (int256) {\\n        return _protocolFeeAccrued;\\n    }\\n\\n    function collectProtocolFee() external override {\\n        uint256 balance = IERC20(_bTokenAddress).balanceOf(address(this)).rescale(_decimals, 18);\\n        uint256 amount = _protocolFeeAccrued.itou();\\n        if (amount > balance) amount = balance;\\n        _protocolFeeAccrued -= amount.utoi();\\n        _transferOut(_protocolFeeCollector, amount);\\n        emit ProtocolFeeCollection(_protocolFeeCollector, amount);\\n    }\\n\\n    //================================================================================\\n    // Interactions with onchain oracles\\n    //================================================================================\\n\\n    function addLiquidity(uint256 bAmount) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        uint256 lShares = _addLiquidity(msg.sender, bAmount);\\n    }\\n\\n    function addLiquidityGetlShares(uint256 bAmount) external override returns (uint256) {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        uint256 lShares = _addLiquidity(msg.sender, bAmount);\\n        return lShares;\\n    }\\n\\n    function removeLiquidity(uint256 lShares) external override {\\n        require(lShares > 0, \\\"PerpetualPool: 0 lShares\\\");\\n        _removeLiquidity(msg.sender, lShares);\\n    }\\n\\n    function addMargin(uint256 bAmount) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _addMargin(msg.sender, bAmount);\\n    }\\n\\n    function removeMargin(uint256 bAmount) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _removeMargin(msg.sender, bAmount);\\n    }\\n\\n    function trade(int256 tradeVolume) external override {\\n        require(\\n            tradeVolume != 0 && (tradeVolume / ONE) * ONE == tradeVolume,\\n            \\\"PerpetualPool: invalid tradeVolume\\\"\\n        );\\n        _trade(msg.sender, tradeVolume);\\n    }\\n\\n    function liquidate(address account) external override {\\n        address liquidator = msg.sender;\\n        require(\\n            _liquidatorQualifierAddress == address(0) ||\\n                ILiquidatorQualifier(_liquidatorQualifierAddress).isQualifiedLiquidator(liquidator),\\n            \\\"PerpetualPool: not qualified liquidator\\\"\\n        );\\n        _liquidate(liquidator, account);\\n    }\\n\\n    //================================================================================\\n    // Interactions with offchain oracles\\n    //================================================================================\\n\\n    function addLiquidity(uint256 bAmount, SignedPrice memory price) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _updateSymbolOracles(price);\\n        _addLiquidity(msg.sender, bAmount);\\n    }\\n\\n    function removeLiquidity(uint256 lShares, SignedPrice memory price) external override {\\n        require(lShares > 0, \\\"PerpetualPool: 0 lShares\\\");\\n        _updateSymbolOracles(price);\\n        _removeLiquidity(msg.sender, lShares);\\n    }\\n\\n    function addMargin(uint256 bAmount, SignedPrice memory price) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _updateSymbolOracles(price);\\n        _addMargin(msg.sender, bAmount);\\n    }\\n\\n    function removeMargin(uint256 bAmount, SignedPrice memory price) external override {\\n        require(bAmount > 0, \\\"PerpetualPool: 0 bAmount\\\");\\n        _updateSymbolOracles(price);\\n        _removeMargin(msg.sender, bAmount);\\n    }\\n\\n    function trade(int256 tradeVolume, SignedPrice memory price) external override {\\n        require(\\n            tradeVolume != 0 && (tradeVolume / ONE) * ONE == tradeVolume,\\n            \\\"PerpetualPool: invalid tradeVolume\\\"\\n        );\\n        _updateSymbolOracles(price);\\n        _trade(msg.sender, tradeVolume);\\n    }\\n\\n    function liquidate(address account, SignedPrice memory price) external override {\\n        address liquidator = msg.sender;\\n        require(\\n            _liquidatorQualifierAddress == address(0) ||\\n                ILiquidatorQualifier(_liquidatorQualifierAddress).isQualifiedLiquidator(liquidator),\\n            \\\"PerpetualPool: not qualified liquidator\\\"\\n        );\\n        _updateSymbolOracles(price);\\n        _liquidate(liquidator, account);\\n    }\\n\\n    //================================================================================\\n    // Core logics\\n    //================================================================================\\n\\n    function _addLiquidity(address account, uint256 bAmount) internal _lock_ returns(uint256) {\\n        (int256 totalDynamicEquity, ) = _updateSymbolPricesAndFundingRates();\\n        bAmount = _transferIn(account, bAmount);\\n        ILTokenLite lToken = ILTokenLite(_lTokenAddress);\\n\\n        uint256 totalSupply = lToken.totalSupply();\\n\\n        uint256 lShares;\\n        if (totalSupply == 0) {\\n            lShares = bAmount;\\n        } else {\\n            lShares = (bAmount * totalSupply) / totalDynamicEquity.itou();\\n        }\\n\\n        lToken.mint(account, lShares);\\n        _liquidity += bAmount.utoi();\\n\\n        emit AddLiquidity(account, lShares, bAmount);\\n\\n        return lShares;\\n    }\\n\\n    function _removeLiquidity(address account, uint256 lShares) internal _lock_ {\\n        (int256 totalDynamicEquity, int256 totalAbsCost) = _updateSymbolPricesAndFundingRates();\\n        ILTokenLite lToken = ILTokenLite(_lTokenAddress);\\n\\n        uint256 totalSupply = lToken.totalSupply();\\n        require(totalSupply > 0, \\\"There's no LToken supply\\\");\\n        uint256 bAmount = (lShares * totalDynamicEquity.itou()) / totalSupply;\\n\\n        _liquidity -= bAmount.utoi();\\n\\n        require(\\n            totalAbsCost == 0 ||\\n                ((totalDynamicEquity - bAmount.utoi()) * ONE) / totalAbsCost >=\\n                _protocolParameters.minPoolMarginRatio(),\\n            \\\"PerpetualPool: pool insufficient margin\\\"\\n        );\\n\\n        lToken.burn(account, lShares);\\n        _transferOut(account, bAmount);\\n\\n        emit RemoveLiquidity(account, lShares, bAmount);\\n    }\\n\\n    function _addMargin(address account, uint256 bAmount) internal _lock_ {\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\n        if (!pToken.exists(account)) {\\n            pToken.mint(account);\\n        }\\n        bAmount = _transferIn(account, bAmount);\\n        pToken.addMargin(account, bAmount.utoi());\\n        emit AddMargin(account, bAmount);\\n    }\\n\\n    function _removeMargin(address account, uint256 bAmount) internal _lock_ {\\n        _updateSymbolPricesAndFundingRates();\\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\\n\\n        int256 amount = bAmount.utoi();\\n        if (amount >= margin) {\\n            amount = margin;\\n            bAmount = amount.itou();\\n            margin = 0;\\n        } else {\\n            margin -= amount;\\n        }\\n\\n        require(\\n            _getTraderMarginRatio(position, margin) >= _protocolParameters.minInitialMarginRatio(),\\n            \\\"PerpetualPool: insufficient margin\\\"\\n        );\\n\\n        _updateTraderPortfolio(account, position, margin);\\n        _transferOut(account, bAmount);\\n\\n        emit RemoveMargin(account, bAmount);\\n    }\\n\\n    // struct for temp use in trade function, to prevent stack too deep error\\n    struct TradeParams {\\n        int256 tradersNetVolume;\\n        int256 price;\\n        int256 multiplier;\\n        int256 curCost;\\n        int256 fee;\\n        int256 realizedCost;\\n        int256 protocolFee;\\n    }\\n\\n    function _trade(address account, int256 tradeVolume) internal _lock_ {\\n        (int256 totalDynamicEquity, int256 totalAbsCost) = _updateSymbolPricesAndFundingRates();\\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\\n\\n        TradeParams memory params;\\n\\n        params.tradersNetVolume = _symbol.tradersNetVolume;\\n        params.price = _symbol.price;\\n        params.multiplier = _protocolParameters.futuresMultiplier();\\n        params.curCost = (((tradeVolume * params.price) / ONE) * params.multiplier) / ONE;\\n        params.fee = (params.curCost.abs() * _protocolParameters.futuresFeeRatio()) / ONE;\\n\\n        if (!(position.volume >= 0 && tradeVolume >= 0) && !(position.volume <= 0 && tradeVolume <= 0)) {\\n            int256 absVolume = position.volume.abs();\\n            int256 absTradeVolume = tradeVolume.abs();\\n            if (absVolume <= absTradeVolume) {\\n                // previous position is totally closed\\n                params.realizedCost = (params.curCost * absVolume) / absTradeVolume + position.cost;\\n            } else {\\n                // previous position is partially closed\\n                params.realizedCost = (position.cost * absTradeVolume) / absVolume + params.curCost;\\n            }\\n        }\\n\\n        // adjust totalAbsCost after trading\\n        totalAbsCost +=\\n            (((((params.tradersNetVolume + tradeVolume).abs() - params.tradersNetVolume.abs()) *\\n                params.price) / ONE) * params.multiplier) /\\n            ONE;\\n\\n        position.volume += tradeVolume;\\n        position.cost += params.curCost - params.realizedCost;\\n        position.lastCumulativeFundingRate = _symbol.cumulativeFundingRate;\\n        margin -= params.fee + params.realizedCost;\\n\\n        _symbol.tradersNetVolume += tradeVolume;\\n        _symbol.tradersNetCost += params.curCost - params.realizedCost;\\n        params.protocolFee = (params.fee * _protocolParameters.protocolFeeCollectRatio()) / ONE;\\n        _protocolFeeAccrued += params.protocolFee;\\n        _liquidity += params.fee - params.protocolFee + params.realizedCost;\\n\\n        require(\\n            totalAbsCost == 0 ||\\n                (totalDynamicEquity * ONE) / totalAbsCost >= _protocolParameters.minPoolMarginRatio(),\\n            \\\"PerpetualPool: insufficient liquidity\\\"\\n        );\\n        require(\\n            _getTraderMarginRatio(position, margin) >= _protocolParameters.minInitialMarginRatio(),\\n            \\\"PerpetualPool: insufficient margin\\\"\\n        );\\n\\n        _updateTraderPortfolio(account, position, margin);\\n\\n        emit Trade(account, tradeVolume, params.price.itou());\\n    }\\n\\n    function _liquidate(address liquidator, address account) internal _lock_ {\\n        _updateSymbolPricesAndFundingRates();\\n        (IPTokenLite.Position memory position, int256 margin) = _settleTraderFundingFee(account);\\n        require(\\n            _getTraderMarginRatio(position, margin) < _protocolParameters.minMaintenanceMarginRatio(),\\n            \\\"PerpetualPool: cannot liquidate\\\"\\n        );\\n\\n        int256 netEquity = margin;\\n        if (position.volume != 0) {\\n            _symbol.tradersNetVolume -= position.volume;\\n            _symbol.tradersNetCost -= position.cost;\\n            netEquity +=\\n                (((position.volume * _symbol.price) / ONE) * _protocolParameters.futuresMultiplier()) /\\n                ONE -\\n                position.cost;\\n        }\\n\\n        int256 reward;\\n        int256 minLiquidationReward = _protocolParameters.minLiquidationReward();\\n        int256 maxLiquidationReward = _protocolParameters.maxLiquidationReward();\\n        if (netEquity <= minLiquidationReward) {\\n            reward = minLiquidationReward;\\n        } else if (netEquity >= maxLiquidationReward) {\\n            reward = maxLiquidationReward;\\n        } else {\\n            reward =\\n                ((netEquity - minLiquidationReward) * _protocolParameters.liquidationCutRatio()) /\\n                ONE +\\n                minLiquidationReward;\\n        }\\n\\n        _liquidity += margin - reward;\\n        IPTokenLite(_pTokenAddress).burn(account);\\n        _transferOut(liquidator, reward.itou());\\n\\n        emit Liquidate(account, liquidator, reward.itou());\\n    }\\n\\n    //================================================================================\\n    // Helpers\\n    //================================================================================\\n\\n    function _updateSymbolOracles(SignedPrice memory price) internal {\\n        IOracleWithUpdate(_protocolParameters.futuresOracleAddress()).updatePrice(\\n            _underlyingAddress,\\n            price.timestamp,\\n            price.price,\\n            price.v,\\n            price.r,\\n            price.s\\n        );\\n    }\\n\\n    function _updateSymbolPricesAndFundingRates()\\n        internal\\n        returns (int256 totalDynamicEquity, int256 totalAbsCost)\\n    {\\n        uint256 preBlockNumber = _lastUpdateBlock;\\n        uint256 curBlockNumber = block.number;\\n        totalDynamicEquity = _liquidity;\\n\\n        if (curBlockNumber > preBlockNumber) {\\n            _symbol.price = IOracle(_protocolParameters.futuresOracleAddress()).getPrice().utoi();\\n        }\\n        if (_symbol.tradersNetVolume != 0) {\\n            int256 cost = (((_symbol.tradersNetVolume * _symbol.price) / ONE) *\\n                _protocolParameters.futuresMultiplier()) / ONE;\\n            totalDynamicEquity -= cost - _symbol.tradersNetCost;\\n            totalAbsCost += cost.abs();\\n        }\\n\\n        if (curBlockNumber > preBlockNumber) {\\n            if (_symbol.tradersNetVolume != 0) {\\n                int256 ratePerBlock = (((((((((_symbol.tradersNetVolume * _symbol.price) / ONE) *\\n                    _symbol.price) / ONE) * _protocolParameters.futuresMultiplier()) / ONE) *\\n                    _protocolParameters.futuresMultiplier()) / ONE) *\\n                    _protocolParameters.futuresFundingRateCoefficient()) / totalDynamicEquity;\\n                int256 delta = ratePerBlock * int256(curBlockNumber - preBlockNumber);\\n                unchecked {\\n                    _symbol.cumulativeFundingRate += delta;\\n                }\\n            }\\n        }\\n\\n        _lastUpdateBlock = curBlockNumber;\\n    }\\n\\n    function getFundingRates()\\n        external\\n        view\\n        returns (\\n            int256 totalDynamicEquity,\\n            int256 totalAbsCost,\\n            int256 cumulativeFundingRate\\n        )\\n    {\\n        uint256 preBlockNumber = _lastUpdateBlock;\\n        uint256 curBlockNumber = block.number;\\n        int256 price = _symbol.price;\\n        totalDynamicEquity = _liquidity;\\n\\n        if (_symbol.tradersNetVolume != 0) {\\n            int256 cost = (((_symbol.tradersNetVolume * price) / ONE) *\\n                _protocolParameters.futuresMultiplier()) / ONE;\\n            totalDynamicEquity -= cost - _symbol.tradersNetCost;\\n            totalAbsCost += cost.abs();\\n        }\\n\\n        if (curBlockNumber > preBlockNumber) {\\n            if (_symbol.tradersNetVolume != 0) {\\n                int256 ratePerBlock = (((((((((_symbol.tradersNetVolume * price) / ONE) * price) / ONE) *\\n                    _protocolParameters.futuresMultiplier()) / ONE) *\\n                    _protocolParameters.futuresMultiplier()) / ONE) *\\n                    _protocolParameters.futuresFundingRateCoefficient()) / totalDynamicEquity;\\n                int256 delta = ratePerBlock * int256(curBlockNumber - preBlockNumber);\\n                cumulativeFundingRate = _symbol.cumulativeFundingRate + delta;\\n            }\\n        }\\n    }\\n\\n    function getTraderPortfolio(address account)\\n        public\\n        view\\n        returns (IPTokenLite.Position memory position, int256 margin)\\n    {\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\n        position = pToken.getPosition(account);\\n        margin = pToken.getMargin(account);\\n    }\\n\\n    function _updateTraderPortfolio(\\n        address account,\\n        IPTokenLite.Position memory position,\\n        int256 margin\\n    ) internal {\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\n        pToken.updatePosition(account, position);\\n        pToken.updateMargin(account, margin);\\n    }\\n\\n    function _settleTraderFundingFee(address account)\\n        internal\\n        returns (IPTokenLite.Position memory position, int256 margin)\\n    {\\n        (position, margin) = getTraderPortfolio(account);\\n        int256 funding;\\n        if (position.volume != 0) {\\n            int256 cumulativeFundingRate = _symbol.cumulativeFundingRate;\\n            int256 delta;\\n            unchecked {\\n                delta = cumulativeFundingRate - position.lastCumulativeFundingRate;\\n            }\\n            funding += (position.volume * delta) / ONE;\\n\\n            position.lastCumulativeFundingRate = cumulativeFundingRate;\\n        }\\n        if (funding != 0) {\\n            margin -= funding;\\n            _liquidity += funding;\\n        }\\n    }\\n\\n    function _getTraderMarginRatio(IPTokenLite.Position memory position, int256 margin)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 totalDynamicEquity = margin;\\n        int256 totalAbsCost;\\n        if (position.volume != 0) {\\n            int256 cost = (((position.volume * _symbol.price) / ONE) *\\n                _protocolParameters.futuresMultiplier()) / ONE;\\n            totalDynamicEquity += cost - position.cost;\\n            totalAbsCost += cost.abs();\\n        }\\n        return totalAbsCost == 0 ? type(int256).max : (totalDynamicEquity * ONE) / totalAbsCost;\\n    }\\n\\n    function _deflationCompatibleSafeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 bAmount\\n    ) internal returns (uint256) {\\n        IERC20 bToken = IERC20(_bTokenAddress);\\n        uint256 balance1 = bToken.balanceOf(to);\\n        bToken.safeTransferFrom(from, to, bAmount);\\n        uint256 balance2 = bToken.balanceOf(to);\\n        return balance2 - balance1;\\n    }\\n\\n    function _transferIn(address from, uint256 bAmount) internal returns (uint256) {\\n        uint256 amount = _deflationCompatibleSafeTransferFrom(\\n            from,\\n            address(this),\\n            bAmount.rescale(18, _decimals)\\n        );\\n        return amount.rescale(_decimals, 18);\\n    }\\n\\n    function _transferOut(address to, uint256 bAmount) internal {\\n        uint256 amount = bAmount.rescale(18, _decimals);\\n        uint256 leftover = bAmount - amount.rescale(_decimals, 18);\\n        // leftover due to decimal precision is accrued to _protocolFeeAccrued\\n        _protocolFeeAccrued += leftover.utoi();\\n        IERC20(_bTokenAddress).safeTransfer(to, amount);\\n    }\\n\\n    // function migrationTimestamp() external view override returns (uint256) {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function migrationDestination() external view override returns (address) {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function prepareMigration(address target, uint256 graceDays) external override {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function approveMigration() external override {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function executeMigration(address source) override external {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function controller() external view override returns (address) {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function setNewController(address newController) external override {\\n    //     // TODO: Implement\\n    // }\\n\\n    // function claimNewController() external override {\\n    //     // TODO: Implement\\n    // }\\n}\\n\",\"keccak256\":\"0xfc23d7575e75fa4812fec4a1df7820e53e6650d01ee69a53a9d6403965e1f397\",\"license\":\"MIT\"},\"contracts/perpetual_futures/PoolInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./PerpetualPoolLite.sol\\\";\\nimport \\\"./library/SafeMath.sol\\\";\\nimport \\\"../polygon/Interfaces.sol\\\";\\n\\ncontract PoolInfo is Initializable {\\n    using SafeMath for int256;\\n\\n    int256 private constant ONE = 10**18;\\n    address public poolAddress;\\n\\n    function initialize(address _poolAddress) external initializer {\\n        poolAddress = _poolAddress;\\n    }\\n\\n    function getProtocolParameters()\\n        external\\n        view\\n        returns (\\n            int256 minPoolMarginRatio,\\n            int256 minInitialMarginRatio,\\n            int256 minMaintenanceMarginRatio,\\n            int256 minLiquidationReward,\\n            int256 maxLiquidationReward,\\n            int256 liquidationCutRatio,\\n            int256 protocolFeeCollectRatio\\n        )\\n    {\\n        return PerpetualPoolLite(poolAddress).getParameters();\\n    }\\n\\n    function getProtocolAddresses()\\n        external\\n        view\\n        returns (\\n            address bTokenAddress,\\n            address lTokenAddress,\\n            address pTokenAddress,\\n            address liquidatorQualifierAddress,\\n            address protocolFeeCollector,\\n            address underlyingAddress,\\n            address protocolAddress\\n        )\\n    {\\n        return PerpetualPoolLite(poolAddress).getAddresses();\\n    }\\n\\n    function getLiquidity() external view returns (int256) {\\n        return PerpetualPoolLite(poolAddress).getLiquidity();\\n    }\\n\\n    function getLastUpdateBlock() external view returns (uint256) {\\n        return PerpetualPoolLite(poolAddress).getLastUpdateBlock();\\n    }\\n\\n    function getFeeAccrued() external view returns (int256) {\\n        return PerpetualPoolLite(poolAddress).getProtocolFeeAccrued();\\n    }\\n\\n    function getTraderPortfolio(address account)\\n        public\\n        view\\n        returns (IPTokenLite.Position memory position, int256 margin)\\n    {\\n        return PerpetualPoolLite(poolAddress).getTraderPortfolio(account);\\n    }\\n\\n    function getTraderMarginRatio(address account) external view returns (int256) {\\n        (IPTokenLite.Position memory position, int256 margin) = getTraderPortfolio(account);\\n\\n        (int256 price, int256 multiplier) = PerpetualPoolLite(poolAddress).getSymbolPriceAndMultiplier();\\n\\n        int256 totalDynamicEquity = margin;\\n        int256 totalAbsCost;\\n        if (position.volume != 0) {\\n            int256 cost = (((position.volume * price) / ONE) * multiplier) / ONE;\\n            totalDynamicEquity += cost - position.cost;\\n            totalAbsCost += cost.abs();\\n        }\\n        return totalAbsCost == 0 ? type(int256).max : (totalDynamicEquity * ONE) / totalAbsCost;\\n    }\\n\\n    function getFundingRates()\\n        external\\n        view\\n        returns (\\n            int256 totalDynamicEquity,\\n            int256 totalAbsCost,\\n            int256 cumulativeFundingRate\\n        )\\n    {\\n        (totalDynamicEquity, totalAbsCost, cumulativeFundingRate) = PerpetualPoolLite(poolAddress)\\n            .getFundingRates();\\n    }\\n}\\n\",\"keccak256\":\"0x2fbc4ec5e52264680253e10daf992652c968d835e24b6f50d6668e2f32cf22db\",\"license\":\"MIT\"},\"contracts/perpetual_futures/library/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SafeMath {\\n    uint256 internal constant UMAX = 2**255 - 1;\\n    int256 internal constant IMIN = -2**255;\\n\\n    /// convert uint256 to int256\\n    function utoi(uint256 a) internal pure returns (int256) {\\n        require(a <= UMAX, \\\"UIO\\\");\\n        return int256(a);\\n    }\\n\\n    /// convert int256 to uint256\\n    function itou(int256 a) internal pure returns (uint256) {\\n        require(a >= 0, \\\"IUO\\\");\\n        return uint256(a);\\n    }\\n\\n    /// take abs of int256\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != IMIN, \\\"AO\\\");\\n        return a >= 0 ? a : -a;\\n    }\\n\\n    /// rescale a uint256 from base 10**decimals1 to 10**decimals2\\n    function rescale(\\n        uint256 a,\\n        uint256 decimals1,\\n        uint256 decimals2\\n    ) internal pure returns (uint256) {\\n        return decimals1 == decimals2 ? a : (a * (10**decimals2)) / (10**decimals1);\\n    }\\n\\n    /// rescale a int256 from base 10**decimals1 to 10**decimals2\\n    function rescale(\\n        int256 a,\\n        uint256 decimals1,\\n        uint256 decimals2\\n    ) internal pure returns (int256) {\\n        return decimals1 == decimals2 ? a : (a * utoi(10**decimals2)) / utoi(10**decimals1);\\n    }\\n\\n    /// reformat a uint256 to be a valid 10**decimals base value\\n    /// the reformatted value is still in 10**18 base\\n    function reformat(uint256 a, uint256 decimals) internal pure returns (uint256) {\\n        return decimals == 18 ? a : rescale(rescale(a, 18, decimals), decimals, 18);\\n    }\\n\\n    /// reformat a int256 to be a valid 10**decimals base value\\n    /// the reformatted value is still in 10**18 base\\n    function reformat(int256 a, uint256 decimals) internal pure returns (int256) {\\n        return decimals == 18 ? a : rescale(rescale(a, 18, decimals), decimals, 18);\\n    }\\n\\n    /// ceiling value away from zero, return a valid 10**decimals base value, but still in 10**18 based\\n    function ceil(int256 a, uint256 decimals) internal pure returns (int256) {\\n        if (reformat(a, decimals) == a) {\\n            return a;\\n        } else {\\n            int256 b = rescale(a, 18, decimals);\\n            b += a > 0 ? int256(1) : int256(-1);\\n            return rescale(b, decimals, 18);\\n        }\\n    }\\n\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 quotient = a / b;\\n        uint256 remainder = a - quotient * b;\\n        if (remainder > 0) {\\n            return quotient + 1;\\n        } else {\\n            return quotient;\\n        }\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = x / 2 + 1;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a <= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x3153674ee1bd4c7d5368abdcfab3b213a1adece4a8eb75c412df6fbbe63bd81c\",\"license\":\"MIT\"},\"contracts/perpetual_futures/tokens/LTokenLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../polygon/Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract LTokenLite is ILTokenLite, Initializable, AccessControl, ERC20 {\\n    bytes32 public constant ROUTER = keccak256(\\\"ROUTER\\\");\\n\\n    // proxied values for the erc20 attributes\\n    string private _proxiedName;\\n    string private _proxiedSymbol;\\n    address private _pool;\\n\\n    modifier _pool_() {\\n        require(msg.sender == _pool, \\\"LToken: only pool\\\");\\n        _;\\n    }\\n\\n    // solhint-disable-next-line\\n    constructor() ERC20(\\\"Future Liquidity Token\\\", \\\"FLT\\\") {}\\n\\n    function initialize(string memory name_, string memory symbol_) external initializer {\\n        _proxiedName = name_;\\n        _proxiedSymbol = symbol_;\\n\\n        _setupRole(ROUTER, msg.sender);\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _proxiedName;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _proxiedSymbol;\\n    }\\n\\n    function pool() public view override returns (address) {\\n        return _pool;\\n    }\\n\\n    function setPool(address newPool) public override onlyRole(ROUTER) {\\n        require(_pool == address(0), \\\"LToken.setPool: not allowed\\\");\\n        _pool = newPool;\\n    }\\n\\n    function mint(address account, uint256 amount) public override _pool_ {\\n        require(account != address(0), \\\"LToken: mint to 0 address\\\");\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public override _pool_ {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe4f95ed80dbcbfab143b9e5c97b2051edf9e7820d7258c503c1655e16dd60160\",\"license\":\"MIT\"},\"contracts/perpetual_futures/tokens/PFERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract PFERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 internal constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor() {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x563ae955a7c7aa44e1b14442f71a1aa2f5802e6abc1d7e9f1b76b648ec3177b1\",\"license\":\"MIT\"},\"contracts/perpetual_futures/tokens/PFERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./PFERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 Non-Fungible Token Implementation\\n *\\n * Exert uniqueness of owner: one owner can only have one token\\n */\\ncontract PFERC721 is IERC721, PFERC165 {\\n    using Address for address;\\n\\n    /*\\n     * Equals to `bytes4(keccak256('onERC721Received(address,address,uint256,bytes)'))`\\n     * which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n     */\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x081812fc ^ 0xe985e9c5 ^\\n     *        0x095ea7b3 ^ 0xa22cb465 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 internal constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    // Mapping from owner address to tokenId\\n    // tokenId starts from 1, 0 is reserved for nonexistent token\\n    // One owner can only own one token in this contract\\n    mapping(address => uint256) internal _ownerTokenId;\\n\\n    // Mapping from tokenId to owner\\n    mapping(uint256 => address) internal _tokenIdOwner;\\n\\n    // Mapping from tokenId to approved operator\\n    mapping(uint256 => address) internal _tokenIdOperator;\\n\\n    // Mapping from owner to operator for all approval\\n    mapping(address => mapping(address => bool)) internal _ownerOperator;\\n\\n    modifier _existsTokenId_(uint256 tokenId) {\\n        require(_exists(tokenId), \\\"ERC721: nonexistent tokenId\\\");\\n        _;\\n    }\\n\\n    modifier _existsOwner_(address owner) {\\n        require(_exists(owner), \\\"ERC721: nonexistent owner\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n    }\\n\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return _exists(owner) ? 1 : 0;\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view override _existsTokenId_(tokenId) returns (address) {\\n        return _tokenIdOwner[tokenId];\\n    }\\n\\n    function getTokenId(address owner) public view _existsOwner_(owner) returns (uint256) {\\n        return _ownerTokenId[owner];\\n    }\\n\\n    function getApproved(uint256 tokenId) public view override _existsTokenId_(tokenId) returns (address) {\\n        return _tokenIdOperator[tokenId];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        _existsOwner_(owner)\\n        returns (bool)\\n    {\\n        return _ownerOperator[owner][operator];\\n    }\\n\\n    function approve(address operator, uint256 tokenId) public override {\\n        require(msg.sender == ownerOf(tokenId), \\\"ERC721.approve: caller not owner\\\");\\n        _tokenIdOperator[tokenId] = operator;\\n        emit Approval(msg.sender, operator, tokenId);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        require(_exists(msg.sender), \\\"ERC721.setApprovalForAll: nonexistent owner\\\");\\n        _ownerOperator[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        _validateTransfer(msg.sender, from, to, tokenId);\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override {\\n        _validateTransfer(msg.sender, from, to, tokenId);\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    //================================================================================\\n\\n    function _exists(address owner) internal view returns (bool) {\\n        return _ownerTokenId[owner] != 0;\\n    }\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokenIdOwner[tokenId] != address(0);\\n    }\\n\\n    function _validateTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal view {\\n        require(from == ownerOf(tokenId), \\\"ERC721._validateTransfer: not owned token\\\");\\n        require(to != address(0) && !_exists(to), \\\"ERC721._validateTransfer: to address exists or 0\\\");\\n        require(\\n            operator == from || _tokenIdOperator[tokenId] == operator || _ownerOperator[from][operator],\\n            \\\"ERC721._validateTransfer: not owner nor approved\\\"\\n        );\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        // clear previous ownership and approvals\\n        delete _ownerTokenId[from];\\n        delete _tokenIdOperator[tokenId];\\n\\n        // set up new owner\\n        _ownerTokenId[to] = tokenId;\\n        _tokenIdOwner[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract\\n     * recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Validation check on parameters should be carried out before calling this function.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     *      The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID.\\n     * @param to target address that will receive the tokens.\\n     * @param tokenId uint256 ID of the token to be transferred.\\n     * @param data bytes optional data to send along with the call.\\n     * @return bool whether the call correctly returned the expected magic value.\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                msg.sender,\\n                from,\\n                tokenId,\\n                data\\n            ),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n}\\n\",\"keccak256\":\"0x48432180940dbd871d82b95491f036790927545705dc3c9a88f1d6868f82ab97\",\"license\":\"MIT\"},\"contracts/perpetual_futures/tokens/PTokenLite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../polygon/Interfaces.sol\\\";\\nimport \\\"./PFERC721.sol\\\";\\n\\ncontract PTokenLite is IPTokenLite, PFERC721, Initializable {\\n    // PToken name\\n    string internal _name;\\n    // PToken symbol\\n    string internal _symbol;\\n    // associative pool address\\n    address internal _pool;\\n    // total number of PToken ever minted, this number will never decease\\n    uint256 internal _totalMinted;\\n    // total PTokens hold by all traders\\n    uint256 internal _totalSupply;\\n\\n    address private _collectionManager;\\n\\n    // tokenId => margin\\n    mapping(uint256 => int256) internal _tokenIdMargin;\\n    // tokenId => (symbolId => Position)\\n    mapping(uint256 => Position) internal _tokenIdPosition;\\n\\n    // symbolId => number of position holders\\n    uint256 internal _numPositionHolders;\\n\\n    modifier _pool_() {\\n        require(msg.sender == _pool, \\\"PToken: only pool\\\");\\n        _;\\n    }\\n\\n    function initialize(string memory name_, string memory symbol_) external initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    function setPool(address newPool) public override {\\n        require(_pool == address(0) || _pool == msg.sender, \\\"PToken.setPool: not allowed\\\");\\n        _pool = newPool;\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function pool() public view override returns (address) {\\n        return _pool;\\n    }\\n\\n    function totalMinted() public view override returns (uint256) {\\n        return _totalMinted;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function getNumPositionHolders() public view override returns (uint256) {\\n        return _numPositionHolders;\\n    }\\n\\n    function exists(address owner) public view override returns (bool) {\\n        return _exists(owner);\\n    }\\n\\n    function getMargin(address owner) public view override returns (int256) {\\n        return _tokenIdMargin[_ownerTokenId[owner]];\\n    }\\n\\n    function updateMargin(address owner, int256 margin) public override _pool_ {\\n        _tokenIdMargin[_ownerTokenId[owner]] = margin;\\n        emit UpdateMargin(owner, margin);\\n    }\\n\\n    function addMargin(address owner, int256 delta) public override _pool_ {\\n        int256 margin = _tokenIdMargin[_ownerTokenId[owner]] + delta;\\n        _tokenIdMargin[_ownerTokenId[owner]] = margin;\\n        emit UpdateMargin(owner, margin);\\n    }\\n\\n    function getPosition(address owner) public view override returns (Position memory) {\\n        return _tokenIdPosition[_ownerTokenId[owner]];\\n    }\\n\\n    function updatePosition(address owner, Position memory position) public override _pool_ {\\n        int256 preVolume = _tokenIdPosition[_ownerTokenId[owner]].volume;\\n        int256 curVolume = position.volume;\\n\\n        if (preVolume == 0 && curVolume != 0) {\\n            _numPositionHolders++;\\n        } else if (preVolume != 0 && curVolume == 0) {\\n            _numPositionHolders--;\\n        }\\n\\n        _tokenIdPosition[_ownerTokenId[owner]] = position;\\n        emit UpdatePosition(owner, position.volume, position.cost, position.lastCumulativeFundingRate);\\n    }\\n\\n    function mint(address owner) public override _pool_ {\\n        _totalSupply++;\\n        uint256 tokenId = ++_totalMinted;\\n        require(!_exists(tokenId), \\\"PToken.mint: existent tokenId\\\");\\n\\n        _ownerTokenId[owner] = tokenId;\\n        _tokenIdOwner[tokenId] = owner;\\n\\n        emit Transfer(address(0), owner, tokenId);\\n    }\\n\\n    function burn(address owner) public override _pool_ {\\n        uint256 tokenId = _ownerTokenId[owner];\\n\\n        _totalSupply--;\\n        delete _ownerTokenId[owner];\\n        delete _tokenIdOwner[tokenId];\\n        delete _tokenIdOperator[tokenId];\\n        delete _tokenIdMargin[tokenId];\\n\\n        if (_tokenIdPosition[tokenId].volume != 0) {\\n            _numPositionHolders--;\\n        }\\n        delete _tokenIdPosition[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xa184c49b16494e7d01ee7e0e6ac5b12be622c3e266fbb20403797890c136054c\",\"license\":\"MIT\"},\"contracts/polygon/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\n\\r\\ninterface ISyntheticCollectionManager {\\r\\n    function reassignNFT(uint256 nftId_, address newOwner_) external;\\r\\n\\r\\n    function isVerified(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function originalCollectionAddress() external view returns (address);\\r\\n\\r\\n    function removeLiquidityFromPool(uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ninterface IAuctionsManager {\\r\\n    function whitelistNFT(uint256 nftId_) external;\\r\\n\\r\\n    function blacklistNFT(uint256 nftId_) external;\\r\\n\\r\\n    function isRecoverable(uint256 nftId_) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IRandomNumberConsumer {\\r\\n    function getRandomNumber() external returns (bytes32 requestId);\\r\\n}\\r\\n\\r\\ninterface IPolygonValidatorOracle {\\r\\n    function verifyTokenInCollection(\\r\\n        address ethereumCollection,\\r\\n        uint256 tokenId,\\r\\n        uint256 currentState,\\r\\n        uint256 nonce\\r\\n    ) external returns (bytes32 requestId);\\r\\n\\r\\n    function updateBuybackPrice(address) external returns (bytes32 requestId);\\r\\n}\\r\\n\\r\\ninterface IFlipCoinGenerator {\\r\\n    function generateRandom() external view returns (uint8);\\r\\n}\\r\\n\\r\\ninterface ISyntheticNFT is IERC721Metadata {\\r\\n    function setMetadata(uint256 tokenId, string memory metadata) external;\\r\\n\\r\\n    function isVerified(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function exists(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function safeMint(address to, string memory metadata) external returns (uint256);\\r\\n\\r\\n    function safeBurn(uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ninterface ICollectionManagerFactory {\\r\\n    function deploy(\\r\\n        address originalCollectionAddress_,\\r\\n        string memory name_,\\r\\n        string memory symbol_\\r\\n    ) external returns (address);\\r\\n}\\r\\n\\r\\ninterface IJot is IERC20 {\\r\\n    function uniswapV2Pair() external view returns (address);\\r\\n\\r\\n    function safeMint(address account, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IOwnable {\\r\\n    event ChangeController(address oldController, address newController);\\r\\n\\r\\n    function controller() external view returns (address);\\r\\n\\r\\n    function setNewController(address newController) external;\\r\\n\\r\\n    function claimNewController() external;\\r\\n}\\r\\n\\r\\ninterface IMigratable is IOwnable {\\r\\n    event PrepareMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    event ExecuteMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    function migrationTimestamp() external view returns (uint256);\\r\\n\\r\\n    function migrationDestination() external view returns (address);\\r\\n\\r\\n    function prepareMigration(address target, uint256 graceDays) external;\\r\\n\\r\\n    function approveMigration() external;\\r\\n\\r\\n    function executeMigration(address source) external;\\r\\n}\\r\\n\\r\\ninterface IPerpetualPoolLite {\\r\\n    // struct SymbolInfo {\\r\\n    //         uint256 symbolId;\\r\\n    //         string symbol;\\r\\n    //         address oracleAddress;\\r\\n    //         int256 multiplier;\\r\\n    //         int256 feeRatio;\\r\\n    //         int256 fundingRateCoefficient;\\r\\n    //         int256 price;\\r\\n    //         int256 cumulativeFundingRate;\\r\\n    //         int256 tradersNetVolume;\\r\\n    //         int256 tradersNetCost;\\r\\n    //     }\\r\\n\\r\\n    struct SymbolInfo {\\r\\n        int256 price;\\r\\n        int256 cumulativeFundingRate;\\r\\n        int256 tradersNetVolume;\\r\\n        int256 tradersNetCost;\\r\\n    }\\r\\n\\r\\n    struct SignedPrice {\\r\\n        uint256 timestamp;\\r\\n        uint256 price;\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n    }\\r\\n\\r\\n    event AddLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event RemoveLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event AddMargin(address indexed account, uint256 bAmount);\\r\\n\\r\\n    event RemoveMargin(address indexed account, uint256 bAmount);\\r\\n\\r\\n    event Trade(address indexed account, int256 tradeVolume, uint256 price);\\r\\n\\r\\n    event Liquidate(address indexed account, address indexed liquidator, uint256 reward);\\r\\n\\r\\n    event ProtocolFeeCollection(address indexed collector, uint256 amount);\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            int256 minPoolMarginRatio,\\r\\n            int256 minInitialMarginRatio,\\r\\n            int256 minMaintenanceMarginRatio,\\r\\n            int256 minLiquidationReward,\\r\\n            int256 maxLiquidationReward,\\r\\n            int256 liquidationCutRatio,\\r\\n            int256 protocolFeeCollectRatio\\r\\n        );\\r\\n\\r\\n    function getAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address bTokenAddress,\\r\\n            address lTokenAddress,\\r\\n            address pTokenAddress,\\r\\n            address liquidatorQualifierAddress,\\r\\n            address protocolFeeCollector,\\r\\n            address underlyingAddress,\\r\\n            address protocolAddress\\r\\n        );\\r\\n\\r\\n    function getSymbol() external view returns (SymbolInfo memory);\\r\\n\\r\\n    function getLiquidity() external view returns (int256);\\r\\n\\r\\n    function getLastUpdateBlock() external view returns (uint256);\\r\\n\\r\\n    function getProtocolFeeAccrued() external view returns (int256);\\r\\n\\r\\n    function collectProtocolFee() external;\\r\\n\\r\\n    function addLiquidity(uint256 bAmount) external;\\r\\n\\r\\n    function addLiquidityGetlShares(uint256 bAmount) external returns (uint256);\\r\\n\\r\\n    function removeLiquidity(uint256 lShares) external;\\r\\n\\r\\n    function addMargin(uint256 bAmount) external;\\r\\n\\r\\n    function removeMargin(uint256 bAmount) external;\\r\\n\\r\\n    function trade(int256 tradeVolume) external;\\r\\n\\r\\n    function liquidate(address account) external;\\r\\n\\r\\n    function addLiquidity(uint256 bAmount, SignedPrice memory price) external;\\r\\n\\r\\n    function removeLiquidity(uint256 lShares, SignedPrice memory price) external;\\r\\n\\r\\n    function addMargin(uint256 bAmount, SignedPrice memory price) external;\\r\\n\\r\\n    function removeMargin(uint256 bAmount, SignedPrice memory price) external;\\r\\n\\r\\n    function trade(int256 tradeVolume, SignedPrice memory price) external;\\r\\n\\r\\n    function liquidate(address account, SignedPrice memory price) external;\\r\\n}\\r\\n\\r\\ninterface IPTokenLite is IERC721 {\\r\\n    struct Position {\\r\\n        // position volume, long is positive and short is negative\\r\\n        int256 volume;\\r\\n        // the cost the establish this position\\r\\n        int256 cost;\\r\\n        // the last cumulativeFundingRate since last funding settlement for this position\\r\\n        // the overflow for this value in intended\\r\\n        int256 lastCumulativeFundingRate;\\r\\n    }\\r\\n\\r\\n    event UpdateMargin(address indexed owner, int256 amount);\\r\\n\\r\\n    event UpdatePosition(address indexed owner, int256 volume, int256 cost, int256 lastCumulativeFundingRate);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function totalMinted() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function getNumPositionHolders() external view returns (uint256);\\r\\n\\r\\n    function exists(address owner) external view returns (bool);\\r\\n\\r\\n    function getMargin(address owner) external view returns (int256);\\r\\n\\r\\n    function updateMargin(address owner, int256 margin) external;\\r\\n\\r\\n    function addMargin(address owner, int256 delta) external;\\r\\n\\r\\n    function getPosition(address owner) external view returns (Position memory);\\r\\n\\r\\n    function updatePosition(address owner, Position memory position) external;\\r\\n\\r\\n    function mint(address owner) external;\\r\\n\\r\\n    function burn(address owner) external;\\r\\n}\\r\\n\\r\\ninterface ILiquidatorQualifier {\\r\\n    function isQualifiedLiquidator(address liquidator) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface ILTokenLite is IERC20 {\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    function mint(address account, uint256 amount) external;\\r\\n\\r\\n    function burn(address account, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface IOracle {\\r\\n    function getPrice() external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IOracleWithUpdate {\\r\\n    function getPrice() external returns (uint256);\\r\\n\\r\\n    function updatePrice(\\r\\n        address address_,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe79c85819a593205c461eb96f60555c6caa8e9502c1fc68ca3bda0d3c6e4411a\",\"license\":\"MIT\"},\"contracts/polygon/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev collections struct\\n */\\nstruct SyntheticCollection {\\n    uint256 collectionID;\\n    address collectionManagerAddress;\\n    address jotAddress;\\n    address jotPoolAddress;\\n    address redemptionPoolAddress;\\n    address jotPairAddress;\\n    address syntheticNFTAddress;\\n    string originalName;\\n    string originalSymbol;\\n    address lTokenAddress;\\n    address pTokenAddress;\\n    address perpetualPoolLiteAddress;\\n    address poolInfo;\\n}\\n\\nstruct ProtocolParametersContracts {\\n    address fractionalizeProtocol;\\n    address futuresProtocol;\\n}\\n\\nstruct FuturesParametersContracts {\\n    address lTokenLite_;\\n    address pTokenLite_;\\n    address perpetualPoolLiteAddress_;\\n    address poolInfo_;\\n}\\n\\nstruct RegistrationMetadata {\\n    string originalName;\\n    string originalSymbol;\\n    string metadata;\\n}\\n\",\"keccak256\":\"0xaf46fa1ed34cf9c4df13744f2c48f50dfad664cee6f5a6c523e10b1f0546cf79\",\"license\":\"MIT\"},\"contracts/polygon/SyntheticProtocolRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./chainlink/RandomNumberConsumer.sol\\\";\\nimport \\\"./chainlink/PolygonValidatorOracle.sol\\\";\\nimport \\\"./implementations/SyntheticCollectionManager.sol\\\";\\nimport \\\"./implementations/LiquidityCalculator.sol\\\";\\nimport \\\"./implementations/Jot.sol\\\";\\nimport \\\"./implementations/JotPool.sol\\\";\\nimport \\\"./implementations/RedemptionPool.sol\\\";\\nimport \\\"./implementations/SyntheticNFT.sol\\\";\\nimport \\\"./Structs.sol\\\";\\nimport \\\"./governance/ProtocolParameters.sol\\\";\\nimport \\\"./governance/FuturesProtocolParameters.sol\\\";\\nimport \\\"../perpetual_futures/tokens/LTokenLite.sol\\\";\\nimport \\\"../perpetual_futures/tokens/PTokenLite.sol\\\";\\nimport \\\"../perpetual_futures/PerpetualPoolLite.sol\\\";\\nimport \\\"../perpetual_futures/PoolInfo.sol\\\";\\nimport \\\"./Interfaces.sol\\\";\\nimport \\\"./implementations/Enums.sol\\\";\\n\\nimport {AuctionsManager} from \\\"./auctions/AuctionsManager.sol\\\";\\n\\ncontract SyntheticProtocolRouter is AccessControl, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    address private _jot;\\n    address private _jotPool;\\n    address private _redemptionPool;\\n    address private _collectionManager;\\n    address private _syntheticNFT;\\n    address private _auctionManager;\\n\\n    address private _protocol;\\n    address private _futuresProtocol;\\n    address private _randomConsumerAddress;\\n    address private _validatorAddress;\\n\\n    address private _perpetualPoolLiteAddress;\\n    address private _lTokenLite;\\n    address private _pTokenLite;\\n    address private _poolInfo;\\n    address private _liquidityCalculator;\\n\\n    /**\\n     * @dev collections map.\\n     * collection address => collection data\\n     */\\n    mapping(address => SyntheticCollection) private _collections;\\n\\n    /**\\n     * @dev get collection address from ID\\n     */\\n    mapping(uint256 => address) private _collectionIdToAddress;\\n\\n    /**\\n     * @notice number of registered collections\\n     */\\n    Counters.Counter public protocolVaults;\\n\\n    /**\\n     * @notice QuickSwap address\\n     */\\n    address public swapAddress;\\n\\n    // a new Synthetic NFT collection manager is registered\\n    event CollectionManagerRegistered(\\n        uint256 collectionManagerID,\\n        address collectionManagerAddress,\\n        address jotAddress,\\n        address jotPoolAddress,\\n        address redemptionPoolAddress,\\n        address jotPairAddress,\\n        address syntheticNFTAddress,\\n        address quickSwapAddress,\\n        address auctionAddress,\\n        address lTokenLite_,\\n        address pTokenLite_,\\n        address perpetualPoolLiteAddress_,\\n        address poolInfo\\n    );\\n\\n    event TokenRegistered(\\n        address collectionManagerAddress,\\n        uint256 syntheticTokenId\\n    );\\n\\n    event TokenChanged(address collectionAddress, uint256 syntheticID, uint256 newID);\\n\\n    constructor(\\n        /* array composed by:\\n            swapAddress, \\n            jot.address, \\n            jotPool.address, \\n            liquidityCalculator.address,\\n            redemptionPool.address,\\n            collectionManager.address,\\n            syntheticNFT.address,\\n            auctionsManager.address,\\n            randomConsumer.address,\\n            validator.address,\\n         */\\n        address[10] memory addresses_,\\n        FuturesParametersContracts memory futuresParameters,\\n        ProtocolParametersContracts memory protocolParameters\\n    ) {\\n        swapAddress = addresses_[0];\\n        _jot = addresses_[1];\\n        _jotPool = addresses_[2];\\n        _liquidityCalculator = addresses_[3];\\n        _redemptionPool = addresses_[4];\\n        _collectionManager = addresses_[5];\\n        _syntheticNFT = addresses_[6];\\n        _auctionManager = addresses_[7];\\n        _protocol = protocolParameters.fractionalizeProtocol;\\n        _futuresProtocol = protocolParameters.futuresProtocol;\\n        _randomConsumerAddress = addresses_[8];\\n        _validatorAddress = addresses_[9];\\n        _lTokenLite = futuresParameters.lTokenLite_;\\n        _pTokenLite = futuresParameters.pTokenLite_;\\n        _perpetualPoolLiteAddress = futuresParameters.perpetualPoolLiteAddress_;\\n        _poolInfo = futuresParameters.poolInfo_;\\n    }\\n\\n    /**\\n     *  @notice register an NFT collection\\n     *  @param collection the address of the synthetic collection\\n     *  @param tokenId the token id\\n     *  @param supplyToKeep supply to keep\\n     *  @param registrationMetadata the metadata for the registration\\n     */\\n    function registerNFT(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 supplyToKeep,\\n        uint256 priceFraction,\\n        RegistrationMetadata calldata registrationMetadata\\n    ) external {\\n        require(priceFraction > 0, \\\"Price fraction can't be zero\\\");\\n        require(collection != address(0), \\\"Invalid collection\\\");\\n        require(supplyToKeep <= ProtocolConstants.JOT_SUPPLY, \\\"Invalid supply to keep\\\");\\n\\n        address collectionAddress;\\n        // Checks whether a collection is registered or not\\n        // If not registered, then register it and increase the Vault counter\\n        if (!isSyntheticCollectionRegistered(collection)) {\\n            // deploys and initialize a Jot\\n            address jotAddress = _deployAndInitJot(\\n                string(abi.encodePacked(\\\"Privi Jot \\\", registrationMetadata.originalName)),\\n                string(abi.encodePacked(\\\"JOT_\\\", registrationMetadata.originalSymbol))\\n            );\\n\\n            // deploys and initialize a JotPool\\n            address jotPoolAddress = _deployAndInitJotPool(\\n                jotAddress,\\n                string(abi.encodePacked(\\\"Privi Jot \\\", registrationMetadata.originalName))\\n            );\\n\\n            // deploys a SyntheticNFT\\n            address syntheticNFTAddress = Clones.clone(_syntheticNFT);\\n\\n            // deploys a RedemptionPool\\n            address redemptionPoolAddress = Clones.clone(_redemptionPool);\\n\\n            // deploys and init a SyntheticCollectionManager\\n            collectionAddress = _deployAndInitSyntheticCollection(\\n                jotAddress,\\n                jotPoolAddress,\\n                redemptionPoolAddress,\\n                syntheticNFTAddress,\\n                collection\\n            );\\n\\n            // initializes the RedemptionPool\\n            RedemptionPool(redemptionPoolAddress).initialize(\\n                jotAddress,\\n                ProtocolParameters(_protocol).fundingTokenAddress(),\\n                collectionAddress\\n            );\\n\\n            // assigns the roles to the deployed contracts\\n            _assignRoles(jotAddress, jotPoolAddress, collectionAddress);\\n\\n            // initializes the SyntheticNFT\\n            SyntheticNFT(syntheticNFTAddress).initialize(\\n                string(abi.encodePacked(\\\"Privi Synthetic \\\", registrationMetadata.originalName)),\\n                string(abi.encodePacked(\\\"pS_\\\", registrationMetadata.originalSymbol)),\\n                collectionAddress\\n            );\\n\\n            // whitelist the new collection contract on the random number consumer and the validator\\n            RandomNumberConsumer(_randomConsumerAddress).whitelistCollection(collectionAddress);\\n            PolygonValidatorOracle(_validatorAddress).whitelistCollection(collectionAddress);\\n\\n            // deploy and initialize future contracts\\n            FuturesParametersContracts memory futuresData = _deployFutures(\\n                registrationMetadata.originalName,\\n                registrationMetadata.originalSymbol,\\n                collection\\n            );\\n\\n            SyntheticCollectionManager(collectionAddress).setPerpetualPoolLiteAddress(\\n                futuresData.perpetualPoolLiteAddress_\\n            );\\n\\n            _collections[collection] = SyntheticCollection({\\n                collectionID: protocolVaults.current(),\\n                collectionManagerAddress: collectionAddress,\\n                jotAddress: jotAddress,\\n                jotPoolAddress: jotPoolAddress,\\n                redemptionPoolAddress: redemptionPoolAddress,\\n                jotPairAddress: Jot(jotAddress).uniswapV2Pair(),\\n                syntheticNFTAddress: syntheticNFTAddress,\\n                originalName: registrationMetadata.originalName,\\n                originalSymbol: registrationMetadata.originalSymbol,\\n                lTokenAddress: futuresData.lTokenLite_,\\n                pTokenAddress: futuresData.pTokenLite_,\\n                perpetualPoolLiteAddress: futuresData.perpetualPoolLiteAddress_,\\n                poolInfo: futuresData.poolInfo_\\n            });\\n\\n            _collectionIdToAddress[protocolVaults.current()] = collectionAddress;\\n\\n            emit CollectionManagerRegistered(\\n                protocolVaults.current(),\\n                collectionAddress,\\n                jotAddress,\\n                jotPoolAddress,\\n                redemptionPoolAddress,\\n                Jot(jotAddress).uniswapV2Pair(),\\n                syntheticNFTAddress,\\n                swapAddress,\\n                _auctionManager,\\n                futuresData.lTokenLite_,\\n                futuresData.pTokenLite_,\\n                futuresData.perpetualPoolLiteAddress_,\\n                futuresData.poolInfo_\\n            );\\n\\n            protocolVaults.increment();\\n        } else {\\n            collectionAddress = _collections[collection].collectionManagerAddress;\\n        }\\n\\n        SyntheticCollectionManager collectionManager = SyntheticCollectionManager(collectionAddress);\\n\\n        uint256 syntheticID = collectionManager.register(\\n            tokenId,\\n            supplyToKeep,\\n            priceFraction,\\n            msg.sender,\\n            registrationMetadata.metadata\\n        );\\n\\n        emit TokenRegistered(collectionAddress, syntheticID);\\n    }\\n\\n    function _deployAndInitJot(string memory originalName_, string memory originalSymbol_)\\n        private\\n        returns (address jotAddress)\\n    {\\n        // deploys a minimal proxy contract from the jot contract implementation\\n        jotAddress = Clones.clone(_jot);\\n        Jot(jotAddress).initialize(\\n            string(abi.encodePacked(\\\"Privi Jot \\\", originalName_)),\\n            string(abi.encodePacked(\\\"JOT_\\\", originalSymbol_)),\\n            swapAddress,\\n            ProtocolParameters(_protocol).fundingTokenAddress()\\n        );\\n    }\\n\\n    function _deployAndInitJotPool(address jotAddress_, string memory originalName_)\\n        private\\n        returns (address jotPoolAddress)\\n    {\\n        // deploys a minimal proxy contract from the jotPool contract implementation\\n        jotPoolAddress = Clones.clone(_jotPool);\\n        JotPool(jotPoolAddress).initialize(\\n            jotAddress_,\\n            ProtocolParameters(_protocol).fundingTokenAddress(),\\n            string(abi.encodePacked(\\\"Privi JotPool \\\", originalName_)),\\n            string(abi.encodePacked(\\\" \\\", originalName_))\\n        );\\n    }\\n\\n    function _deployAndInitSyntheticCollection(\\n        address jotAddress_,\\n        address jotPoolAddress_,\\n        address redemptionPoolAddress_,\\n        address syntheticNFTAddress_,\\n        address collection_\\n    ) private returns (address collectionAddress) {\\n        // deploys a minimal proxy contract from the collectionManager contract implementation\\n        collectionAddress = Clones.clone(_collectionManager);\\n\\n        address liquidityCalculatorAddress = Clones.clone(_liquidityCalculator);\\n        LiquidityCalculator(liquidityCalculatorAddress).initialize(\\n            collectionAddress,\\n            swapAddress,\\n            _protocol,\\n            _perpetualPoolLiteAddress,\\n            ProtocolParameters(_protocol).fundingTokenAddress(),\\n            jotAddress_\\n        );\\n\\n        SyntheticCollectionManager(collectionAddress).initialize(\\n            jotAddress_,\\n            collection_,\\n            syntheticNFTAddress_,\\n            _auctionManager,\\n            _protocol,\\n            jotPoolAddress_,\\n            redemptionPoolAddress_,\\n            swapAddress,\\n            liquidityCalculatorAddress\\n        );\\n    }\\n\\n    function _assignRoles(\\n        address jotAddress_,\\n        address jotPoolAddress_,\\n        address collectionAddress_\\n    ) private {\\n        AuctionsManager(_auctionManager).grantRole(\\n            AuctionsManager(_auctionManager).COLLECTION_MANAGER(),\\n            collectionAddress_\\n        );\\n\\n        // Done this way because of stack limitations\\n        SyntheticCollectionManager(collectionAddress_).grantRole(\\n            SyntheticCollectionManager(collectionAddress_).RANDOM_ORACLE(),\\n            _randomConsumerAddress\\n        );\\n\\n        SyntheticCollectionManager(collectionAddress_).grantRole(\\n            SyntheticCollectionManager(collectionAddress_).VALIDATOR_ORACLE(),\\n            _validatorAddress\\n        );\\n\\n        Jot(jotAddress_).grantRole(Jot(jotAddress_).MINTER(), collectionAddress_);\\n\\n        // set the manager to allow control over the funds\\n        Jot(jotAddress_).setManager(collectionAddress_, jotPoolAddress_);\\n    }\\n\\n    function _deployFutures(\\n        string memory originalName,\\n        string memory originalSymbol,\\n        address collection\\n    ) private returns (FuturesParametersContracts memory) {\\n        // Deploy futures\\n        address lTokenAddress = Clones.clone(_lTokenLite);\\n        LTokenLite(lTokenAddress).initialize(\\n            string(abi.encodePacked(\\\"Liquidity Futures \\\", originalName)),\\n            string(abi.encodePacked(\\\"LF_\\\", originalSymbol))\\n        );\\n\\n        address pTokenAddress = Clones.clone(_pTokenLite);\\n        PTokenLite(pTokenAddress).initialize(\\n            string(abi.encodePacked(\\\"Position Futures \\\", originalName)),\\n            string(abi.encodePacked(\\\"PF_\\\", originalSymbol))\\n        );\\n\\n        address nftFutureAddress = Clones.clone(_perpetualPoolLiteAddress);\\n        PerpetualPoolLite(nftFutureAddress).initialize(\\n            [\\n                ProtocolParameters(_protocol).fundingTokenAddress(),\\n                lTokenAddress,\\n                pTokenAddress,\\n                address(0), // TODO: change by liquidator address\\n                _jotPool,\\n                collection\\n            ]\\n        );\\n\\n        address poolInfo = Clones.clone(_poolInfo);\\n        PoolInfo(poolInfo).initialize(nftFutureAddress);\\n\\n        LTokenLite(lTokenAddress).setPool(nftFutureAddress);\\n        PTokenLite(pTokenAddress).setPool(nftFutureAddress);\\n\\n        return FuturesParametersContracts(lTokenAddress, pTokenAddress, nftFutureAddress, poolInfo);\\n    }\\n\\n    /**\\n     * @notice change an NFT for another one\\n     */\\n    function changeNFT(\\n        address collection,\\n        uint256 syntheticId,\\n        uint256 newOriginalId,\\n        string memory metadata\\n    ) public {\\n        address collectionManager = getCollectionManagerAddress(collection);\\n        SyntheticCollectionManager manager = SyntheticCollectionManager(collectionManager);\\n        manager.change(syntheticId, newOriginalId, metadata, msg.sender);\\n\\n        emit TokenChanged(collection, syntheticId, newOriginalId);\\n    }\\n\\n    /**\\n     * @notice checks whether a collection is registered or not\\n     */\\n    function isSyntheticCollectionRegistered(address collection) public view returns (bool) {\\n        return _collections[collection].collectionManagerAddress != address(0);\\n    }\\n\\n    /**\\n     * @notice checks whether a Synthetic NFT has been created for a given NFT or not\\n     */\\n    function isSyntheticNFTCreated(address collection, uint256 tokenId) public view returns (bool) {\\n        // Collection must be registered first\\n        require(isSyntheticCollectionRegistered(collection), \\\"Collection not registered\\\");\\n\\n        // connect to collection manager\\n        address collectionAddress = _collections[collection].collectionManagerAddress;\\n        address syntheticNFTAddress = SyntheticCollectionManager(collectionAddress).erc721address();\\n\\n        // check whether a given id was minted or not\\n        return ISyntheticNFT(syntheticNFTAddress).exists(tokenId);\\n    }\\n\\n    /**\\n     * @notice checks whether a Synthetic has been verified or not\\n     */\\n    function isNFTVerified(address collection, uint256 tokenId) public view returns (bool) {\\n        require(isSyntheticNFTCreated(collection, tokenId), \\\"NFT not registered\\\");\\n        address collectionManager = getCollectionManagerAddress(collection);\\n        //return SyntheticCollectionManager(collectionManager).isVerified(tokenId);\\n\\n        (,,,,,,,,,State verified) = SyntheticCollectionManager(collectionManager).tokens(tokenId);\\n\\n        return (verified == State.VERIFIED);\\n    }\\n\\n    /**\\n     * @notice verify a synthetic NFT\\n     */\\n    function verifyNFT(address collection, uint256 tokenId) public {\\n        address collectionManager = getCollectionManagerAddress(collection);\\n        SyntheticCollectionManager(collectionManager).verify(tokenId);\\n    }\\n\\n    /**\\n     * @notice getter for Jot Address of a collection\\n     */\\n    function getJotsAddress(address collection) public view returns (address) {\\n        return _collections[collection].jotAddress;\\n    }\\n\\n    /**\\n     * @notice getter for Jot Pool Address of a collection\\n     */\\n    function getJotPoolAddress(address collection) public view returns (address) {\\n        return _collections[collection].jotPoolAddress;\\n    }\\n\\n    /**\\n     * @notice get collection manager address from collection address\\n     */\\n    function getCollectionManagerAddress(address collection) public view returns (address) {\\n        return _collections[collection].collectionManagerAddress;\\n    }\\n\\n    /**\\n     * @notice get collection manager address from collection ID\\n     */\\n    function getCollectionManagerAddressFromId(uint256 collectionID) public view returns (address) {\\n        address collectionAddress = _collectionIdToAddress[collectionID];\\n        return _collections[collectionAddress].collectionManagerAddress;\\n    }\\n\\n    /**\\n     * @notice get collection ID from collection address\\n     */\\n    function getCollectionID(address collection) public view returns (uint256) {\\n        return _collections[collection].collectionID;\\n    }\\n\\n    /**\\n     * @notice get collection address from collection ID\\n     */\\n    function getOriginalCollectionAddress(uint256 collectionID) public view returns (address) {\\n        return _collectionIdToAddress[collectionID];\\n    }\\n\\n    function getCollectionlTokenAddress(address collection) public view returns (address) {\\n        return _collections[collection].lTokenAddress;\\n    }\\n\\n    function getCollectionpTokenAddress(address collection) public view returns (address) {\\n        return _collections[collection].pTokenAddress;\\n    }\\n\\n    function getCollectionPerpetualPoolAddress(address collection) public view returns (address) {\\n        return _collections[collection].perpetualPoolLiteAddress;\\n    }\\n\\n    function getCollectionUniswapPair(address collection) public view returns (address) {\\n        return _collections[collection].jotPairAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x647d226b4527af4ee42317c680dc38648a899fb94f1196fde85f47bdbb388f8b\",\"license\":\"MIT\"},\"contracts/polygon/auctions/AuctionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\nimport \\\"../Interfaces.sol\\\";\\n//import \\\"../implementations/SyntheticCollectionManager.sol\\\";\\nimport \\\"../SyntheticProtocolRouter.sol\\\";\\nimport \\\"../libraries/ProtocolConstants.sol\\\";\\n\\nimport {NFTAuction} from \\\"./NFTAuction.sol\\\";\\n\\n/**\\n * @title auctions manager (fabric for auctions)\\n * @author priviprotocol\\n */\\ncontract AuctionsManager is Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    // roles for access control\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant COLLECTION_MANAGER = keccak256(\\\"COLLECTION_MANAGER\\\");\\n    bytes32 public constant AUCTION = keccak256(\\\"AUCTION\\\");\\n\\n    /// @dev the address of the beacon contract for the auctions upgrades\\n    address private _beacon;\\n\\n    /// @notice the address of the protocol parameters controlled by goverance\\n    ProtocolParameters public protocol;\\n\\n    /// @notice the address of the protocol router\\n    SyntheticProtocolRouter public router;\\n\\n    /**\\n     * @dev auctionable tokens at the moment\\n     *      collection => tokenId => isWhitelisted\\n     */\\n    mapping(address => mapping(uint256 => bool)) private _whitelistedTokens;\\n\\n    /**\\n     * @dev timestamp in seconds for a token recoverable date limit\\n     *      collection => tokenId => timestamp\\n     */\\n    mapping(address => mapping(uint256 => uint256)) private _recoverableTillDate;\\n\\n    /**\\n     * @dev emitted when an auction is launched with an initial bid\\n     * @param collection the address of the synthetic nft collection\\n     * @param nftId the id of the synthetic nft token\\n     * @param auctionContract the address of the new deployed auction\\n     * @param openingBid the value of the opening bid\\n     */\\n    event AuctionStarted(\\n        address indexed collection,\\n        uint256 indexed nftId,\\n        address auctionContract,\\n        uint256 openingBid\\n    );\\n\\n    /**\\n     * @dev the initializer modifier is to avoid someone initializing\\n     *      the implementation contract after deployment\\n     */\\n    constructor() initializer {} // solhint-disable-line\\n\\n    /**\\n     * @dev initializes the protocol and router addresses,\\n     *      sets the UPGRADER_ROLE to governance (only governance can upgrade)\\n     *\\n     * @param governance_ the address of the goverance contract (timelock actually)\\n     * @param protocol_ the address of the protocol parameters contract\\n     * @param router_ the address of the protocol router contract\\n     */\\n    function initialize(\\n        address governance_,\\n        address beacon_,\\n        address protocol_,\\n        address router_\\n    ) external initializer {\\n        protocol = ProtocolParameters(protocol_);\\n        router = SyntheticProtocolRouter(router_);\\n        _beacon = beacon_;\\n\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, router_);\\n        _setupRole(UPGRADER_ROLE, governance_);\\n    }\\n\\n    /**\\n     * @dev makes a nft auctionable (callable only by a synthetic collection manager)\\n     * @param nftId_ the id of the synthetic nft token\\n     */\\n    function whitelistNFT(uint256 nftId_) external onlyRole(COLLECTION_MANAGER) {\\n        _whitelistedTokens[msg.sender][nftId_] = true;\\n        _recoverableTillDate[msg.sender][nftId_] = block.timestamp + protocol.recoveryThreshold(); // solhint-disable-line\\n    }\\n\\n    /**\\n     * @dev makes a nft non auctionable (callable only by a synthetic collection manager)\\n     * @param nftId_ the id of the synthetic nft token\\n     */\\n    function blacklistNFT(uint256 nftId_) external onlyRole(COLLECTION_MANAGER) {\\n        _whitelistedTokens[msg.sender][nftId_] = false;\\n    }\\n\\n    /**\\n     * @notice check if a nft is yet recoverable\\n     * @param nftId_ the id of the synthetic nft token\\n     */\\n    function isRecoverable(uint256 nftId_) public view returns (bool) {\\n        return (_whitelistedTokens[msg.sender][nftId_] &&\\n            _recoverableTillDate[msg.sender][nftId_] >= block.timestamp); // solhint-disable-line\\n    }\\n\\n    /**\\n     * @notice check when an auctionable nft would be recoverable until\\n     * @param manager_ the address of the synthetic collection manager\\n     * @param nftId_ the id of the synthetic nft token\\n     */\\n    function isRecoverableTill(address manager_, uint256 nftId_) public view returns (uint256) {\\n        return _recoverableTillDate[manager_][nftId_];\\n    }\\n\\n    /**\\n     * @dev reassigns the nft to the new owner (callable only by an auction)\\n     * @param collection_ the address of the synthetic collection manager\\n     * @param nftId_ the id of the synthetic nft token\\n     * @param newOwner_ the winner of the auction\\n     */\\n    function reassignNFT(\\n        address collection_,\\n        uint256 nftId_,\\n        address newOwner_\\n    ) external virtual onlyRole(AUCTION) {\\n        ISyntheticCollectionManager(collection_).reassignNFT(nftId_, newOwner_);\\n    }\\n\\n    /**\\n     * @notice allows to start an auction over an auctionable nft which is\\n     *         already no recoverable\\n     *\\n     * @param collection_ the address of the synthetic collection manager\\n     * @param nftId_ the id of the synthetic nft token\\n     * @param openingBid_ the opening bid of the auction\\n     */\\n    function startAuction(\\n        address collection_,\\n        uint256 nftId_,\\n        uint256 openingBid_\\n    ) external {\\n        ISyntheticCollectionManager manager = ISyntheticCollectionManager(collection_);\\n\\n        require(_whitelistedTokens[collection_][nftId_], \\\"Token can't be auctioned\\\");\\n        require(_recoverableTillDate[collection_][nftId_] < block.timestamp, \\\"Token is yet recoverable\\\"); //solhint-disable-line\\n        require(openingBid_ >= ProtocolConstants.JOT_SUPPLY, \\\"Opening bid too low\\\");\\n\\n        address originalCollection = manager.originalCollectionAddress();\\n        require(router.isNFTVerified(originalCollection, nftId_), \\\"The token should be first verified\\\");\\n\\n        // blacklist the nft to avoid start a new auction\\n        _whitelistedTokens[collection_][nftId_] = false;\\n\\n        address jotToken = router.getJotsAddress(originalCollection);\\n\\n        // deploy the beacon proxy\\n        address auctionAddress = address(new BeaconProxy(_beacon, \\\"\\\"));\\n        NFTAuction(auctionAddress).initialize(\\n            nftId_,\\n            jotToken,\\n            router.getJotPoolAddress(originalCollection),\\n            router.getCollectionManagerAddress(originalCollection),\\n            openingBid_,\\n            protocol.auctionDuration(),\\n            msg.sender\\n        );\\n\\n        // give the AUCTION role to allow blacklisting\\n        _setupRole(AUCTION, auctionAddress);\\n\\n        // transfer funds to the auction contract\\n        require(\\n            IERC20(jotToken).transferFrom(msg.sender, auctionAddress, openingBid_),\\n            \\\"Unable to transfer jots\\\"\\n        );\\n\\n        manager.removeLiquidityFromPool(nftId_);\\n\\n        emit AuctionStarted(collection_, nftId_, auctionAddress, openingBid_);\\n    }\\n\\n    // solhint-disable-next-line\\n    function _authorizeUpgrade(address) internal override onlyRole(UPGRADER_ROLE) {}\\n}\\n\",\"keccak256\":\"0x309a7fbe7c0bb2a7ba38e1c4133dcad95168f55d0cceb790c50f2ba43fc4a1c7\",\"license\":\"MIT\"},\"contracts/polygon/auctions/NFTAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/ProtocolConstants.sol\\\";\\nimport \\\"./AuctionsManager.sol\\\";\\n\\n/**\\n * @title upgradeable auction contract\\n * @author priviprotocol\\n */\\ncontract NFTAuction is Initializable {\\n    /// @notice the date when the auction will finish\\n    uint256 public auctionEndTime;\\n\\n    /// @notice the current highest bidder of the auction\\n    address public highestBidder;\\n\\n    /// @notice the current highest bid of the auction\\n    uint256 public highestBid;\\n\\n    /// @notice the id of the synthetic nft token being auctioned\\n    uint256 public nftId;\\n\\n    /// @notice the address of the synthetic collection contract for this token\\n    address public syntheticCollection;\\n\\n    /// @notice the address of the jot contract for the synthetic collection\\n    address public jot;\\n\\n    /// @notice the address of the jot pool contract for the synthetic collection\\n    address public jotPool;\\n\\n    /// @notice the address of auctions manager (auctions fabric)\\n    address public auctionsManager;\\n\\n    /// @dev allowed withdrawals of previous bids\\n    mapping(address => uint256) private _pendingReturns;\\n\\n    /// @dev set to true at the end, disallows any change.\\n    bool private _claimed;\\n\\n    /**\\n     * @dev emitted when the highest bid gets increased\\n     * @param bidder the new highest bidder\\n     * @param amount the new highest bid\\n     */\\n    event HighestBidIncreased(address bidder, uint256 amount);\\n\\n    /**\\n     * @dev emitted when the auction ends and the auction ends method is called\\n     * @param winner the highest bidder at the end\\n     * @param amount the highest bid at the end\\n     */\\n    event AuctionEnded(address winner, uint256 amount);\\n\\n    /**\\n     * @dev the initializer modifier is to avoid someone initializing\\n     *      the implementation contract after deployment\\n     */\\n    // solhint-disable-next-line\\n    constructor() initializer {}\\n\\n    /**\\n     * @dev initializes the auction (called by auctions manager after deploy)\\n     *\\n     * @param nftId_ the id of the nft being auctioned\\n     * @param jot_ the address of the jot contract\\n     * @param jotPool_ the address of the jot contract\\n     * @param syntheticCollection_ the address of the synthetic collection contract\\n     * @param initialBid_ the opening bid\\n     * @param auctionDuration_ the duration of the auction (protocol parameter set by governance)\\n     * @param initialBidder_ the initial bidder\\n     */\\n    function initialize(\\n        uint256 nftId_,\\n        address jot_,\\n        address jotPool_,\\n        address syntheticCollection_,\\n        uint256 initialBid_,\\n        uint256 auctionDuration_,\\n        address initialBidder_\\n    ) external initializer {\\n        nftId = nftId_;\\n        auctionEndTime = block.timestamp + auctionDuration_; // solhint-disable-line\\n        highestBid = initialBid_;\\n        jot = jot_;\\n        jotPool = jotPool_;\\n        syntheticCollection = syntheticCollection_;\\n        highestBidder = initialBidder_;\\n        auctionsManager = msg.sender;\\n    }\\n\\n    /**\\n     * @notice bid on the auction.\\n     *         the value will only be refunded if the\\n     *         auction is not won.\\n     *\\n     * @param amount_ the bid amount\\n     */\\n    function bid(uint256 amount_) public payable {\\n        // revert the call if the bidding period is over\\n        // solhint-disable-next-line\\n        require(block.timestamp <= auctionEndTime, \\\"Auction already ended\\\");\\n\\n        // if the bid is not higher revert\\n        require(amount_ > highestBid, \\\"There already is a higher bid\\\");\\n\\n        // if the allowance is not enough or transfer fails revert\\n        require(IERC20(jot).transferFrom(msg.sender, address(this), amount_), \\\"Unable to transfer jots\\\");\\n\\n        if (highestBid != 0) {\\n            // sending back the money by simply using\\n            // highestBidder.send(highestBid) is a security risk\\n            // because it could execute an untrusted contract.\\n            // it is always safer to let the recipients\\n            // withdraw their money themselves.\\n            _pendingReturns[highestBidder] += highestBid;\\n        }\\n        highestBidder = msg.sender;\\n        highestBid = amount_;\\n\\n        emit HighestBidIncreased(msg.sender, amount_);\\n    }\\n\\n    /**\\n     * @notice withdraw a bid that was overbid\\n     */\\n    function withdraw() public {\\n        uint256 amount = _pendingReturns[msg.sender];\\n        if (amount > 0) {\\n            // avoid reentrancy by using check-effects-interaction pattern\\n            _pendingReturns[msg.sender] = 0;\\n\\n            require(IERC20(jot).transfer(msg.sender, amount), \\\"Unable to transfer jots\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice winner can claim the token after auction end time\\n     */\\n    function endAuction() public {\\n        // solhint-disable-next-line\\n        require(block.timestamp >= auctionEndTime, \\\"Auction not yet ended\\\");\\n        require(!_claimed, \\\"Token has already been claimed\\\");\\n\\n        _claimed = true;\\n\\n        // transfer the jots\\n        require(\\n            IERC20(jot).transfer(syntheticCollection, ProtocolConstants.JOT_SUPPLY),\\n            \\\"Unable to transfer jots\\\"\\n        );\\n\\n        if (highestBid - ProtocolConstants.JOT_SUPPLY > 0) {\\n            require(\\n                IERC20(jot).transfer(jotPool, highestBid - ProtocolConstants.JOT_SUPPLY),\\n                \\\"Unable to transfer jots\\\"\\n            );\\n        }\\n\\n        // reassign the NFT in the synthetic collection\\n        AuctionsManager(auctionsManager).reassignNFT(syntheticCollection, nftId, highestBidder);\\n\\n        emit AuctionEnded(highestBidder, highestBid);\\n    }\\n}\\n\",\"keccak256\":\"0x6417ef8c437c935ca9043fed599fc0a85deed9b86ac1ef83d5f18c2a61c69456\",\"license\":\"MIT\"},\"contracts/polygon/chainlink/OracleStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../implementations/Enums.sol\\\";\\n\\nstruct APIOracleInfo {\\n    address linkToken;\\n    address chainlinkNode;\\n    string jobId;\\n    string uintJobId;\\n    uint256 nodeFee;\\n}\\n\\nstruct VRFOracleInfo {\\n    address vrfCoordinator;\\n    address linkToken;\\n    bytes32 keyHash;\\n    uint256 vrfFee;\\n}\\n\\nstruct VerifyRequest {\\n    address originalCollection;\\n    address syntheticCollection;\\n    uint256 tokenId;\\n    State previousState;\\n}\\n\\nstruct UpdateRequest {\\n    address syntheticCollection;\\n}\\n\",\"keccak256\":\"0x61a8b541bb087fb846430ca6aebbc2eb65a9a85296a305953bc2f541b0d798cd\",\"license\":\"MIT\"},\"contracts/polygon/chainlink/PolygonValidatorOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../../libraries/Stringify.sol\\\";\\r\\nimport \\\"../implementations/SyntheticCollectionManager.sol\\\";\\r\\nimport \\\"./OracleStructs.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev the ownership will be transferred after deployment to the router contract\\r\\n */\\r\\ncontract PolygonValidatorOracle is ChainlinkClient, Ownable {\\r\\n    using Stringify for uint256;\\r\\n    using Stringify for address;\\r\\n    using Stringify for string;\\r\\n\\r\\n    /**\\r\\n     * @dev oracle configuration parameters\\r\\n     */\\r\\n    string public token;\\r\\n    string public apiURL;\\r\\n    address public chainlinkNode;\\r\\n    bytes32 public booleanjobId;\\r\\n    bytes32 public uint256JobId;\\r\\n    uint256 public nodeFee;\\r\\n    address public linkToken;\\r\\n\\r\\n    mapping(bytes32 => VerifyRequest) private _verifyRequests;\\r\\n    mapping(bytes32 => UpdateRequest) private _updateRequests;\\r\\n\\r\\n    mapping(address => bool) private _whitelistedCollections;\\r\\n\\r\\n    constructor(APIOracleInfo memory _oracleInfo) {\\r\\n        linkToken = _oracleInfo.linkToken;\\r\\n        chainlinkNode = _oracleInfo.chainlinkNode;\\r\\n        booleanjobId = _oracleInfo.jobId.toBytes32();\\r\\n        uint256JobId = _oracleInfo.uintJobId.toBytes32();\\r\\n        nodeFee = _oracleInfo.nodeFee;\\r\\n        apiURL = \\\"https://nft-validator-hwk7x.ondigitalocean.app/\\\";\\r\\n\\r\\n        setChainlinkToken(linkToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev call to verify if a token is locked in ethereum vault,\\r\\n     *      this method can be called only from the collection manager contract\\r\\n     *\\r\\n     * @param ethereumCollection the collection address in ethereum\\r\\n     * @param tokenId the id of the nft in the synthetic collection\\r\\n     * @param currentState the current state\\r\\n     * @param nonce the nonce\\r\\n     * @return requestId the id of the request to the Chainlink oracle\\r\\n     */\\r\\n    function verifyTokenInCollection(\\r\\n        address ethereumCollection,\\r\\n        uint256 tokenId,\\r\\n        uint256 currentState,\\r\\n        uint256 nonce\\r\\n    ) external returns (bytes32 requestId) {\\r\\n        require(_whitelistedCollections[msg.sender], \\\"Invalid requester\\\");\\r\\n\\r\\n        Chainlink.Request memory request = buildChainlinkRequest(\\r\\n            booleanjobId,\\r\\n            address(this),\\r\\n            this.processResponse.selector\\r\\n        );\\r\\n\\r\\n        // set the request params\\r\\n        Chainlink.add(\\r\\n            request,\\r\\n            \\\"get\\\",\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    apiURL,\\r\\n                    \\\"verify?collection=0x\\\",\\r\\n                    ethereumCollection.toString(),\\r\\n                    \\\"&tokenId=\\\",\\r\\n                    tokenId.toString(),\\r\\n                    \\\"&nonce=\\\",\\r\\n                    nonce.toString()\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        Chainlink.add(request, \\\"path\\\", \\\"locked\\\");\\r\\n\\r\\n        // send the request\\r\\n        requestId = sendChainlinkRequestTo(chainlinkNode, request, nodeFee);\\r\\n\\r\\n        _verifyRequests[requestId] = VerifyRequest({\\r\\n            tokenId: tokenId,\\r\\n            originalCollection: ethereumCollection,\\r\\n            syntheticCollection: msg.sender,\\r\\n            previousState: State(currentState)\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function to process the oracle response (only callable from oracle)\\r\\n     * @param requestId the id of the request to the Chainlink oracle\\r\\n     * @param verified wether the nft is locked or not on ethereum\\r\\n     */\\r\\n    function processResponse(bytes32 requestId, bool verified) public recordChainlinkFulfillment(requestId) {\\r\\n        VerifyRequest memory requestData = _verifyRequests[requestId];\\r\\n\\r\\n        SyntheticCollectionManager(requestData.syntheticCollection).processVerifyResponse(\\r\\n            requestId,\\r\\n            requestData,\\r\\n            verified\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev call to get the new buyback price\\r\\n     *      this method can be called only from the collection manager contract\\r\\n     *\\r\\n     * @return requestId the id of the request to the Chainlink oracle\\r\\n     */\\r\\n    function updateBuybackPrice(address ethereumCollection) external returns (bytes32 requestId) {\\r\\n        require(_whitelistedCollections[msg.sender], \\\"Invalid requester\\\");\\r\\n\\r\\n        Chainlink.Request memory request = buildChainlinkRequest(\\r\\n            uint256JobId,\\r\\n            address(this),\\r\\n            this.processBuybackPriceResponse.selector\\r\\n        );\\r\\n\\r\\n        // set the request params\\r\\n        Chainlink.add(\\r\\n            request,\\r\\n            \\\"get\\\",\\r\\n            string(abi.encodePacked(apiURL, \\\"getprice?contractAddress=0x\\\", ethereumCollection.toString()))\\r\\n        );\\r\\n        Chainlink.add(request, \\\"path\\\", \\\"price\\\");\\r\\n\\r\\n        // send the request\\r\\n        requestId = sendChainlinkRequestTo(chainlinkNode, request, nodeFee);\\r\\n\\r\\n        _updateRequests[requestId] = UpdateRequest({syntheticCollection: msg.sender});\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function to process the oracle response (only callable from oracle)\\r\\n     * @param requestId the id of the request to the Chainlink oracle\\r\\n     * @param buybackPrice the new buyback price\\r\\n     */\\r\\n    function processBuybackPriceResponse(bytes32 requestId, uint256 buybackPrice)\\r\\n        public\\r\\n        recordChainlinkFulfillment(requestId)\\r\\n    {\\r\\n        UpdateRequest memory requestData = _updateRequests[requestId];\\r\\n\\r\\n        SyntheticCollectionManager(requestData.syntheticCollection).processBuybackPriceResponse(\\r\\n            requestId,\\r\\n            buybackPrice\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev whitelist collections in order to allow calling this contract\\r\\n     * (only router can whitelist after deploying the proxy, the router contract owns this one)\\r\\n     * @param collectionId the collection manager (sythetic collection from polygon)\\r\\n     */\\r\\n    function whitelistCollection(address collectionId) external onlyOwner {\\r\\n        _whitelistedCollections[collectionId] = true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x919e654f873bc3a607ed69b62088366679a8cedc659ff24835afd9443e81da6d\",\"license\":\"MIT\"},\"contracts/polygon/chainlink/RandomNumberConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../implementations/SyntheticCollectionManager.sol\\\";\\n\\n/**\\n * @dev the ownership will be transferred after deployment to the router contract\\n */\\ncontract RandomNumberConsumer is VRFConsumerBase, Ownable {\\n    bytes32 internal immutable keyHash;\\n    uint256 internal immutable fee;\\n\\n    mapping(bytes32 => address) private _requestIdToCollection;\\n    mapping(address => bool) private _whitelistedCollections;\\n\\n    /**\\n     * @dev constructor inherits VRFConsumerBase\\n     */\\n    constructor(VRFOracleInfo memory _oracleInfo)\\n        VRFConsumerBase(_oracleInfo.vrfCoordinator, _oracleInfo.linkToken)\\n    {\\n        keyHash = _oracleInfo.keyHash;\\n        fee = _oracleInfo.vrfFee;\\n    }\\n\\n    /**\\n     * @dev requests randomness\\n     */\\n    function getRandomNumber() external returns (bytes32 requestId) {\\n        require(_whitelistedCollections[msg.sender], \\\"Invalid requester\\\");\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\n\\n        requestId = requestRandomness(keyHash, fee);\\n        _requestIdToCollection[requestId] = msg.sender;\\n    }\\n\\n    /**\\n     * @dev callback function used by VRF Coordinator (only 200k gas allowed and should not revert)\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        SyntheticCollectionManager(_requestIdToCollection[requestId]).processFlipResult(\\n            randomness % 2,\\n            requestId\\n        );\\n    }\\n\\n    /**\\n     * @dev whitelist collections to get random from this contract\\n     */\\n    function whitelistCollection(address collectionId) external onlyOwner {\\n        _whitelistedCollections[collectionId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xa71f46afd6b6e71bcdd09beb83bccd29ac00021c5dcddd8b9a3d973beb5bb960\",\"license\":\"MIT\"},\"contracts/polygon/extensions/IERC20ManagedAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev allows to send funds from a managed account (infinite allowance)\\n */\\ninterface IERC20ManagedAccounts {\\n    function transferFromManaged(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x353fe2e73379fe78ed6aa9923e36307018a515cd792a22d3e7a9a0dacc6edffc\",\"license\":\"MIT\"},\"contracts/polygon/governance/FuturesProtocolParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\n/**\\n * @title future parameters controlled by governance\\n * @notice the owner of this contract is the timelock controller of the governance feature\\n */\\ncontract FuturesProtocolParameters is Ownable {\\n    int256 public minPoolMarginRatio;\\n    int256 public minInitialMarginRatio;\\n    int256 public minMaintenanceMarginRatio;\\n    int256 public minLiquidationReward;\\n    int256 public maxLiquidationReward;\\n    int256 public liquidationCutRatio;\\n    int256 public protocolFeeCollectRatio;\\n    address public futuresOracleAddress;\\n    int256 public futuresMultiplier;\\n    int256 public futuresFeeRatio;\\n    int256 public futuresFundingRateCoefficient;\\n    uint256 public oracleDelay;\\n\\n    event MinPoolMarginRatioUpdated(int256 from, int256 to);\\n    event MinInitialMarginRatioUpdated(int256 from, int256 to);\\n    event MinMaintenanceMarginRatioUpdated(int256 from, int256 to);\\n    event MinLiquidationRewardUpdated(int256 from, int256 to);\\n    event MaxLiquidationRewardUpdated(int256 from, int256 to);\\n    event LiquidationCutRatioUpdated(int256 from, int256 to);\\n    event ProtocolFeeCollectRatioUpdated(int256 from, int256 to);\\n    event FuturesOracleAddressUpdated(address from, address to);\\n    event FuturesMultiplierUpdated(int256 from, int256 to);\\n    event FuturesFeeRatioUpdated(int256 from, int256 to);\\n    event FuturesFundingRateCoefficientUpdated(int256 from, int256 to);\\n    event OracleDelayUpdated(uint256 from, uint256 to);\\n\\n    /**\\n     * @dev sets the default (initial) values of the parameters\\n     *      also transfers the ownership to the governance\\n     */\\n    constructor(\\n        MainParams memory mainParams,\\n        address _futuresOracleAddress,\\n        int256 _futuresMultiplier,\\n        int256 _futuresFeeRatio,\\n        int256 _futuresFundingRateCoefficient,\\n        uint256 _oracleDelay,\\n        address _governanceContractAddress\\n    ) {\\n        require(_futuresOracleAddress != address(0), \\\"Oracle address can't be zero\\\");\\n        require(_futuresMultiplier > 0, \\\"Invalid futures multiplier\\\");\\n        require(_futuresFeeRatio > 0, \\\"Invalid futures fee ratio\\\");\\n        require(_futuresFundingRateCoefficient > 0, \\\"Invalid futures funding rate coefficient\\\");\\n\\n        minPoolMarginRatio = mainParams.minPoolMarginRatio;\\n        minInitialMarginRatio = mainParams.minInitialMarginRatio;\\n        minMaintenanceMarginRatio = mainParams.minMaintenanceMarginRatio;\\n        minLiquidationReward = mainParams.minLiquidationReward;\\n        maxLiquidationReward = mainParams.maxLiquidationReward;\\n        liquidationCutRatio = mainParams.liquidationCutRatio;\\n        protocolFeeCollectRatio = mainParams.protocolFeeCollectRatio;\\n        futuresOracleAddress = _futuresOracleAddress;\\n        futuresMultiplier = _futuresMultiplier;\\n        futuresFeeRatio = _futuresFeeRatio;\\n        futuresFundingRateCoefficient = _futuresFundingRateCoefficient;\\n        oracleDelay = _oracleDelay;\\n\\n        // transfer ownership\\n        transferOwnership(_governanceContractAddress);\\n    }\\n\\n    function setMinPoolMarginRatio(int256 _minPoolMarginRatio) external onlyOwner {\\n        emit MinPoolMarginRatioUpdated(minPoolMarginRatio, _minPoolMarginRatio);\\n        minPoolMarginRatio = _minPoolMarginRatio;\\n    }\\n\\n    function setMinInitialMarginRatio(int256 _minInitialMarginRatio) external onlyOwner {\\n        emit MinInitialMarginRatioUpdated(minInitialMarginRatio, _minInitialMarginRatio);\\n\\n        minInitialMarginRatio = _minInitialMarginRatio;\\n    }\\n\\n    function setMinMaintenanceMarginRatio(int256 _minMaintenanceMarginRatio) external onlyOwner {\\n        emit MinMaintenanceMarginRatioUpdated(minMaintenanceMarginRatio, _minMaintenanceMarginRatio);\\n        minMaintenanceMarginRatio = _minMaintenanceMarginRatio;\\n    }\\n\\n    function setMinLiquidationReward(int256 _minLiquidationReward) external onlyOwner {\\n        emit MinLiquidationRewardUpdated(minLiquidationReward, _minLiquidationReward);\\n        minLiquidationReward = _minLiquidationReward;\\n    }\\n\\n    function setMaxLiquidationReward(int256 _maxLiquidationReward) external onlyOwner {\\n        emit MaxLiquidationRewardUpdated(maxLiquidationReward, _maxLiquidationReward);\\n        maxLiquidationReward = _maxLiquidationReward;\\n    }\\n\\n    function setLiquidationCutRatio(int256 _liquidationCutRatio) external onlyOwner {\\n        emit LiquidationCutRatioUpdated(liquidationCutRatio, _liquidationCutRatio);\\n        liquidationCutRatio = _liquidationCutRatio;\\n    }\\n\\n    function setProtocolFeeCollectRatio(int256 _protocolFeeCollectRatio) external onlyOwner {\\n        emit ProtocolFeeCollectRatioUpdated(protocolFeeCollectRatio, _protocolFeeCollectRatio);\\n        protocolFeeCollectRatio = _protocolFeeCollectRatio;\\n    }\\n\\n    function setFuturesOracleAddress(address futuresOracleAddress_) external onlyOwner {\\n        require(futuresOracleAddress_ != address(0), \\\"Oracle address can't be zero\\\");\\n        emit FuturesOracleAddressUpdated(futuresOracleAddress, futuresOracleAddress_);\\n        futuresOracleAddress = futuresOracleAddress_;\\n    }\\n\\n    function setFuturesMultiplier(int256 futuresMultiplier_) external onlyOwner {\\n        require(futuresMultiplier_ > 1 hours, \\\"Invalid futures multiplier\\\");\\n        emit FuturesMultiplierUpdated(futuresMultiplier, futuresMultiplier_);\\n        futuresMultiplier = futuresMultiplier_;\\n    }\\n\\n    function setFuturesFeeRatio(int256 futuresFeeRatio_) external onlyOwner {\\n        require(futuresFeeRatio_ > 1 hours, \\\"Invalid futures fee ratio\\\");\\n        emit FuturesFeeRatioUpdated(futuresFeeRatio_, futuresFeeRatio_);\\n        futuresFeeRatio = futuresFeeRatio_;\\n    }\\n\\n    function setFuturesFundingRateCoefficient(int256 futuresFundingRateCoefficient_) external onlyOwner {\\n        require(futuresFundingRateCoefficient_ > 1 hours, \\\"Invalid futures funding rate coefficient\\\");\\n        emit FuturesFundingRateCoefficientUpdated(\\n            futuresFundingRateCoefficient,\\n            futuresFundingRateCoefficient_\\n        );\\n        futuresFundingRateCoefficient = futuresFundingRateCoefficient_;\\n    }\\n\\n    function setOracleDelay(uint256 _oracleDelay) external onlyOwner {\\n        emit OracleDelayUpdated(oracleDelay, _oracleDelay);\\n        oracleDelay = _oracleDelay;\\n    }\\n}\\n\",\"keccak256\":\"0x751dfe159306ddc317229d6ad0b6a0c66b4d64e82827c071149a148fca0ac2d2\",\"license\":\"MIT\"},\"contracts/polygon/governance/ProtocolParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title parameters controlled by governance\\n * @notice the owner of this contract is the timelock controller of the governance feature\\n */\\ncontract ProtocolParameters is Ownable {\\n    // interval in seconds between the one flip to another in one lock contract\\n    uint256 public flippingInterval;\\n\\n    // amount of reward that the flipper gets if he is right on the outcome\\n    uint256 public flippingReward;\\n\\n    // amount of jots into play in each flip\\n    uint256 public flippingAmount;\\n\\n    // the duration of an NFT auction in seconds\\n    uint256 public auctionDuration;\\n\\n    // the period of grace to recover the nft after reaching 0 owner supply\\n    uint256 public recoveryThreshold;\\n\\n    // Address of the funding token for new manager\\n    address public fundingTokenAddress;\\n\\n    uint256 public stakerShare;\\n\\n    uint256 public liquidityPerpetualPercentage;\\n\\n    uint256 public liquidityUniswapPercentage;\\n\\n    event FlippingIntervalUpdated(uint256 from, uint256 to);\\n    event FlippingRewardUpdated(uint256 from, uint256 to);\\n    event FlippingAmountUpdated(uint256 from, uint256 to);\\n    event AuctionDurationUpdated(uint256 from, uint256 to);\\n    event RecoveryThresholdUpdated(uint256 from, uint256 to);\\n    event FundingTokenAddressUpdated(address from, address to);\\n    event StakerShareUpdated(uint256 from, uint256 to);\\n    event LiquidityPercentagesUpdated(\\n        uint256 perpetualFrom,\\n        uint256 uniswapFrom,\\n        uint256 perpetualTo,\\n        uint256 uniswapTo\\n    );\\n\\n    /**\\n     * @dev sets the default (initial) values of the parameters\\n     *      also transfers the ownership to the governance\\n     */\\n    constructor(\\n        uint256 flippingInterval_,\\n        uint256 flippingReward_,\\n        uint256 flippingAmount_,\\n        uint256 auctionDuration_,\\n        address governanceContractAddress_,\\n        address fundingTokenAddress_,\\n        uint256 liquidityPerpetualPercentage_,\\n        uint256 liquidityUniswapPercentage_\\n    ) {\\n        require(flippingReward_ > 0, \\\"Invalid Reward\\\");\\n        require(flippingAmount_ > 0, \\\"Invalid Amount\\\");\\n        require(flippingReward_ < flippingAmount_, \\\"Reward should be lower than Amount\\\");\\n        require(flippingInterval_ > 15 minutes, \\\"Flipping Interval should be greater than 15 minutes\\\");\\n        require(auctionDuration_ > 1 hours, \\\"Auction duration should be greater than 1 hour\\\");\\n        require(fundingTokenAddress_ != address(0), \\\"Funding token address can't be zero\\\");\\n        require(\\n            (liquidityPerpetualPercentage_ + liquidityUniswapPercentage_ == 100),\\n            \\\"uniswap and perpetual percentages must sum 100\\\"\\n        );\\n\\n        flippingInterval = flippingInterval_;\\n        flippingReward = flippingReward_;\\n        flippingAmount = flippingAmount_;\\n        auctionDuration = auctionDuration_;\\n        fundingTokenAddress = fundingTokenAddress_;\\n        liquidityPerpetualPercentage = liquidityPerpetualPercentage_;\\n        liquidityUniswapPercentage = liquidityUniswapPercentage_;\\n        stakerShare = 1e16;\\n\\n        // transfer ownership\\n        transferOwnership(governanceContractAddress_);\\n    }\\n\\n    function setFlippingInterval(uint256 flippingInterval_) external onlyOwner {\\n        require(flippingInterval_ > 15 minutes, \\\"Flipping Interval should be greater than 15 minutes\\\");\\n        emit FlippingIntervalUpdated(flippingInterval, flippingInterval_);\\n        flippingInterval = flippingInterval_;\\n    }\\n\\n    function setFlippingReward(uint256 flippingReward_) external onlyOwner {\\n        require(flippingReward_ > 0, \\\"Invalid Reward\\\");\\n        require(flippingReward_ < flippingAmount, \\\"Reward should be lower than Amount\\\");\\n        emit FlippingRewardUpdated(flippingReward, flippingReward_);\\n        flippingReward = flippingReward_;\\n    }\\n\\n    function setFlippingAmount(uint256 flippingAmount_) external onlyOwner {\\n        require(flippingAmount_ > 0, \\\"Invalid Amount\\\");\\n        require(flippingReward < flippingAmount_, \\\"Reward should be lower than Amount\\\");\\n        emit FlippingAmountUpdated(flippingAmount, flippingAmount_);\\n        flippingAmount = flippingAmount_;\\n    }\\n\\n    function setAuctionDuration(uint256 auctionDuration_) external onlyOwner {\\n        require(auctionDuration_ > 1 hours, \\\"Auction duration should be greater than 1 hour\\\");\\n        emit AuctionDurationUpdated(auctionDuration, auctionDuration_);\\n        auctionDuration = auctionDuration_;\\n    }\\n\\n    function setRecoveryThreshold(uint256 recoveryThreshold_) external onlyOwner {\\n        require(recoveryThreshold_ > 1 hours, \\\"Recovery threshold should be greater than 1 hour\\\");\\n        emit RecoveryThresholdUpdated(recoveryThreshold, recoveryThreshold_);\\n        recoveryThreshold = recoveryThreshold_;\\n    }\\n\\n    function setFundingTokenAddress(address fundingTokenAddress_) external onlyOwner {\\n        require(fundingTokenAddress_ != address(0), \\\"Funding token address can't be zero\\\");\\n        emit FundingTokenAddressUpdated(fundingTokenAddress, fundingTokenAddress_);\\n        fundingTokenAddress = fundingTokenAddress_;\\n    }\\n\\n    function setStakerShare(uint256 stakerShare_) external onlyOwner {\\n        require(stakerShare_ > 0, \\\"Staker share can't be 0\\\");\\n        require(stakerShare_ <= 1e18, \\\"Staker share too high\\\");\\n        emit StakerShareUpdated(stakerShare, stakerShare_);\\n        stakerShare = stakerShare_;\\n    }\\n\\n    function setLiquidityPercentages(\\n        uint256 liquidityUniswapPercentage_,\\n        uint256 liquidityPerpetualPercentage_\\n    ) external onlyOwner {\\n        require((liquidityUniswapPercentage_ + liquidityPerpetualPercentage_) == 100, \\\"Values must sum 100\\\");\\n\\n        emit LiquidityPercentagesUpdated(\\n            liquidityPerpetualPercentage,\\n            liquidityUniswapPercentage,\\n            liquidityPerpetualPercentage_,\\n            liquidityUniswapPercentage_\\n        );\\n\\n        liquidityPerpetualPercentage = liquidityPerpetualPercentage_;\\n        liquidityUniswapPercentage = liquidityUniswapPercentage_;\\n    }\\n}\\n\",\"keccak256\":\"0x5e3f2fddaf4863c67b1e7a246ebd0a7fc27db4ac0ccca8517049415e8eaa1db8\",\"license\":\"MIT\"},\"contracts/polygon/governance/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct MainParams {\\n    int256 minPoolMarginRatio;\\n    int256 minInitialMarginRatio;\\n    int256 minMaintenanceMarginRatio;\\n    int256 minLiquidationReward;\\n    int256 maxLiquidationReward;\\n    int256 liquidationCutRatio;\\n    int256 protocolFeeCollectRatio;\\n}\\n\",\"keccak256\":\"0x8121a2f034679ec2a98fe3d5906979582191b29ce6f15343e3096591cb06bb69\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Enums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nenum State {\\n    NEW,\\n    VERIFYING,\\n    VERIFIED,\\n    CHANGING\\n}\\n\",\"keccak256\":\"0x3d143a1f6fa319fd3b749bc8b9c36d00db0f51f6d301e812b62927df25fb487c\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Jot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"../extensions/IERC20ManagedAccounts.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\n\\r\\ncontract Jot is ERC20, IERC20ManagedAccounts, ERC20Burnable, AccessControl, Initializable {\\r\\n    bytes32 public constant ROUTER = keccak256(\\\"ROUTER\\\");\\r\\n    bytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\r\\n\\r\\n    // proxied values for the erc20 attributes\\r\\n    string private _proxiedName;\\r\\n    string private _proxiedSymbol;\\r\\n\\r\\n    /**\\r\\n     * @notice *swap address\\r\\n     */\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n\\r\\n    /**\\r\\n     * @notice pair address\\r\\n     */\\r\\n    address public uniswapV2Pair;\\r\\n\\r\\n    mapping(address => address) private _managers;\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    constructor() ERC20(\\\"Privi Jot Token Implementation\\\", \\\"pJOTI\\\") {}\\r\\n\\r\\n    function initialize(\\r\\n        string calldata _name,\\r\\n        string calldata _symbol,\\r\\n        address swapAddress,\\r\\n        address fundingTokenAddress\\r\\n    ) external initializer {\\r\\n        _proxiedName = _name;\\r\\n        _proxiedSymbol = _symbol;\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(ROUTER, msg.sender);\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(swapAddress);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), fundingTokenAddress);\\r\\n\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(\\r\\n            address(this),\\r\\n            fundingTokenAddress\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function mint(address account, uint256 amount) public onlyRole(MINTER) {\\r\\n        _mint(account, amount);\\r\\n    }\\r\\n\\r\\n    function burn(address account, uint256 amount) public onlyRole(MINTER) {\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev allows to send funds from a managed account (infinite allowance)\\r\\n     */\\r\\n    function transferFromManaged(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external virtual override {\\r\\n        require(_managers[sender] == msg.sender, \\\"The caller is not the manager of this account\\\");\\r\\n        _transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function setManager(address manager, address account) external onlyRole(ROUTER) {\\r\\n        _managers[account] = manager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _proxiedName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _proxiedSymbol;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9e72f55d150a30bfa0807d43e5a9ac2d5d69ce2361e23ffc4cbe0d59d0d32f2b\",\"license\":\"MIT\"},\"contracts/polygon/implementations/JotPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\r\\nimport \\\"../libraries/ProtocolConstants.sol\\\";\\r\\n\\r\\ncontract JotPool is ERC721, Initializable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    ProtocolParameters private immutable protocol;\\r\\n\\r\\n    struct Position {\\r\\n        uint256 id;\\r\\n        uint256 liquidity;\\r\\n        uint256 stake;\\r\\n        uint256 totalShares;\\r\\n    }\\r\\n\\r\\n    address public jot;\\r\\n    address public fundingToken;\\r\\n    uint256 public totalLiquidity;\\r\\n\\r\\n    uint256 public lastReward;\\r\\n    uint256 public cumulativeRevenue;\\r\\n    uint256 public totalShares;\\r\\n    uint256 public totalStaked;\\r\\n\\r\\n    string private _proxyName;\\r\\n    string private _proxySymbol;\\r\\n\\r\\n    Counters.Counter private idGen;\\r\\n\\r\\n    mapping(address => Position) private positions;\\r\\n\\r\\n    event LiquidityAdded(address provider, uint256 amount, uint256 mintedLiquidity);\\r\\n    event LiquidityRemoved(address provider, uint256 amount, uint256 liquidityBurnt);\\r\\n    event Staked(address staker, uint256 amount, uint256 positionId);\\r\\n    event Unstaked(address recipient, uint256 amount, uint256 reward);\\r\\n    event RewardsClaimed(address recipient, uint256 reward);\\r\\n\\r\\n    constructor(address _protocol) ERC721(\\\"\\\", \\\"\\\") {\\r\\n        require(_protocol != address(0), \\\"Invalid protocol address\\\");\\r\\n        protocol = ProtocolParameters(_protocol);\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _jot,\\r\\n        address _fundingToken,\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) external initializer {\\r\\n        require(_jot != address(0), \\\"Invalid Jot token\\\");\\r\\n        require(_fundingToken != address(0), \\\"Invalid funding token\\\");\\r\\n        jot = _jot;\\r\\n        fundingToken = _fundingToken;\\r\\n        _proxyName = _name;\\r\\n        _proxySymbol = _symbol;\\r\\n    }\\r\\n\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _proxyName;\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _proxySymbol;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n        \\r\\n        uint256 mintedLiquidity = (totalLiquidity > 0 && IERC20(jot).balanceOf(address(this)) > 0)\\r\\n             ? (totalLiquidity * amount) / IERC20(jot).balanceOf(address(this))\\r\\n             : 100;\\r\\n\\r\\n        positions[msg.sender].liquidity += mintedLiquidity;\\r\\n        totalLiquidity += mintedLiquidity;\\r\\n\\r\\n        emit LiquidityAdded(msg.sender, amount, mintedLiquidity);\\r\\n\\r\\n        _stake(msg.sender, amount);\\r\\n\\r\\n        IERC20(jot).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(uint256 amount) external {\\r\\n        require(positions[msg.sender].liquidity >= amount, \\\"Remove amount exceeds balance\\\");\\r\\n        uint256 liquidityBurnt = (IERC20(jot).balanceOf(address(this)) * amount) / totalLiquidity;\\r\\n        positions[msg.sender].liquidity -= amount;\\r\\n        totalLiquidity -= amount;\\r\\n\\r\\n        emit LiquidityRemoved(msg.sender, amount, liquidityBurnt);\\r\\n\\r\\n        _unstake(msg.sender, liquidityBurnt);\\r\\n\\r\\n        IERC20(jot).safeTransfer(msg.sender, liquidityBurnt);\\r\\n    }\\r\\n\\r\\n    function getLiquidityValue(uint256 amount) external view returns (uint256) {\\r\\n        return _getLiquidityValue(amount);\\r\\n    }\\r\\n\\r\\n    function getTotalLiquidityValue(address owner) external view returns (uint256) {\\r\\n        return _getLiquidityValue(positions[owner].liquidity);\\r\\n    }\\r\\n\\r\\n    function _getLiquidityValue(uint256 amount) internal view returns (uint256) {\\r\\n        if (amount > 0 && totalLiquidity > 0) {\\r\\n            return (IERC20(jot).balanceOf(address(this)) * amount) / totalLiquidity;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getPosition() external view returns (Position memory) {\\r\\n        return positions[msg.sender];\\r\\n    }\\r\\n\\r\\n    function stakeShares(uint256 amount) external {\\r\\n        require(IERC20(jot).balanceOf(msg.sender) >= amount, \\\"Insufficient Jot balance\\\");\\r\\n        address to = msg.sender;\\r\\n        _stake(to, amount);\\r\\n        IERC20(jot).safeTransferFrom(to, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function _stake(address to, uint256 amount) internal {\\r\\n        (uint256 ftBalance, uint256 x) = _sync();\\r\\n        cumulativeRevenue += x;\\r\\n        lastReward = ftBalance;\\r\\n        totalStaked += amount;\\r\\n\\r\\n        uint256 id = positions[to].id;\\r\\n        if (id == 0) {\\r\\n            idGen.increment();\\r\\n            id = idGen.current();\\r\\n            positions[to].id = id;\\r\\n            _mint(to, id);\\r\\n        }\\r\\n\\r\\n        positions[to].stake += amount;\\r\\n        positions[to].totalShares = totalShares;\\r\\n\\r\\n        emit Staked(msg.sender, amount, id);\\r\\n    }\\r\\n\\r\\n    function _sync() internal returns (uint256, uint256) {\\r\\n        uint256 ftBalance = IERC20(fundingToken).balanceOf(address(this));\\r\\n        uint256 x = ftBalance - lastReward;\\r\\n\\r\\n        if (totalStaked != 0) {\\r\\n            totalShares += (x * protocol.stakerShare()) / totalStaked;\\r\\n        }\\r\\n\\r\\n        return (ftBalance, x);\\r\\n    }\\r\\n\\r\\n    function unstakeShares(uint256 amount) external {\\r\\n        _unstake(msg.sender, amount);\\r\\n        IERC20(jot).transfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function _unstake(address to, uint256 amount) internal {\\r\\n        require(positions[to].stake >= amount, \\\"Insufficient stake balance\\\");\\r\\n        (uint256 ftBalance, ) = _sync();\\r\\n\\r\\n        uint256 reward = _getReward(to);\\r\\n        lastReward = ftBalance - reward;\\r\\n\\r\\n        if (amount == positions[to].stake) {\\r\\n            _burn(positions[to].id);\\r\\n            delete positions[to];\\r\\n        } else {\\r\\n            positions[to].stake -= amount;\\r\\n            positions[to].totalShares = totalShares;\\r\\n        }\\r\\n        totalStaked -= amount;\\r\\n\\r\\n        emit Unstaked(msg.sender, amount, reward);\\r\\n\\r\\n        IERC20(fundingToken).transfer(msg.sender, reward);\\r\\n    }\\r\\n\\r\\n    function claimRewards() external {\\r\\n        (uint256 ftBalance, ) = _sync();\\r\\n\\r\\n        address owner = msg.sender;\\r\\n        uint256 reward = _getReward(owner);\\r\\n        lastReward = ftBalance - reward;\\r\\n        positions[owner].totalShares = totalShares;\\r\\n\\r\\n        emit RewardsClaimed(msg.sender, reward);\\r\\n\\r\\n        IERC20(fundingToken).transfer(msg.sender, reward);\\r\\n    }\\r\\n\\r\\n    function getReward() external view returns (uint256 reward) {\\r\\n        reward = _getReward(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _getReward(address owner) internal view returns (uint256 reward) {\\r\\n        reward = ((totalShares - positions[owner].totalShares) * positions[owner].stake) / 10**18;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdd5ba9f09fc5c7df40160f9b38a0f8174fa1559571c929d13a43f7a5dedcd825\",\"license\":\"MIT\"},\"contracts/polygon/implementations/LiquidityCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\r\\nimport \\\"./Structs.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\nimport \\\"./SyntheticCollectionManager.sol\\\";\\r\\n\\r\\ncontract LiquidityCalculator is AccessControl, Initializable {\\r\\n\\r\\n    /// @notice role of the manager contract\\r\\n    bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\r\\n\\r\\n    address private _managerAddress;\\r\\n    address private _swapAddress;\\r\\n    address private _perpetualPoolLiteAddress;\\r\\n    address private _fundingTokenAddress;\\r\\n    address private _jotAddress;\\r\\n\\r\\n    ProtocolParameters public protocol;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function initialize(\\r\\n        address managerAddress_,\\r\\n        address swapAddress_,\\r\\n        address protocol_,\\r\\n        address perpetualPoolLiteAddress_,\\r\\n        address fundingTokenAddress_,\\r\\n        address jotAddress_\\r\\n    ) external initializer {\\r\\n        _managerAddress = managerAddress_;\\r\\n        _swapAddress = swapAddress_;\\r\\n        _perpetualPoolLiteAddress = perpetualPoolLiteAddress_;\\r\\n        _fundingTokenAddress = fundingTokenAddress_;\\r\\n        _jotAddress = jotAddress_;\\r\\n        protocol = ProtocolParameters(protocol_);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getAvailableFundingPerpetual(TokenData memory token) external view returns(uint256) {\\r\\n\\r\\n        // Perpetual Pool and Uniswap liquidity percentages\\r\\n        uint256 liquidityPerpetualPercentage = protocol.liquidityPerpetualPercentage();\\r\\n        // Token funding tokens owned by nft owner\\r\\n        uint256 liquiditySold = token.liquiditySold;\\r\\n        // Amount in Funding that will go to PerpetualPoolLite\\r\\n        uint256 perpetualFundingLiquidity = liquiditySold / 100 * liquidityPerpetualPercentage;\\r\\n\\r\\n        return perpetualFundingLiquidity;\\r\\n    }\\r\\n\\r\\n    function getAccruedReward(address pairAddress, uint256 liquidityTokenBalance) external view returns(uint256 token0Reward, uint256 token1Reward) {\\r\\n        IUniswapV2Pair uniswapV2Pair = IUniswapV2Pair(pairAddress);\\r\\n        \\r\\n        (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            \\r\\n        ) =  uniswapV2Pair.getReserves();\\r\\n\\r\\n        uint256 totalSupply = uniswapV2Pair.totalSupply();\\r\\n\\r\\n        if (totalSupply == 0) {\\r\\n            return (0, 0);\\r\\n        }\\r\\n\\r\\n        if (reserve0 == 0) {\\r\\n            token0Reward = 0;\\r\\n        } else {\\r\\n            token0Reward = uint256(reserve0) / totalSupply * liquidityTokenBalance;\\r\\n        }\\r\\n\\r\\n        if(reserve1 == 0) {\\r\\n            token1Reward = 0;\\r\\n        } else {\\r\\n            token1Reward = uint256(reserve1) / totalSupply * liquidityTokenBalance;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev helper for the execute buyback function\\r\\n     */\\r\\n    function getFundingLeftAndBuybackAmount(uint256 total_, uint256 fundingLiquidity_, uint256 JOT_SUPPLY, uint256 buybackPrice)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 jotsLeft,\\r\\n            uint256 fundingLeft,\\r\\n            uint256 buybackAmount\\r\\n        )\\r\\n    {\\r\\n        // Starting funding left\\r\\n        fundingLeft = fundingLiquidity_;\\r\\n\\r\\n        // If owner has enough balance buybackAmount is zero\\r\\n\\r\\n        if (total_ > JOT_SUPPLY) {\\r\\n            buybackAmount = 0;\\r\\n            jotsLeft = total_ - JOT_SUPPLY;\\r\\n        } else {\\r\\n            // If owner has some funding tokens left\\r\\n            if (fundingLeft > 0) {\\r\\n                // How many jots you can buy with the funding tokens\\r\\n                uint256 fundingToJots = (fundingLeft * buybackPrice) / 10**18;\\r\\n                // if there's enough funding for buyback\\r\\n                // then return 0 as buybackAmount and the remaining funding\\r\\n                if ((fundingToJots + total_) > JOT_SUPPLY) {\\r\\n                    uint256 remainingJots = JOT_SUPPLY - total_;\\r\\n                    uint256 requiredFunding = (remainingJots * buybackPrice) / 10**18;\\r\\n                    fundingLeft -= requiredFunding;\\r\\n                    buybackAmount = 0;\\r\\n                }\\r\\n                // if there isn't enough funding for buyback\\r\\n                else {\\r\\n                    buybackAmount = (JOT_SUPPLY - total_ - fundingToJots);\\r\\n                    fundingLeft = 0;\\r\\n                }\\r\\n            } else {\\r\\n                buybackAmount = ((JOT_SUPPLY - total_) * buybackPrice) / 10**18;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x68b58200928d36072bfbc3fe5a83c3a93023562d86e34bdac752f349c80e2cd7\",\"license\":\"MIT\"},\"contracts/polygon/implementations/RedemptionPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./Jot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice funds paid by owners on buyback events are sent to this contract\\r\\n * @author priviprotocol\\r\\n */\\r\\ncontract RedemptionPool is Initializable, AccessControl {\\r\\n    // the role for the corresponding synthetic collection manager\\r\\n    bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\r\\n\\r\\n    /// @notice the address of the jot corresponding token\\r\\n    address public jotAddress;\\r\\n\\r\\n    /// @notice the address of the funding token used\\r\\n    address public fundingTokenAddress;\\r\\n\\r\\n    /// @notice the address of the synthetic collection\\r\\n    address public managerAddress;\\r\\n\\r\\n    /// @notice the total value in funding token available to redeem\\r\\n    uint256 public totalLiquidityToRedeeem;\\r\\n\\r\\n    /// @notice the total value in jots available to redeem\\r\\n    uint256 public jotsToRedeem;\\r\\n\\r\\n    /// @dev the initializer modifier is to lock the implementation initialization\\r\\n    constructor() initializer {} // solhint-disable-line\\r\\n\\r\\n    /**\\r\\n     * @dev initialize the proxy contract\\r\\n     * @param jot_ the address of the jot corresponding token\\r\\n     * @param fundingToken_ the address of the funding token\\r\\n     */\\r\\n    function initialize(\\r\\n        address jot_,\\r\\n        address fundingToken_,\\r\\n        address syntheticCollection_\\r\\n    ) external initializer {\\r\\n        require(jot_ != address(0), \\\"Invalid Jot token\\\");\\r\\n        require(fundingToken_ != address(0), \\\"Invalid funding token\\\");\\r\\n\\r\\n        jotAddress = jot_;\\r\\n        fundingTokenAddress = fundingToken_;\\r\\n        managerAddress = syntheticCollection_;\\r\\n\\r\\n        // setup the roles for the access control\\r\\n        _setupRole(MANAGER, syntheticCollection_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev setter for redeemable values updates (only from collection manager)\\r\\n     * @param liquidity_ the increase on redeemable liquidity\\r\\n     * @param jots_ the increase on redeemable jots\\r\\n     */\\r\\n    function addRedemableBalance(uint256 liquidity_, uint256 jots_) external onlyRole(MANAGER) {\\r\\n        totalLiquidityToRedeeem += liquidity_;\\r\\n        jotsToRedeem += jots_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows to retrieve funding token from jots, to burn the supply left\\r\\n     *         by buyback calls without enough owner supply\\r\\n     *\\r\\n     *         the user should approve the jots to be burned before calling this function\\r\\n     *\\r\\n     * @param amountOfJots_ the amount of jots to burn\\r\\n     */\\r\\n    function redeem(uint256 amountOfJots_) external {\\r\\n        require(amountOfJots_ > 0, \\\"Amount should be greater than 0\\\");\\r\\n        require(jotsToRedeem >= amountOfJots_, \\\"Not enough tokens left\\\");\\r\\n\\r\\n        uint256 amountToGive = (totalLiquidityToRedeeem * amountOfJots_) / jotsToRedeem;\\r\\n\\r\\n        totalLiquidityToRedeeem -= amountToGive;\\r\\n        jotsToRedeem -= amountOfJots_;\\r\\n\\r\\n        // transfer the funds and burn the jots\\r\\n        IERC20(fundingTokenAddress).transfer(msg.sender, amountToGive);\\r\\n        Jot(jotAddress).burnFrom(msg.sender, amountOfJots_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5b81d7e2b96846376fcf0c3f81fcae3391fe8f8fd004864e1627c7641d60eb3d\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Enums.sol\\\";\\n\\nstruct TokenData {\\n    uint256 originalTokenID;\\n    uint256 ownerSupply;\\n    uint256 sellingSupply;\\n    uint256 soldSupply;\\n    uint256 liquiditySold;\\n    uint256 fractionPrices;\\n    uint256 lastFlipTime;\\n    uint256 liquidityTokenBalance;\\n    uint256 perpetualFuturesLShares;\\n    State state;\\n}\\n\\nstruct Flip {\\n    uint256 tokenId;\\n    uint64 prediction;\\n    address player;\\n}\\n\\nstruct ChangeNonce {\\n    uint256 nonce;\\n    uint256 newTokenId;\\n    address owner;\\n}\\n\",\"keccak256\":\"0x5f29fd951cc9526f1277ef310f4c36ad0714985f2e923835acedc8429483c3ed\",\"license\":\"MIT\"},\"contracts/polygon/implementations/SyntheticCollectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LiquidityCalculator.sol\\\";\\nimport \\\"../libraries/SyntheticTokenLibrary.sol\\\";\\nimport \\\"../extensions/IERC20ManagedAccounts.sol\\\";\\nimport \\\"../chainlink/OracleStructs.sol\\\";\\nimport \\\"../libraries/ProtocolConstants.sol\\\";\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\nimport \\\"../Interfaces.sol\\\";\\nimport \\\"./Jot.sol\\\";\\nimport \\\"./JotPool.sol\\\";\\nimport \\\"./RedemptionPool.sol\\\";\\nimport \\\"./Structs.sol\\\";\\nimport \\\"./Enums.sol\\\";\\n\\n/**\\n * @title synthetic collection abstraction contract\\n * @author priviprotocol\\n */\\ncontract SyntheticCollectionManager is AccessControl, Initializable {\\n    using SafeERC20 for IERC20;\\n    using SyntheticTokenLibrary for TokenData;\\n\\n    /// @notice role of the router contract\\n    bytes32 public constant ROUTER = keccak256(\\\"ROUTER\\\");\\n\\n    /// @notice role of the auctions manager fabric contract\\n    bytes32 public constant AUCTION_MANAGER = keccak256(\\\"AUCTION_MANAGER\\\");\\n\\n    /// @notice role of the vrf chainlink oracle\\n    bytes32 public constant RANDOM_ORACLE = keccak256(\\\"RANDOM_ORACLE\\\");\\n\\n    /// @notice role of the polygon validator chainlink oracle for verifications\\n    bytes32 public constant VALIDATOR_ORACLE = keccak256(\\\"VALIDATOR_ORACLE\\\");\\n\\n    // address of the vrf chainlink oracle contract\\n    address private immutable _randomConsumerAddress;\\n\\n    // address of the polygon validator chainlink oracle contract\\n    address private immutable _validatorAddress;\\n\\n    /// @notice the address of the auctions manager fabric contract\\n    address public AuctionsManagerAddress;\\n\\n    /// @notice the address of the protocol router\\n    address public syntheticProtocolRouterAddress;\\n\\n    address public perpetualPoolLiteAddress;\\n\\n    address private _swapAddress;\\n\\n    address private _liquidityCalculatorAddress;\\n\\n    /// @dev mapping the request id from Chainlink with the flip input data\\n    mapping(bytes32 => Flip) private _flips;\\n\\n    mapping(uint256 => uint256) private _originalToSynthetic;\\n\\n    mapping(uint256 => bool) private canFlip;\\n\\n    address public protocol;\\n\\n    /// @notice address of the original collection\\n    address public originalCollectionAddress;\\n\\n    /// @notice jot Address for this collection\\n    address public jotAddress;\\n\\n    /// @notice funding token address\\n    address public fundingTokenAddress;\\n\\n    uint256 public buybackPrice;\\n    uint256 private _buybackPriceLastUpdate;\\n\\n    /// @notice data for each token\\n    mapping(uint256 => TokenData) public tokens;\\n\\n    /// @dev the nonce to avoid double verification (quantity of exits for original token id)\\n    mapping(uint256 => uint256) public nonces;\\n\\n    /**\\n     * @dev nonce to count the changes of an original collection token id\\n     *      in order to avoid double change (with the second one keeping the synthetic playing)\\n     */\\n    mapping(uint256 => ChangeNonce) public changeNonces;\\n\\n    mapping(uint256 => mapping(uint256 => address)) public ownersByNonce;\\n\\n    /// @notice Synthetic NFT Address  for this collection\\n    address public erc721address;\\n\\n    address public jotPool;\\n    address public redemptionPool;\\n\\n    event CoinFlipped(\\n        bytes32 indexed requestId,\\n        address indexed player,\\n        uint256 indexed tokenId,\\n        uint256 prediction\\n    );\\n\\n    event FlipProcessed(\\n        bytes32 indexed requestId,\\n        uint256 indexed tokenId,\\n        uint256 prediction,\\n        uint256 randomResult\\n    );\\n\\n    event VerificationRequested(bytes32 indexed requestId, address from, uint256 tokenId);\\n\\n    event VerifyResponseReceived(\\n        bytes32 indexed requestId,\\n        address originalCollection,\\n        address syntheticCollection,\\n        uint256 tokenId,\\n        bool verified\\n    );\\n\\n    event TokenReassigned(uint256 tokenID, address newOwner);\\n\\n    event BuybackPriceUpdateRequested(bytes32 requestId);\\n    event BuybackPriceUpdated(bytes32 requestId, uint256 price);\\n\\n    //event LiquidityAddedToFuturePool(uint256 tokenId, uint256 fundingSent, uint256 lShares);\\n\\n    event LiquidityAddedToQuickswap(\\n        uint256 tokenId,\\n        uint256 jotAmount,\\n        uint256 fundingAmount,\\n        uint256 liquidity\\n    );\\n\\n    //event LiquidityRemovedFromFuturePool(uint256 tokenId, uint256 fundingReceived, uint256 lShares);\\n\\n    event LiquidityRemovedFromQuickswap(\\n        uint256 tokenId,\\n        uint256 jotAmount,\\n        uint256 fundingAmount,\\n        uint256 liquidity\\n    );\\n\\n    /**\\n     * @dev initializes some immutable variables and lock the implementation contract\\n     *      for further initializations (with the initializer modifier)\\n     *\\n     * @param randomConsumerAddress_ the address of the vrf Chainlink node\\n     * @param validatorAddress_ the address of the polygon validator Chainlink node\\n     */\\n    constructor(address randomConsumerAddress_, address validatorAddress_) initializer {\\n        _randomConsumerAddress = randomConsumerAddress_;\\n        _validatorAddress = validatorAddress_;\\n    }\\n\\n    /**\\n     * @dev initialize the proxy contract\\n     * @param jotAddress_ the address of the jot contract for this collection\\n     * @param originalCollectionAddress_ the original collection address\\n     * @param erc721address_ the address of the synthetic erc721 contract handled by this\\n     * @param auctionManagerAddress_ the auctions manager fabric address\\n     * @param protocol_ the address of the protocol parameters contract (governance parameters)\\n     * @param jotPool_ the address of the corresponding jot pool\\n     * @param redemptionPool_ the address of the corresponding redemption pool\\n     * @param swapAddress_ the address of the uniswapV2Pair\\n     */\\n    function initialize(\\n        address jotAddress_,\\n        address originalCollectionAddress_,\\n        address erc721address_,\\n        address auctionManagerAddress_,\\n        address protocol_,\\n        address jotPool_,\\n        address redemptionPool_,\\n        address swapAddress_,\\n        address liquidityCalculatorAddress_\\n    ) external initializer {\\n        jotAddress = jotAddress_;\\n        erc721address = erc721address_;\\n        originalCollectionAddress = originalCollectionAddress_;\\n        syntheticProtocolRouterAddress = msg.sender;\\n        AuctionsManagerAddress = auctionManagerAddress_;\\n        protocol = protocol_;\\n        jotPool = jotPool_;\\n        redemptionPool = redemptionPool_;\\n\\n        _swapAddress = swapAddress_;\\n\\n        _liquidityCalculatorAddress = liquidityCalculatorAddress_;\\n\\n        // we need to initialize this member here because we need to continue using this if governance changes it\\n        fundingTokenAddress = ProtocolParameters(protocol_).fundingTokenAddress();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(ROUTER, msg.sender);\\n        _setupRole(AUCTION_MANAGER, auctionManagerAddress_);\\n    }\\n\\n    /**\\n     * @dev allows the callback after finishing an auction to reassign the NFT to the winner\\n     * @param nftId_ the id of the auctioned synthetic token\\n     * @param newOwner_ the winner of the auction account\\n     */\\n    function reassignNFT(uint256 nftId_, address newOwner_) external onlyRole(AUCTION_MANAGER) {\\n        string memory metadata = ISyntheticNFT(erc721address).tokenURI(nftId_);\\n\\n        TokenData storage token = tokens[nftId_];\\n\\n        // Get original token ID\\n        uint256 originalID = token.originalTokenID;\\n\\n        // Burn synthetic NFT\\n        ISyntheticNFT(erc721address).safeBurn(nftId_);\\n\\n        // Mint new one\\n        uint256 newSyntheticID = ISyntheticNFT(erc721address).safeMint(newOwner_, metadata);\\n\\n        // Update original to synthetic mapping\\n        _originalToSynthetic[originalID] = newSyntheticID;\\n\\n        // Empty previous id\\n        tokens[nftId_] = TokenData(0, 0, 0, 0, 0, 0, 0, 0, 0, State.NEW);\\n\\n        // Fill new ID\\n        tokens[newSyntheticID] = TokenData(\\n            originalID,\\n            ProtocolConstants.JOT_SUPPLY,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            State.VERIFIED\\n        );\\n\\n        emit TokenReassigned(newSyntheticID, newOwner_);\\n    }\\n\\n    /**\\n     * @dev through this the router can register tokens\\n     * @param tokenId_ the original token id\\n     * @param supplyToKeep_ the supply that the owner decides to keep\\n     * @param priceFraction_ the price fraction for buying\\n     * @param nftOwner_ the owner of the synthetic nft\\n     * @param metadata_ the metadata (the ipfs url) of the nft\\n     * @return syntheticId the id of the newly registered token\\n     */\\n    function register(\\n        uint256 tokenId_,\\n        uint256 supplyToKeep_,\\n        uint256 priceFraction_,\\n        address nftOwner_,\\n        string memory metadata_\\n    ) public onlyRole(ROUTER) returns (uint256 syntheticId) {\\n        require(!isSyntheticNFTCreated(tokenId_), \\\"Synthetic NFT already generated!\\\");\\n\\n        syntheticId = ISyntheticNFT(erc721address).safeMint(nftOwner_, metadata_);\\n        uint256 sellingSupply = ProtocolConstants.JOT_SUPPLY - supplyToKeep_;\\n\\n        TokenData memory data = TokenData({\\n            originalTokenID: tokenId_,\\n            ownerSupply: supplyToKeep_,\\n            sellingSupply: sellingSupply,\\n            soldSupply: 0,\\n            liquiditySold: 0,\\n            fractionPrices: priceFraction_,\\n            lastFlipTime: 0,\\n            liquidityTokenBalance: 0,\\n            perpetualFuturesLShares: 0,\\n            state: State.NEW\\n        });\\n\\n        tokens[syntheticId] = data;\\n\\n        // lock the nft and make it auctionable\\n        if (supplyToKeep_ == 0) {\\n            IAuctionsManager(AuctionsManagerAddress).whitelistNFT(syntheticId);\\n        }\\n\\n        canFlip[syntheticId] = true;\\n    }\\n\\n    /**\\n     * @notice allows the caller to buy jots using the funding token\\n     * @param tokenId_ the id of the synthetic nft\\n     * @param amountToBuy_ the amount of jots to buy\\n     */\\n    function buyJotTokens(uint256 tokenId_, uint256 amountToBuy_) external {\\n        TokenData storage token = tokens[tokenId_];\\n        require(ISyntheticNFT(erc721address).exists(tokenId_), \\\"Token not registered\\\");\\n\\n        uint256 amountToPay = token.buyJotTokens(amountToBuy_);\\n\\n        // make the transfers\\n        IERC20(fundingTokenAddress).transferFrom(msg.sender, address(this), amountToPay);\\n        IJot(jotAddress).transfer(msg.sender, amountToBuy_);\\n    }\\n\\n    function withdrawFundingTokens(uint256 tokenId, uint256 amount) external {\\n        TokenData storage token = tokens[tokenId];\\n        require(!lockedNFT(tokenId), \\\"Token is locked!\\\");\\n        require(isOwner(tokenId, msg.sender), \\\"Only owner can withdraw\\\");\\n\\n        require(amount <= token.liquiditySold, \\\"Not enough balance\\\");\\n\\n        IERC20(fundingTokenAddress).transfer(msg.sender, amount);\\n\\n        token.liquiditySold -= amount;\\n    }\\n\\n    /**\\n     * @notice allows the caller to deposit jots\\n     * @param tokenId_ the id of the synthetic nft\\n     * @param amountToDeposit_ the amount of jots to deposit\\n     */\\n    function depositJotTokens(uint256 tokenId_, uint256 amountToDeposit_) external {\\n        TokenData storage token = tokens[tokenId_];\\n        require(isOwner(tokenId_, msg.sender), \\\"Only owner can deposit\\\");\\n\\n        token.depositJotTokens(amountToDeposit_);\\n\\n        // transfer the balance (the Jot is ours, don't need to check)\\n        IJot(jotAddress).transferFrom(msg.sender, address(this), amountToDeposit_);\\n    }\\n\\n    function withdrawJotTokens(uint256 tokenId_, uint256 amountToWithdraw_) public {\\n        TokenData storage token = tokens[tokenId_];\\n        require(!lockedNFT(tokenId_), \\\"Token is locked!\\\");\\n        require(isOwner(tokenId_, msg.sender), \\\"Only owner can withdraw\\\");\\n\\n        require(amountToWithdraw_ <= token.ownerSupply, \\\"Not enough balance\\\");\\n        token.ownerSupply -= amountToWithdraw_;\\n\\n        IJot(jotAddress).transfer(msg.sender, amountToWithdraw_);\\n        if (token.ownerSupply == 0) {\\n            IAuctionsManager(AuctionsManagerAddress).whitelistNFT(tokenId_);\\n        }\\n    }\\n\\n    /**\\n     * @notice increase selling supply for a given NFT\\n     * @dev caller must be the owner of the NFT\\n     * @param tokenId_ the id of the synthetic nft\\n     * @param amount_ the amount of jots to transfer from supply\\n     */\\n    function increaseSellingSupply(uint256 tokenId_, uint256 amount_) public {\\n        require(ISyntheticNFT(erc721address).ownerOf(tokenId_) == msg.sender, \\\"Only owner can increase\\\");\\n\\n        // delegate to the external library\\n        tokens[tokenId_].increaseSellingSupply(amount_);\\n\\n        // lock the nft and make it auctionable\\n        if (tokens[tokenId_].ownerSupply == 0) {\\n            IAuctionsManager(AuctionsManagerAddress).whitelistNFT(tokenId_);\\n        }\\n    }\\n\\n    /**\\n     * @notice decrease selling supply for a given NFT\\n     * @dev caller must be the owner of the NFT\\n     * @param tokenId_ the id of the synthetic nft\\n     * @param amount_ the amount of jots to transfer to supply\\n     */\\n    function decreaseSellingSupply(uint256 tokenId_, uint256 amount_) public {\\n        require(ISyntheticNFT(erc721address).ownerOf(tokenId_) == msg.sender, \\\"Only owner allowed\\\");\\n\\n        tokens[tokenId_].decreaseSellingSupply(amount_);\\n    }\\n\\n    /**\\n     * @notice update the price of a fraction for a given NFT\\n     * @dev caller must be the owner of the NFT\\n     * @param tokenId_ the id of the synthetic nft\\n     * @param newFractionPrice_ the new value of the fraction price\\n     */\\n    function updatePriceFraction(uint256 tokenId_, uint256 newFractionPrice_) public {\\n        require(ISyntheticNFT(erc721address).ownerOf(tokenId_) == msg.sender, \\\"Only owner allowed\\\");\\n        tokens[tokenId_].updatePriceFraction(newFractionPrice_);\\n    }\\n\\n    /**\\n     * @notice add available liquidity to Perpetual Pool\\n     */\\n    function addLiquidityToFuturePool(uint256 tokenId, uint256 amount) public {\\n        require(IERC721(erc721address).ownerOf(tokenId) == msg.sender, \\\"Should own NFT\\\");\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(amount <= tokens[tokenId].liquiditySold, \\\"Amount is greater than available funding\\\");\\n\\n        IERC20(fundingTokenAddress).approve(perpetualPoolLiteAddress, amount);\\n        uint256 lShares = IPerpetualPoolLite(perpetualPoolLiteAddress).addLiquidityGetlShares(amount);\\n        tokens[tokenId].liquiditySold -= amount;\\n        tokens[tokenId].perpetualFuturesLShares += lShares;\\n\\n        //emit LiquidityAddedToFuturePool(tokenId, amount, lShares);\\n    }\\n\\n    /**\\n     * @notice add available liquidity for a given token to UniSwap pool\\n     */\\n    function addLiquidityToQuickswap(uint256 tokenId, uint256 amount) public {\\n        TokenData storage token = tokens[tokenId];\\n        require(IERC721(erc721address).ownerOf(tokenId) == msg.sender, \\\"Should own NFT\\\");\\n        require(token.soldSupply > 0, \\\"soldSupply is zero\\\");\\n        require(amount <= token.liquiditySold, \\\"Amount is greater than available funding\\\");\\n\\n        IUniswapV2Pair uniswapV2Pair = IUniswapV2Pair(poolAddress());\\n\\n        (uint112 jotReserves, uint112 fundingReserves, ) = uniswapV2Pair.getReserves();\\n\\n        require(jotReserves > 0 && fundingReserves > 0, \\\"No reserves available!\\\");\\n\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_swapAddress);\\n\\n        // Approve Uniswap address\\n        IJot(jotAddress).approve(_swapAddress, token.ownerSupply);\\n        IERC20(fundingTokenAddress).approve(_swapAddress, amount);\\n\\n\\n        // add the liquidity to Uniswapp\\n        (uint256 amountA, uint256 amountB, uint256 liquidity) = uniswapV2Router.addLiquidity(\\n            jotAddress,\\n            fundingTokenAddress,\\n            token.ownerSupply,\\n            amount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this),\\n            block.timestamp // solhint-disable-line\\n        );\\n\\n        // Update balances\\n        token.ownerSupply -= amountA;\\n        token.liquiditySold -= amountB;\\n        token.liquidityTokenBalance += liquidity;\\n    }\\n\\n    function removeLiquidityFromPool(uint256 tokenId) external onlyRole(AUCTION_MANAGER) {\\n        uint256 lShares = tokens[tokenId].perpetualFuturesLShares;\\n        if(lShares > 0) {\\n            _withdrawLiquidityFromFuturePool(tokenId, lShares);\\n        }\\n        \\n        uint256 liquidityAvailable = tokens[tokenId].liquidityTokenBalance;\\n        if(liquidityAvailable > 0) {\\n            _withdrawLiquidityFromQuickswap(tokenId, liquidityAvailable);\\n        }\\n    }\\n\\n    function withdrawLiquidityFromFuturePool(uint256 tokenId, uint256 amount) external {\\n        require(IERC721(erc721address).ownerOf(tokenId) == msg.sender, \\\"Should own NFT\\\");\\n        _withdrawLiquidityFromFuturePool(tokenId, amount);\\n    }\\n\\n    function _withdrawLiquidityFromFuturePool(uint256 tokenId, uint256 amount) internal {\\n        require(amount > 0, \\\"Amount can't be zero\\\");\\n        \\n        require(amount <= tokens[tokenId].perpetualFuturesLShares, \\\"Not enough balance\\\");\\n\\n        uint256 balanceBefore = IERC20(fundingTokenAddress).balanceOf(address(this));\\n\\n        IPerpetualPoolLite(perpetualPoolLiteAddress).removeLiquidity(amount);\\n\\n        uint256 balanceAfter = IERC20(fundingTokenAddress).balanceOf(address(this));\\n\\n        tokens[tokenId].liquiditySold += (balanceAfter - balanceBefore);\\n        tokens[tokenId].perpetualFuturesLShares -= amount;\\n\\n        //emit LiquidityRemovedFromFuturePool(tokenId, (balanceAfter - balanceBefore), amount);\\n    }\\n\\n    function withdrawLiquidityFromQuickswap(uint256 tokenId, uint256 amount) external {\\n        require(IERC721(erc721address).ownerOf(tokenId) == msg.sender, \\\"Should own NFT\\\");\\n        _withdrawLiquidityFromQuickswap(tokenId, amount);\\n    }\\n\\n    function _withdrawLiquidityFromQuickswap(uint256 tokenId, uint256 amount)\\n        internal\\n        returns (uint256 jotAmountExecuted, uint256 fundingAmountExecuted)\\n    {\\n        TokenData storage token = tokens[tokenId];\\n\\n        if (amount == 0) {\\n            return (0,0);\\n        }\\n        require(token.liquidityTokenBalance >= amount, \\\"There's not enough liquidity available\\\");\\n\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_swapAddress);\\n        IUniswapV2Pair uniswapV2Pair = IUniswapV2Pair(poolAddress());\\n\\n        uniswapV2Pair.approve(_swapAddress, amount);\\n\\n        (address token0, address token1) = jotAddress < fundingTokenAddress ? (jotAddress, fundingTokenAddress) : (fundingTokenAddress, jotAddress);\\n\\n        (uint256 amount0, uint256 amount1) = uniswapV2Router.removeLiquidity(\\n            token0,\\n            token1,\\n            amount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp // solhint-disable-line\\n        );\\n\\n        (jotAmountExecuted, fundingAmountExecuted) = jotAddress < fundingTokenAddress ? (amount0, amount1) : (amount1, amount0);\\n\\n        // Update balances\\n        token.ownerSupply += jotAmountExecuted;\\n        token.liquiditySold += fundingAmountExecuted;\\n        token.liquidityTokenBalance += amount;\\n\\n        //emit LiquidityRemovedFromQuickswap(tokenId, jotAmountExecuted, fundingAmountExecuted, amount);\\n    }\\n\\n    /**\\n     * @notice Claim Liquidity Tokens\\n     */\\n    function claimLiquidityTokens(uint256 tokenId, uint256 amount) public {\\n        require(isOwner(tokenId, msg.sender), \\\"You are not the owner\\\");\\n\\n        uint256 availableAmount = tokens[tokenId].liquidityTokenBalance;\\n        require(amount <= availableAmount, \\\"Not enough liquidity available\\\");\\n\\n        tokens[tokenId].liquidityTokenBalance -= amount;\\n\\n        IUniswapV2Pair(poolAddress()).transfer(msg.sender, amount);\\n    }\\n\\n    function flipJot(uint256 tokenId, uint64 prediction) external {\\n        \\n        TokenData storage token = tokens[tokenId];\\n\\n        require(isAllowedToFlip(tokenId), \\\"Flip is not allowed yet\\\");\\n        require(!lockedNFT(tokenId), \\\"Token is locked!\\\");\\n\\n        token.lastFlipTime = block.timestamp; // solhint-disable-line\\n\\n        bytes32 requestId = IRandomNumberConsumer(_randomConsumerAddress).getRandomNumber();\\n        _flips[requestId] = Flip({tokenId: tokenId, prediction: prediction, player: msg.sender});\\n\\n        emit CoinFlipped(requestId, msg.sender, tokenId, prediction);\\n        \\n    }\\n\\n    function processFlipResult(uint256 randomNumber, bytes32 requestId) external onlyRole(RANDOM_ORACLE) {\\n        \\n        uint256 poolAmount;\\n        uint256 fAmount = ProtocolParameters(protocol).flippingAmount();\\n        uint256 fReward = ProtocolParameters(protocol).flippingReward();\\n\\n        Flip memory flip = _flips[requestId];\\n        TokenData storage token = tokens[flip.tokenId];\\n        uint256 ownerSupply = token.ownerSupply;\\n\\n        // avoid underflow in math operations\\n        if (fAmount > ownerSupply) {\\n            fAmount = ownerSupply;\\n        }\\n        if (fReward > fAmount) {\\n            fReward = fAmount;\\n        }\\n\\n        if (randomNumber == 0) {\\n            token.ownerSupply -= fAmount;\\n            if (randomNumber != flip.prediction) {\\n                poolAmount = fAmount;\\n            } else {\\n                poolAmount = fAmount - fReward;\\n                IERC20(jotAddress).safeTransfer(_flips[requestId].player, fReward);\\n            }\\n            if (poolAmount > 0) {\\n                IERC20(jotAddress).safeTransfer(jotPool, poolAmount);\\n            }\\n        } else {\\n            if (randomNumber != flip.prediction) {\\n                poolAmount = fAmount;\\n            } else {\\n                poolAmount = fAmount - fReward;\\n                IERC20ManagedAccounts(jotAddress).transferFromManaged(\\n                    jotPool,\\n                    _flips[requestId].player,\\n                    fReward\\n                );\\n            }\\n            if (poolAmount > 0) {\\n                token.ownerSupply += poolAmount;\\n                IERC20ManagedAccounts(jotAddress).transferFromManaged(jotPool, address(this), poolAmount);\\n            }\\n        }\\n\\n        // lock the nft and make it auctionable\\n        if (token.ownerSupply == 0) {\\n            IAuctionsManager(AuctionsManagerAddress).whitelistNFT(flip.tokenId);\\n        }\\n\\n        emit FlipProcessed(requestId, flip.tokenId, flip.prediction, randomNumber);\\n    }\\n\\n    function recoverToken(uint256 tokenId) external {\\n        require(IAuctionsManager(AuctionsManagerAddress).isRecoverable(tokenId), \\\"Token is not recoverable\\\");\\n        require(isOwner(tokenId, msg.sender), \\\"Only owner allowed\\\");\\n\\n        // reverts on failure\\n        IERC20(jotAddress).safeTransferFrom(msg.sender, address(this), ProtocolConstants.JOT_SUPPLY);\\n\\n        tokens[tokenId].ownerSupply = ProtocolConstants.JOT_SUPPLY;\\n\\n        IAuctionsManager(AuctionsManagerAddress).blacklistNFT(tokenId);\\n    }\\n\\n    /**\\n     * @notice this method calls chainlink oracle and\\n     *         verifies if the NFT has been locked on NFTVaultManager. In addition\\n     *         gets the metadata of the NFT\\n     */\\n    function verify(uint256 tokenId) external {\\n        TokenData storage token = tokens[tokenId];\\n        require(ISyntheticNFT(erc721address).exists(tokenId), \\\"Token not registered\\\");\\n        require(token.state != State.VERIFIED, \\\"Token already verified\\\");\\n\\n        token.state = State.VERIFYING;\\n\\n        bytes32 requestId = IPolygonValidatorOracle(_validatorAddress).verifyTokenInCollection(\\n            originalCollectionAddress,\\n            tokenId,\\n            uint256(token.state),\\n            nonces[token.originalTokenID]\\n        );\\n\\n        emit VerificationRequested(requestId, msg.sender, tokenId);\\n    }\\n\\n    function processVerifyResponse(\\n        bytes32 requestId,\\n        VerifyRequest memory requestData,\\n        bool verified\\n    ) external onlyRole(VALIDATOR_ORACLE) {\\n        TokenData storage token = tokens[requestData.tokenId];\\n\\n        if (verified) {\\n            token.state = State.VERIFIED;\\n\\n            // mint the jots after verification\\n            Jot(jotAddress).mint(address(this), ProtocolConstants.JOT_SUPPLY);\\n        } else {\\n            token.state = requestData.previousState;\\n        }\\n\\n        emit VerifyResponseReceived(\\n            requestId,\\n            requestData.originalCollection,\\n            requestData.syntheticCollection,\\n            requestData.tokenId,\\n            verified\\n        );\\n    }\\n\\n    /**\\n     * @notice change an NFT for another one of the same collection\\n     */\\n    function change(\\n        uint256 syntheticId,\\n        uint256 newOriginalId,\\n        string memory metadata,\\n        address caller\\n    ) public onlyRole(ROUTER) {\\n        TokenData storage token = tokens[syntheticId];\\n\\n        // only can change tokens with supply\\n        require(token.ownerSupply > 0, \\\"Can't be changed\\\");\\n\\n        // should be verified\\n        require(token.state == State.VERIFIED, \\\"Token not verified\\\");\\n\\n        // caller must be token owner\\n        require(IERC721(erc721address).ownerOf(syntheticId) == caller, \\\"Should own NFT\\\");\\n\\n        // updates the nonce for change\\n        ChangeNonce storage cn = changeNonces[token.originalTokenID];\\n        cn.nonce += 1;\\n        cn.newTokenId = newOriginalId;\\n        cn.owner = caller;\\n\\n        token.state = State.CHANGING;\\n        delete _originalToSynthetic[token.originalTokenID];\\n        token.originalTokenID = newOriginalId;\\n        _originalToSynthetic[newOriginalId] = syntheticId;\\n\\n        ISyntheticNFT(erc721address).setMetadata(syntheticId, metadata);\\n    }\\n\\n    /**\\n     * @notice allows users to update buyback price for buyback\\n     */\\n    function updateBuybackPrice() external returns (bytes32 requestId) {\\n        requestId = IPolygonValidatorOracle(_validatorAddress).updateBuybackPrice(originalCollectionAddress);\\n\\n        emit BuybackPriceUpdateRequested(requestId);\\n    }\\n\\n    /**\\n     * @dev processes the oracle response for buyback price updates\\n     * @param requestId_ the id of the Chainlink request\\n     * @param buybackPrice_ the new buyback price\\n     */\\n    function processBuybackPriceResponse(bytes32 requestId_, uint256 buybackPrice_)\\n        external\\n        onlyRole(VALIDATOR_ORACLE)\\n    {\\n        buybackPrice = buybackPrice_;\\n        _buybackPriceLastUpdate = block.timestamp; // solhint-disable-line\\n\\n        emit BuybackPriceUpdated(requestId_, buybackPrice_);\\n    }\\n\\n    /**\\n     * @notice returns funds owned by token, in Jots and Funding, in contract and in UniSwap\\n     */\\n    function getAvailableJotsForBuyback(uint256 tokenId)\\n        public\\n        view\\n        returns (uint256 totalJots, uint256 totalFunding)\\n    {\\n        TokenData storage token = tokens[tokenId];\\n\\n        IUniswapV2Pair uniswapV2Pair = IUniswapV2Pair(poolAddress());\\n\\n        uint256 liquidity = token.liquidityTokenBalance;\\n\\n        (uint112 jotReserves, uint112 fundingReserves, ) = uniswapV2Pair.getReserves();\\n\\n        uint256 totalSupply = uniswapV2Pair.totalSupply();\\n\\n        uint256 jotLiquidity;\\n\\n        if (totalSupply > 0) {\\n            jotLiquidity = (liquidity * jotReserves) / totalSupply;\\n            // the funding liquidity is the total funding\\n            totalFunding = (liquidity * fundingReserves) / totalSupply;\\n        } else {\\n            totalFunding = fundingReserves;\\n        }\\n\\n        totalJots = token.ownerSupply + token.sellingSupply + jotLiquidity;\\n    }\\n\\n    function buybackRequiredAmount(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            uint256 buybackAmount,\\n            uint256 fundingLeft,\\n            uint256 jotsLeft\\n        )\\n    {\\n        require(!lockedNFT(tokenId), \\\"Token is locked!\\\");\\n\\n        (uint256 total, uint256 fundingLiquidity) = getAvailableJotsForBuyback(tokenId);\\n\\n        (jotsLeft, fundingLeft, buybackAmount) = LiquidityCalculator(\\n            _liquidityCalculatorAddress\\n        ).getFundingLeftAndBuybackAmount(total, fundingLiquidity, ProtocolConstants.JOT_SUPPLY, buybackPrice);\\n    }\\n\\n    /**\\n     * @notice Buy token back.\\n     * Caller needs to pre-approve a transaction worth the amount\\n     * returned by the getRequiredFundingForBuyback(uint256 tokenId) function\\n     */\\n    function buyback(uint256 tokenId) public {\\n        // solhint-disable-next-line\\n        require(block.timestamp < _buybackPriceLastUpdate + 5 minutes, \\\"Buyback price update required\\\");\\n        require(isOwner(tokenId, msg.sender), \\\"Only owner allowed\\\");\\n        require(!lockedNFT(tokenId), \\\"Token is locked!\\\");\\n\\n        // execute the buyback if needed and remove the liquidity\\n        _executeBuyback(tokenId);\\n\\n        // exit the protocol\\n        _exitProtocol(tokenId);\\n    }\\n\\n    /**\\n     * @dev helper for the buyback function\\n     */\\n    function _executeBuyback(uint256 tokenId) internal {\\n        TokenData storage token = tokens[tokenId];\\n\\n        // get available liquidity (owner + selling + liquidity + uniswap ))\\n        (, uint256 fundingLiquidity) = _withdrawLiquidityFromQuickswap(tokenId, token.liquidityTokenBalance);\\n        // TODO: get PerpetualPoolLite.getLiquidity\\n        //uint256 perpetualPoolLiteLiquidity;\\n\\n        uint256 total = token.ownerSupply + token.sellingSupply;\\n\\n        (uint256 jotsLeft, uint256 fundingLeft, uint256 buybackAmount) = LiquidityCalculator(\\n            _liquidityCalculatorAddress\\n        ).getFundingLeftAndBuybackAmount(\\n            total,\\n            fundingLiquidity,\\n            ProtocolConstants.JOT_SUPPLY,\\n            buybackPrice\\n        );\\n\\n        uint256 burned = total < ProtocolConstants.JOT_SUPPLY ? total : ProtocolConstants.JOT_SUPPLY;\\n\\n        // burn the jots\\n        Jot(jotAddress).burn(burned);\\n\\n        if (buybackAmount > 0) {\\n            // increase allowance to burn\\n            Jot(jotAddress).increaseAllowance(redemptionPool, ProtocolConstants.JOT_SUPPLY - burned);\\n\\n            // update redemption pool balance trackers\\n            RedemptionPool(redemptionPool).addRedemableBalance(buybackAmount, (buybackAmount / buybackPrice));\\n\\n            IERC20(fundingTokenAddress).transferFrom(msg.sender, redemptionPool, buybackAmount);\\n        }\\n\\n        if (fundingLeft > 0) {\\n            IERC20(fundingTokenAddress).transfer(msg.sender, fundingLeft);\\n        }\\n\\n        if (jotsLeft > 0) {\\n            IJot(jotAddress).transfer(msg.sender, jotsLeft);\\n        }\\n    }\\n\\n    /**\\n     * @dev allows to exit the protocol (retrieve the token)\\n     */\\n    function _exitProtocol(uint256 tokenId) internal {\\n        TokenData storage token = tokens[tokenId];\\n\\n        // increase nonce to avoid double verification\\n        uint256 currentNonce = nonces[token.originalTokenID];\\n        ownersByNonce[token.originalTokenID][currentNonce] = msg.sender;\\n        nonces[token.originalTokenID] = currentNonce + 1;\\n\\n        // Burn synthetic token\\n        safeBurn(tokenId);\\n\\n        // free space and get refunds\\n        delete _originalToSynthetic[token.originalTokenID];\\n        delete tokens[tokenId];\\n    }\\n\\n    /**\\n     * @dev burn a token\\n     */\\n    function safeBurn(uint256 tokenId) private {\\n        ISyntheticNFT(erc721address).safeBurn(tokenId);\\n    }\\n\\n    function setMetadata(uint256 tokenId, string memory metadata) public {\\n        TokenData storage token = tokens[tokenId];\\n        require(token.state != State.VERIFIED, \\\"Can't change metadata after verify\\\");\\n        require(token.state != State.VERIFYING, \\\"Can't change metadata while verifying\\\");\\n\\n        address tokenOwner = IERC721(erc721address).ownerOf(tokenId);\\n        require(msg.sender == tokenOwner, \\\"You are not the owner of the NFT!\\\");\\n        ISyntheticNFT(erc721address).setMetadata(tokenId, metadata);\\n    }\\n\\n    function exchangeOwnerJot(uint256 tokenId, uint256 amount) external {\\n        require(tokens[tokenId].ownerSupply >= amount, \\\"Exchange amount exceeds balance\\\");\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_swapAddress);\\n        address[] memory path = new address[](2);\\n        path[0] = jotAddress;\\n        path[1] = fundingTokenAddress;\\n\\n        tokens[tokenId].ownerSupply -= amount;\\n        if (tokens[tokenId].ownerSupply == 0) {\\n            IAuctionsManager(AuctionsManagerAddress).whitelistNFT(tokenId);\\n        }\\n\\n        uniswapV2Router.swapExactTokensForTokens(\\n            amount,\\n            0, //we don't care about slippage\\n            path,\\n            msg.sender,\\n            // solhint-disable-next-line\\n            block.timestamp\\n        );\\n    }\\n\\n    function setPerpetualPoolLiteAddress(address perpetualPoolLiteAddress_) external onlyRole(ROUTER) {\\n        perpetualPoolLiteAddress = perpetualPoolLiteAddress_;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /*function isVerified(uint256 tokenId) public view returns (bool) {\\n        return (tokens[tokenId].state == State.VERIFIED);\\n    }*/\\n\\n    /*function getOriginalID(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].originalTokenID;\\n    }*/\\n\\n    /*function getTokenURI(uint256 tokenId) public view returns (string memory) {\\n        return ISyntheticNFT(erc721address).tokenURI(tokenId);\\n    }*/\\n\\n    /**\\n     * @notice get the owner of the NFT\\n     * @param tokenId_ the id of the NFT\\n     */\\n    /*function getSyntheticNFTOwner(uint256 tokenId_) public view returns (address) {\\n        return IERC721(erc721address).ownerOf(tokenId_);\\n    }*/\\n\\n    /**\\n     * @notice returns the Quickswap pool address\\n     */\\n    function poolAddress() public view returns (address) {\\n        //TODO: check if pool is initiated\\n        return IJot(jotAddress).uniswapV2Pair();\\n    }\\n\\n    /**\\n     * @notice public function. Checks if an NFT has\\n     * been already fractionalized\\n     */\\n    function isSyntheticNFTCreated(uint256 tokenId) public view returns (bool) {\\n        return _originalToSynthetic[tokenId] != 0;\\n    }\\n\\n    /**\\n     * @notice public function. Checks if an NFT has\\n     * been already fractionalised.\\n     */\\n    function isSyntheticNFTFractionalised(uint256 tokenId) public view returns (bool) {\\n        return tokens[tokenId].originalTokenID != 0;\\n    }\\n\\n    /*function getOwnerSupply(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].ownerSupply;\\n    }\\n\\n    function getSellingSupply(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].sellingSupply;\\n    }\\n\\n    function getSoldSupply(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].soldSupply;\\n    }\\n\\n    function getJotFractionPrice(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].fractionPrices;\\n    }*/\\n\\n    function getJotAmountLeft(uint256 tokenId) public view returns (uint256) {\\n        TokenData storage token = tokens[tokenId];\\n        return token.sellingSupply - token.soldSupply;\\n    }\\n\\n    function getSalePrice(uint256 tokenId, uint256 buyAmount) public view returns (uint256) {\\n        uint256 amount = (buyAmount * tokens[tokenId].fractionPrices);\\n        return amount;\\n    }\\n\\n    function lockedNFT(uint256 tokenId) public view returns (bool) {\\n        TokenData storage token = tokens[tokenId];\\n        return token.state != State.VERIFIED || token.ownerSupply == 0;\\n    }\\n\\n    /**\\n     * @notice returns the accrued reward by QuickSwap pool LP for a given fractionalization\\n     */\\n    function getAccruedReward(uint256 tokenId) public view returns (uint256, uint256) {\\n        return\\n            LiquidityCalculator(_liquidityCalculatorAddress).getAccruedReward(\\n                poolAddress(),\\n                tokens[tokenId].liquidityTokenBalance\\n            );\\n    }\\n\\n    function isAllowedToFlip(uint256 tokenId) public view returns (bool) {\\n        return\\n            canFlip[tokenId] &&\\n            ISyntheticNFT(erc721address).exists(tokenId) &&\\n            block.timestamp - tokens[tokenId].lastFlipTime >= ProtocolParameters(protocol).flippingInterval() && // solhint-disable-line\\n            IERC20(jotAddress).balanceOf(jotPool) > ProtocolParameters(protocol).flippingAmount() &&\\n            isSyntheticNFTFractionalised(tokenId);\\n    }\\n\\n    /*function getliquiditySold(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].liquiditySold;\\n    }\\n\\n    function getLiquidityTokens(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].liquidityTokenBalance;\\n    }*/\\n\\n    function isOwner(uint256 tokenId, address caller) public view returns (bool) {\\n        return ISyntheticNFT(erc721address).ownerOf(tokenId) == caller;\\n    }\\n\\n    function setFlip(uint256 tokenId, bool value) public {\\n        require(isOwner(tokenId, msg.sender), \\\"Only owner can change flip\\\");\\n        canFlip[tokenId] = value;\\n    }\\n\\n    /*function getLtoken(uint256 tokenId) public view returns (uint256) {\\n        return tokens[tokenId].perpetualFuturesLShares;\\n    }*/\\n}\\n\",\"keccak256\":\"0xa6df9ab561d29df1c59e8e7f1a60487dddf722e9748934279310ff847f5a6260\",\"license\":\"MIT\"},\"contracts/polygon/implementations/SyntheticNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\nimport \\\"./SyntheticCollectionManager.sol\\\";\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract SyntheticNFT is Context, ERC165, IERC721Metadata, Initializable, AccessControl {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter public tokenCounter;\\r\\n\\r\\n    bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\r\\n\\r\\n    // token metadata\\r\\n    mapping(uint256 => string) private _tokenMetadata;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    address private _collectionManager;\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    constructor() {}\\r\\n\\r\\n    function initialize(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address collectionManager_\\r\\n    ) external initializer {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _collectionManager = collectionManager_;\\r\\n        _setupRole(MANAGER, collectionManager_);\\r\\n    }\\r\\n\\r\\n    function exists(uint256 tokenId) public view returns (bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n\\r\\n    function safeMint(\\r\\n        address to,\\r\\n        string memory metadata\\r\\n    ) public onlyRole(MANAGER) returns (uint256 tokenId) {\\r\\n\\r\\n        // Get new synthetic ID\\r\\n        tokenId = tokenCounter.current();\\r\\n        tokenCounter.increment();\\r\\n\\r\\n        _mint(to, tokenId);\\r\\n        _tokenMetadata[tokenId] = metadata;\\r\\n    }\\r\\n\\r\\n    function setMetadata(uint256 tokenId, string memory metadata) public onlyRole(MANAGER) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        _tokenMetadata[tokenId] = metadata;\\r\\n    }\\r\\n\\r\\n    function safeBurn(uint256 tokenId) public onlyRole(MANAGER) {\\r\\n        _burn(tokenId);\\r\\n        _tokenMetadata[tokenId] = \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(AccessControl, ERC165, IERC165)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _owners[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        return _tokenMetadata[tokenId];\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\r\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\r\\n        );\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(\\r\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\r\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\r\\n        );\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(from, to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ownerOf(tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[owner] -= 1;\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[from] -= 1;\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (\\r\\n                bytes4 retval\\r\\n            ) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    // solhint-disable-next-line\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev override the before transfer hook to allow locking the nft\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address,\\r\\n        address,\\r\\n        uint256 tokenId\\r\\n    ) internal view {\\r\\n        if (_exists(tokenId)) {\\r\\n            require(!SyntheticCollectionManager(_collectionManager).lockedNFT(tokenId), \\\"Token is locked\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x858fa506b633d224965fa9580b87fb401d37cd76d65758b3134b64d7c01a4327\",\"license\":\"MIT\"},\"contracts/polygon/libraries/ProtocolConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary ProtocolConstants {\\r\\n    uint256 public constant JOT_SUPPLY = 10000000000000000000000;\\r\\n    uint256 public constant STAKER_SHARE_DENOMINATOR = 1000;\\r\\n}\\r\\n\",\"keccak256\":\"0x3bd7d711cca69e49c9380c0c0ebc64ca24d043f34f7c2f525b75082573759491\",\"license\":\"MIT\"},\"contracts/polygon/libraries/SyntheticTokenLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\nimport \\\"../implementations/Structs.sol\\\";\\nimport \\\"./ProtocolConstants.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title helpers for synthetic token operations\\n * @author priviprotocol\\n */\\nlibrary SyntheticTokenLibrary {\\n    /**\\n     * @dev helper for increase selling supply\\n     * @param amount the quantity of supply to increase\\n     */\\n    function increaseSellingSupply(TokenData storage token, uint256 amount) external {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n        require(token.ownerSupply >= amount, \\\"You do not have enough tokens left\\\");\\n\\n        token.ownerSupply -= amount;\\n        token.sellingSupply += amount;\\n    }\\n\\n    /**\\n     * @dev helper for decrease selling supply\\n     * @param amount the quantity of supply to decrease\\n     */\\n    function decreaseSellingSupply(TokenData storage token, uint256 amount) external {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n\\n        require(token.sellingSupply >= amount, \\\"You do not have enough selling supply left\\\");\\n\\n        token.ownerSupply += amount;\\n        token.sellingSupply -= amount;\\n    }\\n\\n    /**\\n     * @dev helper for update price fraction\\n     * @param newFractionPrice the quantity of supply to increase\\n     */\\n    function updatePriceFraction(TokenData storage token, uint256 newFractionPrice) external {\\n        require(newFractionPrice > 0, \\\"Fraction price must be greater than zero\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n\\n        token.fractionPrices = newFractionPrice;\\n    }\\n\\n    /**\\n     * @dev helper for buy jot tokens\\n     * @param amount the quantity of jots to buy\\n     */\\n    function buyJotTokens(TokenData storage token, uint256 amount) external returns (uint256 amountToPay) {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n\\n        // calculate amount left\\n        uint256 amountLeft = token.sellingSupply;\\n\\n        require(amountLeft > 0, \\\"No available tokens for sale\\\");\\n        require(amount <= amountLeft, \\\"Not enough available tokens\\\");\\n\\n        amountToPay = (amount * token.fractionPrices) / 10**18;\\n\\n        // Can't sell zero tokens\\n        require(amountToPay > 0, \\\"No tokens left!\\\");\\n\\n        //Increase sold supply (amount in token) and liquidity sold (amount in ether)\\n        token.sellingSupply -= amount;\\n        token.soldSupply += amount;\\n        token.liquiditySold += amountToPay;\\n    }\\n\\n    /**\\n     * @dev helper for deposit jot tokens\\n     * @param amount the quantity of jots to deposit\\n     */\\n    function depositJotTokens(TokenData storage token, uint256 amount) external {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n\\n        // save gas through memory\\n        uint256 ownerSupply = token.ownerSupply;\\n\\n        require(!isLocked(token.state, ownerSupply), \\\"Token is locked!\\\");\\n\\n        uint256 result = ownerSupply + amount;\\n        require(result <= ProtocolConstants.JOT_SUPPLY, \\\"You can't deposit more than the Jot Supply limit\\\");\\n\\n        token.ownerSupply += amount;\\n    }\\n\\n    function isLocked(State state, uint256 ownerSupply) internal pure returns (bool) {\\n        return state != State.VERIFIED || ownerSupply == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xfdcd99b1647623429d17293bce7e0c0b54e5e23b1cdc5cd8a40876b85ec1ee09\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620034b7380380620034b78339810160408190526200003491620002e9565b6200003f336200018c565b8251601480546001600160a01b03199081166001600160a01b0393841617909155602080860151600280548416918516919091179055604080870151600380548516918616919091179055606080880151601080548616918716919091179055608088015160048054861691871691909117905560a088015160058054861691871691909117905560c088015160068054861691871691909117905560e0880151600780549187169186169190911790558551600880549187169186169190911790559482015160098054918616918516919091179055610100870151600a8054851691861691909117905561012090960151600b805484169185169190911790558451600d80548416918516919091179055840151600e8054831691841691909117905593830151600c80548616918316919091179055910151600f80549093169116179055620003bb565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b0381168114620001f657600080fd5b919050565b6000608082840312156200020d578081fd5b604051608081016001600160401b0381118282101715620002325762000232620003a5565b6040529050806200024383620001de565b81526200025360208401620001de565b60208201526200026660408401620001de565b60408201526200027960608401620001de565b60608201525092915050565b60006040828403121562000297578081fd5b604080519081016001600160401b0381118282101715620002bc57620002bc620003a5565b604052905080620002cd83620001de565b8152620002dd60208401620001de565b60208201525092915050565b60008060006102008486031215620002ff578283fd5b84601f8501126200030e578283fd5b6040516101408082016001600160401b0381118382101715620003355762000335620003a5565b604052850181868883111562000349578687fd5b865b600a81101562000376576200036082620001de565b835260209283019291909101906001016200034b565b505050819450620003888782620001fb565b935050506200039c856101c0860162000285565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b6130ec80620003cb6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063715018a6116100f9578063c3e7e12d11610097578063d547741f11610071578063d547741f146104bd578063f0cfe6b9146104d0578063f1edbfa5146104ff578063f2fde38b1461051257600080fd5b8063c3e7e12d1461044a578063cf44e2441461045d578063cf4795111461048c57600080fd5b806380f6d782116100d357806380f6d7821461040b5780638da5cb5b1461041e57806391d148541461042f578063a217fddf1461044257600080fd5b8063715018a6146103c15780637546d985146103c95780637690aff6146103f857600080fd5b806335777ee1116101665780633d6a8390116101405780633d6a839014610343578063509f64501461035657806356f4f1f014610385578063622203be1461039857600080fd5b806335777ee1146102c457806336568abe1461030157806336d683681461031457600080fd5b80630be68a71116101a25780630be68a71146102505780631666d34c14610279578063248a9ca31461028e5780632f2ff15d146102b157600080fd5b806301ffc9a7146101c9578063064e9553146101f157806306c8d97114610238575b600080fd5b6101dc6101d7366004612a4e565b610525565b60405190151581526020015b60405180910390f35b6102206101ff36600461282b565b6001600160a01b039081166000908152601160205260409020600501541690565b6040516001600160a01b0390911681526020016101e8565b6013546102429081565b6040519081526020016101e8565b61022061025e3660046129ef565b6000908152601260205260409020546001600160a01b031690565b61028c61028736600461288e565b61055c565b005b61024261029c3660046129ef565b60009081526020819052604090206001015490565b61028c6102bf366004612a1f565b610623565b6102206102d23660046129ef565b6000908152601260209081526040808320546001600160a01b0390811684526011909252909120600101541690565b61028c61030f366004612a1f565b61064e565b61022061032236600461282b565b6001600160a01b039081166000908152601160205260409020600a01541690565b61028c61035136600461295e565b6106d1565b61022061036436600461282b565b6001600160a01b039081166000908152601160205260409020600301541690565b61022061039336600461282b565b61128f565b6102426103a636600461282b565b6001600160a01b031660009081526011602052604090205490565b61028c6112b0565b6102206103d736600461282b565b6001600160a01b039081166000908152601160205260409020600201541690565b6101dc610406366004612863565b611316565b601454610220906001600160a01b031681565b6001546001600160a01b0316610220565b6101dc61043d366004612a1f565b61142b565b610242600081565b6101dc610458366004612863565b611454565b61022061046b36600461282b565b6001600160a01b039081166000908152601160205260409020600b01541690565b6101dc61049a36600461282b565b6001600160a01b0390811660009081526011602052604090206001015416151590565b61028c6104cb366004612a1f565b6115d0565b6102206104de36600461282b565b6001600160a01b039081166000908152601160205260409020600901541690565b61028c61050d366004612863565b6115f6565b61028c61052036600461282b565b611664565b60006001600160e01b03198216637965db0b60e01b148061055657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006105678561128f565b604051631b89845760e21b815290915081906001600160a01b03821690636e26115c9061059e908890889088903390600401612ee5565b600060405180830381600087803b1580156105b857600080fd5b505af11580156105cc573d6000803e3d6000fd5b5050604080516001600160a01b038a168152602081018990529081018790527fc076488514b84c353aab5f4416a23cfb3b91ac269bb5ef2fb5aa70f77b52a3699250606001905060405180910390a1505050505050565b60008281526020819052604090206001015461063f813361172f565b6106498383611793565b505050565b6001600160a01b03811633146106c35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106cd8282611817565b5050565b600082116107215760405162461bcd60e51b815260206004820152601c60248201527f5072696365206672616374696f6e2063616e2774206265207a65726f0000000060448201526064016106ba565b6001600160a01b03851661076c5760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21031b7b63632b1ba34b7b760711b60448201526064016106ba565b69021e19e0c9bab24000008311156107bf5760405162461bcd60e51b81526020600482015260166024820152750496e76616c696420737570706c7920746f206b6565760541b60448201526064016106ba565b6001600160a01b0380861660009081526011602052604081206001015490911661118a5760006108456107f28480612f70565b604051602001610803929190612b5c565b60408051601f198184030181529190526108206020860186612f70565b604051602001610831929190612d56565b60405160208183030381529060405261187c565b9050600061087c826108578680612f70565b604051602001610868929190612b5c565b6040516020818303038152906040526119bf565b600654909150600090610897906001600160a01b0316611ace565b6004549091506000906108b2906001600160a01b0316611ace565b90506108c1848483858e611b6b565b9450806001600160a01b031663c0c53b8b85600860009054906101000a90046001600160a01b03166001600160a01b0316634c538fde6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092157600080fd5b505afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190612847565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015290821660248201529088166044820152606401600060405180830381600087803b1580156109aa57600080fd5b505af11580156109be573d6000803e3d6000fd5b505050506109cd848487611d68565b6001600160a01b03821663077f224a6109e68880612f70565b6040516020016109f7929190612c61565b60408051601f19818403018152919052610a1460208a018a612f70565b604051602001610a25929190612c42565b604051602081830303815290604052886040518463ffffffff1660e01b8152600401610a5393929190612e5d565b600060405180830381600087803b158015610a6d57600080fd5b505af1158015610a81573d6000803e3d6000fd5b5050600a54604051636085579360e11b81526001600160a01b038981166004830152909116925063c10aaf269150602401600060405180830381600087803b158015610acc57600080fd5b505af1158015610ae0573d6000803e3d6000fd5b5050600b54604051636085579360e11b81526001600160a01b038981166004830152909116925063c10aaf269150602401600060405180830381600087803b158015610b2b57600080fd5b505af1158015610b3f573d6000803e3d6000fd5b5060009250610be09150610b5590508880612f70565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b979250505060208a018a612f70565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d612127565b6040818101519051631b5b27e160e11b81526001600160a01b0391821660048201529192508716906336b64fc290602401600060405180830381600087803b158015610c2b57600080fd5b505af1158015610c3f573d6000803e3d6000fd5b50505050604051806101a00160405280610c5860135490565b8152602001876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152602001836001600160a01b03168152602001866001600160a01b03166349bd5a5e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd257600080fd5b505afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190612847565b6001600160a01b03908116825285166020820152604001610d2b8980612f70565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602090810190610d74908a018a612f70565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200182600001516001600160a01b0316815260200182602001516001600160a01b0316815260200182604001516001600160a01b0316815260200182606001516001600160a01b0316815250601160008d6001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e0820151816007019080519060200190610f5f929190612792565b506101008201518051610f7c916008840191602090910190612792565b506101208201516009820180546001600160a01b03199081166001600160a01b0393841617909155610140840151600a840180548316918416919091179055610160840151600b84018054831691841691909117905561018090930151600c9092018054841692821692909217909155601380546000908152601260205260409020805490931691891691909117909155547f20169f222e5f8b16398c52a5a647cc9c470a84842801061373037cb34713730990878787868a6001600160a01b03166349bd5a5e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561106d57600080fd5b505afa158015611081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a59190612847565b89601460009054906101000a90046001600160a01b0316600760009054906101000a90046001600160a01b03168a600001518b602001518c604001518d6060015160405161116a9d9c9b9a999897969594939291909c8d526001600160a01b039b8c1660208e0152998b1660408d0152978a1660608c015295891660808b015293881660a08a015291871660c0890152861660e08801528516610100870152841661012086015283166101408501528216610160840152166101808201526101a00190565b60405180910390a1611180601380546001019055565b50505050506111aa565b506001600160a01b03808616600090815260116020526040902060010154165b8060006001600160a01b038216635ea172d0888888336111cd60408b018b612f70565b6040518763ffffffff1660e01b81526004016111ee96959493929190612f1d565b602060405180830381600087803b15801561120857600080fd5b505af115801561121c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112409190612a07565b604080516001600160a01b0386168152602081018390529192507fd7ca5dc2f8c6bb37c3a4de2a81499b25f8ca8bbb3082010244fe747077d0f6cc910160405180910390a15050505050505050565b6001600160a01b039081166000908152601160205260409020600101541690565b6001546001600160a01b0316331461130a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ba565b6113146000612557565b565b60006113228383611454565b6113635760405162461bcd60e51b8152602060048201526012602482015271139195081b9bdd081c9959da5cdd195c995960721b60448201526064016106ba565b600061136e8461128f565b6040516327b2595f60e11b8152600481018590529091506000906001600160a01b03831690634f64b2be906024016101406040518083038186803b1580156113b557600080fd5b505afa1580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ed9190612a76565b995060029850611401975050505050505050565b81600381111561142157634e487b7160e01b600052602160045260246000fd5b1495945050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b038083166000908152601160205260408120600101549091166114c05760405162461bcd60e51b815260206004820152601960248201527f436f6c6c656374696f6e206e6f7420726567697374657265640000000000000060448201526064016106ba565b6001600160a01b038084166000908152601160209081526040808320600101548151634c4b206b60e01b815291519416938492634c4b206b9260048082019391829003018186803b15801561151457600080fd5b505afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154c9190612847565b604051634f558e7960e01b8152600481018690529091506001600160a01b03821690634f558e799060240160206040518083038186803b15801561158f57600080fd5b505afa1580156115a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c791906129cf565b95945050505050565b6000828152602081905260409020600101546115ec813361172f565b6106498383611817565b60006116018361128f565b604051638753367f60e01b8152600481018490529091506001600160a01b03821690638753367f906024015b600060405180830381600087803b15801561164757600080fd5b505af115801561165b573d6000803e3d6000fd5b50505050505050565b6001546001600160a01b031633146116be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ba565b6001600160a01b0381166117235760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ba565b61172c81612557565b50565b611739828261142b565b6106cd57611751816001600160a01b031660146125a9565b61175c8360206125a9565b60405160200161176d929190612ce1565b60408051601f198184030181529082905262461bcd60e51b82526106ba91600401612e25565b61179d828261142b565b6106cd576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556117d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611821828261142b565b156106cd576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600254600090611894906001600160a01b0316611ace565b9050806001600160a01b0316638f15b414846040516020016118b69190612b82565b604051602081830303815290604052846040516020016118d69190612d76565b60408051601f19818403018152828252601454600854632629c7ef60e11b8552925191936001600160a01b039182169390911691634c538fde91600480820192602092909190829003018186803b15801561193057600080fd5b505afa158015611944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119689190612847565b6040518563ffffffff1660e01b81526004016119879493929190612e9b565b600060405180830381600087803b1580156119a157600080fd5b505af11580156119b5573d6000803e3d6000fd5b5050505092915050565b6003546000906119d7906001600160a01b0316611ace565b9050806001600160a01b0316632016a0d284600860009054906101000a90046001600160a01b03166001600160a01b0316634c538fde6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3757600080fd5b505afa158015611a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6f9190612847565b85604051602001611a809190612cab565b60405160208183030381529060405286604051602001611aa09190612bb4565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016119879493929190612da2565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611b665760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016106ba565b919050565b600554600090611b83906001600160a01b0316611ace565b601054909150600090611b9e906001600160a01b0316611ace565b601454600854600c5460408051632629c7ef60e11b815290519495506001600160a01b038087169563cc2a9a5b95899590831694908316939216918391634c538fde91600480820192602092909190829003018186803b158015611c0157600080fd5b505afa158015611c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c399190612847565b6040516001600160e01b031960e088901b1681526001600160a01b039586166004820152938516602485015291841660448401528316606483015282166084820152908a1660a482015260c401600060405180830381600087803b158015611ca057600080fd5b505af1158015611cb4573d6000803e3d6000fd5b505060075460085460145460405163f5e95acb60e01b81526001600160a01b038d8116600483015289811660248301528a81166044830152938416606482015291831660848301528a831660a483015289831660c4830152821660e4820152848216610104820152908516925063f5e95acb915061012401600060405180830381600087803b158015611d4657600080fd5b505af1158015611d5a573d6000803e3d6000fd5b505050505095945050505050565b60075460408051630e61f93f60e01b815290516001600160a01b0390921691632f2ff15d918391630e61f93f91600480820192602092909190829003018186803b158015611db557600080fd5b505afa158015611dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ded9190612a07565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0384166024820152604401600060405180830381600087803b158015611e3557600080fd5b505af1158015611e49573d6000803e3d6000fd5b50505050806001600160a01b0316632f2ff15d826001600160a01b03166358e8bcb76040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9557600080fd5b505afa158015611ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecd9190612a07565b600a5460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b158015611f1757600080fd5b505af1158015611f2b573d6000803e3d6000fd5b50505050806001600160a01b0316632f2ff15d826001600160a01b031663abacac256040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7757600080fd5b505afa158015611f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faf9190612a07565b600b5460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b158015611ff957600080fd5b505af115801561200d573d6000803e3d6000fd5b50505050826001600160a01b0316632f2ff15d846001600160a01b031663fe6d81246040518163ffffffff1660e01b815260040160206040518083038186803b15801561205957600080fd5b505afa15801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190612a07565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0384166024820152604401600060405180830381600087803b1580156120d957600080fd5b505af11580156120ed573d6000803e3d6000fd5b5050604051635df8122f60e01b81526001600160a01b038481166004830152858116602483015286169250635df8122f915060440161162d565b604080516080810182526000808252602082018190529181018290526060810191909152600d54600090612163906001600160a01b0316611ace565b9050806001600160a01b0316634cd88b76866040516020016121859190612c08565b604051602081830303815290604052866040516020016121a59190612bdd565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016121d1929190612e38565b600060405180830381600087803b1580156121eb57600080fd5b505af11580156121ff573d6000803e3d6000fd5b5050600e546000925061221b91506001600160a01b0316611ace565b9050806001600160a01b0316634cd88b768760405160200161223d9190612b23565b6040516020818303038152906040528760405160200161225d9190612c8d565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401612289929190612e38565b600060405180830381600087803b1580156122a357600080fd5b505af11580156122b7573d6000803e3d6000fd5b5050600c54600092506122d391506001600160a01b0316611ace565b6040805160c08101808352600854632629c7ef60e11b90915291519293506001600160a01b0380851693637a2e87aa9383921690634c538fde9060c480850191602091818703018186803b15801561232a57600080fd5b505afa15801561233e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123629190612847565b6001600160a01b03908116825287811660208301528681166040808401919091526000606084015260035482166080840152908a1660a090920191909152516001600160e01b031960e084901b1681526123bf9190600401612deb565b600060405180830381600087803b1580156123d957600080fd5b505af11580156123ed573d6000803e3d6000fd5b5050600f546000925061240991506001600160a01b0316611ace565b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b15801561245057600080fd5b505af1158015612464573d6000803e3d6000fd5b505060405163221b8a9560e11b81526001600160a01b03858116600483015287169250634437152a9150602401600060405180830381600087803b1580156124ab57600080fd5b505af11580156124bf573d6000803e3d6000fd5b505060405163221b8a9560e11b81526001600160a01b03858116600483015286169250634437152a9150602401600060405180830381600087803b15801561250657600080fd5b505af115801561251a573d6000803e3d6000fd5b5050604080516080810182526001600160a01b03978816815295871660208701529386169385019390935250909216606082015295945050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060006125b8836002612fd4565b6125c3906002612fbc565b67ffffffffffffffff8111156125e957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612613576020820181803683370190505b509050600360fc1b8160008151811061263c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061267957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061269d846002612fd4565b6126a8906001612fbc565b90505b600181111561273c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106126ea57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061270e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361273581613023565b90506126ab565b50831561278b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ba565b9392505050565b82805461279e9061303a565b90600052602060002090601f0160209004810192826127c05760008555612806565b82601f106127d957805160ff1916838001178555612806565b82800160010185558215612806579182015b828111156128065782518255916020019190600101906127eb565b50612812929150612816565b5090565b5b808211156128125760008155600101612817565b60006020828403121561283c578081fd5b813561278b816130a1565b600060208284031215612858578081fd5b815161278b816130a1565b60008060408385031215612875578081fd5b8235612880816130a1565b946020939093013593505050565b600080600080608085870312156128a3578182fd5b84356128ae816130a1565b93506020850135925060408501359150606085013567ffffffffffffffff808211156128d8578283fd5b818701915087601f8301126128eb578283fd5b8135818111156128fd576128fd61308b565b604051601f8201601f19908116603f011681019083821181831017156129255761292561308b565b816040528281528a602084870101111561293d578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080600080600060a08688031215612975578081fd5b8535612980816130a1565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156129b0578182fd5b8601606081890312156129c1578182fd5b809150509295509295909350565b6000602082840312156129e0578081fd5b8151801515811461278b578182fd5b600060208284031215612a00578081fd5b5035919050565b600060208284031215612a18578081fd5b5051919050565b60008060408385031215612a31578182fd5b823591506020830135612a43816130a1565b809150509250929050565b600060208284031215612a5f578081fd5b81356001600160e01b03198116811461278b578182fd5b6000806000806000806000806000806101408b8d031215612a95578485fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015160048110612ae4578182fd5b809150509295989b9194979a5092959850565b60008151808452612b0f816020860160208601612ff3565b601f01601f19169290920160200192915050565b7002837b9b4ba34b7b710233aba3ab932b99607d1b815260008251612b4f816011850160208701612ff3565b9190910160110192915050565b690283934bb34902537ba160b51b81528183600a83013760009101600a01908152919050565b690283934bb34902537ba160b51b815260008251612ba781600a850160208701612ff3565b91909101600a0192915050565b600160fd1b815260008251612bd0816001850160208701612ff3565b9190910160010192915050565b624c465f60e81b815260008251612bfb816003850160208701612ff3565b9190910160030192915050565b7102634b8bab4b234ba3c90233aba3ab932b9960751b815260008251612c35816012850160208701612ff3565b9190910160120192915050565b6270535f60e81b81528183600383013760009101600301908152919050565b6f0283934bb349029bcb73a3432ba34b1960851b81528183601083013760009101601001908152919050565b6250465f60e81b815260008251612bfb816003850160208701612ff3565b6d0283934bb34902537ba2837b7b6160951b815260008251612cd481600e850160208701612ff3565b91909101600e0192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612d19816017850160208801612ff3565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612d4a816028840160208801612ff3565b01602801949350505050565b634a4f545f60e01b81528183600483013760009101600401908152919050565b634a4f545f60e01b815260008251612d95816004850160208701612ff3565b9190910160040192915050565b6001600160a01b03858116825284166020820152608060408201819052600090612dce90830185612af7565b8281036060840152612de08185612af7565b979650505050505050565b60c08101818360005b6006811015612e1c5781516001600160a01b0316835260209283019290910190600101612df4565b50505092915050565b60208152600061278b6020830184612af7565b604081526000612e4b6040830185612af7565b82810360208401526115c78185612af7565b606081526000612e706060830186612af7565b8281036020840152612e828186612af7565b91505060018060a01b0383166040830152949350505050565b608081526000612eae6080830187612af7565b8281036020840152612ec08187612af7565b6001600160a01b03958616604085015293909416606090920191909152509392505050565b848152836020820152608060408201526000612f046080830185612af7565b905060018060a01b038316606083015295945050505050565b86815285602082015284604082015260018060a01b038416606082015260a060808201528160a0820152818360c0830137600081830160c090810191909152601f909201601f1916010195945050505050565b6000808335601e19843603018112612f86578283fd5b83018035915067ffffffffffffffff821115612fa0578283fd5b602001915036819003821315612fb557600080fd5b9250929050565b60008219821115612fcf57612fcf613075565b500190565b6000816000190483118215151615612fee57612fee613075565b500290565b60005b8381101561300e578181015183820152602001612ff6565b8381111561301d576000848401525b50505050565b60008161303257613032613075565b506000190190565b600181811c9082168061304e57607f821691505b6020821081141561306f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461172c57600080fdfea2646970667358221220002743822b416b23927323b29abca8ae47b51cf76f2d284a6ca7a0fcf34da8e664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063715018a6116100f9578063c3e7e12d11610097578063d547741f11610071578063d547741f146104bd578063f0cfe6b9146104d0578063f1edbfa5146104ff578063f2fde38b1461051257600080fd5b8063c3e7e12d1461044a578063cf44e2441461045d578063cf4795111461048c57600080fd5b806380f6d782116100d357806380f6d7821461040b5780638da5cb5b1461041e57806391d148541461042f578063a217fddf1461044257600080fd5b8063715018a6146103c15780637546d985146103c95780637690aff6146103f857600080fd5b806335777ee1116101665780633d6a8390116101405780633d6a839014610343578063509f64501461035657806356f4f1f014610385578063622203be1461039857600080fd5b806335777ee1146102c457806336568abe1461030157806336d683681461031457600080fd5b80630be68a71116101a25780630be68a71146102505780631666d34c14610279578063248a9ca31461028e5780632f2ff15d146102b157600080fd5b806301ffc9a7146101c9578063064e9553146101f157806306c8d97114610238575b600080fd5b6101dc6101d7366004612a4e565b610525565b60405190151581526020015b60405180910390f35b6102206101ff36600461282b565b6001600160a01b039081166000908152601160205260409020600501541690565b6040516001600160a01b0390911681526020016101e8565b6013546102429081565b6040519081526020016101e8565b61022061025e3660046129ef565b6000908152601260205260409020546001600160a01b031690565b61028c61028736600461288e565b61055c565b005b61024261029c3660046129ef565b60009081526020819052604090206001015490565b61028c6102bf366004612a1f565b610623565b6102206102d23660046129ef565b6000908152601260209081526040808320546001600160a01b0390811684526011909252909120600101541690565b61028c61030f366004612a1f565b61064e565b61022061032236600461282b565b6001600160a01b039081166000908152601160205260409020600a01541690565b61028c61035136600461295e565b6106d1565b61022061036436600461282b565b6001600160a01b039081166000908152601160205260409020600301541690565b61022061039336600461282b565b61128f565b6102426103a636600461282b565b6001600160a01b031660009081526011602052604090205490565b61028c6112b0565b6102206103d736600461282b565b6001600160a01b039081166000908152601160205260409020600201541690565b6101dc610406366004612863565b611316565b601454610220906001600160a01b031681565b6001546001600160a01b0316610220565b6101dc61043d366004612a1f565b61142b565b610242600081565b6101dc610458366004612863565b611454565b61022061046b36600461282b565b6001600160a01b039081166000908152601160205260409020600b01541690565b6101dc61049a36600461282b565b6001600160a01b0390811660009081526011602052604090206001015416151590565b61028c6104cb366004612a1f565b6115d0565b6102206104de36600461282b565b6001600160a01b039081166000908152601160205260409020600901541690565b61028c61050d366004612863565b6115f6565b61028c61052036600461282b565b611664565b60006001600160e01b03198216637965db0b60e01b148061055657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006105678561128f565b604051631b89845760e21b815290915081906001600160a01b03821690636e26115c9061059e908890889088903390600401612ee5565b600060405180830381600087803b1580156105b857600080fd5b505af11580156105cc573d6000803e3d6000fd5b5050604080516001600160a01b038a168152602081018990529081018790527fc076488514b84c353aab5f4416a23cfb3b91ac269bb5ef2fb5aa70f77b52a3699250606001905060405180910390a1505050505050565b60008281526020819052604090206001015461063f813361172f565b6106498383611793565b505050565b6001600160a01b03811633146106c35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106cd8282611817565b5050565b600082116107215760405162461bcd60e51b815260206004820152601c60248201527f5072696365206672616374696f6e2063616e2774206265207a65726f0000000060448201526064016106ba565b6001600160a01b03851661076c5760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21031b7b63632b1ba34b7b760711b60448201526064016106ba565b69021e19e0c9bab24000008311156107bf5760405162461bcd60e51b81526020600482015260166024820152750496e76616c696420737570706c7920746f206b6565760541b60448201526064016106ba565b6001600160a01b0380861660009081526011602052604081206001015490911661118a5760006108456107f28480612f70565b604051602001610803929190612b5c565b60408051601f198184030181529190526108206020860186612f70565b604051602001610831929190612d56565b60405160208183030381529060405261187c565b9050600061087c826108578680612f70565b604051602001610868929190612b5c565b6040516020818303038152906040526119bf565b600654909150600090610897906001600160a01b0316611ace565b6004549091506000906108b2906001600160a01b0316611ace565b90506108c1848483858e611b6b565b9450806001600160a01b031663c0c53b8b85600860009054906101000a90046001600160a01b03166001600160a01b0316634c538fde6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092157600080fd5b505afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190612847565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015290821660248201529088166044820152606401600060405180830381600087803b1580156109aa57600080fd5b505af11580156109be573d6000803e3d6000fd5b505050506109cd848487611d68565b6001600160a01b03821663077f224a6109e68880612f70565b6040516020016109f7929190612c61565b60408051601f19818403018152919052610a1460208a018a612f70565b604051602001610a25929190612c42565b604051602081830303815290604052886040518463ffffffff1660e01b8152600401610a5393929190612e5d565b600060405180830381600087803b158015610a6d57600080fd5b505af1158015610a81573d6000803e3d6000fd5b5050600a54604051636085579360e11b81526001600160a01b038981166004830152909116925063c10aaf269150602401600060405180830381600087803b158015610acc57600080fd5b505af1158015610ae0573d6000803e3d6000fd5b5050600b54604051636085579360e11b81526001600160a01b038981166004830152909116925063c10aaf269150602401600060405180830381600087803b158015610b2b57600080fd5b505af1158015610b3f573d6000803e3d6000fd5b5060009250610be09150610b5590508880612f70565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b979250505060208a018a612f70565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d612127565b6040818101519051631b5b27e160e11b81526001600160a01b0391821660048201529192508716906336b64fc290602401600060405180830381600087803b158015610c2b57600080fd5b505af1158015610c3f573d6000803e3d6000fd5b50505050604051806101a00160405280610c5860135490565b8152602001876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152602001836001600160a01b03168152602001866001600160a01b03166349bd5a5e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd257600080fd5b505afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190612847565b6001600160a01b03908116825285166020820152604001610d2b8980612f70565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602090810190610d74908a018a612f70565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200182600001516001600160a01b0316815260200182602001516001600160a01b0316815260200182604001516001600160a01b0316815260200182606001516001600160a01b0316815250601160008d6001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e0820151816007019080519060200190610f5f929190612792565b506101008201518051610f7c916008840191602090910190612792565b506101208201516009820180546001600160a01b03199081166001600160a01b0393841617909155610140840151600a840180548316918416919091179055610160840151600b84018054831691841691909117905561018090930151600c9092018054841692821692909217909155601380546000908152601260205260409020805490931691891691909117909155547f20169f222e5f8b16398c52a5a647cc9c470a84842801061373037cb34713730990878787868a6001600160a01b03166349bd5a5e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561106d57600080fd5b505afa158015611081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a59190612847565b89601460009054906101000a90046001600160a01b0316600760009054906101000a90046001600160a01b03168a600001518b602001518c604001518d6060015160405161116a9d9c9b9a999897969594939291909c8d526001600160a01b039b8c1660208e0152998b1660408d0152978a1660608c015295891660808b015293881660a08a015291871660c0890152861660e08801528516610100870152841661012086015283166101408501528216610160840152166101808201526101a00190565b60405180910390a1611180601380546001019055565b50505050506111aa565b506001600160a01b03808616600090815260116020526040902060010154165b8060006001600160a01b038216635ea172d0888888336111cd60408b018b612f70565b6040518763ffffffff1660e01b81526004016111ee96959493929190612f1d565b602060405180830381600087803b15801561120857600080fd5b505af115801561121c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112409190612a07565b604080516001600160a01b0386168152602081018390529192507fd7ca5dc2f8c6bb37c3a4de2a81499b25f8ca8bbb3082010244fe747077d0f6cc910160405180910390a15050505050505050565b6001600160a01b039081166000908152601160205260409020600101541690565b6001546001600160a01b0316331461130a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ba565b6113146000612557565b565b60006113228383611454565b6113635760405162461bcd60e51b8152602060048201526012602482015271139195081b9bdd081c9959da5cdd195c995960721b60448201526064016106ba565b600061136e8461128f565b6040516327b2595f60e11b8152600481018590529091506000906001600160a01b03831690634f64b2be906024016101406040518083038186803b1580156113b557600080fd5b505afa1580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ed9190612a76565b995060029850611401975050505050505050565b81600381111561142157634e487b7160e01b600052602160045260246000fd5b1495945050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b038083166000908152601160205260408120600101549091166114c05760405162461bcd60e51b815260206004820152601960248201527f436f6c6c656374696f6e206e6f7420726567697374657265640000000000000060448201526064016106ba565b6001600160a01b038084166000908152601160209081526040808320600101548151634c4b206b60e01b815291519416938492634c4b206b9260048082019391829003018186803b15801561151457600080fd5b505afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154c9190612847565b604051634f558e7960e01b8152600481018690529091506001600160a01b03821690634f558e799060240160206040518083038186803b15801561158f57600080fd5b505afa1580156115a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c791906129cf565b95945050505050565b6000828152602081905260409020600101546115ec813361172f565b6106498383611817565b60006116018361128f565b604051638753367f60e01b8152600481018490529091506001600160a01b03821690638753367f906024015b600060405180830381600087803b15801561164757600080fd5b505af115801561165b573d6000803e3d6000fd5b50505050505050565b6001546001600160a01b031633146116be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ba565b6001600160a01b0381166117235760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ba565b61172c81612557565b50565b611739828261142b565b6106cd57611751816001600160a01b031660146125a9565b61175c8360206125a9565b60405160200161176d929190612ce1565b60408051601f198184030181529082905262461bcd60e51b82526106ba91600401612e25565b61179d828261142b565b6106cd576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556117d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611821828261142b565b156106cd576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600254600090611894906001600160a01b0316611ace565b9050806001600160a01b0316638f15b414846040516020016118b69190612b82565b604051602081830303815290604052846040516020016118d69190612d76565b60408051601f19818403018152828252601454600854632629c7ef60e11b8552925191936001600160a01b039182169390911691634c538fde91600480820192602092909190829003018186803b15801561193057600080fd5b505afa158015611944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119689190612847565b6040518563ffffffff1660e01b81526004016119879493929190612e9b565b600060405180830381600087803b1580156119a157600080fd5b505af11580156119b5573d6000803e3d6000fd5b5050505092915050565b6003546000906119d7906001600160a01b0316611ace565b9050806001600160a01b0316632016a0d284600860009054906101000a90046001600160a01b03166001600160a01b0316634c538fde6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3757600080fd5b505afa158015611a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6f9190612847565b85604051602001611a809190612cab565b60405160208183030381529060405286604051602001611aa09190612bb4565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016119879493929190612da2565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611b665760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016106ba565b919050565b600554600090611b83906001600160a01b0316611ace565b601054909150600090611b9e906001600160a01b0316611ace565b601454600854600c5460408051632629c7ef60e11b815290519495506001600160a01b038087169563cc2a9a5b95899590831694908316939216918391634c538fde91600480820192602092909190829003018186803b158015611c0157600080fd5b505afa158015611c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c399190612847565b6040516001600160e01b031960e088901b1681526001600160a01b039586166004820152938516602485015291841660448401528316606483015282166084820152908a1660a482015260c401600060405180830381600087803b158015611ca057600080fd5b505af1158015611cb4573d6000803e3d6000fd5b505060075460085460145460405163f5e95acb60e01b81526001600160a01b038d8116600483015289811660248301528a81166044830152938416606482015291831660848301528a831660a483015289831660c4830152821660e4820152848216610104820152908516925063f5e95acb915061012401600060405180830381600087803b158015611d4657600080fd5b505af1158015611d5a573d6000803e3d6000fd5b505050505095945050505050565b60075460408051630e61f93f60e01b815290516001600160a01b0390921691632f2ff15d918391630e61f93f91600480820192602092909190829003018186803b158015611db557600080fd5b505afa158015611dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ded9190612a07565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0384166024820152604401600060405180830381600087803b158015611e3557600080fd5b505af1158015611e49573d6000803e3d6000fd5b50505050806001600160a01b0316632f2ff15d826001600160a01b03166358e8bcb76040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9557600080fd5b505afa158015611ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecd9190612a07565b600a5460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b158015611f1757600080fd5b505af1158015611f2b573d6000803e3d6000fd5b50505050806001600160a01b0316632f2ff15d826001600160a01b031663abacac256040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7757600080fd5b505afa158015611f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faf9190612a07565b600b5460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b158015611ff957600080fd5b505af115801561200d573d6000803e3d6000fd5b50505050826001600160a01b0316632f2ff15d846001600160a01b031663fe6d81246040518163ffffffff1660e01b815260040160206040518083038186803b15801561205957600080fd5b505afa15801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190612a07565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0384166024820152604401600060405180830381600087803b1580156120d957600080fd5b505af11580156120ed573d6000803e3d6000fd5b5050604051635df8122f60e01b81526001600160a01b038481166004830152858116602483015286169250635df8122f915060440161162d565b604080516080810182526000808252602082018190529181018290526060810191909152600d54600090612163906001600160a01b0316611ace565b9050806001600160a01b0316634cd88b76866040516020016121859190612c08565b604051602081830303815290604052866040516020016121a59190612bdd565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016121d1929190612e38565b600060405180830381600087803b1580156121eb57600080fd5b505af11580156121ff573d6000803e3d6000fd5b5050600e546000925061221b91506001600160a01b0316611ace565b9050806001600160a01b0316634cd88b768760405160200161223d9190612b23565b6040516020818303038152906040528760405160200161225d9190612c8d565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401612289929190612e38565b600060405180830381600087803b1580156122a357600080fd5b505af11580156122b7573d6000803e3d6000fd5b5050600c54600092506122d391506001600160a01b0316611ace565b6040805160c08101808352600854632629c7ef60e11b90915291519293506001600160a01b0380851693637a2e87aa9383921690634c538fde9060c480850191602091818703018186803b15801561232a57600080fd5b505afa15801561233e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123629190612847565b6001600160a01b03908116825287811660208301528681166040808401919091526000606084015260035482166080840152908a1660a090920191909152516001600160e01b031960e084901b1681526123bf9190600401612deb565b600060405180830381600087803b1580156123d957600080fd5b505af11580156123ed573d6000803e3d6000fd5b5050600f546000925061240991506001600160a01b0316611ace565b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b15801561245057600080fd5b505af1158015612464573d6000803e3d6000fd5b505060405163221b8a9560e11b81526001600160a01b03858116600483015287169250634437152a9150602401600060405180830381600087803b1580156124ab57600080fd5b505af11580156124bf573d6000803e3d6000fd5b505060405163221b8a9560e11b81526001600160a01b03858116600483015286169250634437152a9150602401600060405180830381600087803b15801561250657600080fd5b505af115801561251a573d6000803e3d6000fd5b5050604080516080810182526001600160a01b03978816815295871660208701529386169385019390935250909216606082015295945050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060006125b8836002612fd4565b6125c3906002612fbc565b67ffffffffffffffff8111156125e957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612613576020820181803683370190505b509050600360fc1b8160008151811061263c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061267957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061269d846002612fd4565b6126a8906001612fbc565b90505b600181111561273c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106126ea57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061270e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361273581613023565b90506126ab565b50831561278b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ba565b9392505050565b82805461279e9061303a565b90600052602060002090601f0160209004810192826127c05760008555612806565b82601f106127d957805160ff1916838001178555612806565b82800160010185558215612806579182015b828111156128065782518255916020019190600101906127eb565b50612812929150612816565b5090565b5b808211156128125760008155600101612817565b60006020828403121561283c578081fd5b813561278b816130a1565b600060208284031215612858578081fd5b815161278b816130a1565b60008060408385031215612875578081fd5b8235612880816130a1565b946020939093013593505050565b600080600080608085870312156128a3578182fd5b84356128ae816130a1565b93506020850135925060408501359150606085013567ffffffffffffffff808211156128d8578283fd5b818701915087601f8301126128eb578283fd5b8135818111156128fd576128fd61308b565b604051601f8201601f19908116603f011681019083821181831017156129255761292561308b565b816040528281528a602084870101111561293d578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080600080600060a08688031215612975578081fd5b8535612980816130a1565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156129b0578182fd5b8601606081890312156129c1578182fd5b809150509295509295909350565b6000602082840312156129e0578081fd5b8151801515811461278b578182fd5b600060208284031215612a00578081fd5b5035919050565b600060208284031215612a18578081fd5b5051919050565b60008060408385031215612a31578182fd5b823591506020830135612a43816130a1565b809150509250929050565b600060208284031215612a5f578081fd5b81356001600160e01b03198116811461278b578182fd5b6000806000806000806000806000806101408b8d031215612a95578485fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015160048110612ae4578182fd5b809150509295989b9194979a5092959850565b60008151808452612b0f816020860160208601612ff3565b601f01601f19169290920160200192915050565b7002837b9b4ba34b7b710233aba3ab932b99607d1b815260008251612b4f816011850160208701612ff3565b9190910160110192915050565b690283934bb34902537ba160b51b81528183600a83013760009101600a01908152919050565b690283934bb34902537ba160b51b815260008251612ba781600a850160208701612ff3565b91909101600a0192915050565b600160fd1b815260008251612bd0816001850160208701612ff3565b9190910160010192915050565b624c465f60e81b815260008251612bfb816003850160208701612ff3565b9190910160030192915050565b7102634b8bab4b234ba3c90233aba3ab932b9960751b815260008251612c35816012850160208701612ff3565b9190910160120192915050565b6270535f60e81b81528183600383013760009101600301908152919050565b6f0283934bb349029bcb73a3432ba34b1960851b81528183601083013760009101601001908152919050565b6250465f60e81b815260008251612bfb816003850160208701612ff3565b6d0283934bb34902537ba2837b7b6160951b815260008251612cd481600e850160208701612ff3565b91909101600e0192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612d19816017850160208801612ff3565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612d4a816028840160208801612ff3565b01602801949350505050565b634a4f545f60e01b81528183600483013760009101600401908152919050565b634a4f545f60e01b815260008251612d95816004850160208701612ff3565b9190910160040192915050565b6001600160a01b03858116825284166020820152608060408201819052600090612dce90830185612af7565b8281036060840152612de08185612af7565b979650505050505050565b60c08101818360005b6006811015612e1c5781516001600160a01b0316835260209283019290910190600101612df4565b50505092915050565b60208152600061278b6020830184612af7565b604081526000612e4b6040830185612af7565b82810360208401526115c78185612af7565b606081526000612e706060830186612af7565b8281036020840152612e828186612af7565b91505060018060a01b0383166040830152949350505050565b608081526000612eae6080830187612af7565b8281036020840152612ec08187612af7565b6001600160a01b03958616604085015293909416606090920191909152509392505050565b848152836020820152608060408201526000612f046080830185612af7565b905060018060a01b038316606083015295945050505050565b86815285602082015284604082015260018060a01b038416606082015260a060808201528160a0820152818360c0830137600081830160c090810191909152601f909201601f1916010195945050505050565b6000808335601e19843603018112612f86578283fd5b83018035915067ffffffffffffffff821115612fa0578283fd5b602001915036819003821315612fb557600080fd5b9250929050565b60008219821115612fcf57612fcf613075565b500190565b6000816000190483118215151615612fee57612fee613075565b500290565b60005b8381101561300e578181015183820152602001612ff6565b8381111561301d576000848401525b50505050565b60008161303257613032613075565b506000190190565b600181811c9082168061304e57607f821691505b6020821081141561306f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461172c57600080fdfea2646970667358221220002743822b416b23927323b29abca8ae47b51cf76f2d284a6ca7a0fcf34da8e664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerNFT(address,uint256,uint256,uint256,(string,string,string))": {
        "params": {
          "collection": "the address of the synthetic collection",
          "registrationMetadata": "the metadata for the registration",
          "supplyToKeep": "supply to keep",
          "tokenId": "the token id"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_collectionIdToAddress": {
        "details": "get collection address from ID"
      },
      "_collections": {
        "details": "collections map. collection address => collection data"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeNFT(address,uint256,uint256,string)": {
        "notice": "change an NFT for another one"
      },
      "getCollectionID(address)": {
        "notice": "get collection ID from collection address"
      },
      "getCollectionManagerAddress(address)": {
        "notice": "get collection manager address from collection address"
      },
      "getCollectionManagerAddressFromId(uint256)": {
        "notice": "get collection manager address from collection ID"
      },
      "getJotPoolAddress(address)": {
        "notice": "getter for Jot Pool Address of a collection"
      },
      "getJotsAddress(address)": {
        "notice": "getter for Jot Address of a collection"
      },
      "getOriginalCollectionAddress(uint256)": {
        "notice": "get collection address from collection ID"
      },
      "isNFTVerified(address,uint256)": {
        "notice": "checks whether a Synthetic has been verified or not"
      },
      "isSyntheticCollectionRegistered(address)": {
        "notice": "checks whether a collection is registered or not"
      },
      "isSyntheticNFTCreated(address,uint256)": {
        "notice": "checks whether a Synthetic NFT has been created for a given NFT or not"
      },
      "protocolVaults()": {
        "notice": "number of registered collections"
      },
      "registerNFT(address,uint256,uint256,uint256,(string,string,string))": {
        "notice": "register an NFT collection"
      },
      "swapAddress()": {
        "notice": "QuickSwap address"
      },
      "verifyNFT(address,uint256)": {
        "notice": "verify a synthetic NFT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3872,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3867_storage)"
      },
      {
        "astId": 4235,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 19801,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_jot",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 19803,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_jotPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 19805,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_redemptionPool",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 19807,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_collectionManager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 19809,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_syntheticNFT",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 19811,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_auctionManager",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 19813,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_protocol",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 19815,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_futuresProtocol",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 19817,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_randomConsumerAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 19819,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_validatorAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 19821,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_perpetualPoolLiteAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 19823,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_lTokenLite",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 19825,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_pTokenLite",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 19827,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_poolInfo",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 19829,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_liquidityCalculator",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 19835,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_collections",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(SyntheticCollection)19745_storage)"
      },
      {
        "astId": 19840,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_collectionIdToAddress",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 19844,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "protocolVaults",
        "offset": 0,
        "slot": "19",
        "type": "t_struct(Counter)10793_storage"
      },
      {
        "astId": 19847,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "swapAddress",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(SyntheticCollection)19745_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SyntheticCollection)",
        "numberOfBytes": "32",
        "value": "t_struct(SyntheticCollection)19745_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3867_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3867_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)10793_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 10792,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)3867_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 3864,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3866,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SyntheticCollection)19745_storage": {
        "encoding": "inplace",
        "label": "struct SyntheticCollection",
        "members": [
          {
            "astId": 19720,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "collectionID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19722,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "collectionManagerAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19724,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "jotAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 19726,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "jotPoolAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 19728,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "redemptionPoolAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 19730,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "jotPairAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 19732,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "syntheticNFTAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 19734,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "originalName",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 19736,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "originalSymbol",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 19738,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "lTokenAddress",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 19740,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "pTokenAddress",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 19742,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "perpetualPoolLiteAddress",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          },
          {
            "astId": 19744,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "poolInfo",
            "offset": 0,
            "slot": "12",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}