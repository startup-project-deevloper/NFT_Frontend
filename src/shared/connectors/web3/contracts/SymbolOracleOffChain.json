{
  "address": "0xae77d079a7d0a7420b070643b53F8CC1bfb074Ea",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signatory_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocolParameters_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signatory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v_",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r_",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s_",
          "type": "bytes32"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa43f4d559394c2bd5fad00f756063512742418df6b81c0b5cac73a239cd9fbae",
  "receipt": {
    "to": null,
    "from": "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
    "contractAddress": "0xae77d079a7d0a7420b070643b53F8CC1bfb074Ea",
    "transactionIndex": 0,
    "gasUsed": "383437",
    "logsBloom": "0x
    "blockHash": "0x36e720808da27137760b3d493565ceba9e237065cdb68ef216d7f14717055e47",
    "transactionHash": "0xa43f4d559394c2bd5fad00f756063512742418df6b81c0b5cac73a239cd9fbae",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19386393,
        "transactionHash": "0xa43f4d559394c2bd5fad00f756063512742418df6b81c0b5cac73a239cd9fbae",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000041633a6894600000000000000000000000000000000000000000000000000717412b3ed2f6d4c0000000000000000000000000000000000000000000000000014d03289059600000000000000000000000000000000000000000000000000716ffc8046a6274c0000000000000000000000000000000000000000000000000018e6662f8edc00",
        "logIndex": 0,
        "blockHash": "0x36e720808da27137760b3d493565ceba9e237065cdb68ef216d7f14717055e47"
      }
    ],
    "blockNumber": 19386393,
    "cumulativeGasUsed": "383437",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D"
  ],
  "solcInputHash": "9631ee2e88a0c516d11e20450e96dfe6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signatory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolParameters_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/perpetual_futures/SymbolOracleOffChain.sol\":\"SymbolOracleOffChain\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/polygon/governance/FuturesProtocolParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\n// ! TODO: EMIT THE EVENTS AND ADD VALIDATIONS\\n\\n/**\\n * @title future parameters controlled by governance\\n * @notice the owner of this contract is the timelock controller of the governance feature\\n */\\ncontract FuturesProtocolParameters is Ownable {\\n    int256 public minPoolMarginRatio;\\n    int256 public minInitialMarginRatio;\\n    int256 public minMaintenanceMarginRatio;\\n    int256 public minLiquidationReward;\\n    int256 public maxLiquidationReward;\\n    int256 public liquidationCutRatio;\\n    int256 public protocolFeeCollectRatio;\\n    address public futuresOracleAddress;\\n    int256 public futuresMultiplier;\\n    int256 public futuresFeeRatio;\\n    int256 public futuresFundingRateCoefficient;\\n    uint256 public oracleDelay;\\n\\n    event MinPoolMarginRatioUpdated(address value);\\n    event MinInitialMarginRatioUpdated(address value);\\n    event MinMaintenanceMarginRatioUpdated(address value);\\n    event MinLiquidationRewardUpdated(address value);\\n    event MaxLiquidationRewardUpdated(address value);\\n    event LiquidationCutRatioUpdated(address value);\\n    event ProtocolFeeCollectRatioUpdated(address value);\\n    event OracleDelayUpdated(address value);\\n    event FuturesOracleAddressUpdated(address value);\\n    event FuturesMultiplierUpdated(int256 value);\\n    event FuturesFeeRatioUpdated(int256 value);\\n    event FuturesFundingRateCoefficientUpdated(int256 value);\\n\\n    /**\\n     * @dev set initial state of the data\\n     */\\n    constructor(\\n        MainParams memory mainParams,\\n        address _futuresOracleAddress,\\n        int256 _futuresMultiplier,\\n        int256 _futuresFeeRatio,\\n        int256 _futuresFundingRateCoefficient,\\n        uint256 _oracleDelay,\\n        address _governanceContractAddress\\n    ) {\\n        require(_futuresOracleAddress != address(0), \\\"Oracle address can't be zero\\\");\\n        require(_futuresMultiplier > 0, \\\"Invalid futures multiplier\\\");\\n        require(_futuresFeeRatio > 0, \\\"Invalid futures fee ratio\\\");\\n        require(_futuresFundingRateCoefficient > 0, \\\"Invalid futures funding rate coefficient\\\");\\n\\n        minPoolMarginRatio = mainParams.minPoolMarginRatio;\\n        minInitialMarginRatio = mainParams.minInitialMarginRatio;\\n        minMaintenanceMarginRatio = mainParams.minMaintenanceMarginRatio;\\n        minLiquidationReward = mainParams.minLiquidationReward;\\n        maxLiquidationReward = mainParams.maxLiquidationReward;\\n        liquidationCutRatio = mainParams.liquidationCutRatio;\\n        protocolFeeCollectRatio = mainParams.protocolFeeCollectRatio;\\n        futuresOracleAddress = _futuresOracleAddress;\\n        futuresMultiplier = _futuresMultiplier;\\n        futuresFeeRatio = _futuresFeeRatio;\\n        futuresFundingRateCoefficient = _futuresFundingRateCoefficient;\\n        oracleDelay = _oracleDelay;\\n\\n        // transfer ownership\\n        transferOwnership(_governanceContractAddress);\\n    }\\n\\n    function setMinPoolMarginRatio(int256 _minPoolMarginRatio) external onlyOwner {\\n        minPoolMarginRatio = _minPoolMarginRatio;\\n    }\\n\\n    function setMinInitialMarginRatio(int256 _minInitialMarginRatio) external onlyOwner {\\n        minInitialMarginRatio = _minInitialMarginRatio;\\n    }\\n\\n    function setMinMaintenanceMarginRatio(int256 _minMaintenanceMarginRatio) external onlyOwner {\\n        minMaintenanceMarginRatio = _minMaintenanceMarginRatio;\\n    }\\n\\n    function setMinLiquidationReward(int256 _minLiquidationReward) external onlyOwner {\\n        minLiquidationReward = _minLiquidationReward;\\n    }\\n\\n    function setMaxLiquidationReward(int256 _maxLiquidationReward) external onlyOwner {\\n        maxLiquidationReward = _maxLiquidationReward;\\n    }\\n\\n    function setLiquidationCutRatio(int256 _liquidationCutRatio) external onlyOwner {\\n        liquidationCutRatio = _liquidationCutRatio;\\n    }\\n\\n    function setProtocolFeeCollectRatio(int256 _protocolFeeCollectRatio) external onlyOwner {\\n        protocolFeeCollectRatio = _protocolFeeCollectRatio;\\n    }\\n\\n    function setFuturesOracleAddress(address futuresOracleAddress_) external onlyOwner {\\n        require(futuresOracleAddress_ != address(0), \\\"Oracle address can't be zero\\\");\\n        futuresOracleAddress = futuresOracleAddress_;\\n        emit FuturesOracleAddressUpdated(futuresOracleAddress_);\\n    }\\n\\n    function setFuturesMultiplier(int256 futuresMultiplier_) external onlyOwner {\\n        require(futuresMultiplier_ > 1 hours, \\\"Invalid futures multiplier\\\");\\n        futuresMultiplier = futuresMultiplier_;\\n        emit FuturesMultiplierUpdated(futuresMultiplier_);\\n    }\\n\\n    function setFuturesFeeRatio(int256 futuresFeeRatio_) external onlyOwner {\\n        require(futuresFeeRatio_ > 1 hours, \\\"Invalid futures fee ratio\\\");\\n        futuresFeeRatio = futuresFeeRatio_;\\n        emit FuturesFeeRatioUpdated(futuresFeeRatio_);\\n    }\\n\\n    function setFuturesFundingRateCoefficient(int256 futuresFundingRateCoefficient_) external onlyOwner {\\n        require(futuresFundingRateCoefficient_ > 1 hours, \\\"Invalid futures funding rate coefficient\\\");\\n        futuresFundingRateCoefficient = futuresFundingRateCoefficient_;\\n        emit FuturesFundingRateCoefficientUpdated(futuresFundingRateCoefficient_);\\n    }\\n\\n    function setOracleDelay(uint256 _oracleDelay) external onlyOwner {\\n        oracleDelay = _oracleDelay;\\n    }\\n}\\n\",\"keccak256\":\"0xd3f796ece8ad60835d27c94ea9e048c7b2351ab3e89f4cbd761ebfb7cd672996\",\"license\":\"MIT\"},\"contracts/polygon/governance/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct MainParams {\\n    int256 minPoolMarginRatio;\\n    int256 minInitialMarginRatio;\\n    int256 minMaintenanceMarginRatio;\\n    int256 minLiquidationReward;\\n    int256 maxLiquidationReward;\\n    int256 liquidationCutRatio;\\n    int256 protocolFeeCollectRatio;\\n}\\n\",\"keccak256\":\"0x8121a2f034679ec2a98fe3d5906979582191b29ce6f15343e3096591cb06bb69\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/SymbolOracleOffChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../governance/FuturesProtocolParameters.sol\\\";\\nimport \\\"./interfaces/IOracleWithUpdate.sol\\\";\\n\\ncontract SymbolOracleOffChain is IOracleWithUpdate, Initializable {\\n    address public immutable signatory;\\n    FuturesProtocolParameters private _protocolParameters;\\n\\n    uint256 public timestamp;\\n    uint256 public price;\\n\\n    address private _deployer;\\n\\n    constructor(address signatory_) {\\n        signatory = signatory_;\\n        _deployer = msg.sender;\\n    }\\n\\n    function initialize(address protocolParameters_) external initializer {\\n        require(msg.sender == _deployer, \\\"Only deployer can initialize\\\");\\n        _protocolParameters = FuturesProtocolParameters(protocolParameters_);\\n    }\\n\\n    function getPrice() external view override returns (uint256) {\\n        // solhint-disable-next-line\\n        require(block.timestamp - timestamp <= _protocolParameters.oracleDelay(), \\\"Price expired\\\");\\n        return price;\\n    }\\n\\n    // update oracle price using off chain signed price\\n    // the signature must be verified in order for the price to be updated\\n    function updatePrice(\\n        address address_,\\n        uint256 timestamp_,\\n        uint256 price_,\\n        uint8 v_,\\n        bytes32 r_,\\n        bytes32 s_\\n    ) external override {\\n        uint256 lastTimestamp = timestamp;\\n        if (timestamp_ > lastTimestamp) {\\n            if (v_ == 27 || v_ == 28) {\\n                bytes32 message = keccak256(abi.encodePacked(address_, timestamp_, price_));\\n                bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message));\\n                address signer = ecrecover(hash, v_, r_, s_);\\n                if (signer == signatory) {\\n                    timestamp = timestamp_;\\n                    price = price_;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x95d79e37c02ca176cdfdc256a8c03888e2b94857792b23383d13e34f0b702d4d\",\"license\":\"MIT\"},\"contracts/polygon/perpetual_futures/interfaces/IOracleWithUpdate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IOracleWithUpdate {\\n    function getPrice() external returns (uint256);\\n\\n    function updatePrice(\\n        address address_,\\n        uint256 timestamp,\\n        uint256 price,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x58accbd08ad4a41e75776d47c3e47ce2546854183b2575294f978b3186ecacd2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161063438038061063483398101604081905261002f91610058565b60601b6001600160601b03191660805260038054336001600160a01b0319909116179055610086565b600060208284031215610069578081fd5b81516001600160a01b038116811461007f578182fd5b9392505050565b60805160601c61058a6100aa6000396000818160810152610220015261058a6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636d0af48014610067578063913123ca1461007c57806398d5fdca146100c0578063a035b1fe146100d6578063b80777ea146100df578063c4d66de8146100e8575b600080fd5b61007a6100753660046104bb565b6100fb565b005b6100a37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c8610270565b6040519081526020016100b7565b6100c860025481565b6100c860015481565b61007a6100f636600461049a565b61034e565b60015480861115610267578360ff16601b148061011b57508360ff16601c145b15610267576040516bffffffffffffffffffffffff19606089901b16602082015260348101879052605481018690526000906074016040516020818303038152906040528051906020012090506000816040516020016101a791907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015610212573d6000803e3d6000fd5b5050506020604051035190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141561026357600189905560028890555b5050505b50505050505050565b60008060029054906101000a90046001600160a01b03166001600160a01b031663aa8f881f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102bf57600080fd5b505afa1580156102d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f79190610519565b6001546103049042610531565b11156103475760405162461bcd60e51b815260206004820152600d60248201526c141c9a58d948195e1c1a5c9959609a1b60448201526064015b60405180910390fd5b5060025490565b600054610100900460ff1680610367575060005460ff16155b6103ca5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161033e565b600054610100900460ff161580156103ec576000805461ffff19166101011790555b6003546001600160a01b031633146104465760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c79206465706c6f7965722063616e20696e697469616c697a6500000000604482015260640161033e565b6000805462010000600160b01b031916620100006001600160a01b03851602179055801561047a576000805461ff00191690555b5050565b80356001600160a01b038116811461049557600080fd5b919050565b6000602082840312156104ab578081fd5b6104b48261047e565b9392505050565b60008060008060008060c087890312156104d3578182fd5b6104dc8761047e565b95506020870135945060408701359350606087013560ff811681146104ff578283fd5b9598949750929560808101359460a0909101359350915050565b60006020828403121561052a578081fd5b5051919050565b60008282101561054f57634e487b7160e01b81526011600452602481fd5b50039056fea2646970667358221220197c12b1868e2730db6de6622959df9c1bd040b3c4e3e1db371e4c5759dc1c3c64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80636d0af48014610067578063913123ca1461007c57806398d5fdca146100c0578063a035b1fe146100d6578063b80777ea146100df578063c4d66de8146100e8575b600080fd5b61007a6100753660046104bb565b6100fb565b005b6100a37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c8610270565b6040519081526020016100b7565b6100c860025481565b6100c860015481565b61007a6100f636600461049a565b61034e565b60015480861115610267578360ff16601b148061011b57508360ff16601c145b15610267576040516bffffffffffffffffffffffff19606089901b16602082015260348101879052605481018690526000906074016040516020818303038152906040528051906020012090506000816040516020016101a791907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015610212573d6000803e3d6000fd5b5050506020604051035190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141561026357600189905560028890555b5050505b50505050505050565b60008060029054906101000a90046001600160a01b03166001600160a01b031663aa8f881f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102bf57600080fd5b505afa1580156102d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f79190610519565b6001546103049042610531565b11156103475760405162461bcd60e51b815260206004820152600d60248201526c141c9a58d948195e1c1a5c9959609a1b60448201526064015b60405180910390fd5b5060025490565b600054610100900460ff1680610367575060005460ff16155b6103ca5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161033e565b600054610100900460ff161580156103ec576000805461ffff19166101011790555b6003546001600160a01b031633146104465760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c79206465706c6f7965722063616e20696e697469616c697a6500000000604482015260640161033e565b6000805462010000600160b01b031916620100006001600160a01b03851602179055801561047a576000805461ff00191690555b5050565b80356001600160a01b038116811461049557600080fd5b919050565b6000602082840312156104ab578081fd5b6104b48261047e565b9392505050565b60008060008060008060c087890312156104d3578182fd5b6104dc8761047e565b95506020870135945060408701359350606087013560ff811681146104ff578283fd5b9598949750929560808101359460a0909101359350915050565b60006020828403121561052a578081fd5b5051919050565b60008282101561054f57634e487b7160e01b81526011600452602481fd5b50039056fea2646970667358221220197c12b1868e2730db6de6622959df9c1bd040b3c4e3e1db371e4c5759dc1c3c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5456,
        "contract": "contracts/polygon/perpetual_futures/SymbolOracleOffChain.sol:SymbolOracleOffChain",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5459,
        "contract": "contracts/polygon/perpetual_futures/SymbolOracleOffChain.sol:SymbolOracleOffChain",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 19512,
        "contract": "contracts/polygon/perpetual_futures/SymbolOracleOffChain.sol:SymbolOracleOffChain",
        "label": "_protocolParameters",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(FuturesProtocolParameters)13710"
      },
      {
        "astId": 19514,
        "contract": "contracts/polygon/perpetual_futures/SymbolOracleOffChain.sol:SymbolOracleOffChain",
        "label": "timestamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 19516,
        "contract": "contracts/polygon/perpetual_futures/SymbolOracleOffChain.sol:SymbolOracleOffChain",
        "label": "price",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 19518,
        "contract": "contracts/polygon/perpetual_futures/SymbolOracleOffChain.sol:SymbolOracleOffChain",
        "label": "_deployer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FuturesProtocolParameters)13710": {
        "encoding": "inplace",
        "label": "contract FuturesProtocolParameters",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}