{
  "address": "0x571F9Ce2853DA3D6f0335a4Ce7D4cD3b3480E344",
  "abi": [],
  "transactionHash": "0xb5110facb84ae005db60c91fb87385ce5a614dc54662e8d9a3ee717b9d7c6971",
  "receipt": {
    "to": null,
    "from": "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
    "contractAddress": "0x571F9Ce2853DA3D6f0335a4Ce7D4cD3b3480E344",
    "transactionIndex": 1,
    "gasUsed": "490080",
    "logsBloom": "0x
    "blockHash": "0xd81c9ece8ed8c147aa29dd0d7748221c26ef774de6bde89ed92f10134b69e9e0",
    "transactionHash": "0xb5110facb84ae005db60c91fb87385ce5a614dc54662e8d9a3ee717b9d7c6971",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 20709339,
        "transactionHash": "0xb5110facb84ae005db60c91fb87385ce5a614dc54662e8d9a3ee717b9d7c6971",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000005392cecef400000000000000000000000000000000000000000000000000016246761ebee51aa0000000000000000000000000000000000000000000000eb62a33cd9bc7e1077000000000000000000000000000000000000000000000000161f2e34feff11aa0000000000000000000000000000000000000000000000eb62a87606a96d5077",
        "logIndex": 2,
        "blockHash": "0xd81c9ece8ed8c147aa29dd0d7748221c26ef774de6bde89ed92f10134b69e9e0"
      }
    ],
    "blockNumber": 20709339,
    "cumulativeGasUsed": "556225",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0c3281bdb35a42940d857b26ae71c513",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"priviprotocol\",\"kind\":\"dev\",\"methods\":{\"buyJotTokens(TokenData storage,uint256)\":{\"details\":\"helper for buy jot tokens\",\"params\":{\"amount\":\"the quantity of jots to buy\"}},\"decreaseSellingSupply(TokenData storage,uint256)\":{\"details\":\"helper for decrease selling supply\",\"params\":{\"amount\":\"the quantity of supply to decrease\"}},\"depositJotTokens(TokenData storage,uint256)\":{\"details\":\"helper for deposit jot tokens\",\"params\":{\"amount\":\"the quantity of jots to deposit\"}},\"increaseSellingSupply(TokenData storage,uint256)\":{\"details\":\"helper for increase selling supply\",\"params\":{\"amount\":\"the quantity of supply to increase\"}},\"updatePriceFraction(TokenData storage,uint256)\":{\"details\":\"helper for update price fraction\",\"params\":{\"newFractionPrice\":\"the quantity of supply to increase\"}}},\"title\":\"helpers for synthetic token operations\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/libraries/SyntheticTokenLibrary.sol\":\"SyntheticTokenLibrary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/polygon/governance/ProtocolParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title parameters controlled by governance\\n * @notice the owner of this contract is the timelock controller of the governance feature\\n */\\ncontract ProtocolParameters is Ownable {\\n    // interval in seconds between the one flip to another in one lock contract\\n    uint256 public flippingInterval;\\n\\n    // amount of reward that the flipper gets if he is right on the outcome\\n    uint256 public flippingReward;\\n\\n    // amount of jots into play in each flip\\n    uint256 public flippingAmount;\\n\\n    // the duration of an NFT auction in seconds\\n    uint256 public auctionDuration;\\n\\n    // the period of grace to recover the nft after reaching 0 owner supply\\n    uint256 public recoveryThreshold;\\n\\n    // Address of the funding token for new manager\\n    address public fundingTokenAddress;\\n\\n    uint256 public buybackPrice;\\n\\n    uint256 public liquidityPerpetualPercentage;\\n\\n    uint256 public liquidityUniswapPercentage;\\n\\n    event FlippingIntervalUpdated(uint256 from, uint256 to);\\n    event FlippingRewardUpdated(uint256 from, uint256 to);\\n    event FlippingAmountUpdated(uint256 from, uint256 to);\\n    event AuctionDurationUpdated(uint256 from, uint256 to);\\n    event RecoveryThresholdUpdated(uint256 from, uint256 to);\\n    event FundingTokenAddressUpdated(address from, address to);\\n    event BuybackPriceUpdated(uint256 from, uint256 to);\\n    event LiquidityPercentagesUpdated(\\n        uint256 perpetualFrom, \\n        uint256 uniswapFrom, \\n        uint256 perpetualTo, \\n        uint256 uniswapTo\\n    );\\n\\n    /**\\n     * @dev sets the default (initial) values of the parameters\\n     *      also transfers the ownership to the governance\\n     */\\n    constructor(\\n        uint256 flippingInterval_,\\n        uint256 flippingReward_,\\n        uint256 flippingAmount_,\\n        uint256 auctionDuration_,\\n        address governanceContractAddress_,\\n        address fundingTokenAddress_,\\n        uint256 liquidityPerpetualPercentage_,\\n        uint256 liquidityUniswapPercentage_,\\n        uint256 buybackPrice_\\n    ) {\\n        require(flippingReward_ > 0, \\\"Invalid Reward\\\");\\n        require(flippingAmount_ > 0, \\\"Invalid Amount\\\");\\n        require(flippingReward_ < flippingAmount_, \\\"Reward should be lower than Amount\\\");\\n        require(flippingInterval_ > 15 minutes, \\\"Flipping Interval should be greater than 15 minutes\\\");\\n        require(auctionDuration_ > 1 hours, \\\"Auction duration should be greater than 1 hour\\\");\\n        require(fundingTokenAddress_ != address(0), \\\"Funding token address can't be zero\\\");\\n        require(buybackPrice_ > 0, \\\"Buyback price can't be zero\\\");\\n        require((liquidityPerpetualPercentage_ + liquidityUniswapPercentage_ == 100), \\\"uniswap and perpetual percentages must sum 100\\\");\\n        flippingInterval = flippingInterval_;\\n        flippingReward = flippingReward_;\\n        flippingAmount = flippingAmount_;\\n        auctionDuration = auctionDuration_;\\n        fundingTokenAddress = fundingTokenAddress_;\\n        liquidityPerpetualPercentage = liquidityPerpetualPercentage_;\\n        liquidityUniswapPercentage = liquidityUniswapPercentage_; \\n        buybackPrice = buybackPrice_;\\n\\n        // transfer ownership\\n        transferOwnership(governanceContractAddress_);\\n    }\\n\\n    function setFlippingInterval(uint256 flippingInterval_) external onlyOwner {\\n        require(flippingInterval_ > 15 minutes, \\\"Flipping Interval should be greater than 15 minutes\\\");\\n        emit FlippingIntervalUpdated(flippingInterval, flippingInterval_);\\n        flippingInterval = flippingInterval_;\\n    }\\n\\n    function setFlippingReward(uint256 flippingReward_) external onlyOwner {\\n        require(flippingReward_ > 0, \\\"Invalid Reward\\\");\\n        require(flippingReward_ < flippingAmount, \\\"Reward should be lower than Amount\\\");\\n        emit FlippingRewardUpdated(flippingReward, flippingReward_);\\n        flippingReward = flippingReward_;\\n    }\\n\\n    function setFlippingAmount(uint256 flippingAmount_) external onlyOwner {\\n        require(flippingAmount_ > 0, \\\"Invalid Amount\\\");\\n        require(flippingReward < flippingAmount_, \\\"Reward should be lower than Amount\\\");\\n        emit FlippingAmountUpdated(flippingAmount, flippingAmount_);\\n        flippingAmount = flippingAmount_;\\n    }\\n\\n    function setAuctionDuration(uint256 auctionDuration_) external onlyOwner {\\n        require(auctionDuration_ > 1 hours, \\\"Auction duration should be greater than 1 hour\\\");\\n        emit AuctionDurationUpdated(auctionDuration, auctionDuration_);\\n        auctionDuration = auctionDuration_;\\n    }\\n\\n    function setRecoveryThreshold(uint256 recoveryThreshold_) external onlyOwner {\\n        require(recoveryThreshold_ > 1 hours, \\\"Recovery threshold should be greater than 1 hour\\\");\\n        emit RecoveryThresholdUpdated(recoveryThreshold, recoveryThreshold_);\\n        recoveryThreshold = recoveryThreshold_;\\n    }\\n\\n    function setFundingTokenAddress(address fundingTokenAddress_) external onlyOwner {\\n        require(fundingTokenAddress_ != address(0), \\\"Funding token address can't be zero\\\");\\n        emit FundingTokenAddressUpdated(fundingTokenAddress, fundingTokenAddress_);\\n        fundingTokenAddress = fundingTokenAddress_;\\n    }\\n\\n    function setBuybackPrice(uint256 buybackPrice_) external onlyOwner {\\n        require(buybackPrice > 0, \\\"Buyback price can't be zero\\\");\\n        emit BuybackPriceUpdated(buybackPrice, buybackPrice_);\\n        buybackPrice = buybackPrice_;\\n    }\\n\\n    function setLiquidityPercentages(\\n        uint256 liquidityUniswapPercentage_, uint256 liquidityPerpetualPercentage_\\n    ) external onlyOwner {\\n        require((liquidityUniswapPercentage_ + liquidityPerpetualPercentage_) == 100, \\\"Values must sum 100\\\");\\n\\n        emit LiquidityPercentagesUpdated(\\n            liquidityPerpetualPercentage,\\n            liquidityUniswapPercentage,\\n            liquidityPerpetualPercentage_,\\n            liquidityUniswapPercentage_\\n        );\\n\\n        liquidityPerpetualPercentage = liquidityPerpetualPercentage_;\\n        liquidityUniswapPercentage = liquidityUniswapPercentage_;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0075a336cae5694f3521edeb0e43fe9dab1d4f23aff6d292d09d336ba3d7e302\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Enums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nenum State {\\n    NEW,\\n    VERIFYING,\\n    VERIFIED,\\n    CHANGING\\n}\\n\",\"keccak256\":\"0x3d143a1f6fa319fd3b749bc8b9c36d00db0f51f6d301e812b62927df25fb487c\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Enums.sol\\\";\\n\\nstruct TokenData {\\n    uint256 originalTokenID;\\n    uint256 ownerSupply;\\n    uint256 sellingSupply;\\n    uint256 soldSupply;\\n    uint256 liquiditySupply;\\n    uint256 liquiditySold;\\n    uint256 fractionPrices;\\n    uint256 lastFlipTime;\\n    uint256 liquidityTokenBalance;\\n    uint256 uniswapJotLiquidity; // solhint-disable-line\\n    uint256 uniswapFundingLiquidity; // solhint-disable-line\\n    uint256 perpetualFuturesLShares;\\n    State state;\\n}\\n\\nstruct Flip {\\n    uint256 tokenId;\\n    uint64 prediction;\\n    address player;\\n}\\n\\nstruct ChangeNonce {\\n    uint256 nonce;\\n    uint256 newTokenId;\\n    address owner;\\n}\\n\",\"keccak256\":\"0xcfa028ba095fdc6b6d9ae3269ee504cf6eab6429c34ea16f2d54cff88cd7c9c5\",\"license\":\"MIT\"},\"contracts/polygon/libraries/ProtocolConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary ProtocolConstants {\\r\\n    uint256 public constant JOT_SUPPLY = 10000000000000000000000;\\r\\n}\\r\\n\",\"keccak256\":\"0x3bf90c47615a612a085151de496ab7151554563dee175767f0e1895581b7b530\",\"license\":\"MIT\"},\"contracts/polygon/libraries/SyntheticTokenLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\nimport \\\"../implementations/Structs.sol\\\";\\nimport \\\"./ProtocolConstants.sol\\\";\\n\\n/**\\n * @title helpers for synthetic token operations\\n * @author priviprotocol\\n */\\nlibrary SyntheticTokenLibrary {\\n    /**\\n     * @dev helper for increase selling supply\\n     * @param amount the quantity of supply to increase\\n     */\\n    function increaseSellingSupply(TokenData storage token, uint256 amount) external {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n        require(token.ownerSupply >= amount, \\\"You do not have enough tokens left\\\");\\n\\n        token.ownerSupply -= amount;\\n        token.sellingSupply += amount / 2;\\n        token.liquiditySupply += amount / 2;\\n    }\\n\\n    /**\\n     * @dev helper for decrease selling supply\\n     * @param amount the quantity of supply to decrease\\n     */\\n    function decreaseSellingSupply(TokenData storage token, uint256 amount) external {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n\\n        require(token.liquiditySupply >= amount / 2, \\\"You do not have enough liquidity left\\\");\\n        require(token.sellingSupply >= amount / 2, \\\"You do not have enough selling supply left\\\");\\n\\n        token.ownerSupply += amount;\\n        token.sellingSupply -= amount / 2;\\n        token.liquiditySupply -= amount / 2;\\n    }\\n\\n    /**\\n     * @dev helper for update price fraction\\n     * @param newFractionPrice the quantity of supply to increase\\n     */\\n    function updatePriceFraction(TokenData storage token, uint256 newFractionPrice) external {\\n        require(newFractionPrice > 0, \\\"Fraction price must be greater than zero\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n\\n        token.fractionPrices = newFractionPrice;\\n    }\\n\\n    /**\\n     * @dev helper for buy jot tokens\\n     * @param amount the quantity of jots to buy\\n     */\\n    function buyJotTokens(TokenData storage token, uint256 amount) external returns (uint256 amountToPay) {\\n\\n        uint256 amountAux;\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n\\n        // calculate amount left\\n        uint256 amountLeft = token.sellingSupply - token.soldSupply;\\n\\n        // if amount left is lesser than buying amount\\n        // then buying amount = amount left\\n        if (amountLeft < amount) {\\n            amountAux = amountLeft;\\n        } else {\\n            amountAux = amount;\\n        }\\n\\n        amountToPay = (amountAux * token.fractionPrices) / 10**18;\\n\\n        // Can't sell zero tokens\\n        require(amountToPay > 0, \\\"No tokens left!\\\");\\n\\n        //Increase sold supply (amount in token) and liquidity sold (amount in ether)\\n        token.soldSupply += amount;\\n        token.liquiditySold += amountToPay;\\n    }\\n\\n    /**\\n     * @dev helper for deposit jot tokens\\n     * @param amount the quantity of jots to deposit\\n     */\\n    function depositJotTokens(TokenData storage token, uint256 amount) external {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n\\n        // save gas through memory\\n        uint256 ownerSupply = token.ownerSupply;\\n\\n        require(!isLocked(token.state, ownerSupply), \\\"Token is locked!\\\");\\n\\n        uint256 result = ownerSupply + amount;\\n        require(result <= ProtocolConstants.JOT_SUPPLY, \\\"You can't deposit more than the Jot Supply limit\\\");\\n\\n        token.ownerSupply += amount;\\n    }\\n\\n    function isLocked(State state, uint256 ownerSupply) internal pure returns (bool) {\\n        return state != State.VERIFIED || ownerSupply == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xe14dce07e43f0a1dd8eec8acba6ee2293f6b7bec33ac6605985bf0f301868cd6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6107e661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c806308a3547214610066578063319b1d54146100885780637d0c4dea146100a8578063ca910320146100c8578063d52cb9cb146100e8575b600080fd5b81801561007257600080fd5b506100866100813660046106b2565b61011a565b005b81801561009457600080fd5b506100866100a33660046106b2565b6101bc565b8180156100b457600080fd5b506100866100c33660046106b2565b610352565b8180156100d457600080fd5b506100866100e33660046106b2565b610461565b8180156100f457600080fd5b506101086101033660046106b2565b610555565b60405190815260200160405180910390f35b600081116101805760405162461bcd60e51b815260206004820152602860248201527f4672616374696f6e207072696365206d7573742062652067726561746572207460448201526768616e207a65726f60c01b60648201526084015b60405180910390fd5b600c82015460018301546101979160ff169061067c565b156101b45760405162461bcd60e51b815260040161017790610702565b600690910155565b600081116101dc5760405162461bcd60e51b8152600401610177906106d3565b600c82015460018301546101f39160ff169061067c565b156102105760405162461bcd60e51b815260040161017790610702565b61021b600282610744565b8260040154101561027c5760405162461bcd60e51b815260206004820152602560248201527f596f7520646f206e6f74206861766520656e6f756768206c6971756964697479604482015264081b19599d60da1b6064820152608401610177565b610287600282610744565b826002015410156102ed5760405162461bcd60e51b815260206004820152602a60248201527f596f7520646f206e6f74206861766520656e6f7567682073656c6c696e6720736044820152691d5c1c1b1e481b19599d60b21b6064820152608401610177565b80826001016000828254610301919061072c565b909155506103129050600282610744565b8260020160008282546103259190610783565b909155506103369050600282610744565b8260040160008282546103499190610783565b90915550505050565b600081116103725760405162461bcd60e51b8152600401610177906106d3565b600c82015460018301546103899160ff169061067c565b156103a65760405162461bcd60e51b815260040161017790610702565b80826001015410156104055760405162461bcd60e51b815260206004820152602260248201527f596f7520646f206e6f74206861766520656e6f75676820746f6b656e73206c65604482015261199d60f21b6064820152608401610177565b808260010160008282546104199190610783565b9091555061042a9050600282610744565b82600201600082825461043d919061072c565b9091555061044e9050600282610744565b826004016000828254610349919061072c565b600081116104815760405162461bcd60e51b8152600401610177906106d3565b6001820154600c8301546104989060ff168261067c565b156104b55760405162461bcd60e51b815260040161017790610702565b60006104c1838361072c565b905069021e19e0c9bab24000008111156105365760405162461bcd60e51b815260206004820152603060248201527f596f752063616e2774206465706f736974206d6f7265207468616e207468652060448201526f129bdd0814dd5c1c1b1e481b1a5b5a5d60821b6064820152608401610177565b8284600101600082825461054a919061072c565b909155505050505050565b600080600083116105785760405162461bcd60e51b8152600401610177906106d3565b600c840154600185015461058f9160ff169061067c565b156105ac5760405162461bcd60e51b815260040161017790610702565b6000846003015485600201546105c29190610783565b9050838110156105d4578091506105d8565b8391505b670de0b6b3a76400008560060154836105f19190610764565b6105fb9190610744565b92506000831161063f5760405162461bcd60e51b815260206004820152600f60248201526e4e6f20746f6b656e73206c6566742160881b6044820152606401610177565b83856003016000828254610653919061072c565b925050819055508285600501600082825461066e919061072c565b909155509295945050505050565b600060028360038111156106a057634e487b7160e01b600052602160045260246000fd5b1415806106ab575081155b9392505050565b600080604083850312156106c4578182fd5b50508035926020909101359150565b602080825260159082015274416d6f756e742063616e2774206265207a65726f2160581b604082015260600190565b60208082526010908201526f546f6b656e206973206c6f636b65642160801b604082015260600190565b6000821982111561073f5761073f61079a565b500190565b60008261075f57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561077e5761077e61079a565b500290565b6000828210156107955761079561079a565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220e38a02a8fb7bda694019fca023645935eb42a83559b798aefa43314ebe52ccfe64736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c806308a3547214610066578063319b1d54146100885780637d0c4dea146100a8578063ca910320146100c8578063d52cb9cb146100e8575b600080fd5b81801561007257600080fd5b506100866100813660046106b2565b61011a565b005b81801561009457600080fd5b506100866100a33660046106b2565b6101bc565b8180156100b457600080fd5b506100866100c33660046106b2565b610352565b8180156100d457600080fd5b506100866100e33660046106b2565b610461565b8180156100f457600080fd5b506101086101033660046106b2565b610555565b60405190815260200160405180910390f35b600081116101805760405162461bcd60e51b815260206004820152602860248201527f4672616374696f6e207072696365206d7573742062652067726561746572207460448201526768616e207a65726f60c01b60648201526084015b60405180910390fd5b600c82015460018301546101979160ff169061067c565b156101b45760405162461bcd60e51b815260040161017790610702565b600690910155565b600081116101dc5760405162461bcd60e51b8152600401610177906106d3565b600c82015460018301546101f39160ff169061067c565b156102105760405162461bcd60e51b815260040161017790610702565b61021b600282610744565b8260040154101561027c5760405162461bcd60e51b815260206004820152602560248201527f596f7520646f206e6f74206861766520656e6f756768206c6971756964697479604482015264081b19599d60da1b6064820152608401610177565b610287600282610744565b826002015410156102ed5760405162461bcd60e51b815260206004820152602a60248201527f596f7520646f206e6f74206861766520656e6f7567682073656c6c696e6720736044820152691d5c1c1b1e481b19599d60b21b6064820152608401610177565b80826001016000828254610301919061072c565b909155506103129050600282610744565b8260020160008282546103259190610783565b909155506103369050600282610744565b8260040160008282546103499190610783565b90915550505050565b600081116103725760405162461bcd60e51b8152600401610177906106d3565b600c82015460018301546103899160ff169061067c565b156103a65760405162461bcd60e51b815260040161017790610702565b80826001015410156104055760405162461bcd60e51b815260206004820152602260248201527f596f7520646f206e6f74206861766520656e6f75676820746f6b656e73206c65604482015261199d60f21b6064820152608401610177565b808260010160008282546104199190610783565b9091555061042a9050600282610744565b82600201600082825461043d919061072c565b9091555061044e9050600282610744565b826004016000828254610349919061072c565b600081116104815760405162461bcd60e51b8152600401610177906106d3565b6001820154600c8301546104989060ff168261067c565b156104b55760405162461bcd60e51b815260040161017790610702565b60006104c1838361072c565b905069021e19e0c9bab24000008111156105365760405162461bcd60e51b815260206004820152603060248201527f596f752063616e2774206465706f736974206d6f7265207468616e207468652060448201526f129bdd0814dd5c1c1b1e481b1a5b5a5d60821b6064820152608401610177565b8284600101600082825461054a919061072c565b909155505050505050565b600080600083116105785760405162461bcd60e51b8152600401610177906106d3565b600c840154600185015461058f9160ff169061067c565b156105ac5760405162461bcd60e51b815260040161017790610702565b6000846003015485600201546105c29190610783565b9050838110156105d4578091506105d8565b8391505b670de0b6b3a76400008560060154836105f19190610764565b6105fb9190610744565b92506000831161063f5760405162461bcd60e51b815260206004820152600f60248201526e4e6f20746f6b656e73206c6566742160881b6044820152606401610177565b83856003016000828254610653919061072c565b925050819055508285600501600082825461066e919061072c565b909155509295945050505050565b600060028360038111156106a057634e487b7160e01b600052602160045260246000fd5b1415806106ab575081155b9392505050565b600080604083850312156106c4578182fd5b50508035926020909101359150565b602080825260159082015274416d6f756e742063616e2774206265207a65726f2160581b604082015260600190565b60208082526010908201526f546f6b656e206973206c6f636b65642160801b604082015260600190565b6000821982111561073f5761073f61079a565b500190565b60008261075f57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561077e5761077e61079a565b500290565b6000828210156107955761079561079a565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220e38a02a8fb7bda694019fca023645935eb42a83559b798aefa43314ebe52ccfe64736f6c63430008040033",
  "devdoc": {
    "author": "priviprotocol",
    "kind": "dev",
    "methods": {
      "buyJotTokens(TokenData storage,uint256)": {
        "details": "helper for buy jot tokens",
        "params": {
          "amount": "the quantity of jots to buy"
        }
      },
      "decreaseSellingSupply(TokenData storage,uint256)": {
        "details": "helper for decrease selling supply",
        "params": {
          "amount": "the quantity of supply to decrease"
        }
      },
      "depositJotTokens(TokenData storage,uint256)": {
        "details": "helper for deposit jot tokens",
        "params": {
          "amount": "the quantity of jots to deposit"
        }
      },
      "increaseSellingSupply(TokenData storage,uint256)": {
        "details": "helper for increase selling supply",
        "params": {
          "amount": "the quantity of supply to increase"
        }
      },
      "updatePriceFraction(TokenData storage,uint256)": {
        "details": "helper for update price fraction",
        "params": {
          "newFractionPrice": "the quantity of supply to increase"
        }
      }
    },
    "title": "helpers for synthetic token operations",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}