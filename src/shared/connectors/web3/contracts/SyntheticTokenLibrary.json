{
  "address": "0x7b2f973A957c87b1bB8f3007C5B18b9feae4fA54",
  "abi": [],
  "transactionHash": "0xa6d83a70e49290d0fb71a8dd67d7cc2037fcd3afee6308f6e1d44cf96f73e723",
  "receipt": {
    "to": null,
    "from": "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
    "contractAddress": "0x7b2f973A957c87b1bB8f3007C5B18b9feae4fA54",
    "transactionIndex": 1,
    "gasUsed": "487713",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018020000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000200000000000000000000000000000024000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000100010000000000000000000100000",
    "blockHash": "0x0d1d7af3005843213cfafc82eb4780740d453aba2fe95f1c4f7e5da0c0f7aa31",
    "transactionHash": "0xa6d83a70e49290d0fb71a8dd67d7cc2037fcd3afee6308f6e1d44cf96f73e723",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 20390844,
        "transactionHash": "0xa6d83a70e49290d0fb71a8dd67d7cc2037fcd3afee6308f6e1d44cf96f73e723",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000a656f30b43c000000000000000000000000000000000000000000000000002d1d007b20145972000000000000000000000000000000000000000000000000021426a4069ccb600000000000000000000000000000000000000000000000002d129b0bef601d72000000000000000000000000000000000000000000000000021e8c1337510760",
        "logIndex": 1,
        "blockHash": "0x0d1d7af3005843213cfafc82eb4780740d453aba2fe95f1c4f7e5da0c0f7aa31"
      }
    ],
    "blockNumber": 20390844,
    "cumulativeGasUsed": "520679",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e0c719731437181673b6fc7a2456b903",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"priviprotocol\",\"kind\":\"dev\",\"methods\":{\"buyJotTokens(TokenData storage,uint256)\":{\"details\":\"helper for buy jot tokens\",\"params\":{\"amount\":\"the quantity of jots to buy\"}},\"decreaseSellingSupply(TokenData storage,uint256)\":{\"details\":\"helper for decrease selling supply\",\"params\":{\"amount\":\"the quantity of supply to decrease\"}},\"depositJotTokens(TokenData storage,uint256)\":{\"details\":\"helper for deposit jot tokens\",\"params\":{\"amount\":\"the quantity of jots to deposit\"}},\"increaseSellingSupply(TokenData storage,uint256)\":{\"details\":\"helper for increase selling supply\",\"params\":{\"amount\":\"the quantity of supply to increase\"}},\"updatePriceFraction(TokenData storage,uint256)\":{\"details\":\"helper for update price fraction\",\"params\":{\"newFractionPrice\":\"the quantity of supply to increase\"}}},\"title\":\"helpers for synthetic token operations\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/libraries/SyntheticTokenLibrary.sol\":\"SyntheticTokenLibrary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/implementations/Enums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nenum State {\\n    NEW,\\n    VERIFYING,\\n    VERIFIED,\\n    CHANGING\\n}\\n\",\"keccak256\":\"0x3d143a1f6fa319fd3b749bc8b9c36d00db0f51f6d301e812b62927df25fb487c\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Enums.sol\\\";\\n\\nstruct TokenData {\\n    uint256 originalTokenID;\\n    uint256 ownerSupply;\\n    uint256 sellingSupply;\\n    uint256 soldSupply;\\n    uint256 liquiditySupply;\\n    uint256 liquiditySold;\\n    uint256 fractionPrices;\\n    uint256 lastFlipTime;\\n    uint256 liquidityTokenBalance;\\n    uint256 uniswapJotLiquidity; // solhint-disable-line\\n    uint256 uniswapFundingLiquidity; // solhint-disable-line\\n    State state;\\n}\\n\\nstruct Flip {\\n    uint256 tokenId;\\n    uint64 prediction;\\n    address player;\\n}\\n\\nstruct ChangeNonce {\\n    uint256 nonce;\\n    uint256 newTokenId;\\n    address owner;\\n}\\n\",\"keccak256\":\"0x0829642595fe2ee1b25d3551a3ad46c5bc165a95cefa1bfbf6a5e69d46dbc57a\",\"license\":\"MIT\"},\"contracts/polygon/libraries/ProtocolConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary ProtocolConstants {\\r\\n    uint256 public constant JOT_SUPPLY = 10000000000000000000000;\\r\\n}\\r\\n\",\"keccak256\":\"0x3bf90c47615a612a085151de496ab7151554563dee175767f0e1895581b7b530\",\"license\":\"MIT\"},\"contracts/polygon/libraries/SyntheticTokenLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../implementations/Structs.sol\\\";\\nimport \\\"./ProtocolConstants.sol\\\";\\n\\n/**\\n * @title helpers for synthetic token operations\\n * @author priviprotocol\\n */\\nlibrary SyntheticTokenLibrary {\\n    /**\\n     * @dev helper for increase selling supply\\n     * @param amount the quantity of supply to increase\\n     */\\n    function increaseSellingSupply(TokenData storage token, uint256 amount) external {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n        require(token.ownerSupply >= amount, \\\"You do not have enough tokens left\\\");\\n\\n        token.ownerSupply -= amount;\\n        token.sellingSupply += amount / 2;\\n        token.liquiditySupply += amount / 2;\\n    }\\n\\n    /**\\n     * @dev helper for decrease selling supply\\n     * @param amount the quantity of supply to decrease\\n     */\\n    function decreaseSellingSupply(TokenData storage token, uint256 amount) external {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n\\n        require(token.liquiditySupply >= amount / 2, \\\"You do not have enough liquidity left\\\");\\n        require(token.sellingSupply >= amount / 2, \\\"You do not have enough selling supply left\\\");\\n\\n        token.ownerSupply += amount;\\n        token.sellingSupply -= amount / 2;\\n        token.liquiditySupply -= amount / 2;\\n    }\\n\\n    /**\\n     * @dev helper for update price fraction\\n     * @param newFractionPrice the quantity of supply to increase\\n     */\\n    function updatePriceFraction(TokenData storage token, uint256 newFractionPrice) external {\\n        require(newFractionPrice > 0, \\\"Fraction price must be greater than zero\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n\\n        token.fractionPrices = newFractionPrice;\\n    }\\n\\n    /**\\n     * @dev helper for buy jot tokens\\n     * @param amount the quantity of jots to buy\\n     */\\n    function buyJotTokens(TokenData storage token, uint256 amount) external returns (uint256 amountToPay) {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n        require(!isLocked(token.state, token.ownerSupply), \\\"Token is locked!\\\");\\n\\n        // calculate amount left\\n        uint256 amountLeft = token.sellingSupply - token.soldSupply;\\n\\n        // if amount left is lesser than buying amount\\n        // then buying amount = amount left\\n        if (amountLeft < amount) {\\n            amount = amountLeft;\\n        }\\n\\n        amountToPay = (amount * token.fractionPrices) / 10**18;\\n\\n        // Can't sell zero tokens\\n        require(amountToPay > 0, \\\"No tokens left!\\\");\\n\\n        //Increase sold supply (amount in token) and liquidity sold (amount in ether)\\n        token.soldSupply += amount;\\n        token.liquiditySold += amountToPay;\\n    }\\n\\n    /**\\n     * @dev helper for deposit jot tokens\\n     * @param amount the quantity of jots to deposit\\n     */\\n    function depositJotTokens(TokenData storage token, uint256 amount) external {\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\n\\n        // save gas through memory\\n        uint256 ownerSupply = token.ownerSupply;\\n\\n        require(!isLocked(token.state, ownerSupply), \\\"Token is locked!\\\");\\n\\n        uint256 result = ownerSupply + amount;\\n        require(result <= ProtocolConstants.JOT_SUPPLY, \\\"You can't deposit more than the Jot Supply limit\\\");\\n\\n        token.ownerSupply += amount;\\n    }\\n\\n    function isLocked(State state, uint256 ownerSupply) internal pure returns (bool) {\\n        return state != State.VERIFIED || ownerSupply == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x6ffce826c11370b85fee9939297d6259ef857f3261a1f7ba0b0ecc457f20113e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6107db61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c806308a3547214610066578063319b1d54146100885780637d0c4dea146100a8578063ca910320146100c8578063d52cb9cb146100e8575b600080fd5b81801561007257600080fd5b506100866100813660046106a7565b61011a565b005b81801561009457600080fd5b506100866100a33660046106a7565b6101bc565b8180156100b457600080fd5b506100866100c33660046106a7565b610352565b8180156100d457600080fd5b506100866100e33660046106a7565b610461565b8180156100f457600080fd5b506101086101033660046106a7565b610555565b60405190815260200160405180910390f35b600081116101805760405162461bcd60e51b815260206004820152602860248201527f4672616374696f6e207072696365206d7573742062652067726561746572207460448201526768616e207a65726f60c01b60648201526084015b60405180910390fd5b600b82015460018301546101979160ff1690610671565b156101b45760405162461bcd60e51b8152600401610177906106f7565b600690910155565b600081116101dc5760405162461bcd60e51b8152600401610177906106c8565b600b82015460018301546101f39160ff1690610671565b156102105760405162461bcd60e51b8152600401610177906106f7565b61021b600282610739565b8260040154101561027c5760405162461bcd60e51b815260206004820152602560248201527f596f7520646f206e6f74206861766520656e6f756768206c6971756964697479604482015264081b19599d60da1b6064820152608401610177565b610287600282610739565b826002015410156102ed5760405162461bcd60e51b815260206004820152602a60248201527f596f7520646f206e6f74206861766520656e6f7567682073656c6c696e6720736044820152691d5c1c1b1e481b19599d60b21b6064820152608401610177565b808260010160008282546103019190610721565b909155506103129050600282610739565b8260020160008282546103259190610778565b909155506103369050600282610739565b8260040160008282546103499190610778565b90915550505050565b600081116103725760405162461bcd60e51b8152600401610177906106c8565b600b82015460018301546103899160ff1690610671565b156103a65760405162461bcd60e51b8152600401610177906106f7565b80826001015410156104055760405162461bcd60e51b815260206004820152602260248201527f596f7520646f206e6f74206861766520656e6f75676820746f6b656e73206c65604482015261199d60f21b6064820152608401610177565b808260010160008282546104199190610778565b9091555061042a9050600282610739565b82600201600082825461043d9190610721565b9091555061044e9050600282610739565b8260040160008282546103499190610721565b600081116104815760405162461bcd60e51b8152600401610177906106c8565b6001820154600b8301546104989060ff1682610671565b156104b55760405162461bcd60e51b8152600401610177906106f7565b60006104c18383610721565b905069021e19e0c9bab24000008111156105365760405162461bcd60e51b815260206004820152603060248201527f596f752063616e2774206465706f736974206d6f7265207468616e207468652060448201526f129bdd0814dd5c1c1b1e481b1a5b5a5d60821b6064820152608401610177565b8284600101600082825461054a9190610721565b909155505050505050565b60008082116105765760405162461bcd60e51b8152600401610177906106c8565b600b830154600184015461058d9160ff1690610671565b156105aa5760405162461bcd60e51b8152600401610177906106f7565b6000836003015484600201546105c09190610778565b9050828110156105ce578092505b670de0b6b3a76400008460060154846105e79190610759565b6105f19190610739565b9150600082116106355760405162461bcd60e51b815260206004820152600f60248201526e4e6f20746f6b656e73206c6566742160881b6044820152606401610177565b828460030160008282546106499190610721565b92505081905550818460050160008282546106649190610721565b9091555091949350505050565b6000600283600381111561069557634e487b7160e01b600052602160045260246000fd5b1415806106a0575081155b9392505050565b600080604083850312156106b9578182fd5b50508035926020909101359150565b602080825260159082015274416d6f756e742063616e2774206265207a65726f2160581b604082015260600190565b60208082526010908201526f546f6b656e206973206c6f636b65642160801b604082015260600190565b600082198211156107345761073461078f565b500190565b60008261075457634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156107735761077361078f565b500290565b60008282101561078a5761078a61078f565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122092417973c43107260e832014bef2cc6298d05826223ee505a0957f080f8d498b64736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c806308a3547214610066578063319b1d54146100885780637d0c4dea146100a8578063ca910320146100c8578063d52cb9cb146100e8575b600080fd5b81801561007257600080fd5b506100866100813660046106a7565b61011a565b005b81801561009457600080fd5b506100866100a33660046106a7565b6101bc565b8180156100b457600080fd5b506100866100c33660046106a7565b610352565b8180156100d457600080fd5b506100866100e33660046106a7565b610461565b8180156100f457600080fd5b506101086101033660046106a7565b610555565b60405190815260200160405180910390f35b600081116101805760405162461bcd60e51b815260206004820152602860248201527f4672616374696f6e207072696365206d7573742062652067726561746572207460448201526768616e207a65726f60c01b60648201526084015b60405180910390fd5b600b82015460018301546101979160ff1690610671565b156101b45760405162461bcd60e51b8152600401610177906106f7565b600690910155565b600081116101dc5760405162461bcd60e51b8152600401610177906106c8565b600b82015460018301546101f39160ff1690610671565b156102105760405162461bcd60e51b8152600401610177906106f7565b61021b600282610739565b8260040154101561027c5760405162461bcd60e51b815260206004820152602560248201527f596f7520646f206e6f74206861766520656e6f756768206c6971756964697479604482015264081b19599d60da1b6064820152608401610177565b610287600282610739565b826002015410156102ed5760405162461bcd60e51b815260206004820152602a60248201527f596f7520646f206e6f74206861766520656e6f7567682073656c6c696e6720736044820152691d5c1c1b1e481b19599d60b21b6064820152608401610177565b808260010160008282546103019190610721565b909155506103129050600282610739565b8260020160008282546103259190610778565b909155506103369050600282610739565b8260040160008282546103499190610778565b90915550505050565b600081116103725760405162461bcd60e51b8152600401610177906106c8565b600b82015460018301546103899160ff1690610671565b156103a65760405162461bcd60e51b8152600401610177906106f7565b80826001015410156104055760405162461bcd60e51b815260206004820152602260248201527f596f7520646f206e6f74206861766520656e6f75676820746f6b656e73206c65604482015261199d60f21b6064820152608401610177565b808260010160008282546104199190610778565b9091555061042a9050600282610739565b82600201600082825461043d9190610721565b9091555061044e9050600282610739565b8260040160008282546103499190610721565b600081116104815760405162461bcd60e51b8152600401610177906106c8565b6001820154600b8301546104989060ff1682610671565b156104b55760405162461bcd60e51b8152600401610177906106f7565b60006104c18383610721565b905069021e19e0c9bab24000008111156105365760405162461bcd60e51b815260206004820152603060248201527f596f752063616e2774206465706f736974206d6f7265207468616e207468652060448201526f129bdd0814dd5c1c1b1e481b1a5b5a5d60821b6064820152608401610177565b8284600101600082825461054a9190610721565b909155505050505050565b60008082116105765760405162461bcd60e51b8152600401610177906106c8565b600b830154600184015461058d9160ff1690610671565b156105aa5760405162461bcd60e51b8152600401610177906106f7565b6000836003015484600201546105c09190610778565b9050828110156105ce578092505b670de0b6b3a76400008460060154846105e79190610759565b6105f19190610739565b9150600082116106355760405162461bcd60e51b815260206004820152600f60248201526e4e6f20746f6b656e73206c6566742160881b6044820152606401610177565b828460030160008282546106499190610721565b92505081905550818460050160008282546106649190610721565b9091555091949350505050565b6000600283600381111561069557634e487b7160e01b600052602160045260246000fd5b1415806106a0575081155b9392505050565b600080604083850312156106b9578182fd5b50508035926020909101359150565b602080825260159082015274416d6f756e742063616e2774206265207a65726f2160581b604082015260600190565b60208082526010908201526f546f6b656e206973206c6f636b65642160801b604082015260600190565b600082198211156107345761073461078f565b500190565b60008261075457634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156107735761077361078f565b500290565b60008282101561078a5761078a61078f565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122092417973c43107260e832014bef2cc6298d05826223ee505a0957f080f8d498b64736f6c63430008040033",
  "devdoc": {
    "author": "priviprotocol",
    "kind": "dev",
    "methods": {
      "buyJotTokens(TokenData storage,uint256)": {
        "details": "helper for buy jot tokens",
        "params": {
          "amount": "the quantity of jots to buy"
        }
      },
      "decreaseSellingSupply(TokenData storage,uint256)": {
        "details": "helper for decrease selling supply",
        "params": {
          "amount": "the quantity of supply to decrease"
        }
      },
      "depositJotTokens(TokenData storage,uint256)": {
        "details": "helper for deposit jot tokens",
        "params": {
          "amount": "the quantity of jots to deposit"
        }
      },
      "increaseSellingSupply(TokenData storage,uint256)": {
        "details": "helper for increase selling supply",
        "params": {
          "amount": "the quantity of supply to increase"
        }
      },
      "updatePriceFraction(TokenData storage,uint256)": {
        "details": "helper for update price fraction",
        "params": {
          "newFractionPrice": "the quantity of supply to increase"
        }
      }
    },
    "title": "helpers for synthetic token operations",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}