{
  "address": "0x6624Efc329069aC9b072682b114422dD5B71c061",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swapAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jot_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "jotPool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collectionManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "syntheticNFT_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "auctionManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocol_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fundingTokenAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "randomConsumerAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "validatorAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "perpetualPoolLiteAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracleAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectionManagerID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collectionManagerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "jotAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "jotPoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "syntheticNFTAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quickSwapAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "auctionAddress",
          "type": "address"
        }
      ],
      "name": "CollectionManagerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "syntheticID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newID",
          "type": "uint256"
        }
      ],
      "name": "TokenChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "collectionManagerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectionManagerID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "syntheticTokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "syntheticID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newOriginalTokenID",
          "type": "uint256"
        }
      ],
      "name": "changeNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getCollectionID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getCollectionManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionID",
          "type": "uint256"
        }
      ],
      "name": "getCollectionManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getJotPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getJotsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionID",
          "type": "uint256"
        }
      ],
      "name": "getOriginalCollectionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isNFTVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "isSyntheticCollectionRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isSyntheticNFTCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolVaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyToKeep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceFraction",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "originalName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "originalSymbol",
          "type": "string"
        }
      ],
      "name": "registerNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "verifyNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x25dc85170db94c4a376059f4bfdc89196cb41e8b508b84ef369db738687ca806",
  "receipt": {
    "to": null,
    "from": "0x7d994063E2C98b2F49b13418Fc3FE58c45DdcC0D",
    "contractAddress": "0x6624Efc329069aC9b072682b114422dD5B71c061",
    "transactionIndex": 0,
    "gasUsed": "2211708",
    "logsBloom": "0x00000004000000000000000000000000000000001000000000800000000000000000000000000000000000000000000000008000002080000000000000000000000000000000000000000000000000800001000000000000040100000000004000000000020000000000000000000800000000000000000080000400000000500000000000000000000000000000000000000040000000000000000040000000200000000000000000000000000000200000000000000000001040000000004000000000000000000001000008000000000000000000000100100000000020000040000000000000000000000000000000100010000000000000000000100000",
    "blockHash": "0xa9f60dc435f4fcd34925381a96c4e4418931a4a570c569e9baf92df98802b7c6",
    "transactionHash": "0x25dc85170db94c4a376059f4bfdc89196cb41e8b508b84ef369db738687ca806",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19340355,
        "transactionHash": "0x25dc85170db94c4a376059f4bfdc89196cb41e8b508b84ef369db738687ca806",
        "address": "0x6624Efc329069aC9b072682b114422dD5B71c061",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa9f60dc435f4fcd34925381a96c4e4418931a4a570c569e9baf92df98802b7c6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19340355,
        "transactionHash": "0x25dc85170db94c4a376059f4bfdc89196cb41e8b508b84ef369db738687ca806",
        "address": "0x6624Efc329069aC9b072682b114422dD5B71c061",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x352d05fe3946dbe49277552ba941e744d5a96d9c60bc1ba0ea5f1d3ae000f7c8",
          "0x000000000000000000000000c5324ae5b70712f24602b5b2b13618356c44b965",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa9f60dc435f4fcd34925381a96c4e4418931a4a570c569e9baf92df98802b7c6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19340355,
        "transactionHash": "0x25dc85170db94c4a376059f4bfdc89196cb41e8b508b84ef369db738687ca806",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007d994063e2c98b2f49b13418fc3fe58c45ddcc0d",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000017929c310f880000000000000000000000000000000000000000000000000000a86dab2270dc4c000000000000000000000000000000000000000000000179a29f78c7043926a30000000000000000000000000000000000000000000000000090db0ef161544c000000000000000000000000000000000000000000000179a2b70b633548aea3",
        "logIndex": 2,
        "blockHash": "0xa9f60dc435f4fcd34925381a96c4e4418931a4a570c569e9baf92df98802b7c6"
      }
    ],
    "blockNumber": 19340355,
    "cumulativeGasUsed": "2211708",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4CeBfcDA07A08B1C7169E5eb77AC117FF87EEae9",
    "0x873F0165C1F4Cf810345ab32Ef78bFB3B5F9A802",
    "0x766c4b4B076fa9270B69438211Fd2159dAcC795B",
    "0x531966F5B6825150cc875d0ae70f83fBd9D8E03e",
    "0x2d237ac6A5D3B9dc5cBFD26FD954502Fc451F582",
    "0x9aA7136C2FB4008489B14102ebFcEe1d1cF97fA1",
    "0xB476F1D01a301F322e567F87A089F4b5EC2d6Ee3",
    "0x873F0165C1F4Cf810345ab32Ef78bFB3B5F9A802",
    "0x57b32ecF8Ea19203E88c057451A75AE0F08C9c2e",
    "0x100bbBc6247095Cc603E30D79EA52641Ba8a57d2",
    "0xE409e138362Ea53125e46732f17d4E758c06dDEe",
    "0xC5324aE5b70712F24602b5b2b13618356c44B965"
  ],
  "solcInputHash": "542df11a51384663afab6084c0b3d00f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jot_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jotPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectionManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntheticNFT_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocol_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundingTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomConsumerAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"perpetualPoolLiteAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionManagerID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"jotAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"jotPoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"syntheticNFTAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quickSwapAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"}],\"name\":\"CollectionManagerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"syntheticID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newID\",\"type\":\"uint256\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionManagerID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"syntheticTokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"syntheticID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newOriginalTokenID\",\"type\":\"uint256\"}],\"name\":\"changeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionID\",\"type\":\"uint256\"}],\"name\":\"getCollectionManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getJotPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getJotsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionID\",\"type\":\"uint256\"}],\"name\":\"getOriginalCollectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isNFTVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"isSyntheticCollectionRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isSyntheticNFTCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyToKeep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceFraction\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"originalName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"originalSymbol\",\"type\":\"string\"}],\"name\":\"registerNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"verifyNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerNFT(address,uint256,uint256,uint256,string,string)\":{\"params\":{\"collection\":\"the address of the synthetic collection\",\"originalName\":\"the original collection name\",\"originalSymbol\":\"the original collection symbol\",\"priceFraction\":\"the price for a fraction\",\"supplyToKeep\":\"supply to keep\",\"tokenId\":\"the token id\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_collectionIdToAddress\":{\"details\":\"get collection address from ID\"},\"_collections\":{\"details\":\"collections map. collection address => collection data\"},\"_jot\":{\"details\":\"implementation addresses for proxies\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeNFT(address,uint256,uint256)\":{\"notice\":\"change an NFT for another one\"},\"getCollectionID(address)\":{\"notice\":\"get collection ID from collection address\"},\"getCollectionManagerAddress(address)\":{\"notice\":\"get collection manager address from collection address\"},\"getCollectionManagerAddress(uint256)\":{\"notice\":\"get collection manager address from collection ID\"},\"getJotPoolAddress(address)\":{\"notice\":\"getter for Jot Pool Address of a collection\"},\"getJotsAddress(address)\":{\"notice\":\"getter for Jot Address of a collection\"},\"getOriginalCollectionAddress(uint256)\":{\"notice\":\"get collection address from collection ID\"},\"isNFTVerified(address,uint256)\":{\"notice\":\"checks whether a Synthetic has been verified or not\"},\"isSyntheticCollectionRegistered(address)\":{\"notice\":\"checks whether a collection is registered or not\"},\"isSyntheticNFTCreated(address,uint256)\":{\"notice\":\"checks whether a Synthetic NFT has been created for a given NFT or not\"},\"protocolVaults()\":{\"notice\":\"number of registered collections\"},\"registerNFT(address,uint256,uint256,uint256,string,string)\":{\"notice\":\"register an NFT collection\"},\"swapAddress()\":{\"notice\":\"QuickSwap address\"},\"verifyNFT(address,uint256)\":{\"notice\":\"verify a synthetic NFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/SyntheticProtocolRouter.sol\":\"SyntheticProtocolRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { CBORChainlink } from \\\"./vendor/CBORChainlink.sol\\\";\\nimport { BufferChainlink } from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  )\\n    internal\\n    pure\\n    returns (\\n      Chainlink.Request memory\\n    )\\n  {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(\\n    Request memory self,\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n  {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  )\\n    internal\\n    pure\\n  {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x12e1313c62b0dae9684b7ca52f0a05be3ddef6926f5a714ec723ef9587b08222\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport { ENSResolver as ENSResolver_Chainlink } from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\ncontract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 constant internal LINK_DIVISIBILITY = 10**18;\\n  uint256 constant private AMOUNT_OVERRIDE = 0;\\n  address constant private SENDER_OVERRIDE = address(0);\\n  uint256 constant private ORACLE_ARGS_VERSION = 1;\\n  uint256 constant private OPERATOR_ARGS_VERSION = 2;\\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private ens;\\n  bytes32 private ensNode;\\n  LinkTokenInterface private link;\\n  OperatorInterface private oracle;\\n  uint256 private requestCount = 1;\\n  mapping(bytes32 => address) private pendingRequests;\\n\\n  event ChainlinkRequested(\\n    bytes32 indexed id\\n  );\\n  event ChainlinkFulfilled(\\n    bytes32 indexed id\\n  );\\n  event ChainlinkCancelled(\\n    bytes32 indexed id\\n  );\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddress The callback address that the response will be sent to\\n   * @param callbackFunctionSignature The callback function signature to use for the callback address\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddress,\\n    bytes4 callbackFunctionSignature\\n  )\\n    internal\\n    pure\\n    returns (\\n      Chainlink.Request memory\\n    )\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddress, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return sendChainlinkRequestTo(address(oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    return rawRequest(oracleAddress, req, payment, ORACLE_ARGS_VERSION, oracle.oracleRequest.selector);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `requestOracleDataFrom` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function requestOracleData(\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return requestOracleDataFrom(address(oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function requestOracleDataFrom(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    return rawRequest(oracleAddress, req, payment, OPERATOR_ARGS_VERSION, oracle.requestOracleData.selector);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @param argsVersion The version of data support (single word, multi word)\\n   * @return requestId The request ID\\n   */\\n  function rawRequest(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment,\\n    uint256 argsVersion,\\n    bytes4 funcSelector\\n  )\\n    private\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    requestId = keccak256(abi.encodePacked(this, requestCount));\\n    req.nonce = requestCount;\\n    pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    bytes memory encodedData = abi.encodeWithSelector(\\n      funcSelector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackAddress,\\n      req.callbackFunctionId,\\n      req.nonce,\\n      argsVersion,\\n      req.buf.buf);\\n    require(link.transferAndCall(oracleAddress, payment, encodedData), \\\"unable to transferAndCall to oracle\\\");\\n    requestCount += 1;\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  )\\n    internal\\n  {\\n    OperatorInterface requested = OperatorInterface(pendingRequests[requestId]);\\n    delete pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(\\n    address oracleAddress\\n  )\\n    internal\\n  {\\n    oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(\\n    address linkAddress\\n  )\\n    internal\\n  {\\n    link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() \\n    internal\\n  {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress()\\n    internal\\n    view\\n    returns (\\n      address\\n    )\\n  {\\n    return address(link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress()\\n    internal\\n    view\\n    returns (\\n      address\\n    )\\n  {\\n    return address(oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(\\n    address oracleAddress,\\n    bytes32 requestId\\n  )\\n    internal\\n    notPendingRequest(requestId)\\n  {\\n    pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(\\n    address ensAddress,\\n    bytes32 node\\n  )\\n    internal\\n  {\\n    ens = ENSInterface(ensAddress);\\n    ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS()\\n    internal\\n  {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(\\n    bytes32 requestId\\n  )\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n    // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(\\n    bytes32 requestId\\n  )\\n  {\\n    require(msg.sender == pendingRequests[requestId],\\n            \\\"Source must be the oracle of the request\\\");\\n    delete pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(\\n    bytes32 requestId\\n  )\\n  {\\n    require(pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x15f8b423b9a4417b916e076b77ce59bcaeee8947807b3efca9e0e864888afddf\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(\\n    bytes32 indexed node,\\n    bytes32 indexed label,\\n    address owner\\n  );\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(\\n    bytes32 indexed node,\\n    address owner\\n  );\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(\\n    bytes32 indexed node,\\n    address resolver\\n  );\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(\\n    bytes32 indexed node,\\n    uint64 ttl\\n  );\\n\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(\\n    bytes32 node,\\n    address resolver\\n  ) external;\\n\\n  function setOwner(\\n    bytes32 node,\\n    address owner\\n  ) external;\\n\\n  function setTTL(\\n    bytes32 node,\\n    uint64 ttl\\n  ) external;\\n\\n  function owner(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n\\n  function resolver(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n\\n  function ttl(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (\\n      uint64\\n    );\\n\\n}\\n\",\"keccak256\":\"0xd8545d2e73f7aa517543d97e1763d95c11ddd52a5050cf1933047c9f22f10b5a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n\\n  function requestOracleData(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  )\\n    external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool\\n    );\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function distributeFunds(\\n    address payable[] calldata receivers,\\n    uint[] calldata amounts\\n  )\\n    external\\n    payable;\\n\\n  function getAuthorizedSenders()\\n    external\\n    returns (\\n      address[] memory\\n    );\\n\\n  function setAuthorizedSenders(\\n    address[] calldata senders\\n  ) external;\\n\\n  function getForwarder()\\n    external\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0x71dcc45bae7384cfb47c74de767a7ec56df21e165468610b2abf2bb02ca0c352\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  )\\n    external\\n    returns (\\n      bool\\n    );\\n\\n  function isAuthorizedSender(\\n    address node\\n  )\\n    external\\n    view\\n    returns (\\n      bool\\n    );\\n\\n  function withdraw(\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  function withdrawable()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n}\\n\",\"keccak256\":\"0x55fb2c156150379d285ab89081ff5add6f37343d7992bd2ec1485a2652af94d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  \\n  function getAddress()\\n    external\\n    view\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0xc3d897e7c93b02e53f21b40accd4a0bd5c38f9780a4f74a7109b70fbfde03b40\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for writing to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary BufferChainlink {\\n  /**\\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n  *      a capacity. The capacity may be longer than the current value, in\\n  *      which case it can be extended without the need to allocate more memory.\\n  */\\n  struct buffer {\\n    bytes buf;\\n    uint capacity;\\n  }\\n\\n  /**\\n  * @dev Initializes a buffer with an initial capacity.\\n  * @param buf The buffer to initialize.\\n  * @param capacity The number of bytes of space to allocate the buffer.\\n  * @return The buffer, for chaining.\\n  */\\n  function init(\\n    buffer memory buf,\\n    uint capacity\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Initializes a new buffer from an existing bytes object.\\n  *      Changes to the buffer may mutate the original value.\\n  * @param b The bytes object to initialize the buffer with.\\n  * @return A new buffer.\\n  */\\n  function fromBytes(\\n    bytes memory b\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(\\n    buffer memory buf,\\n    uint capacity\\n  )\\n    private\\n    pure\\n  {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(\\n    uint a,\\n    uint b\\n  )\\n    private\\n    pure\\n    returns(\\n      uint\\n    )\\n  {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n  * @dev Sets buffer length to 0.\\n  * @param buf The buffer to truncate.\\n  * @return The original buffer, for chaining..\\n  */\\n  function truncate(\\n    buffer memory buf\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The start offset to write to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(\\n    buffer memory buf,\\n    uint off,\\n    bytes memory data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint dest;\\n    uint src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint mask = 256 ** (32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write the byte at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint off,\\n    uint8 data\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendUint8(\\n    buffer memory buf,\\n    uint8 data\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n  *      exceed the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (left-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(\\n    buffer memory buf,\\n    uint off,\\n    bytes32 data,\\n    uint len\\n  )\\n    private\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint off,\\n    bytes20 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chhaining.\\n  */\\n  function appendBytes20(\\n    buffer memory buf,\\n    bytes20 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendBytes32(\\n    buffer memory buf,\\n    bytes32 data\\n  )\\n    internal\\n    pure\\n    returns (\\n      buffer memory\\n    )\\n  {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (right-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeInt(\\n    buffer memory buf,\\n    uint off,\\n    uint data,\\n    uint len\\n  )\\n    private\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n    * exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer.\\n    */\\n  function appendInt(\\n    buffer memory buf,\\n    uint data,\\n    uint len\\n  )\\n    internal\\n    pure\\n    returns(\\n      buffer memory\\n    )\\n  {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x68a67e15960462bf12313307765e619de03c73949b6ef0626785e7e76cf484af\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.19;\\n\\nimport { BufferChainlink } from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeType(\\n    BufferChainlink.buffer memory buf,\\n    uint8 major,\\n    uint value\\n  )\\n    private\\n    pure\\n  {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if(value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if(value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if(value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else if(value <= 0xFFFFFFFFFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(\\n    BufferChainlink.buffer memory buf,\\n    uint8 major\\n  )\\n    private\\n    pure\\n  {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(\\n    BufferChainlink.buffer memory buf,\\n    uint value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_INT, value);\\n  }\\n\\n  function encodeInt(\\n    BufferChainlink.buffer memory buf,\\n    int value\\n  )\\n    internal\\n    pure\\n  {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else if(value >= 0) {\\n      encodeType(buf, MAJOR_TYPE_INT, uint(value));\\n    } else {\\n      encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\\n    }\\n  }\\n\\n  function encodeBytes(\\n    BufferChainlink.buffer memory buf,\\n    bytes memory value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_BYTES, value.length);\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(\\n    BufferChainlink.buffer memory buf,\\n    int value\\n  )\\n    internal\\n    pure\\n  {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint(value)));\\n  }\\n\\n  function encodeSignedBigNum(\\n    BufferChainlink.buffer memory buf,\\n    int input\\n  )\\n    internal\\n    pure\\n  {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint(-1 - input)));\\n  }\\n\\n  function encodeString(\\n    BufferChainlink.buffer memory buf,\\n    string memory value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0xe7c6e4290ac2a41a138e6bd89d89a2779f66847a5ee6fb5a6f2a3386e5ce589d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(\\n    bytes32 node\\n  )\\n    public\\n    view\\n    virtual\\n    returns (\\n      address\\n    );\\n}\\n\",\"keccak256\":\"0xeed48a6a522c400f024f8725ad931833205cb63cc87285b46c5c0e88ca090352\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/polygon/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\n\\r\\ninterface IFlipCoinGenerator {\\r\\n    function generateRandom() external view returns (uint8);\\r\\n}\\r\\n\\r\\ninterface ISyntheticNFT is IERC721Metadata {\\r\\n\\r\\n    function setMetadata(uint256 tokenId,string memory metadata) external;\\r\\n\\r\\n    function isVerified(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function exists(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function safeBurn(uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ninterface ICollectionManagerFactory {\\r\\n    function deploy(\\r\\n        address originalCollectionAddress_,\\r\\n        string memory name_,\\r\\n        string memory symbol_\\r\\n    ) external returns (address);\\r\\n}\\r\\n\\r\\ninterface IJot is IERC20 {\\r\\n    function uniswapV2Pair() external view returns (address);\\r\\n\\r\\n    function safeMint(address account, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\n// pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IOwnable {\\r\\n    event ChangeController(address oldController, address newController);\\r\\n\\r\\n    function controller() external view returns (address);\\r\\n\\r\\n    function setNewController(address newController) external;\\r\\n\\r\\n    function claimNewController() external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IMigratable is IOwnable {\\r\\n    event PrepareMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    event ExecuteMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    function migrationTimestamp() external view returns (uint256);\\r\\n\\r\\n    function migrationDestination() external view returns (address);\\r\\n\\r\\n    function prepareMigration(address target, uint256 graceDays) external;\\r\\n\\r\\n    function approveMigration() external;\\r\\n\\r\\n    function executeMigration(address source) external;\\r\\n}\\r\\n\\r\\ninterface IPerpetualPoolLite is IMigratable {\\r\\n    struct SymbolInfo {\\r\\n        uint256 symbolId;\\r\\n        string symbol;\\r\\n        address oracleAddress;\\r\\n        int256 multiplier;\\r\\n        int256 feeRatio;\\r\\n        int256 fundingRateCoefficient;\\r\\n        int256 price;\\r\\n        int256 cumulativeFundingRate;\\r\\n        int256 tradersNetVolume;\\r\\n        int256 tradersNetCost;\\r\\n    }\\r\\n\\r\\n    struct SignedPrice {\\r\\n        uint256 symbolId;\\r\\n        uint256 timestamp;\\r\\n        uint256 price;\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n    }\\r\\n\\r\\n    event AddLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event RemoveLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event AddMargin(address indexed account, uint256 bAmount);\\r\\n\\r\\n    event RemoveMargin(address indexed account, uint256 bAmount);\\r\\n\\r\\n    event Trade(address indexed account, uint256 indexed symbolId, int256 tradeVolume, uint256 price);\\r\\n\\r\\n    event Liquidate(address indexed account, address indexed liquidator, uint256 reward);\\r\\n\\r\\n    event ProtocolFeeCollection(address indexed collector, uint256 amount);\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            int256 minPoolMarginRatio,\\r\\n            int256 minInitialMarginRatio,\\r\\n            int256 minMaintenanceMarginRatio,\\r\\n            int256 minLiquidationReward,\\r\\n            int256 maxLiquidationReward,\\r\\n            int256 liquidationCutRatio,\\r\\n            int256 protocolFeeCollectRatio\\r\\n        );\\r\\n\\r\\n    function getAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address bTokenAddress,\\r\\n            address lTokenAddress,\\r\\n            address pTokenAddress,\\r\\n            address liquidatorQualifierAddress,\\r\\n            address protocolFeeCollector\\r\\n        );\\r\\n\\r\\n    function getSymbol(uint256 symbolId) external view returns (SymbolInfo memory);\\r\\n\\r\\n    function getLiquidity() external view returns (int256);\\r\\n\\r\\n    function getLastUpdateBlock() external view returns (uint256);\\r\\n\\r\\n    function getProtocolFeeAccrued() external view returns (int256);\\r\\n\\r\\n    function collectProtocolFee() external;\\r\\n\\r\\n    function addSymbol(\\r\\n        uint256 symbolId,\\r\\n        string memory symbol,\\r\\n        address oracleAddress,\\r\\n        uint256 multiplier,\\r\\n        uint256 feeRatio,\\r\\n        uint256 fundingRateCoefficient\\r\\n    ) external;\\r\\n\\r\\n    function removeSymbol(uint256 symbolId) external;\\r\\n\\r\\n    function toggleCloseOnly(uint256 symbolId) external;\\r\\n\\r\\n    function setSymbolParameters(\\r\\n        uint256 symbolId,\\r\\n        address oracleAddress,\\r\\n        uint256 feeRatio,\\r\\n        uint256 fundingRateCoefficient\\r\\n    ) external;\\r\\n\\r\\n    function addLiquidity(uint256 bAmount) external;\\r\\n\\r\\n    function removeLiquidity(uint256 lShares) external;\\r\\n\\r\\n    function addMargin(uint256 bAmount) external;\\r\\n\\r\\n    function removeMargin(uint256 bAmount) external;\\r\\n\\r\\n    function trade(uint256 symbolId, int256 tradeVolume) external;\\r\\n\\r\\n    function liquidate(address account) external;\\r\\n\\r\\n    function addLiquidity(uint256 bAmount, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function removeLiquidity(uint256 lShares, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function addMargin(uint256 bAmount, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function removeMargin(uint256 bAmount, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function trade(\\r\\n        uint256 symbolId,\\r\\n        int256 tradeVolume,\\r\\n        SignedPrice[] memory prices\\r\\n    ) external;\\r\\n\\r\\n    function liquidate(address account, SignedPrice[] memory prices) external;\\r\\n}\",\"keccak256\":\"0x3e42410835d7cd96904298980a680b40ba7abe77f432c83989097779f90fa160\",\"license\":\"MIT\"},\"contracts/polygon/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev collections struct\\n */\\nstruct SyntheticCollection {\\n    uint256 collectionID;\\n    address collectionManagerAddress;\\n    address jotAddress;\\n    address jotPoolAddress;\\n    address syntheticNFTAddress;\\n    string originalName;\\n    string originalSymbol;\\n}\\n\",\"keccak256\":\"0x8de5a32d7b0a588a2bdaaa2d3e88ae74e11109b060e5b6775754c5877dd03131\",\"license\":\"MIT\"},\"contracts/polygon/SyntheticProtocolRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./chainlink/RandomNumberConsumer.sol\\\";\\r\\nimport \\\"./chainlink/PolygonValidatorOracle.sol\\\";\\r\\nimport \\\"./implementations/SyntheticCollectionManager.sol\\\";\\r\\nimport \\\"./implementations/Jot.sol\\\";\\r\\nimport \\\"./implementations/JotPool.sol\\\";\\r\\nimport \\\"./implementations/SyntheticNFT.sol\\\";\\r\\nimport \\\"./auctions/AuctionsManager.sol\\\";\\r\\nimport \\\"./Structs.sol\\\";\\r\\nimport \\\"./governance/ProtocolParameters.sol\\\";\\r\\n\\r\\ncontract SyntheticProtocolRouter is AccessControl, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    bytes32 public constant ORACLE = keccak256(\\\"ORACLE\\\");\\r\\n\\r\\n    /**\\r\\n     * @dev implementation addresses for proxies\\r\\n     */\\r\\n    address private _jot;\\r\\n    address private _jotPool;\\r\\n    address private _collectionManager;\\r\\n    address private _syntheticNFT;\\r\\n    address private _auctionManager;\\r\\n\\r\\n    address private _protocol;\\r\\n    address private _fundingTokenAddress;\\r\\n    address private _randomConsumerAddress;\\r\\n    address private _validatorAddress;\\r\\n    address private _perpetualPoolLiteAddress;\\r\\n\\r\\n    address public oracleAddress;\\r\\n    /**\\r\\n     * @dev collections map.\\r\\n     * collection address => collection data\\r\\n     */\\r\\n    mapping(address => SyntheticCollection) private _collections;\\r\\n\\r\\n    /**\\r\\n     * @dev get collection address from ID\\r\\n     */\\r\\n    mapping(uint256 => address) private _collectionIdToAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice number of registered collections\\r\\n     */\\r\\n    Counters.Counter public protocolVaults;\\r\\n\\r\\n    /**\\r\\n     * @notice QuickSwap address\\r\\n     */\\r\\n    address public swapAddress;\\r\\n\\r\\n    // a new Synthetic NFT collection manager is registered\\r\\n    event CollectionManagerRegistered(\\r\\n        uint256 collectionManagerID,\\r\\n        address collectionManagerAddress,\\r\\n        address jotAddress,\\r\\n        address jotPoolAddress,\\r\\n        address syntheticNFTAddress,\\r\\n        address quickSwapAddress,\\r\\n        address auctionAddress\\r\\n    );\\r\\n\\r\\n    event TokenRegistered(\\r\\n        address collectionManagerAddress,\\r\\n        uint256 collectionManagerID,\\r\\n        uint256 syntheticTokenId\\r\\n    );\\r\\n\\r\\n    event TokenChanged(\\r\\n        address collectionAddress,\\r\\n        uint256 syntheticID,\\r\\n        uint256 previousID,\\r\\n        uint256 newID\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        address swapAddress_,\\r\\n        address jot_,\\r\\n        address jotPool_,\\r\\n        address collectionManager_,\\r\\n        address syntheticNFT_,\\r\\n        address auctionManager_,\\r\\n        address protocol_,\\r\\n        address fundingTokenAddress_,\\r\\n        address randomConsumerAddress_,\\r\\n        address validatorAddress_,\\r\\n        address perpetualPoolLiteAddress_,\\r\\n        address oracleAddress_\\r\\n    ) {\\r\\n        swapAddress = swapAddress_;\\r\\n        _jot = jot_;\\r\\n        _jotPool = jotPool_;\\r\\n        _collectionManager = collectionManager_;\\r\\n        _syntheticNFT = syntheticNFT_;\\r\\n        _auctionManager = auctionManager_;\\r\\n        _protocol = protocol_;\\r\\n        _fundingTokenAddress = fundingTokenAddress_;\\r\\n        _randomConsumerAddress = randomConsumerAddress_;\\r\\n        _validatorAddress = validatorAddress_;\\r\\n        _perpetualPoolLiteAddress = perpetualPoolLiteAddress_;\\r\\n        oracleAddress = oracleAddress_;\\r\\n        _setupRole(ORACLE, oracleAddress_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice register an NFT collection\\r\\n     *  @param collection the address of the synthetic collection\\r\\n     *  @param tokenId the token id\\r\\n     *  @param supplyToKeep supply to keep\\r\\n     *  @param priceFraction the price for a fraction\\r\\n     *  @param originalName the original collection name\\r\\n     *  @param originalSymbol the original collection symbol\\r\\n     */\\r\\n    function registerNFT(\\r\\n        address collection,\\r\\n        uint256 tokenId,\\r\\n        uint256 supplyToKeep,\\r\\n        uint256 priceFraction,\\r\\n        string memory originalName,\\r\\n        string memory originalSymbol\\r\\n    ) public {\\r\\n        require(collection != address(0), \\\"Invalid collection\\\");\\r\\n\\r\\n        address collectionAddress;\\r\\n        uint256 collectionID = protocolVaults.current();\\r\\n        // Checks whether a collection is registered or not\\r\\n        // If not registered, then register it and increase the Vault counter\\r\\n        if (!isSyntheticCollectionRegistered(collection)) {\\r\\n            // deploys a minimal proxy contract from the jot contract implementation\\r\\n            address jotAddress = Clones.clone(_jot);\\r\\n            Jot(jotAddress).initialize(\\r\\n                string(abi.encodePacked(\\\"Privi Jot \\\", originalName)),\\r\\n                string(abi.encodePacked(\\\"JOT_\\\", originalSymbol)),\\r\\n                swapAddress,\\r\\n                _fundingTokenAddress\\r\\n            );\\r\\n\\r\\n            // deploys a minimal proxy contract from the jotPool contract implementation\\r\\n            address jotPoolAddress = Clones.clone(_jotPool);\\r\\n            JotPool(jotPoolAddress).initialize(jotAddress);\\r\\n\\r\\n            address syntheticNFTAddress = Clones.clone(_syntheticNFT);\\r\\n\\r\\n            // deploys a minimal proxy contract from the collectionManager contract implementation\\r\\n            collectionAddress = Clones.clone(_collectionManager);\\r\\n            SyntheticCollectionManager collectionContract = SyntheticCollectionManager(collectionAddress);\\r\\n            collectionContract.initialize(\\r\\n                jotAddress,\\r\\n                collection,\\r\\n                syntheticNFTAddress,\\r\\n                _auctionManager,\\r\\n                _protocol,\\r\\n                _fundingTokenAddress,\\r\\n                jotPoolAddress\\r\\n            );\\r\\n\\r\\n            AuctionsManager(_auctionManager).grantRole(\\r\\n                AuctionsManager(_auctionManager).COLLECTION_MANAGER(),\\r\\n                collectionAddress\\r\\n            );\\r\\n\\r\\n            collectionContract.grantRole(collectionContract.RANDOM_ORACLE(), _randomConsumerAddress);\\r\\n            collectionContract.grantRole(collectionContract.VALIDATOR_ORACLE(), _validatorAddress);\\r\\n            Jot(jotAddress).grantRole(Jot(jotAddress).MINTER(), collectionAddress);\\r\\n\\r\\n            // set the manager to allow control over the funds\\r\\n            Jot(jotAddress).setManager(collectionAddress, jotPoolAddress);\\r\\n\\r\\n            SyntheticNFT(syntheticNFTAddress).initialize(\\r\\n                string(abi.encodePacked(\\\"Privi Synthetic \\\", originalName)),\\r\\n                string(abi.encodePacked(\\\"pS_\\\", originalSymbol)),\\r\\n                collectionAddress\\r\\n            );\\r\\n\\r\\n            _collections[collection] = SyntheticCollection({\\r\\n                collectionID: collectionID,\\r\\n                collectionManagerAddress: collectionAddress,\\r\\n                jotAddress: jotAddress,\\r\\n                jotPoolAddress: jotPoolAddress,\\r\\n                syntheticNFTAddress: syntheticNFTAddress,\\r\\n                originalName: originalName,\\r\\n                originalSymbol: originalSymbol\\r\\n            });\\r\\n\\r\\n            _collectionIdToAddress[collectionID] = collectionAddress;\\r\\n\\r\\n            // initPerpetualPoolLite(collectionID, originalName);\\r\\n\\r\\n            // whitelist the new collection contract on the random number consumer and the validator\\r\\n            RandomNumberConsumer(_randomConsumerAddress).whitelistCollection(collectionAddress);\\r\\n            PolygonValidatorOracle(_validatorAddress).whitelistCollection(collectionAddress);\\r\\n\\r\\n            emit CollectionManagerRegistered(\\r\\n                collectionID,\\r\\n                collectionAddress,\\r\\n                jotAddress,\\r\\n                jotPoolAddress,\\r\\n                syntheticNFTAddress,\\r\\n                swapAddress,\\r\\n                _auctionManager\\r\\n            );\\r\\n\\r\\n            protocolVaults.increment();\\r\\n\\r\\n            //TODO: addSymbol with \\u201daddress\\u201d to the NFTPerpetualFutures\\r\\n        } else {\\r\\n            collectionAddress = _collections[collection].collectionManagerAddress;\\r\\n        }\\r\\n\\r\\n        SyntheticCollectionManager collectionManager = SyntheticCollectionManager(collectionAddress);\\r\\n\\r\\n        uint256 syntheticID = collectionManager.register(tokenId, supplyToKeep, priceFraction);\\r\\n\\r\\n        emit TokenRegistered(collectionAddress, collectionID, syntheticID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice change an NFT for another one\\r\\n     */\\r\\n    function changeNFT(\\r\\n        address collection,\\r\\n        uint256 syntheticID,\\r\\n        uint256 newOriginalTokenID\\r\\n    ) public {\\r\\n        address collectionManager = getCollectionManagerAddress(collection);\\r\\n        SyntheticCollectionManager manager = SyntheticCollectionManager(collectionManager);\\r\\n        uint256 originalTokenID = manager.getOriginalID(syntheticID);\\r\\n        manager.change(syntheticID, newOriginalTokenID, msg.sender);\\r\\n\\r\\n        emit TokenChanged(\\r\\n            collection,\\r\\n            syntheticID,\\r\\n            originalTokenID,\\r\\n            newOriginalTokenID\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev init Perpetual Pool Lite for a specific collection\\r\\n     */\\r\\n\\r\\n    function initPerpetualPoolLite(uint256 collectionID, string memory name) internal {\\r\\n        ProtocolParameters protocol = ProtocolParameters(_protocol);\\r\\n        address futuresOracleAddress = protocol.futuresOracleAddress();\\r\\n        uint256 futuresMultiplier = protocol.futuresMultiplier();\\r\\n        uint256 futuresFeeRatio = protocol.futuresFeeRatio();\\r\\n        uint256 futuresFundingRateCoefficient = protocol.futuresFundingRateCoefficient();\\r\\n\\r\\n        IPerpetualPoolLite futures = IPerpetualPoolLite(_perpetualPoolLiteAddress);\\r\\n\\r\\n        futures.addSymbol(\\r\\n            collectionID,\\r\\n            name,\\r\\n            futuresOracleAddress,\\r\\n            futuresMultiplier,\\r\\n            futuresFeeRatio,\\r\\n            futuresFundingRateCoefficient\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice checks whether a collection is registered or not\\r\\n     */\\r\\n    function isSyntheticCollectionRegistered(address collection) public view returns (bool) {\\r\\n        return _collections[collection].collectionManagerAddress != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice checks whether a Synthetic NFT has been created for a given NFT or not\\r\\n     */\\r\\n    function isSyntheticNFTCreated(address collection, uint256 tokenId) public view returns (bool) {\\r\\n        // Collection must be registered first\\r\\n        require(isSyntheticCollectionRegistered(collection), \\\"Collection not registered\\\");\\r\\n\\r\\n        // connect to collection manager\\r\\n        address collectionAddress = _collections[collection].collectionManagerAddress;\\r\\n        address syntheticNFTAddress = SyntheticCollectionManager(collectionAddress).erc721address();\\r\\n\\r\\n        // check whether a given id was minted or not\\r\\n        return ISyntheticNFT(syntheticNFTAddress).exists(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice checks whether a Synthetic has been verified or not\\r\\n     */\\r\\n    function isNFTVerified(address collection, uint256 tokenId) public view returns (bool) {\\r\\n        require(isSyntheticNFTCreated(collection, tokenId), \\\"NFT not registered\\\");\\r\\n        address collectionManager = getCollectionManagerAddress(collection);\\r\\n        return SyntheticCollectionManager(collectionManager).isVerified(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice verify a synthetic NFT\\r\\n     */\\r\\n    function verifyNFT(address collection, uint256 tokenId) public onlyRole(ORACLE) {\\r\\n        require(isSyntheticNFTCreated(collection, tokenId), \\\"NFT not registered\\\");\\r\\n        address collectionManager = getCollectionManagerAddress(collection);\\r\\n        SyntheticCollectionManager(collectionManager).verify(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice getter for Jot Address of a collection\\r\\n     */\\r\\n    function getJotsAddress(address collection) public view returns (address) {\\r\\n        return _collections[collection].jotAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice getter for Jot Pool Address of a collection\\r\\n     */\\r\\n    function getJotPoolAddress(address collection) public view returns (address) {\\r\\n        return _collections[collection].jotPoolAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get collection manager address from collection address\\r\\n     */\\r\\n    function getCollectionManagerAddress(address collection) public view returns (address) {\\r\\n        return _collections[collection].collectionManagerAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get collection manager address from collection ID\\r\\n     */\\r\\n    function getCollectionManagerAddress(uint256 collectionID) public view returns (address) {\\r\\n        address collectionAddress = _collectionIdToAddress[collectionID];\\r\\n        return _collections[collectionAddress].collectionManagerAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get collection ID from collection address\\r\\n     */\\r\\n    function getCollectionID(address collection) public view returns (uint256) {\\r\\n        return _collections[collection].collectionID;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get collection address from collection ID\\r\\n     */\\r\\n    function getOriginalCollectionAddress(uint256 collectionID) public view returns (address) {\\r\\n        return _collectionIdToAddress[collectionID];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4a3ef481c90d9b5da5c3c10b595366795932f8e3a9289df3b3c4d250c6386f7c\",\"license\":\"MIT\"},\"contracts/polygon/auctions/AuctionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\nimport \\\"../implementations/SyntheticCollectionManager.sol\\\";\\nimport \\\"../SyntheticProtocolRouter.sol\\\";\\nimport \\\"./NFTAuction.sol\\\";\\n\\ncontract AuctionsManager is AccessControl, Initializable {\\n    bytes32 public constant COLLECTION_MANAGER = keccak256(\\\"COLLECTION_MANAGER\\\");\\n    bytes32 public constant DEPLOYER = keccak256(\\\"DEPLOYER\\\");\\n    bytes32 public constant AUCTION = keccak256(\\\"AUCTION\\\");\\n\\n    /**\\n     * @dev the implementation to deploy through minimal proxies\\n     */\\n    address private immutable _nftAuctionImplementation;\\n\\n    ProtocolParameters public protocol;\\n    SyntheticProtocolRouter public router;\\n\\n    mapping(address => mapping(uint256 => bool)) private _whitelistedTokens;\\n\\n    event AuctionStarted(\\n        address indexed collection,\\n        uint256 indexed nftId,\\n        address auctionContract,\\n        uint256 openingBid\\n    );\\n\\n    constructor(address nftAuction_) {\\n        _nftAuctionImplementation = nftAuction_;\\n\\n        _setupRole(DEPLOYER, msg.sender);\\n    }\\n\\n    function initialize(address protocol_, address router_) external initializer onlyRole(DEPLOYER) {\\n        protocol = ProtocolParameters(protocol_);\\n        router = SyntheticProtocolRouter(router_);\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, router_);\\n    }\\n\\n    function whitelistNFT(uint256 nftId_) external onlyRole(COLLECTION_MANAGER) {\\n        _whitelistedTokens[msg.sender][nftId_] = true;\\n    }\\n\\n    /**\\n     * @dev we need to pass the jobSupply here to work well even when the governance\\n     *      changes this protocol parameter in the middle of the auction\\n     */\\n    function reassignNFT(\\n        address collection_,\\n        uint256 nftId_,\\n        address newOwner_,\\n        uint256 jotsSupply_\\n    ) external onlyRole(AUCTION) {\\n        SyntheticCollectionManager(collection_).reassignNFT(nftId_, newOwner_, jotsSupply_);\\n    }\\n\\n    function startAuction(\\n        address collection_,\\n        uint256 nftId_,\\n        uint256 openingBid_\\n    ) external {\\n        uint256 jotsSupply = protocol.jotsSupply();\\n        require(_whitelistedTokens[collection_][nftId_], \\\"Token can't be auctioned\\\");\\n        require(openingBid_ >= jotsSupply, \\\"Opening bid too low\\\");\\n        require(router.isSyntheticNFTCreated(collection_, nftId_), \\\"Non registered token\\\");\\n\\n        // blacklist the nft to avoid start a new auction\\n        _whitelistedTokens[collection_][nftId_] = false;\\n\\n        address jotToken = router.getJotsAddress(collection_);\\n\\n        // deploys a minimal proxy contract from privi nft auction implementation\\n        address auctionAddress = Clones.clone(_nftAuctionImplementation);\\n        NFTAuction(auctionAddress).initialize(\\n            nftId_,\\n            jotToken,\\n            router.getJotPoolAddress(collection_),\\n            router.getCollectionManagerAddress(collection_),\\n            jotsSupply,\\n            openingBid_,\\n            protocol.auctionDuration(),\\n            msg.sender\\n        );\\n\\n        // give the AUCTION role to allow blacklisting\\n        _setupRole(AUCTION, auctionAddress);\\n\\n        // transfer funds to the auction contract\\n        require(\\n            IERC20(jotToken).transferFrom(msg.sender, auctionAddress, openingBid_),\\n            \\\"Unable to transfer jots\\\"\\n        );\\n\\n        emit AuctionStarted(collection_, nftId_, auctionAddress, openingBid_);\\n    }\\n}\\n\",\"keccak256\":\"0xc2d84c6f3071464cc82e0485bda27c0c34f1025115436354a69fb1eb06415b12\",\"license\":\"MIT\"},\"contracts/polygon/auctions/NFTAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./AuctionsManager.sol\\\";\\n\\ncontract NFTAuction is Initializable {\\n    // parameters of the auction. Times are either\\n    // absolute unix timestamps (seconds since 1970-01-01)\\n    // or time periods in seconds.\\n    uint256 public auctionEndTime;\\n\\n    // current state of the auction.\\n    address public highestBidder;\\n    uint256 public highestBid;\\n\\n    // getters\\n    uint256 public nftId;\\n    address public jot;\\n    address public jotPool;\\n    address public syntheticCollection;\\n    address public auctionsManager;\\n\\n    // allowed withdrawals of previous bids\\n    mapping(address => uint256) private _pendingReturns;\\n\\n    // set to true at the end, disallows any change.\\n    // by default initialized to `false`.\\n    bool private _claimed;\\n\\n    uint256 private _jotSupply;\\n\\n    // events that will be emitted on changes.\\n    event HighestBidIncreased(address bidder, uint256 amount);\\n    event AuctionEnded(address winner, uint256 amount);\\n\\n    /// create a simple auction\\n    function initialize(\\n        uint256 nftId_,\\n        address jot_,\\n        address jotPool_,\\n        address syntheticCollection_,\\n        uint256 jotSupply_,\\n        uint256 initialBid_,\\n        uint256 auctionDuration_,\\n        address initialBidder_\\n    ) external initializer {\\n        nftId = nftId_;\\n        auctionEndTime = block.timestamp + auctionDuration_; // solhint-disable-line\\n        highestBid = initialBid_;\\n        _jotSupply = jotSupply_;\\n        jot = jot_;\\n        jotPool = jotPool_;\\n        syntheticCollection = syntheticCollection_;\\n        highestBidder = initialBidder_;\\n        auctionsManager = msg.sender;\\n    }\\n\\n    /// bid on the auction.\\n    /// the value will only be refunded if the\\n    /// auction is not won.\\n    function bid(uint256 amount_) public payable {\\n        // revert the call if the bidding\\n        // period is over.\\n        // solhint-disable-next-line\\n        require(block.timestamp <= auctionEndTime, \\\"Auction already ended\\\");\\n\\n        // if the bid is not higher revert\\n        require(amount_ > highestBid, \\\"There already is a higher bid\\\");\\n\\n        // if the allowance is not enough or transfer fails revert\\n        require(IERC20(jot).transferFrom(msg.sender, address(this), amount_), \\\"Unable to transfer jots\\\");\\n\\n        if (highestBid != 0) {\\n            // sending back the money by simply using\\n            // highestBidder.send(highestBid) is a security risk\\n            // because it could execute an untrusted contract.\\n            // it is always safer to let the recipients\\n            // withdraw their money themselves.\\n            _pendingReturns[highestBidder] += highestBid;\\n        }\\n        highestBidder = msg.sender;\\n        highestBid = amount_;\\n\\n        emit HighestBidIncreased(msg.sender, amount_);\\n    }\\n\\n    /// withdraw a bid that was overbid.\\n    function withdraw() public {\\n        uint256 amount = _pendingReturns[msg.sender];\\n        if (amount > 0) {\\n            // avoid reentrancy\\n            _pendingReturns[msg.sender] = 0;\\n\\n            require(IERC20(jot).transfer(msg.sender, amount), \\\"Unable to transfer jots\\\");\\n        }\\n    }\\n\\n    /// winner can claim the token after auction end time\\n    function endAuction() public {\\n        // solhint-disable-next-line\\n        require(block.timestamp >= auctionEndTime, \\\"Auction not yet ended\\\");\\n        require(!_claimed, \\\"Token has already been claimed\\\");\\n\\n        _claimed = true;\\n\\n        // transfer the jots\\n        require(IERC20(jot).transfer(jot, _jotSupply), \\\"Unable to transfer jots\\\");\\n\\n        if (highestBid - _jotSupply > 0) {\\n            require(IERC20(jot).transfer(jotPool, highestBid - _jotSupply), \\\"Unable to transfer jots\\\");\\n        }\\n\\n        // reassign the NFT in the synthetic collection\\n        AuctionsManager(auctionsManager).reassignNFT(syntheticCollection, nftId, highestBidder, _jotSupply);\\n\\n        emit AuctionEnded(highestBidder, highestBid);\\n    }\\n}\\n\",\"keccak256\":\"0xdc51fb939eed7c0cf1502c956d58a760ee512155a60e7420af8adf219ff6fdf7\",\"license\":\"MIT\"},\"contracts/polygon/chainlink/OracleStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct APIOracleInfo {\\n    address linkToken;\\n    address chainlinkNode;\\n    string jobId;\\n    uint256 nodeFee;\\n}\\n\\nstruct VRFOracleInfo {\\n    address vrfCoordinator;\\n    address linkToken;\\n    bytes32 keyHash;\\n    uint256 vrfFee;\\n}\\n\\nstruct VerifyRequest {\\n    address originalCollection;\\n    address syntheticCollection;\\n    uint256 tokenId;\\n}\\n\",\"keccak256\":\"0xa88e9d35195519133eff2c727e319212bc1716b449d86896321541697c57068f\",\"license\":\"MIT\"},\"contracts/polygon/chainlink/PolygonValidatorOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../implementations/SyntheticCollectionManager.sol\\\";\\r\\nimport \\\"./OracleStructs.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev the ownership will be transferred after deployment to the router contract\\r\\n */\\r\\ncontract PolygonValidatorOracle is ChainlinkClient, Ownable {\\r\\n    /**\\r\\n     * @dev oracle configuration parameters\\r\\n     */\\r\\n    string public token;\\r\\n    string public apiURL;\\r\\n    address public chainlinkNode;\\r\\n    bytes32 public jobId;\\r\\n    uint256 public nodeFee;\\r\\n    address public linkToken;\\r\\n\\r\\n    mapping(bytes32 => VerifyRequest) private _verifyRequests;\\r\\n    mapping(address => bool) private _whitelistedCollections;\\r\\n\\r\\n    event ResponseReceived(\\r\\n        bytes32 indexed requestId,\\r\\n        address originalCollection,\\r\\n        address syntheticCollection,\\r\\n        uint256 tokenId,\\r\\n        bool verified\\r\\n    );\\r\\n\\r\\n    constructor(APIOracleInfo memory _oracleInfo) {\\r\\n        linkToken = _oracleInfo.linkToken;\\r\\n        chainlinkNode = _oracleInfo.chainlinkNode;\\r\\n        jobId = stringToBytes32(_oracleInfo.jobId);\\r\\n        nodeFee = (_oracleInfo.nodeFee * LINK_DIVISIBILITY) / 1000;\\r\\n        apiURL = \\\"SHOULD BE DEPLOYED YET\\\";\\r\\n\\r\\n        setChainlinkToken(linkToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev call to verify if a token is locked in ethereum vault,\\r\\n     * this method can be called only from the collection manager contract\\r\\n     * @param ethereumCollection the collection address in ethereum\\r\\n     * @param tokenId the id of the nft in the collection\\r\\n     * @return requestId the id of the request to the Chainlink oracle\\r\\n     */\\r\\n    function verifyTokenInCollection(address ethereumCollection, uint256 tokenId)\\r\\n        external\\r\\n        returns (bytes32 requestId)\\r\\n    {\\r\\n        require(_whitelistedCollections[msg.sender], \\\"Invalid requester\\\");\\r\\n\\r\\n        Chainlink.Request memory request = buildChainlinkRequest(\\r\\n            jobId,\\r\\n            address(this),\\r\\n            this.processResponse.selector\\r\\n        );\\r\\n\\r\\n        // set the request params\\r\\n        Chainlink.add(\\r\\n            request,\\r\\n            \\\"get\\\",\\r\\n            string(\\r\\n                abi.encodePacked(apiURL, \\\"?collection=\\\", ethereumCollection, \\\"&tokenId=\\\", uint2str(tokenId))\\r\\n            )\\r\\n        );\\r\\n        Chainlink.add(request, \\\"path\\\", \\\"locked\\\");\\r\\n\\r\\n        // Send the request\\r\\n        requestId = sendChainlinkRequestTo(chainlinkNode, request, nodeFee);\\r\\n\\r\\n        _verifyRequests[requestId] = VerifyRequest({\\r\\n            tokenId: tokenId,\\r\\n            originalCollection: ethereumCollection,\\r\\n            syntheticCollection: msg.sender\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function to process the oracle response (only callable from oracle)\\r\\n     * @param requestId the id of the request to the Chainlink oracle\\r\\n     * @param verified wether the nft is locked or not on ethereum\\r\\n     */\\r\\n    function processResponse(bytes32 requestId, bool verified) public recordChainlinkFulfillment(requestId) {\\r\\n        VerifyRequest memory requestData = _verifyRequests[requestId];\\r\\n\\r\\n        // only call the synthetic collection contract if is locked\\r\\n        if (verified) {\\r\\n            SyntheticCollectionManager(requestData.syntheticCollection).processSuccessfulVerify(\\r\\n                requestData.tokenId\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit ResponseReceived(\\r\\n            requestId,\\r\\n            requestData.originalCollection,\\r\\n            requestData.syntheticCollection,\\r\\n            requestData.tokenId,\\r\\n            verified\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev whitelist collections in order to allow calling this contract\\r\\n     * (only router can whitelist after deploying the proxy, the router contract owns this one)\\r\\n     * @param collectionId the collection manager (sythetic collection from polygon)\\r\\n     */\\r\\n    function whitelistCollection(address collectionId) external onlyOwner {\\r\\n        _whitelistedCollections[collectionId] = true;\\r\\n    }\\r\\n\\r\\n    function stringToBytes32(string memory source) private pure returns (bytes32 result) {\\r\\n        bytes memory tempEmptyStringTest = bytes(source);\\r\\n        if (tempEmptyStringTest.length == 0) {\\r\\n            return 0x0;\\r\\n        }\\r\\n\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            result := mload(add(source, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uint2str(uint256 _i) private pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 j = _i;\\r\\n        uint256 len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint256 k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k - 1;\\r\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3f571d937adc8d59177828e394abc31e14cd4c6946fb36b0671e7da9a312938e\",\"license\":\"MIT\"},\"contracts/polygon/chainlink/RandomNumberConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../implementations/SyntheticCollectionManager.sol\\\";\\n\\n/**\\n * @dev the ownership will be transferred after deployment to the router contract\\n */\\ncontract RandomNumberConsumer is VRFConsumerBase, Ownable {\\n    bytes32 internal immutable keyHash;\\n    uint256 internal immutable fee;\\n\\n    mapping(bytes32 => address) private _requestIdToCollection;\\n    mapping(address => bool) private _whitelistedCollections;\\n\\n    /**\\n     * @dev constructor inherits VRFConsumerBase\\n     */\\n    constructor(VRFOracleInfo memory _oracleInfo)\\n        VRFConsumerBase(_oracleInfo.vrfCoordinator, _oracleInfo.linkToken)\\n    {\\n        keyHash = _oracleInfo.keyHash;\\n        fee = _oracleInfo.vrfFee;\\n    }\\n\\n    /**\\n     * @dev requests randomness\\n     */\\n    function getRandomNumber() external returns (bytes32 requestId) {\\n        require(_whitelistedCollections[msg.sender], \\\"Invalid requester\\\");\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\n\\n        requestId = requestRandomness(keyHash, fee);\\n        _requestIdToCollection[requestId] = msg.sender;\\n    }\\n\\n    /**\\n     * @dev callback function used by VRF Coordinator (only 200k gas allowed and should not revert)\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        SyntheticCollectionManager(_requestIdToCollection[requestId]).processFlipResult(\\n            randomness % 2,\\n            requestId\\n        );\\n    }\\n\\n    /**\\n     * @dev whitelist collections to get random from this contract\\n     */\\n    function whitelistCollection(address collectionId) external onlyOwner {\\n        _whitelistedCollections[collectionId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xa71f46afd6b6e71bcdd09beb83bccd29ac00021c5dcddd8b9a3d973beb5bb960\",\"license\":\"MIT\"},\"contracts/polygon/extensions/IERC20ManagedAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev allows to send funds from a managed account (infinite allowance)\\n */\\ninterface IERC20ManagedAccounts {\\n    function transferFromManaged(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x353fe2e73379fe78ed6aa9923e36307018a515cd792a22d3e7a9a0dacc6edffc\",\"license\":\"MIT\"},\"contracts/polygon/governance/ProtocolParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title parameters controlled by governance\\n * @notice the owner of this contract is the timelock controller of the governance feature\\n */\\ncontract ProtocolParameters is Ownable {\\n    // this is the number of Jots minted when a new single NFT is synthetic fractionalised\\n    uint256 public jotsSupply;\\n\\n    // interval in seconds between the one flip to another in one lock contract\\n    uint256 public flippingInterval;\\n\\n    // amount of reward that the flipper gets if he is right on the outcome\\n    uint256 public flippingReward;\\n\\n    // amount of jots into play in each flip\\n    uint256 public flippingAmount;\\n\\n    // the duration of an NFT auction in seconds\\n    uint256 public auctionDuration;\\n\\n\\n    // the implementation of FlipCoinGenerator\\n    address public flipCoinGenerator;\\n\\n    // futures variables \\n    address public futuresOracleAddress;\\n    uint256 public futuresMultiplier;\\n    uint256 public futuresFeeRatio;\\n    uint256 public futuresFundingRateCoefficient;\\n\\n    event JotsSupplyUpdated(uint256 value);\\n    event FlippingIntervalUpdated(uint256 value);\\n    event FlippingRewardUpdated(uint256 value);\\n    event FlippingAmountUpdated(uint256 value);\\n    event AuctionDurationUpdated(uint256 value);\\n    event FlipCoinGeneratorUpdated(address value);\\n    event FuturesOracleAddressUpdated(address value);\\n    event FuturesMultiplierUpdated(uint256 value);\\n    event FuturesFeeRatioUpdated(uint256 value);\\n    event FuturesFundingRateCoefficientUpdated(uint256 value);\\n\\n    /**\\n     * @dev sets the default (initial) values of the parameters\\n     *      also transfers the ownership to the governance\\n     */\\n    constructor(\\n        uint256 jotsSupply_,\\n        uint256 flippingInterval_,\\n        uint256 flippingReward_,\\n        uint256 flippingAmount_,\\n        uint256 auctionDuration_,\\n        address governanceContractAddress_,\\n        address futuresOracleAddress_,\\n        uint256 futuresMultiplier_,\\n        uint256 futuresFeeRatio_,\\n        uint256 futuresFundingRateCoefficient_\\n    ) {\\n        require(flippingReward_ > 0, \\\"Invalid Reward\\\");\\n        require(flippingAmount_ > 0, \\\"Invalid Amount\\\");\\n        require(flippingReward_ < flippingAmount_, \\\"Reward should be lower than Amount\\\");\\n        require(jotsSupply_ > 0, \\\"Invalid Jots Supply\\\");\\n        require(flippingInterval_ > 15 minutes, \\\"Flipping Interval should be greater than 15 minutes\\\");\\n        require(auctionDuration_ > 1 hours, \\\"Auction duration should be greater than 1 hour\\\");\\n        require(futuresOracleAddress_ != address(0), \\\"Oracle address can't be zero\\\");\\n        require(futuresMultiplier_ > 0, \\\"Invalid futures multiplier\\\");\\n        require(futuresFeeRatio_> 0, \\\"Invalid futures fee ratio\\\");\\n        require(futuresFundingRateCoefficient_ > 0, \\\"Invalid futures funding rate coefficient\\\");\\n\\n        jotsSupply = jotsSupply_;\\n        flippingInterval = flippingInterval_;\\n        flippingReward = flippingReward_;\\n        flippingAmount = flippingAmount_;\\n        auctionDuration = auctionDuration_;\\n\\n        futuresOracleAddress = futuresOracleAddress_;\\n        futuresMultiplier = futuresMultiplier_;\\n        futuresFeeRatio = futuresFeeRatio_;\\n        futuresFundingRateCoefficient = futuresFundingRateCoefficient_;\\n\\n        // transfer ownership\\n        transferOwnership(governanceContractAddress_);\\n    }\\n\\n    function setJotsSupply(uint256 jotsSupply_) external onlyOwner {\\n        require(jotsSupply_ > 0, \\\"Invalid Jots Supply\\\");\\n        jotsSupply = jotsSupply_;\\n        emit JotsSupplyUpdated(jotsSupply_);\\n    }\\n\\n    function setFlippingInterval(uint256 flippingInterval_) external onlyOwner {\\n        require(flippingInterval_ > 15 minutes, \\\"Flipping Interval should be greater than 15 minutes\\\");\\n        flippingInterval = flippingInterval_;\\n        emit FlippingIntervalUpdated(flippingInterval_);\\n    }\\n\\n    function setFlippingReward(uint256 flippingReward_) external onlyOwner {\\n        require(flippingReward_ > 0, \\\"Invalid Reward\\\");\\n        require(flippingReward_ < flippingAmount, \\\"Reward should be lower than Amount\\\");\\n        flippingReward = flippingReward_;\\n        emit FlippingRewardUpdated(flippingReward_);\\n    }\\n\\n    function setFlippingAmount(uint256 flippingAmount_) external onlyOwner {\\n        require(flippingAmount_ > 0, \\\"Invalid Amount\\\");\\n        require(flippingReward < flippingAmount_, \\\"Reward should be lower than Amount\\\");\\n        flippingAmount = flippingAmount_;\\n        emit FlippingAmountUpdated(flippingAmount_);\\n    }\\n\\n    function setAuctionDuration(uint256 auctionDuration_) external onlyOwner {\\n        require(auctionDuration_ > 1 hours, \\\"Auction duration should be greater than 1 hour\\\");\\n        auctionDuration = auctionDuration_;\\n        emit AuctionDurationUpdated(auctionDuration_);\\n    }\\n\\n    function setFuturesOracleAddress(address futuresOracleAddress_) external onlyOwner {\\n        require(futuresOracleAddress_ != address(0), \\\"Oracle address can't be zero\\\");\\n        futuresOracleAddress = futuresOracleAddress_;\\n        emit FuturesOracleAddressUpdated(futuresOracleAddress_);\\n    }\\n\\n    function setFuturesMultiplier(uint256 futuresMultiplier_) external onlyOwner {\\n        require(futuresMultiplier_ > 1 hours, \\\"Invalid futures multiplier\\\");\\n        futuresMultiplier = futuresMultiplier_;\\n        emit FuturesMultiplierUpdated(futuresMultiplier_);\\n    }\\n\\n    function setFuturesFeeRatio(uint256 futuresFeeRatio_) external onlyOwner {\\n        require(futuresFeeRatio_ > 1 hours, \\\"Invalid futures fee ratio\\\");\\n        futuresFeeRatio = futuresFeeRatio_;\\n        emit FuturesFeeRatioUpdated(futuresFeeRatio_);\\n    }\\n\\n    function setFuturesFundingRateCoefficient(uint256 futuresFundingRateCoefficient_) external onlyOwner {\\n        require(futuresFundingRateCoefficient_ > 1 hours, \\\"Invalid futures funding rate coefficient\\\");\\n        futuresFundingRateCoefficient = futuresFundingRateCoefficient_;\\n        emit FuturesFundingRateCoefficientUpdated(futuresFundingRateCoefficient_);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x36452f08ba911b52430729b75a7c77668acc5525d40988262c8e634af887f861\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Jot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../extensions/IERC20ManagedAccounts.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\n\\r\\ncontract Jot is ERC20, IERC20ManagedAccounts, AccessControl, Initializable {\\r\\n    bytes32 public constant ROUTER = keccak256(\\\"ROUTER\\\");\\r\\n    bytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\r\\n\\r\\n    // proxied values for the erc20 attributes\\r\\n    string private _proxiedName;\\r\\n    string private _proxiedSymbol;\\r\\n\\r\\n    /**\\r\\n     * @notice *swap address\\r\\n     */\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n\\r\\n    /**\\r\\n     * @notice pair address\\r\\n     */\\r\\n    address public uniswapV2Pair;\\r\\n\\r\\n    mapping(address => address) private _managers;\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    constructor() ERC20(\\\"Privi Jot Token Implementation\\\", \\\"pJOTI\\\") {}\\r\\n\\r\\n    function initialize(\\r\\n        string calldata _name,\\r\\n        string calldata _symbol,\\r\\n        address swapAddress,\\r\\n        address fundingTokenAddress\\r\\n    ) external initializer {\\r\\n        _proxiedName = _name;\\r\\n        _proxiedSymbol = _symbol;\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(ROUTER, msg.sender);\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(swapAddress);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        // uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\r\\n        //     address(this),\\r\\n        //     fundingTokenAddress\\r\\n        // );\\r\\n    }\\r\\n\\r\\n    function mint(address account, uint256 amount) public onlyRole(MINTER) {\\r\\n        _mint(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev allows to send funds from a managed account (infinite allowance)\\r\\n     */\\r\\n    function transferFromManaged(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external virtual override {\\r\\n        require(_managers[sender] == msg.sender, \\\"The caller is not the manager of this account\\\");\\r\\n        _transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function setManager(address manager, address account) external onlyRole(ROUTER) {\\r\\n        _managers[account] = manager;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _proxiedName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _proxiedSymbol;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x706fb50c478948e6a410f6aee31c1e1b2de22cac42a766b150a5b35745d03db1\",\"license\":\"MIT\"},\"contracts/polygon/implementations/JotPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract JotPool is Initializable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 public totalLiquidity;\\r\\n\\r\\n    mapping(address => uint256) private liquidity;\\r\\n\\r\\n    address public jot;\\r\\n\\r\\n    event LiquidityAdded(address provider, uint256 amount, uint256 mintedLiquidity);\\r\\n    event LiquidityRemoved(address provider, uint256 amount, uint256 liquidityBurnt);\\r\\n\\r\\n    function initialize(address _jot) external initializer {\\r\\n        require(_jot != address(0), \\\"Invalid Jot token\\\");\\r\\n        jot = _jot;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n        uint256 mintedLiquidity = totalLiquidity > 0\\r\\n            ? (totalLiquidity * amount) / IERC20(jot).balanceOf(address(this))\\r\\n            : 100;\\r\\n        liquidity[msg.sender] += mintedLiquidity;\\r\\n        totalLiquidity += mintedLiquidity;\\r\\n        emit LiquidityAdded(msg.sender, amount, mintedLiquidity);\\r\\n        IERC20(jot).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(uint256 amount) external {\\r\\n        require(liquidity[msg.sender] >= amount, \\\"Remove amount exceeds balance\\\");\\r\\n        uint256 liquidityBurnt = (IERC20(jot).balanceOf(address(this)) * amount) / totalLiquidity;\\r\\n        if (totalLiquidity - amount > 0) {\\r\\n            liquidity[msg.sender] -= amount;\\r\\n            totalLiquidity -= amount;\\r\\n        } else {\\r\\n            liquidity[msg.sender] = 100;\\r\\n            totalLiquidity = 100;\\r\\n        }\\r\\n\\r\\n        emit LiquidityRemoved(msg.sender, amount, liquidityBurnt);\\r\\n\\r\\n        IERC20(jot).safeTransfer(msg.sender, liquidityBurnt);\\r\\n    }\\r\\n\\r\\n    function balance() external view returns (uint256) {\\r\\n        return liquidity[msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf204730d17b0af61bd697e13e398f50207857e2d645d29e2a7f204f266743531\",\"license\":\"MIT\"},\"contracts/polygon/implementations/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct TokenData {\\n    uint256 originalTokenID;\\n    uint256 ownerSupply;\\n    uint256 sellingSupply;\\n    uint256 soldSupply;\\n    uint256 liquiditySupply;\\n    uint256 liquiditySold;\\n    uint256 fractionPrices;\\n    uint256 lastFlipTime;\\n    bool verified;\\n    uint256 originalID;\\n}\\n\\nstruct Flip {\\n    uint256 tokenId;\\n    uint256 prediction;\\n}\\n\",\"keccak256\":\"0xffe83aabb8233e7ae2dfa782d50e6db8af10b2665cfa439312a133108e9b35b2\",\"license\":\"MIT\"},\"contracts/polygon/implementations/SyntheticCollectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"../extensions/IERC20ManagedAccounts.sol\\\";\\r\\nimport \\\"../auctions/AuctionsManager.sol\\\";\\r\\nimport \\\"../chainlink/RandomNumberConsumer.sol\\\";\\r\\nimport \\\"../chainlink/PolygonValidatorOracle.sol\\\";\\r\\nimport \\\"../SyntheticProtocolRouter.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\nimport \\\"../governance/ProtocolParameters.sol\\\";\\r\\nimport \\\"./Jot.sol\\\";\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract SyntheticCollectionManager is AccessControl, Initializable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    bytes32 public constant ROUTER = keccak256(\\\"ROUTER\\\");\\r\\n    bytes32 public constant AUCTION_MANAGER = keccak256(\\\"AUCTION_MANAGER\\\");\\r\\n    bytes32 public constant RANDOM_ORACLE = keccak256(\\\"RANDOM_ORACLE\\\");\\r\\n    bytes32 public constant VALIDATOR_ORACLE = keccak256(\\\"VALIDATOR_ORACLE\\\");\\r\\n\\r\\n    address private immutable _randomConsumerAddress;\\r\\n    address private immutable _validatorAddress;\\r\\n    address private _auctionsManagerAddress;\\r\\n\\r\\n    /**\\r\\n     * @dev ERC20 totalSupply (governance) parameter\\r\\n     * TODO: get from governance\\r\\n     */\\r\\n    uint256 private _jotsSupply;\\r\\n\\r\\n    /**\\r\\n     * @dev mapping the request id with the flip input data\\r\\n     */\\r\\n    mapping(bytes32 => Flip) private _flips;\\r\\n\\r\\n    mapping(uint256 => uint256) private _originalToSynthetic;\\r\\n\\r\\n    Counters.Counter public tokenCounter;\\r\\n\\r\\n    /**\\r\\n     * @notice the address of the Protocol Router\\r\\n     */\\r\\n    address public syntheticProtocolRouterAddress;\\r\\n\\r\\n    ProtocolParameters public protocol;\\r\\n\\r\\n    /**\\r\\n     * @notice address of the original collection\\r\\n     */\\r\\n    address public originalCollectionAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice jot Address for this collection\\r\\n     */\\r\\n    address public jotAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice funding token address\\r\\n     */\\r\\n    address public fundingTokenAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice data for each token\\r\\n     */\\r\\n    mapping(uint256 => TokenData) public tokens;\\r\\n\\r\\n    /**\\r\\n     * @notice the nft should be auctioned to unlock it\\r\\n     */\\r\\n    mapping(uint256 => bool) public lockedNFTs;\\r\\n\\r\\n    /**\\r\\n     * @notice Synthetic NFT Address  for this collection\\r\\n     */\\r\\n    address public erc721address;\\r\\n\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n\\r\\n    address public jotPool;\\r\\n\\r\\n    event CoinFlipped(\\r\\n        bytes32 indexed requestId,\\r\\n        address indexed player,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 prediction\\r\\n    );\\r\\n    event FlipProcessed(\\r\\n        bytes32 indexed requestId,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 prediction,\\r\\n        uint256 randomResult\\r\\n    );\\r\\n\\r\\n    constructor(address randomConsumerAddress, address validatorAddress) {\\r\\n        _randomConsumerAddress = randomConsumerAddress;\\r\\n        _validatorAddress = validatorAddress;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _jotAddress,\\r\\n        address originalCollectionAddress_,\\r\\n        address _erc721address,\\r\\n        address auctionManagerAddress,\\r\\n        address protocol_,\\r\\n        address fundingTokenAddress_,\\r\\n        address jotPool_\\r\\n    ) external initializer {\\r\\n        jotAddress = _jotAddress;\\r\\n        erc721address = _erc721address;\\r\\n        originalCollectionAddress = originalCollectionAddress_;\\r\\n        syntheticProtocolRouterAddress = msg.sender;\\r\\n        _auctionsManagerAddress = auctionManagerAddress;\\r\\n        protocol = ProtocolParameters(protocol_);\\r\\n        jotPool = jotPool_;\\r\\n\\r\\n        _jotsSupply = protocol.jotsSupply();\\r\\n        fundingTokenAddress = fundingTokenAddress_;\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(ROUTER, msg.sender);\\r\\n        _setupRole(AUCTION_MANAGER, auctionManagerAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev we need to pass the jobSupply here to work well even when the governance\\r\\n     *      changes this protocol parameter in the middle of the auction\\r\\n     */\\r\\n    function reassignNFT(\\r\\n        uint256 nftId_,\\r\\n        address newOwner_,\\r\\n        uint256 jotsSupply_\\r\\n    ) external onlyRole(AUCTION_MANAGER) {\\r\\n        TokenData storage data = tokens[nftId_];\\r\\n\\r\\n        // the auction could only be started if ownerSupply is 0\\r\\n        assert(data.ownerSupply == 0);\\r\\n\\r\\n        // TODO: implement this logic\\r\\n\\r\\n        // data.ownerSupply = jotsSupply_;\\r\\n        // data.sellingSupply = 0;\\r\\n        // data.soldSupply = 0;\\r\\n        // data.liquiditySupply = 0;\\r\\n        // data.liquiditySold = 0;\\r\\n        // data.fractionPrices = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice change an NFT for another one of the same collection\\r\\n     */\\r\\n    function change(\\r\\n        uint256 syntheticID,\\r\\n        uint256 newOriginalTokenID,\\r\\n        address caller\\r\\n    ) public onlyRole(ROUTER) {\\r\\n        // Token must be registered\\r\\n        require(ISyntheticNFT(erc721address).exists(syntheticID), \\\"token not registered!\\\");\\r\\n\\r\\n        // Caller must be token owner\\r\\n        address tokenOwner = IERC721(erc721address).ownerOf(syntheticID);\\r\\n        require(tokenOwner == caller, \\\"You are not the owner of the NFT!\\\");\\r\\n        \\r\\n        // Change original token ID and set verified = false\\r\\n        uint256 originalID = tokens[syntheticID].originalID;\\r\\n\\r\\n        _originalToSynthetic[originalID] = 0;\\r\\n        _originalToSynthetic[newOriginalTokenID] = syntheticID;\\r\\n        \\r\\n        tokens[syntheticID].originalID = newOriginalTokenID;\\r\\n        tokens[syntheticID].verified = false;\\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the owner of the NFT\\r\\n     */\\r\\n    function getSyntheticNFTOwner(uint256 tokenId) private view returns (address) {\\r\\n        //TODO: get owner from Oracle\\r\\n        return IERC721(erc721address).ownerOf(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice returns the Quickswap pool address\\r\\n     */\\r\\n    function poolAddress() public view returns (address) {\\r\\n        //TODO: check if pool is initiated\\r\\n        return IJot(jotAddress).uniswapV2Pair();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice public function. Checks if an NFT has\\r\\n     * been already fractionalized\\r\\n     */\\r\\n    function isSyntheticNFTCreated(uint256 tokenId) public view returns (bool) {\\r\\n        return _originalToSynthetic[tokenId] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice public function. Checks if an NFT has\\r\\n     * been already fractionalised.\\r\\n     */\\r\\n    function isSyntheticNFTFractionalised(uint256 tokenId) public view returns (bool) {\\r\\n        return tokens[tokenId].ownerSupply != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks isSyntheticNFTCreated(address, id) is False.\\r\\n     * Then it mints a new NFT with: \\u201dto\\u201d, \\u201did\\u201d and \\u201dmetadata\\u201d\\r\\n     */\\r\\n    function generateSyntheticNFT(\\r\\n        address to, \\r\\n        uint256 tokenId\\r\\n    ) private {\\r\\n        ISyntheticNFT(erc721address).safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice First\\r\\n     * it updates counter syntheticID++. Then:\\r\\n     * \\u2022 generateSyntheticNFT(address, id)\\r\\n     * \\u2022 Interacts with JOT contract for that address and:\\r\\n     * (a) Mints JotSupply (governance parameter)\\r\\n     * (b) Register ownerSupply (DO NOT SEND HIM/HER)\\r\\n     * (c) Register sellingSupply = (JotSupply-supplyToKeep)/2\\r\\n     * (d) Register soldSupply = 0\\r\\n     * (e) Register liquiditySupply = (JotSupply-supplyToKeep)/2.\\r\\n     * (f) Register liquiditySold = 0\\r\\n     *\\r\\n     */\\r\\n    function register(\\r\\n        uint256 tokenId,\\r\\n        uint256 supplyToKeep,\\r\\n        uint256 priceFraction\\r\\n    ) public onlyRole(ROUTER) returns (uint256) {\\r\\n        require(priceFraction > 0, \\\"priceFraction can't be zero\\\");\\r\\n        require(isSyntheticNFTCreated(tokenId) == false, \\\"Synthetic NFT already generated!\\\");\\r\\n        \\r\\n        uint256 syntheticID = tokenCounter.current();\\r\\n\\r\\n        generateSyntheticNFT(msg.sender, syntheticID);\\r\\n \\r\\n        Jot(jotAddress).mint(address(this), _jotsSupply);\\r\\n\\r\\n        uint256 sellingSupply = (_jotsSupply - supplyToKeep) / 2;\\r\\n        uint256 liquiditySupply = (_jotsSupply - supplyToKeep) / 2;\\r\\n\\r\\n        TokenData memory data = TokenData(\\r\\n            tokenId,\\r\\n            supplyToKeep,\\r\\n            sellingSupply,\\r\\n            0,\\r\\n            liquiditySupply,\\r\\n            0,\\r\\n            priceFraction,\\r\\n            0,\\r\\n            false,\\r\\n            0\\r\\n        );\\r\\n\\r\\n        tokens[syntheticID] = data;\\r\\n\\r\\n        tokenCounter.increment(); \\r\\n\\r\\n        return syntheticID;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows the caller to buy jots using the Funding token\\r\\n     */\\r\\n    function buyJotTokens(uint256 tokenId, uint256 buyAmount) public {\\r\\n        require(ISyntheticNFT(erc721address).exists(tokenId), \\\"Token not registered\\\");\\r\\n        require(tokens[tokenId].fractionPrices > 0, \\\"Token price not set\\\");\\r\\n        uint256 amount = (buyAmount * tokens[tokenId].fractionPrices) / 10**18;\\r\\n        require(amount > 0, \\\"Amount can't be zero!\\\");\\r\\n\\r\\n        // Calculate amount left\\r\\n        uint256 amountLeft = tokens[tokenId].sellingSupply - tokens[tokenId].soldSupply;\\r\\n\\r\\n        // If amount left is lesser than buying amount\\r\\n        // then buying amount = amount left\\r\\n\\r\\n        if (amountLeft < amount) {\\r\\n            amount = amountLeft;\\r\\n        }\\r\\n\\r\\n        // Can't sell zero tokens\\r\\n        require(amount != 0, \\\"No tokens left!\\\");\\r\\n\\r\\n        // Transfer funding tokens\\r\\n        IERC20(fundingTokenAddress).transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        // Transfer Jots\\r\\n        IJot(jotAddress).transferFrom(address(this), msg.sender, buyAmount);\\r\\n\\r\\n        //Increase sold supply (amount in token) and liquidity sold (amount in ether)\\r\\n        tokens[tokenId].soldSupply += buyAmount;\\r\\n        tokens[tokenId].liquiditySold += amount;\\r\\n\\r\\n        //If all jots have been sold, then add liquidity\\r\\n        if (amount == amountLeft) {\\r\\n            addLiquidityToPool(tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice increase selling supply for a given NFT\\r\\n     * caller must be the owner of the NFT\\r\\n     */\\r\\n\\r\\n    function increaseSellingSupply(uint256 tokenId, uint256 amount) public {\\r\\n        require(msg.sender == getSyntheticNFTOwner(tokenId), \\\"You are not the owner of the NFT!\\\");\\r\\n        require(tokens[tokenId].ownerSupply >= amount, \\\"You do not have enough tokens left\\\");\\r\\n        tokens[tokenId].ownerSupply -= amount;\\r\\n        tokens[tokenId].sellingSupply += amount / 2;\\r\\n        tokens[tokenId].liquiditySupply += amount / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice decrease selling supply for a given NFT\\r\\n     * caller must be the owner of the NFT\\r\\n     */\\r\\n    function decreaseSellingSupply(uint256 tokenId, uint256 amount) public {\\r\\n        require(msg.sender == getSyntheticNFTOwner(tokenId), \\\"You are not the owner of the NFT!\\\");\\r\\n        require(tokens[tokenId].liquiditySupply >= amount / 2, \\\"You do not have enough liquidity left\\\");\\r\\n        require(tokens[tokenId].sellingSupply >= amount / 2, \\\"You do not have enough selling supply left\\\");\\r\\n\\r\\n        tokens[tokenId].ownerSupply += amount;\\r\\n        tokens[tokenId].sellingSupply -= amount / 2;\\r\\n        tokens[tokenId].liquiditySupply -= amount / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update the price of a fraction for a given NFT\\r\\n     * caller must be the owner\\r\\n     */\\r\\n    function updatePriceFraction(uint256 tokenId, uint256 newFractionPrice) public {\\r\\n        require(ISyntheticNFT(erc721address).exists(tokenId), \\\"Token not registered\\\");\\r\\n        require(msg.sender == getSyntheticNFTOwner(tokenId), \\\"You are not the owner of the NFT!\\\");\\r\\n        tokens[tokenId].fractionPrices = newFractionPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice add available liquidity for a given token to UniSwap pool\\r\\n     */\\r\\n    function addLiquidityToPool(uint256 tokenId) public {\\r\\n        uint256 liquiditySupply = tokens[tokenId].liquiditySupply;\\r\\n        uint256 liquiditySold = tokens[tokenId].liquiditySold;\\r\\n\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        IJot(jotAddress).approve(address(uniswapV2Router), liquiditySupply);\\r\\n\\r\\n        IERC20(fundingTokenAddress).approve(address(uniswapV2Router), liquiditySold);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidity(\\r\\n            jotAddress,\\r\\n            fundingTokenAddress,\\r\\n            liquiditySupply,\\r\\n            liquiditySold,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            address(0),\\r\\n            block.timestamp // solhint-disable-line\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function isAllowedToFlip(uint256 tokenId) public view returns (bool) {\\r\\n        return\\r\\n            // solhint-disable-next-line\\r\\n            block.timestamp - tokens[tokenId].lastFlipTime >= protocol.flippingInterval() &&\\r\\n            IERC20(jotAddress).balanceOf(jotPool) > 0 &&\\r\\n            isSyntheticNFTFractionalised(tokenId);\\r\\n    }\\r\\n\\r\\n    function flipJot(uint256 tokenId, uint256 prediction) external {\\r\\n        require(isAllowedToFlip(tokenId), \\\"Flip is not allowed yet\\\");\\r\\n        tokens[tokenId].lastFlipTime = block.timestamp; // solhint-disable-line\\r\\n\\r\\n        bytes32 requestId = RandomNumberConsumer(_randomConsumerAddress).getRandomNumber();\\r\\n        _flips[requestId] = Flip({tokenId: tokenId, prediction: prediction});\\r\\n\\r\\n        emit CoinFlipped(requestId, msg.sender, tokenId, prediction);\\r\\n    }\\r\\n\\r\\n    function processFlipResult(uint256 randomNumber, bytes32 requestId) external onlyRole(RANDOM_ORACLE) {\\r\\n        uint256 poolAmount;\\r\\n        uint256 fAmount = protocol.flippingAmount();\\r\\n        uint256 fReward = protocol.flippingReward();\\r\\n\\r\\n        Flip memory flip = _flips[requestId];\\r\\n        uint256 ownerSupply = tokens[flip.tokenId].ownerSupply;\\r\\n\\r\\n        // avoid underflow in math operations\\r\\n        if (fAmount > ownerSupply) {\\r\\n            fAmount = ownerSupply;\\r\\n        }\\r\\n        if (fReward > fAmount) {\\r\\n            fReward = fAmount;\\r\\n        }\\r\\n\\r\\n        if (randomNumber == 0) {\\r\\n            tokens[flip.tokenId].ownerSupply -= fAmount;\\r\\n            if (randomNumber != flip.prediction) {\\r\\n                poolAmount = fAmount;\\r\\n            } else {\\r\\n                poolAmount = fAmount - fReward;\\r\\n                IERC20(jotAddress).safeTransfer(msg.sender, fReward);\\r\\n            }\\r\\n            if (poolAmount > 0) {\\r\\n                IERC20(jotAddress).safeTransfer(jotPool, poolAmount);\\r\\n            }\\r\\n        } else {\\r\\n            tokens[flip.tokenId].ownerSupply += fAmount;\\r\\n            if (randomNumber != flip.prediction) {\\r\\n                poolAmount = fAmount;\\r\\n            } else {\\r\\n                poolAmount = fAmount - fReward;\\r\\n                IERC20(jotAddress).safeTransfer(msg.sender, fReward);\\r\\n            }\\r\\n            if (poolAmount > 0) {\\r\\n                IERC20ManagedAccounts(jotAddress).transferFromManaged(jotPool, address(this), poolAmount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // lock the nft and make it auctionable\\r\\n        if (tokens[flip.tokenId].ownerSupply == 0) {\\r\\n            lockedNFTs[flip.tokenId] = true;\\r\\n            AuctionsManager(_auctionsManagerAddress).whitelistNFT(flip.tokenId);\\r\\n        }\\r\\n\\r\\n        emit FlipProcessed(requestId, flip.tokenId, flip.prediction, randomNumber);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This method calls chainlink oracle and\\r\\n     * verifies if the NFT has been locked on NFTVaultManager. In addition\\r\\n     * gets the metadata of the NFT\\r\\n     */\\r\\n    function verify(uint256 tokenId) external {\\r\\n        require(ISyntheticNFT(erc721address).exists(tokenId), \\\"Token not registered\\\");\\r\\n        require(!tokens[tokenId].verified, \\\"Token already verified\\\");\\r\\n        PolygonValidatorOracle(_validatorAddress).verifyTokenInCollection(originalCollectionAddress, tokenId);\\r\\n    }\\r\\n\\r\\n    function processSuccessfulVerify(uint256 tokenId) external onlyRole(VALIDATOR_ORACLE) {\\r\\n        tokens[tokenId].verified = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev burn a token\\r\\n     */\\r\\n    function safeBurn(uint256 tokenId) public onlyRole(ROUTER) {\\r\\n        ISyntheticNFT(erc721address).safeBurn(tokenId);\\r\\n        tokenCounter.decrement();\\r\\n    }\\r\\n\\r\\n    function getRemainingSupply(uint256 tokenId) public view returns (uint256) {\\r\\n        return tokens[tokenId].ownerSupply;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function isVerified(uint256 tokenId) public view returns (bool) {\\r\\n        require(ISyntheticNFT(erc721address).exists(tokenId), \\\"NFT not minted\\\");\\r\\n        return tokens[tokenId].verified;\\r\\n    }\\r\\n\\r\\n    function getOriginalID(uint256 tokenId) public view returns (uint256) {\\r\\n        require(ISyntheticNFT(erc721address).exists(tokenId));\\r\\n        return tokens[tokenId].originalID;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x18a58ecf30eb3fc6bd0025415749cbbd44e7576ab72f92c9fa4250214c254951\",\"license\":\"MIT\"},\"contracts/polygon/implementations/SyntheticNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"../Interfaces.sol\\\";\\r\\nimport \\\"./SyntheticCollectionManager.sol\\\";\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract SyntheticNFT is ERC721, Initializable, AccessControl {\\r\\n    bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");    \\r\\n\\r\\n    // token metadata\\r\\n    mapping(uint256 => string) private _tokenMetadata;\\r\\n\\r\\n    // proxied values for the erc721 attributes\\r\\n    string private _proxiedName;\\r\\n    string private _proxiedSymbol;\\r\\n\\r\\n    address private _collectionManager;\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    constructor() ERC721(\\\"Privi Collection Token\\\", \\\"PCT\\\") {}\\r\\n\\r\\n    function initialize(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address collectionManager_\\r\\n    ) external initializer {\\r\\n        _proxiedName = name_;\\r\\n        _proxiedSymbol = symbol_;\\r\\n        _collectionManager = collectionManager_;\\r\\n\\r\\n        _setupRole(MANAGER, collectionManager_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _proxiedName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _proxiedSymbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        return _tokenMetadata[tokenId];\\r\\n    }\\r\\n\\r\\n    function exists(uint256 tokenId) public view returns (bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n\\r\\n    function safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public onlyRole(MANAGER) {\\r\\n        _mint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function setMetadata(\\r\\n        uint256 tokenId,\\r\\n        string memory metadata\\r\\n    ) public onlyRole(MANAGER) {\\r\\n        _tokenMetadata[tokenId] = metadata;\\r\\n    }\\r\\n\\r\\n    function safeBurn(uint256 tokenId) public onlyRole(MANAGER) {\\r\\n        _burn(tokenId);\\r\\n        _tokenMetadata[tokenId] = \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(AccessControl, ERC721)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev override the before transfer hook to allow locking the nft\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address,\\r\\n        address,\\r\\n        uint256 tokenId\\r\\n    ) internal view override {\\r\\n        require(\\r\\n            !SyntheticCollectionManager(_collectionManager).lockedNFTs(tokenId),\\r\\n            \\\"Token is locked and auctionable\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3ba7b222cfc174706498ebd78e1b04b6ea7550ad5ac8de23be87ce89bf59dc14\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200245638038062002456833981016040819052620000349162000246565b6200003f3362000127565b601080546001600160a01b03199081166001600160a01b038f8116919091179092556002805482168e84161790556003805482168d84161790556004805482168c84161790556005805482168b84161790556006805482168a8416179055600780548216898416179055600880548216888416179055600980548216878416179055600a80548216868416179055600b80548216858416179055600c8054909116918316919091179055620001157f352d05fe3946dbe49277552ba941e744d5a96d9c60bc1ba0ea5f1d3ae000f7c88262000179565b5050505050505050505050506200033a565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b62000185828262000189565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000185576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001e53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b03811681146200024157600080fd5b919050565b6000806000806000806000806000806000806101808d8f03121562000269578788fd5b620002748d62000229565b9b506200028460208e0162000229565b9a506200029460408e0162000229565b9950620002a460608e0162000229565b9850620002b460808e0162000229565b9750620002c460a08e0162000229565b9650620002d460c08e0162000229565b9550620002e460e08e0162000229565b9450620002f56101008e0162000229565b9350620003066101208e0162000229565b9250620003176101408e0162000229565b9150620003286101608e0162000229565b90509295989b509295989b509295989b565b61210c806200034a6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806380f6d782116100de578063c3e7e12d11610097578063d547741f11610071578063d547741f14610421578063f1edbfa514610434578063f2fde38b14610447578063ff8efe571461045a57600080fd5b8063c3e7e12d146103a0578063cf479511146103b3578063d33b1d93146103e457600080fd5b806380f6d7821461033b5780638da5cb5b1461034e57806391d148541461035f57806398a3398414610372578063a217fddf14610385578063a89ae4ba1461038d57600080fd5b806338013f021161014b578063622203be11610125578063622203be146102c8578063715018a6146102f15780637546d985146102f95780637690aff61461032857600080fd5b806338013f021461025f578063509f64501461028657806356f4f1f0146102b557600080fd5b806301ffc9a71461019357806306c8d971146101bb5780630be68a71146101d3578063248a9ca3146102145780632f2ff15d1461023757806336568abe1461024c575b600080fd5b6101a66101a1366004611db7565b61046d565b60405190151581526020015b60405180910390f35b600f546101c59081565b6040519081526020016101b2565b6101fc6101e1366004611d58565b6000908152600e60205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016101b2565b6101c5610222366004611d58565b60009081526020819052604090206001015490565b61024a610245366004611d88565b6104a4565b005b61024a61025a366004611d88565b6104cf565b6101c57f352d05fe3946dbe49277552ba941e744d5a96d9c60bc1ba0ea5f1d3ae000f7c881565b6101fc610294366004611c12565b6001600160a01b039081166000908152600d60205260409020600301541690565b6101fc6102c3366004611c12565b610552565b6101c56102d6366004611c12565b6001600160a01b03166000908152600d602052604090205490565b61024a610573565b6101fc610307366004611c12565b6001600160a01b039081166000908152600d60205260409020600201541690565b6101a6610336366004611c4a565b6105d9565b6010546101fc906001600160a01b031681565b6001546001600160a01b03166101fc565b6101a661036d366004611d88565b6106b4565b61024a610380366004611ca9565b6106dd565b6101c5600081565b600c546101fc906001600160a01b031681565b6101a66103ae366004611c4a565b61122e565b6101a66103c1366004611c12565b6001600160a01b039081166000908152600d602052604090206001015416151590565b6101fc6103f2366004611d58565b6000908152600e60209081526040808320546001600160a01b039081168452600d909252909120600101541690565b61024a61042f366004611d88565b6113aa565b61024a610442366004611c4a565b6113d0565b61024a610455366004611c12565b6114b4565b61024a610468366004611c75565b61157f565b60006001600160e01b03198216637965db0b60e01b148061049e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546104c081336116cd565b6104ca8383611731565b505050565b6001600160a01b03811633146105445760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61054e82826117b5565b5050565b6001600160a01b039081166000908152600d60205260409020600101541690565b6001546001600160a01b031633146105cd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161053b565b6105d7600061181a565b565b60006105e5838361122e565b6106265760405162461bcd60e51b8152602060048201526012602482015271139195081b9bdd081c9959da5cdd195c995960721b604482015260640161053b565b600061063184610552565b6040516337b6d96b60e01b8152600481018590529091506001600160a01b038216906337b6d96b9060240160206040518083038186803b15801561067457600080fd5b505afa158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190611d38565b949350505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0386166107285760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21031b7b63632b1ba34b7b760711b604482015260640161053b565b600080610734600f5490565b6001600160a01b03808a166000908152600d60205260409020600101549192501661112757600254600090610771906001600160a01b031661186c565b9050806001600160a01b0316638f15b414866040516020016107939190611e0b565b604051602081830303815290604052866040516020016107b39190611f15565b60408051808303601f190181529082905260105460085460e086901b6001600160e01b03191684526107f894936001600160a01b039283169290911690600401611f92565b600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b50506003546000925061084291506001600160a01b031661186c565b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b15801561088957600080fd5b505af115801561089d573d6000803e3d6000fd5b5050600554600092506108b991506001600160a01b031661186c565b6004549091506108d1906001600160a01b031661186c565b94506000859050806001600160a01b03166335876476858e85600660009054906101000a90046001600160a01b0316600760009054906101000a90046001600160a01b0316600860009054906101000a90046001600160a01b03168a6040518863ffffffff1660e01b815260040161098b97969594939291906001600160a01b03978816815295871660208701529386166040860152918516606085015284166080840152831660a083015290911660c082015260e00190565b600060405180830381600087803b1580156109a557600080fd5b505af11580156109b9573d6000803e3d6000fd5b505060065460408051630e61f93f60e01b815290516001600160a01b039092169350632f2ff15d92508391630e61f93f91600480820192602092909190829003018186803b158015610a0a57600080fd5b505afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190611d70565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0389166024820152604401600060405180830381600087803b158015610a8a57600080fd5b505af1158015610a9e573d6000803e3d6000fd5b50505050806001600160a01b0316632f2ff15d826001600160a01b03166358e8bcb76040518163ffffffff1660e01b815260040160206040518083038186803b158015610aea57600080fd5b505afa158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b229190611d70565b60095460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b158015610b6c57600080fd5b505af1158015610b80573d6000803e3d6000fd5b50505050806001600160a01b0316632f2ff15d826001600160a01b031663abacac256040518163ffffffff1660e01b815260040160206040518083038186803b158015610bcc57600080fd5b505afa158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c049190611d70565b600a5460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b158015610c4e57600080fd5b505af1158015610c62573d6000803e3d6000fd5b50505050836001600160a01b0316632f2ff15d856001600160a01b031663fe6d81246040518163ffffffff1660e01b815260040160206040518083038186803b158015610cae57600080fd5b505afa158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce69190611d70565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0389166024820152604401600060405180830381600087803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b5050604051635df8122f60e01b81526001600160a01b038981166004830152868116602483015287169250635df8122f9150604401600060405180830381600087803b158015610d9157600080fd5b505af1158015610da5573d6000803e3d6000fd5b50505050816001600160a01b031663077f224a89604051602001610dc99190611e68565b60405160208183030381529060405289604051602001610de99190611e3d565b604051602081830303815290604052896040518463ffffffff1660e01b8152600401610e1793929190611f54565b600060405180830381600087803b158015610e3157600080fd5b505af1158015610e45573d6000803e3d6000fd5b505050506040518060e00160405280868152602001876001600160a01b03168152602001856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815260200189815260200188815250600d60008e6001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a0820151816005019080519060200190610f9f929190611af2565b5060c08201518051610fbb916006840191602090910190611af2565b5050506000858152600e60205260409081902080546001600160a01b0319166001600160a01b038981169182179092556009549251636085579360e11b8152600481019190915291169063c10aaf2690602401600060405180830381600087803b15801561102857600080fd5b505af115801561103c573d6000803e3d6000fd5b5050600a54604051636085579360e11b81526001600160a01b038a81166004830152909116925063c10aaf269150602401600060405180830381600087803b15801561108757600080fd5b505af115801561109b573d6000803e3d6000fd5b5050601054600654604080518a81526001600160a01b038c811660208301528a8116828401528981166060830152888116608083015293841660a08201529290911660c0830152517fdb595a2e01de1a3565029850b15a01fe70d01ff6821102bf11662390f1adf9b393509081900360e0019150a161111e600f80546001019055565b50505050611148565b6001600160a01b038089166000908152600d60205260409020600101541691505b604051633ea9715960e21b815260048101889052602481018790526044810186905282906000906001600160a01b0383169063faa5c56490606401602060405180830381600087803b15801561119d57600080fd5b505af11580156111b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d59190611d70565b604080516001600160a01b0387168152602081018690529081018290529091507f74700b9b42b2dd56732c1bf098db59ffb8e972345b7d1d6dc2fe9cbca8bc22ec9060600160405180910390a150505050505050505050565b6001600160a01b038083166000908152600d602052604081206001015490911661129a5760405162461bcd60e51b815260206004820152601960248201527f436f6c6c656374696f6e206e6f74207265676973746572656400000000000000604482015260640161053b565b6001600160a01b038084166000908152600d60209081526040808320600101548151634c4b206b60e01b815291519416938492634c4b206b9260048082019391829003018186803b1580156112ee57600080fd5b505afa158015611302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113269190611c2e565b604051634f558e7960e01b8152600481018690529091506001600160a01b03821690634f558e799060240160206040518083038186803b15801561136957600080fd5b505afa15801561137d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a19190611d38565b95945050505050565b6000828152602081905260409020600101546113c681336116cd565b6104ca83836117b5565b7f352d05fe3946dbe49277552ba941e744d5a96d9c60bc1ba0ea5f1d3ae000f7c86113fb81336116cd565b611405838361122e565b6114465760405162461bcd60e51b8152602060048201526012602482015271139195081b9bdd081c9959da5cdd195c995960721b604482015260640161053b565b600061145184610552565b604051638753367f60e01b8152600481018590529091506001600160a01b03821690638753367f90602401600060405180830381600087803b15801561149657600080fd5b505af11580156114aa573d6000803e3d6000fd5b5050505050505050565b6001546001600160a01b0316331461150e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161053b565b6001600160a01b0381166115735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161053b565b61157c8161181a565b50565b600061158a84610552565b6040516260dfe560e71b81526004810185905290915081906000906001600160a01b0383169063306ff2809060240160206040518083038186803b1580156115d157600080fd5b505afa1580156115e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116099190611d70565b60405163019eee0960e41b815260048101879052602481018690523360448201529091506001600160a01b038316906319eee09090606401600060405180830381600087803b15801561165b57600080fd5b505af115801561166f573d6000803e3d6000fd5b5050604080516001600160a01b038a16815260208101899052908101849052606081018790527f40e9541ee89adfc7044a77557cd8350059f0a055e154407df3accf210b0116df9250608001905060405180910390a1505050505050565b6116d782826106b4565b61054e576116ef816001600160a01b03166014611909565b6116fa836020611909565b60405160200161170b929190611ea0565b60408051601f198184030181529082905262461bcd60e51b825261053b91600401611f41565b61173b82826106b4565b61054e576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556117713390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6117bf82826106b4565b1561054e576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166119045760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640161053b565b919050565b60606000611918836002611ff4565b611923906002611fdc565b67ffffffffffffffff81111561194957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611973576020820181803683370190505b509050600360fc1b8160008151811061199c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119d957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006119fd846002611ff4565b611a08906001611fdc565b90505b6001811115611a9c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611a4a57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611a6e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611a9581612043565b9050611a0b565b508315611aeb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161053b565b9392505050565b828054611afe9061205a565b90600052602060002090601f016020900481019282611b205760008555611b66565b82601f10611b3957805160ff1916838001178555611b66565b82800160010185558215611b66579182015b82811115611b66578251825591602001919060010190611b4b565b50611b72929150611b76565b5090565b5b80821115611b725760008155600101611b77565b600082601f830112611b9b578081fd5b813567ffffffffffffffff80821115611bb657611bb66120ab565b604051601f8301601f19908116603f01168101908282118183101715611bde57611bde6120ab565b81604052838152866020858801011115611bf6578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611c23578081fd5b8135611aeb816120c1565b600060208284031215611c3f578081fd5b8151611aeb816120c1565b60008060408385031215611c5c578081fd5b8235611c67816120c1565b946020939093013593505050565b600080600060608486031215611c89578081fd5b8335611c94816120c1565b95602085013595506040909401359392505050565b60008060008060008060c08789031215611cc1578182fd5b8635611ccc816120c1565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff80821115611cfd578384fd5b611d098a838b01611b8b565b935060a0890135915080821115611d1e578283fd5b50611d2b89828a01611b8b565b9150509295509295509295565b600060208284031215611d49578081fd5b81518015158114611aeb578182fd5b600060208284031215611d69578081fd5b5035919050565b600060208284031215611d81578081fd5b5051919050565b60008060408385031215611d9a578182fd5b823591506020830135611dac816120c1565b809150509250929050565b600060208284031215611dc8578081fd5b81356001600160e01b031981168114611aeb578182fd5b60008151808452611df7816020860160208601612013565b601f01601f19169290920160200192915050565b690283934bb34902537ba160b51b815260008251611e3081600a850160208701612013565b91909101600a0192915050565b6270535f60e81b815260008251611e5b816003850160208701612013565b9190910160030192915050565b6f0283934bb349029bcb73a3432ba34b1960851b815260008251611e93816010850160208701612013565b9190910160100192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611ed8816017850160208801612013565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611f09816028840160208801612013565b01602801949350505050565b634a4f545f60e01b815260008251611f34816004850160208701612013565b9190910160040192915050565b602081526000611aeb6020830184611ddf565b606081526000611f676060830186611ddf565b8281036020840152611f798186611ddf565b91505060018060a01b0383166040830152949350505050565b608081526000611fa56080830187611ddf565b8281036020840152611fb78187611ddf565b6001600160a01b03958616604085015293909416606090920191909152509392505050565b60008219821115611fef57611fef612095565b500190565b600081600019048311821515161561200e5761200e612095565b500290565b60005b8381101561202e578181015183820152602001612016565b8381111561203d576000848401525b50505050565b60008161205257612052612095565b506000190190565b600181811c9082168061206e57607f821691505b6020821081141561208f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461157c57600080fdfea2646970667358221220c1681d4abb30002f5b19a60a32a80b63fddf36949da2c94e420a5eca61c6bd2c64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c806380f6d782116100de578063c3e7e12d11610097578063d547741f11610071578063d547741f14610421578063f1edbfa514610434578063f2fde38b14610447578063ff8efe571461045a57600080fd5b8063c3e7e12d146103a0578063cf479511146103b3578063d33b1d93146103e457600080fd5b806380f6d7821461033b5780638da5cb5b1461034e57806391d148541461035f57806398a3398414610372578063a217fddf14610385578063a89ae4ba1461038d57600080fd5b806338013f021161014b578063622203be11610125578063622203be146102c8578063715018a6146102f15780637546d985146102f95780637690aff61461032857600080fd5b806338013f021461025f578063509f64501461028657806356f4f1f0146102b557600080fd5b806301ffc9a71461019357806306c8d971146101bb5780630be68a71146101d3578063248a9ca3146102145780632f2ff15d1461023757806336568abe1461024c575b600080fd5b6101a66101a1366004611db7565b61046d565b60405190151581526020015b60405180910390f35b600f546101c59081565b6040519081526020016101b2565b6101fc6101e1366004611d58565b6000908152600e60205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016101b2565b6101c5610222366004611d58565b60009081526020819052604090206001015490565b61024a610245366004611d88565b6104a4565b005b61024a61025a366004611d88565b6104cf565b6101c57f352d05fe3946dbe49277552ba941e744d5a96d9c60bc1ba0ea5f1d3ae000f7c881565b6101fc610294366004611c12565b6001600160a01b039081166000908152600d60205260409020600301541690565b6101fc6102c3366004611c12565b610552565b6101c56102d6366004611c12565b6001600160a01b03166000908152600d602052604090205490565b61024a610573565b6101fc610307366004611c12565b6001600160a01b039081166000908152600d60205260409020600201541690565b6101a6610336366004611c4a565b6105d9565b6010546101fc906001600160a01b031681565b6001546001600160a01b03166101fc565b6101a661036d366004611d88565b6106b4565b61024a610380366004611ca9565b6106dd565b6101c5600081565b600c546101fc906001600160a01b031681565b6101a66103ae366004611c4a565b61122e565b6101a66103c1366004611c12565b6001600160a01b039081166000908152600d602052604090206001015416151590565b6101fc6103f2366004611d58565b6000908152600e60209081526040808320546001600160a01b039081168452600d909252909120600101541690565b61024a61042f366004611d88565b6113aa565b61024a610442366004611c4a565b6113d0565b61024a610455366004611c12565b6114b4565b61024a610468366004611c75565b61157f565b60006001600160e01b03198216637965db0b60e01b148061049e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546104c081336116cd565b6104ca8383611731565b505050565b6001600160a01b03811633146105445760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61054e82826117b5565b5050565b6001600160a01b039081166000908152600d60205260409020600101541690565b6001546001600160a01b031633146105cd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161053b565b6105d7600061181a565b565b60006105e5838361122e565b6106265760405162461bcd60e51b8152602060048201526012602482015271139195081b9bdd081c9959da5cdd195c995960721b604482015260640161053b565b600061063184610552565b6040516337b6d96b60e01b8152600481018590529091506001600160a01b038216906337b6d96b9060240160206040518083038186803b15801561067457600080fd5b505afa158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190611d38565b949350505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0386166107285760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21031b7b63632b1ba34b7b760711b604482015260640161053b565b600080610734600f5490565b6001600160a01b03808a166000908152600d60205260409020600101549192501661112757600254600090610771906001600160a01b031661186c565b9050806001600160a01b0316638f15b414866040516020016107939190611e0b565b604051602081830303815290604052866040516020016107b39190611f15565b60408051808303601f190181529082905260105460085460e086901b6001600160e01b03191684526107f894936001600160a01b039283169290911690600401611f92565b600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b50506003546000925061084291506001600160a01b031661186c565b60405163189acdbd60e31b81526001600160a01b0384811660048301529192509082169063c4d66de890602401600060405180830381600087803b15801561088957600080fd5b505af115801561089d573d6000803e3d6000fd5b5050600554600092506108b991506001600160a01b031661186c565b6004549091506108d1906001600160a01b031661186c565b94506000859050806001600160a01b03166335876476858e85600660009054906101000a90046001600160a01b0316600760009054906101000a90046001600160a01b0316600860009054906101000a90046001600160a01b03168a6040518863ffffffff1660e01b815260040161098b97969594939291906001600160a01b03978816815295871660208701529386166040860152918516606085015284166080840152831660a083015290911660c082015260e00190565b600060405180830381600087803b1580156109a557600080fd5b505af11580156109b9573d6000803e3d6000fd5b505060065460408051630e61f93f60e01b815290516001600160a01b039092169350632f2ff15d92508391630e61f93f91600480820192602092909190829003018186803b158015610a0a57600080fd5b505afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190611d70565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0389166024820152604401600060405180830381600087803b158015610a8a57600080fd5b505af1158015610a9e573d6000803e3d6000fd5b50505050806001600160a01b0316632f2ff15d826001600160a01b03166358e8bcb76040518163ffffffff1660e01b815260040160206040518083038186803b158015610aea57600080fd5b505afa158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b229190611d70565b60095460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b158015610b6c57600080fd5b505af1158015610b80573d6000803e3d6000fd5b50505050806001600160a01b0316632f2ff15d826001600160a01b031663abacac256040518163ffffffff1660e01b815260040160206040518083038186803b158015610bcc57600080fd5b505afa158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c049190611d70565b600a5460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b158015610c4e57600080fd5b505af1158015610c62573d6000803e3d6000fd5b50505050836001600160a01b0316632f2ff15d856001600160a01b031663fe6d81246040518163ffffffff1660e01b815260040160206040518083038186803b158015610cae57600080fd5b505afa158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce69190611d70565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0389166024820152604401600060405180830381600087803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b5050604051635df8122f60e01b81526001600160a01b038981166004830152868116602483015287169250635df8122f9150604401600060405180830381600087803b158015610d9157600080fd5b505af1158015610da5573d6000803e3d6000fd5b50505050816001600160a01b031663077f224a89604051602001610dc99190611e68565b60405160208183030381529060405289604051602001610de99190611e3d565b604051602081830303815290604052896040518463ffffffff1660e01b8152600401610e1793929190611f54565b600060405180830381600087803b158015610e3157600080fd5b505af1158015610e45573d6000803e3d6000fd5b505050506040518060e00160405280868152602001876001600160a01b03168152602001856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815260200189815260200188815250600d60008e6001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a0820151816005019080519060200190610f9f929190611af2565b5060c08201518051610fbb916006840191602090910190611af2565b5050506000858152600e60205260409081902080546001600160a01b0319166001600160a01b038981169182179092556009549251636085579360e11b8152600481019190915291169063c10aaf2690602401600060405180830381600087803b15801561102857600080fd5b505af115801561103c573d6000803e3d6000fd5b5050600a54604051636085579360e11b81526001600160a01b038a81166004830152909116925063c10aaf269150602401600060405180830381600087803b15801561108757600080fd5b505af115801561109b573d6000803e3d6000fd5b5050601054600654604080518a81526001600160a01b038c811660208301528a8116828401528981166060830152888116608083015293841660a08201529290911660c0830152517fdb595a2e01de1a3565029850b15a01fe70d01ff6821102bf11662390f1adf9b393509081900360e0019150a161111e600f80546001019055565b50505050611148565b6001600160a01b038089166000908152600d60205260409020600101541691505b604051633ea9715960e21b815260048101889052602481018790526044810186905282906000906001600160a01b0383169063faa5c56490606401602060405180830381600087803b15801561119d57600080fd5b505af11580156111b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d59190611d70565b604080516001600160a01b0387168152602081018690529081018290529091507f74700b9b42b2dd56732c1bf098db59ffb8e972345b7d1d6dc2fe9cbca8bc22ec9060600160405180910390a150505050505050505050565b6001600160a01b038083166000908152600d602052604081206001015490911661129a5760405162461bcd60e51b815260206004820152601960248201527f436f6c6c656374696f6e206e6f74207265676973746572656400000000000000604482015260640161053b565b6001600160a01b038084166000908152600d60209081526040808320600101548151634c4b206b60e01b815291519416938492634c4b206b9260048082019391829003018186803b1580156112ee57600080fd5b505afa158015611302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113269190611c2e565b604051634f558e7960e01b8152600481018690529091506001600160a01b03821690634f558e799060240160206040518083038186803b15801561136957600080fd5b505afa15801561137d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a19190611d38565b95945050505050565b6000828152602081905260409020600101546113c681336116cd565b6104ca83836117b5565b7f352d05fe3946dbe49277552ba941e744d5a96d9c60bc1ba0ea5f1d3ae000f7c86113fb81336116cd565b611405838361122e565b6114465760405162461bcd60e51b8152602060048201526012602482015271139195081b9bdd081c9959da5cdd195c995960721b604482015260640161053b565b600061145184610552565b604051638753367f60e01b8152600481018590529091506001600160a01b03821690638753367f90602401600060405180830381600087803b15801561149657600080fd5b505af11580156114aa573d6000803e3d6000fd5b5050505050505050565b6001546001600160a01b0316331461150e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161053b565b6001600160a01b0381166115735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161053b565b61157c8161181a565b50565b600061158a84610552565b6040516260dfe560e71b81526004810185905290915081906000906001600160a01b0383169063306ff2809060240160206040518083038186803b1580156115d157600080fd5b505afa1580156115e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116099190611d70565b60405163019eee0960e41b815260048101879052602481018690523360448201529091506001600160a01b038316906319eee09090606401600060405180830381600087803b15801561165b57600080fd5b505af115801561166f573d6000803e3d6000fd5b5050604080516001600160a01b038a16815260208101899052908101849052606081018790527f40e9541ee89adfc7044a77557cd8350059f0a055e154407df3accf210b0116df9250608001905060405180910390a1505050505050565b6116d782826106b4565b61054e576116ef816001600160a01b03166014611909565b6116fa836020611909565b60405160200161170b929190611ea0565b60408051601f198184030181529082905262461bcd60e51b825261053b91600401611f41565b61173b82826106b4565b61054e576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556117713390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6117bf82826106b4565b1561054e576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166119045760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640161053b565b919050565b60606000611918836002611ff4565b611923906002611fdc565b67ffffffffffffffff81111561194957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611973576020820181803683370190505b509050600360fc1b8160008151811061199c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119d957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006119fd846002611ff4565b611a08906001611fdc565b90505b6001811115611a9c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611a4a57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611a6e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611a9581612043565b9050611a0b565b508315611aeb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161053b565b9392505050565b828054611afe9061205a565b90600052602060002090601f016020900481019282611b205760008555611b66565b82601f10611b3957805160ff1916838001178555611b66565b82800160010185558215611b66579182015b82811115611b66578251825591602001919060010190611b4b565b50611b72929150611b76565b5090565b5b80821115611b725760008155600101611b77565b600082601f830112611b9b578081fd5b813567ffffffffffffffff80821115611bb657611bb66120ab565b604051601f8301601f19908116603f01168101908282118183101715611bde57611bde6120ab565b81604052838152866020858801011115611bf6578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611c23578081fd5b8135611aeb816120c1565b600060208284031215611c3f578081fd5b8151611aeb816120c1565b60008060408385031215611c5c578081fd5b8235611c67816120c1565b946020939093013593505050565b600080600060608486031215611c89578081fd5b8335611c94816120c1565b95602085013595506040909401359392505050565b60008060008060008060c08789031215611cc1578182fd5b8635611ccc816120c1565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff80821115611cfd578384fd5b611d098a838b01611b8b565b935060a0890135915080821115611d1e578283fd5b50611d2b89828a01611b8b565b9150509295509295509295565b600060208284031215611d49578081fd5b81518015158114611aeb578182fd5b600060208284031215611d69578081fd5b5035919050565b600060208284031215611d81578081fd5b5051919050565b60008060408385031215611d9a578182fd5b823591506020830135611dac816120c1565b809150509250929050565b600060208284031215611dc8578081fd5b81356001600160e01b031981168114611aeb578182fd5b60008151808452611df7816020860160208601612013565b601f01601f19169290920160200192915050565b690283934bb34902537ba160b51b815260008251611e3081600a850160208701612013565b91909101600a0192915050565b6270535f60e81b815260008251611e5b816003850160208701612013565b9190910160030192915050565b6f0283934bb349029bcb73a3432ba34b1960851b815260008251611e93816010850160208701612013565b9190910160100192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611ed8816017850160208801612013565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611f09816028840160208801612013565b01602801949350505050565b634a4f545f60e01b815260008251611f34816004850160208701612013565b9190910160040192915050565b602081526000611aeb6020830184611ddf565b606081526000611f676060830186611ddf565b8281036020840152611f798186611ddf565b91505060018060a01b0383166040830152949350505050565b608081526000611fa56080830187611ddf565b8281036020840152611fb78187611ddf565b6001600160a01b03958616604085015293909416606090920191909152509392505050565b60008219821115611fef57611fef612095565b500190565b600081600019048311821515161561200e5761200e612095565b500290565b60005b8381101561202e578181015183820152602001612016565b8381111561203d576000848401525b50505050565b60008161205257612052612095565b506000190190565b600181811c9082168061206e57607f821691505b6020821081141561208f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461157c57600080fdfea2646970667358221220c1681d4abb30002f5b19a60a32a80b63fddf36949da2c94e420a5eca61c6bd2c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerNFT(address,uint256,uint256,uint256,string,string)": {
        "params": {
          "collection": "the address of the synthetic collection",
          "originalName": "the original collection name",
          "originalSymbol": "the original collection symbol",
          "priceFraction": "the price for a fraction",
          "supplyToKeep": "supply to keep",
          "tokenId": "the token id"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_collectionIdToAddress": {
        "details": "get collection address from ID"
      },
      "_collections": {
        "details": "collections map. collection address => collection data"
      },
      "_jot": {
        "details": "implementation addresses for proxies"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeNFT(address,uint256,uint256)": {
        "notice": "change an NFT for another one"
      },
      "getCollectionID(address)": {
        "notice": "get collection ID from collection address"
      },
      "getCollectionManagerAddress(address)": {
        "notice": "get collection manager address from collection address"
      },
      "getCollectionManagerAddress(uint256)": {
        "notice": "get collection manager address from collection ID"
      },
      "getJotPoolAddress(address)": {
        "notice": "getter for Jot Pool Address of a collection"
      },
      "getJotsAddress(address)": {
        "notice": "getter for Jot Address of a collection"
      },
      "getOriginalCollectionAddress(uint256)": {
        "notice": "get collection address from collection ID"
      },
      "isNFTVerified(address,uint256)": {
        "notice": "checks whether a Synthetic has been verified or not"
      },
      "isSyntheticCollectionRegistered(address)": {
        "notice": "checks whether a collection is registered or not"
      },
      "isSyntheticNFTCreated(address,uint256)": {
        "notice": "checks whether a Synthetic NFT has been created for a given NFT or not"
      },
      "protocolVaults()": {
        "notice": "number of registered collections"
      },
      "registerNFT(address,uint256,uint256,uint256,string,string)": {
        "notice": "register an NFT collection"
      },
      "swapAddress()": {
        "notice": "QuickSwap address"
      },
      "verifyNFT(address,uint256)": {
        "notice": "verify a synthetic NFT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2284,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2279_storage)"
      },
      {
        "astId": 2647,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11528,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_jot",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11530,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_jotPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 11532,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_collectionManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 11534,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_syntheticNFT",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 11536,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_auctionManager",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 11538,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_protocol",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 11540,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_fundingTokenAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 11542,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_randomConsumerAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 11544,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_validatorAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 11546,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_perpetualPoolLiteAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 11548,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "oracleAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 11554,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_collections",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(SyntheticCollection)11497_storage)"
      },
      {
        "astId": 11559,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "_collectionIdToAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11563,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "protocolVaults",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Counter)8522_storage"
      },
      {
        "astId": 11566,
        "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
        "label": "swapAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(SyntheticCollection)11497_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SyntheticCollection)",
        "numberOfBytes": "32",
        "value": "t_struct(SyntheticCollection)11497_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2279_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2279_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)8522_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 8521,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)2279_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2276,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2278,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SyntheticCollection)11497_storage": {
        "encoding": "inplace",
        "label": "struct SyntheticCollection",
        "members": [
          {
            "astId": 11484,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "collectionID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11486,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "collectionManagerAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11488,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "jotAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 11490,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "jotPoolAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 11492,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "syntheticNFTAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 11494,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "originalName",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 11496,
            "contract": "contracts/polygon/SyntheticProtocolRouter.sol:SyntheticProtocolRouter",
            "label": "originalSymbol",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}