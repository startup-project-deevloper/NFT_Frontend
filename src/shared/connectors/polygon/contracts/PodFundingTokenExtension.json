{
  "contractName": "PodFundingTokenExtension",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "name": "setPodManagerContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_podAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "investPod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_podAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investPod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setPodManagerContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Nordelo\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"investPod(address,uint256)\":{\"details\":\"allows approve and call in one transaction\",\"params\":{\"_amount\":\"the amount to invest\",\"_podAddress\":\"the address of the pod to invest in\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"setPodManagerContractAddress(address)\":{\"details\":\"IMPORTANT: override this method and set the onlyOwner modifier\",\"params\":{\"_contractAddress\":\"the address of the Pod Manager contract\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"title\":\"pod contract bridge with funding tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"investPod(address,uint256)\":{\"notice\":\"invest to a pod in the Pod Manager Contract\"},\"setPodManagerContractAddress(address)\":{\"notice\":\"saves the Pod Manager contract address\"}},\"notice\":\"a extension of an ERC20 to interact with pod contract in one transaction (approve and call)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-pod/contracts/PodFundingTokenExtension.sol\":\"PodFundingTokenExtension\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/ericng/Documents/PRIVI/Privi-Polygon/privi-amm/contracts/PriviAMM.sol\":{\"keccak256\":\"0xb073d06f286f0e172376c6731cf975692de9dd14eb701309abc2911ea49fce0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b19c185f392fde8050fdb9be487d6dcb0535ebee8c857e848a820894a1075a3d\",\"dweb:/ipfs/QmWsC8JgfCnxSrSBe8S2rKAV8Va12cerdYZqXHXEvvB2cC\"]},\"/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-nft/contracts/MediaFractionalizeManager.sol\":{\"keccak256\":\"0xa9f01f72e5cfa337600809619f2b079d3127acf985fde5e3324b7a7d189a759d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a57245be5d82a29024ab0786911f36e81a6bc02f688d7ff6f875c69d7d1dddc\",\"dweb:/ipfs/QmQ9DkNHVj6y3PfLW7YaZqcanRDJYWW5C3oRXpgHuEXmUu\"]},\"/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-nft/contracts/MediaLibrary.sol\":{\"keccak256\":\"0x159823b46f2344223d67a7b561b9599657fa0f10ee864e56fe1957d3f1123968\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74f336c36ddbcc6de88365300aeec23d0ef6d0b658951d64ec873b871be05ab4\",\"dweb:/ipfs/QmdZUkVgfjPASVqPyHb7cp3wdJVW58G4QenJh1dYFThE3R\"]},\"/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-nft/contracts/MediaManager.sol\":{\"keccak256\":\"0xe44fd98c070bfcb07fb9291acae0e0412aa12d69556255afb472edb3b74c48d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c85b4a1968726c3fad493c421f064fc500ec07e9bd876936aa63036e837337\",\"dweb:/ipfs/QmNqjXooprRaoVjWeSx2u16W2qrjGWLMSQNWTcAjVUKXnN\"]},\"/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-nft/contracts/PriviNFT.sol\":{\"keccak256\":\"0x35e53782ce8bd50ad6a1fe750c374998dacf09fe715171c31340f5e2e056d2ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://43f91b275f7c62441f18fe6ca1f17173b971bdfbf803ef4f1cefff23228e3163\",\"dweb:/ipfs/QmWP9KmeHXgRzfXgdtytb6dtDZhmv5Yayv4tZ3WVNZDzCE\"]},\"/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-nft/contracts/Structs.sol\":{\"keccak256\":\"0xf8d4c8d327ed835260ed7e6790dadac7bcefc434015fab3447949bc32099b811\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://50184acfb90272cb1a43df9215e39f992d890ccddc69279895c54a758175c00d\",\"dweb:/ipfs/QmdNbQL3UstXxNFQ1Zf4KeiDqH5Vw4ADGvZxk7uhhonj2E\"]},\"/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-pod/contracts/PodFundingTokenExtension.sol\":{\"keccak256\":\"0x6a5b8f55fd950d6e4e1faeac7fc722564a41b6bea297046eafcfd0b81f0fd566\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f576dbcdc527080be331b3144a35b07e7f46aafe92863e7a23b0cdadda649add\",\"dweb:/ipfs/QmUbzMXGHq1cN3qt2sPEBUuc49biKJUy1w2gHVHpdn1Lcd\"]},\"/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-pod/contracts/PodManager.sol\":{\"keccak256\":\"0x4f88efb6923464a687ecb82a0c3fe3e7e391f3ef657b184a7bb7431e9a73784b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dbd8cd46d3c63b03a3bfad6fa93c39ef6324f0940c068e0bfc84221a65c36eb3\",\"dweb:/ipfs/QmQAERXD3vgi5EvYw1k2VxF4wdNY9RxktMzsEYHmaUPrFU\"]},\"/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-pod/contracts/PodToken.sol\":{\"keccak256\":\"0x001febdfcf38bd6dea6028d15004b382abbee6e8b3de87cb35cf4bcd82163e9d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6655d26e492a4c7577758a7e5ba0df8c2dfddf5dec05605ce9fa8844cf601e13\",\"dweb:/ipfs/QmZYPRorWKGRpAmmXLZcg17Xzu6yipXUeSG4DsocsPsJG8\"]},\"/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-pod/contracts/PodWithdrawManager.sol\":{\"keccak256\":\"0xdfaa9d20e75fe382b11df5abe9af7e993a0b90056cfcadc774646388414d7412\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://32945d336454bf88d9aaee058589760b6bc403fdbea4b2d597ac796fac02b4e7\",\"dweb:/ipfs/QmdrgCX8gRaGbMQViH15yKJvsbWWRuYZ9UkG4DHbjsn8yp\"]},\"/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-pod/contracts/Structs.sol\":{\"keccak256\":\"0x236155a584f207c8209f61aa3bd96485feffe9aaebd69e51a661b6de2e77a2cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af747fa8d7862421084b9beea4b991d48b5df91f4bda846d1f6aa28b9d1870a1\",\"dweb:/ipfs/QmNaCNCxDH964C4oe1FRz5wJkLmBomnDY73AwpHNG9m6Dh\"]},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b64becd1da9fe30ecdb65cf57e1da968bcbbecd6a4a3fa55bcc7c23568d482c0\",\"dweb:/ipfs/QmcXnRpWL7P9kEe15LZ5yHV2CDLE2CNv9sBRqVnvVQLr5T\"]},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e33ac5e378143f0348b1b903a0d2e02e617bed6d971df8ec7d886cca0ab3107e\",\"dweb:/ipfs/QmeEXQ8FLWvLZKVwmfEW1n9Wuv7CqEn66SW9rGHakjaaUb\"]},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fe9fa1beb63e4a09637701f783982ba80380d630d600c9cafe26b68bf58be1b2\",\"dweb:/ipfs/QmRA3GXhTWys88joD9x8xYhdjzvGwmDGLMMzGw3LxbSEge\"]},\"@openzeppelin/contracts/security/Pausable.sol\":{\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72b957861691ebdaa78c52834465c4f8296480fe4f1a12ba72dc6c0c8ac076dd\",\"dweb:/ipfs/QmVz1sHCwgEivHPRDswdt9tdvky7EnWqFmbuk1wFE55VMG\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f65118c99d5d6cfe602720418b8551c2da6c3de650e61c5231b0be4396aae0d\",\"dweb:/ipfs/QmdLmkRHJhEifzzDjF44MHXcQx2SXc5EzhpHzN2z1vUq8H\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://087318b21c528119f649899f5b5580566dd8d7b0303d4904bd0e8580c3545f14\",\"dweb:/ipfs/Qmbn5Mj7aUn8hJuQ8VrQjjEXRsXyJKykgnjR9p4C3nfLtL\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d4c3df1a7ca104b633a7d81c6c6f5192367d150cd5a32cba81f7f27012729013\",\"dweb:/ipfs/QmSim72e3ZVsfgZt8UceCvbiSuMRHR6WDsiamqNzZahGSY\"]},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0xd644260d8e4e64563a7adba96d774dbaac6ae89c2ee58ef49a19850ff1239b08\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://81a0c489456fafb7633712e4da200de197b5ddf5c1b7932820db852f0ff16c59\",\"dweb:/ipfs/QmQrBxoR7gSSK9ShqunCUwXf57w19xN7DN4fgZe89sWTNw\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3e7820bcf567e6892d937c3cb10db263a4042e446799bca602535868d822384e\",\"dweb:/ipfs/QmPG2oeDjKncqsEeyYGjAN7CwAJmMgHterXGGnpzhha4z7\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e604bcdcd5e5b2fb299ad09769cde6db19d5aa1929d1b5e939234a0f10d7eb8\",\"dweb:/ipfs/Qmd8hXE3GZfBHuWx3RNiYgFW2ci7KvHtib8DiwzJ2dgo9V\"]},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"keccak256\":\"0xe8f81ba5ba258c2a3ad5cf4c0bf6263c78e60f320bd0bc150c9de2445958c47b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c64c6df28d5884d784d0b83ca067dd012dfda8c93e76e29c77c8906ab05894e\",\"dweb:/ipfs/QmRoCfuwBaDRii84xeBFNGL1EWYX1AaAkYGVUe2y8JWP3a\"]},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7aec4efa22389811ffa393463569410bbca1ecaa551bc94d69020bc9567e9277\",\"dweb:/ipfs/QmPwk5uVSHPQkepebrZSQ9xqgXdPABKqHwJZ2HkzNByLRE\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af63ab940a34687c45f0ad84960b048fc5f49330c92ccb422db7822a444733b9\",\"dweb:/ipfs/QmUShaQEu8HS1GjDnsMJQ8jkZEBrecn6NuDZ3pfjY1gVck\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://23e1c7303c30a2ef9c9b3f861cda15c78e4c9697b4a7988f2bf7b21c392a02fb\",\"dweb:/ipfs/QmWQJh5MsXJZjSTzAs9n5gtrqWYgXwkBa6xfwD5KKGQgSC\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7fec968dcd68e13961521fa3c7dd87baecad91a2653b19240e81f21cc4f3ba85\",\"dweb:/ipfs/QmaXtsYt4Mphm8XHNUfk2me1cF3ssS2SqDBNFpYAzMjomC\"]},\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103065051300cd995fd4599ba91188d4071b92175b52f26110e02db091617c0\",\"dweb:/ipfs/QmSyDz67R2HCypDE8Pacn3voVwxw9x17NM66q47YgBnGqc\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d636ba90bbbeed04a1ea7fe9ec2466757e30fd38ba2ca173636dbf69a518735e\",\"dweb:/ipfs/QmQwCB2BHnEuYR22PYt9HkpbgeFDhq4rHmaYqAZbX3WRC7\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d10e1d9b26042424789246603906ad06143bf9a928f4e99de8b5e3bdc662f549\",\"dweb:/ipfs/Qmejonoaj5MLekPus229rJQHcC6E9dz2xorjHJR84fMfmn\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://796ab6e88af7bf0e78def0f059310c903af6a312b565344e0ff524a0f26e81c6\",\"dweb:/ipfs/QmcsVgLgzWdor3UnAztUkXKNGcysm1MPneWksF72AvnwBx\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./PodManager.sol\";\n\n/**\n * @title pod contract bridge with funding tokens\n * @author Eric Nordelo\n * @notice a extension of an ERC20 to interact with pod contract in one transaction (approve and call)\n */\nabstract contract PodFundingTokenExtension is ERC20 {\n    address internal podManagerContractAddress;\n\n    /**\n     * @notice saves the Pod Manager contract address\n     * @dev IMPORTANT: override this method and set the onlyOwner modifier\n     * @param _contractAddress the address of the Pod Manager contract\n     */\n    function setPodManagerContractAddress(address _contractAddress) external virtual {\n        podManagerContractAddress = _contractAddress;\n    }\n\n    /**\n     * @notice invest to a pod in the Pod Manager Contract\n     * @dev allows approve and call in one transaction\n     * @param _podAddress the address of the pod to invest in\n     * @param _amount the amount to invest\n     */\n    function investPod(address _podAddress, uint256 _amount) external {\n        uint256 balance = balanceOf(msg.sender);\n        require(balance >= _amount, \"Not enough funds\");\n\n        approve(podManagerContractAddress, _amount);\n\n        PodManager(podManagerContractAddress).investPod(msg.sender, _podAddress, _amount);\n    }\n}\n",
  "sourcePath": "/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-pod/contracts/PodFundingTokenExtension.sol",
  "ast": {
    "absolutePath": "/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-pod/contracts/PodFundingTokenExtension.sol",
    "exportedSymbols": {
      "AccessControl": [
        4715
      ],
      "AddMediaStreamingsRequest": [
        2626
      ],
      "Address": [
        7022
      ],
      "Clones": [
        4795
      ],
      "Context": [
        7043
      ],
      "Counters": [
        7117
      ],
      "Distribution": [
        2543
      ],
      "ERC165": [
        7344
      ],
      "ERC20": [
        5479
      ],
      "ERC721": [
        6400
      ],
      "ERC721Pausable": [
        6571
      ],
      "ERC721URIStorage": [
        6699
      ],
      "FundingMedia": [
        4328
      ],
      "IAccessControl": [
        4391
      ],
      "IERC165": [
        7356
      ],
      "IERC20": [
        5557
      ],
      "IERC20Metadata": [
        5582
      ],
      "IERC721": [
        6516
      ],
      "IERC721Metadata": [
        6726
      ],
      "IERC721Receiver": [
        6534
      ],
      "Initializable": [
        4841
      ],
      "Media": [
        2578
      ],
      "MediaFractionalizeManager": [
        1001
      ],
      "MediaLibrary": [
        1423
      ],
      "MediaManager": [
        2120
      ],
      "MediaShare": [
        2618
      ],
      "Pausable": [
        4933
      ],
      "Pod": [
        4305
      ],
      "PodFundingTokenExtension": [
        2821
      ],
      "PodInfo": [
        4320
      ],
      "PodManager": [
        3647
      ],
      "PodToken": [
        3802
      ],
      "PodWithdrawManager": [
        4285
      ],
      "PriviAMM": [
        502
      ],
      "PriviNFT": [
        2531
      ],
      "ShareHolder": [
        2538
      ],
      "Strings": [
        7320
      ],
      "UpdateMediaProposal": [
        2611
      ],
      "UpdateMediaRequest": [
        2592
      ],
      "ViewInfo": [
        2558
      ],
      "WithdrawProposal": [
        4347
      ]
    },
    "id": 2822,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2764,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:8"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 2765,
        "nodeType": "ImportDirective",
        "scope": 2822,
        "sourceUnit": 5480,
        "src": "57:55:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-pod/contracts/PodManager.sol",
        "file": "./PodManager.sol",
        "id": 2766,
        "nodeType": "ImportDirective",
        "scope": 2822,
        "sourceUnit": 3648,
        "src": "113:26:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 2768,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5479,
              "src": "372:5:8"
            },
            "id": 2769,
            "nodeType": "InheritanceSpecifier",
            "src": "372:5:8"
          }
        ],
        "contractDependencies": [
          5479,
          5557,
          5582,
          7043
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 2767,
          "nodeType": "StructuredDocumentation",
          "src": "141:184:8",
          "text": " @title pod contract bridge with funding tokens\n @author Eric Nordelo\n @notice a extension of an ERC20 to interact with pod contract in one transaction (approve and call)"
        },
        "fullyImplemented": false,
        "id": 2821,
        "linearizedBaseContracts": [
          2821,
          5479,
          5582,
          5557,
          7043
        ],
        "name": "PodFundingTokenExtension",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 2771,
            "mutability": "mutable",
            "name": "podManagerContractAddress",
            "nodeType": "VariableDeclaration",
            "scope": 2821,
            "src": "384:42:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 2770,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "384:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2781,
              "nodeType": "Block",
              "src": "730:61:8",
              "statements": [
                {
                  "expression": {
                    "id": 2779,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 2777,
                      "name": "podManagerContractAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2771,
                      "src": "740:25:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 2778,
                      "name": "_contractAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2774,
                      "src": "768:16:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "740:44:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 2780,
                  "nodeType": "ExpressionStatement",
                  "src": "740:44:8"
                }
              ]
            },
            "documentation": {
              "id": 2772,
              "nodeType": "StructuredDocumentation",
              "src": "433:211:8",
              "text": " @notice saves the Pod Manager contract address\n @dev IMPORTANT: override this method and set the onlyOwner modifier\n @param _contractAddress the address of the Pod Manager contract"
            },
            "functionSelector": "b4401e5f",
            "id": 2782,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setPodManagerContractAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2775,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2774,
                  "mutability": "mutable",
                  "name": "_contractAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 2782,
                  "src": "687:24:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2773,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "687:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "686:26:8"
            },
            "returnParameters": {
              "id": 2776,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "730:0:8"
            },
            "scope": 2821,
            "src": "649:142:8",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2819,
              "nodeType": "Block",
              "src": "1098:259:8",
              "statements": [
                {
                  "assignments": [
                    2791
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2791,
                      "mutability": "mutable",
                      "name": "balance",
                      "nodeType": "VariableDeclaration",
                      "scope": 2819,
                      "src": "1108:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2790,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1108:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2796,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2793,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "1136:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2794,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1136:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 2792,
                      "name": "balanceOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5032,
                      "src": "1126:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view returns (uint256)"
                      }
                    },
                    "id": 2795,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1126:21:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1108:39:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2800,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2798,
                          "name": "balance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2791,
                          "src": "1165:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 2799,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2787,
                          "src": "1176:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1165:18:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420656e6f7567682066756e6473",
                        "id": 2801,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1185:18:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_38fc6ba06c924208472ab053d62249a6a0165c760c073089bf019af8c267f725",
                          "typeString": "literal_string \"Not enough funds\""
                        },
                        "value": "Not enough funds"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_38fc6ba06c924208472ab053d62249a6a0165c760c073089bf019af8c267f725",
                          "typeString": "literal_string \"Not enough funds\""
                        }
                      ],
                      "id": 2797,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1157:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2802,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1157:47:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2803,
                  "nodeType": "ExpressionStatement",
                  "src": "1157:47:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2805,
                        "name": "podManagerContractAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2771,
                        "src": "1223:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2806,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2787,
                        "src": "1250:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2804,
                      "name": "approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5092,
                      "src": "1215:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) returns (bool)"
                      }
                    },
                    "id": 2807,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1215:43:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2808,
                  "nodeType": "ExpressionStatement",
                  "src": "1215:43:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2813,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "1317:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2814,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1317:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2815,
                        "name": "_podAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2785,
                        "src": "1329:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2816,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2787,
                        "src": "1342:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 2810,
                            "name": "podManagerContractAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2771,
                            "src": "1280:25:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 2809,
                          "name": "PodManager",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3647,
                          "src": "1269:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_PodManager_$3647_$",
                            "typeString": "type(contract PodManager)"
                          }
                        },
                        "id": 2811,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1269:37:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_PodManager_$3647",
                          "typeString": "contract PodManager"
                        }
                      },
                      "id": 2812,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "investPod",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3252,
                      "src": "1269:47:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256) external"
                      }
                    },
                    "id": 2817,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1269:81:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2818,
                  "nodeType": "ExpressionStatement",
                  "src": "1269:81:8"
                }
              ]
            },
            "documentation": {
              "id": 2783,
              "nodeType": "StructuredDocumentation",
              "src": "797:230:8",
              "text": " @notice invest to a pod in the Pod Manager Contract\n @dev allows approve and call in one transaction\n @param _podAddress the address of the pod to invest in\n @param _amount the amount to invest"
            },
            "functionSelector": "99d3d801",
            "id": 2820,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "investPod",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2788,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2785,
                  "mutability": "mutable",
                  "name": "_podAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 2820,
                  "src": "1051:19:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2784,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1051:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2787,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 2820,
                  "src": "1072:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2786,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1072:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1050:38:8"
            },
            "returnParameters": {
              "id": 2789,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1098:0:8"
            },
            "scope": 2821,
            "src": "1032:325:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 2822,
        "src": "326:1033:8"
      }
    ],
    "src": "32:1328:8"
  },
  "legacyAST": {
    "absolutePath": "/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-pod/contracts/PodFundingTokenExtension.sol",
    "exportedSymbols": {
      "AccessControl": [
        4715
      ],
      "AddMediaStreamingsRequest": [
        2626
      ],
      "Address": [
        7022
      ],
      "Clones": [
        4795
      ],
      "Context": [
        7043
      ],
      "Counters": [
        7117
      ],
      "Distribution": [
        2543
      ],
      "ERC165": [
        7344
      ],
      "ERC20": [
        5479
      ],
      "ERC721": [
        6400
      ],
      "ERC721Pausable": [
        6571
      ],
      "ERC721URIStorage": [
        6699
      ],
      "FundingMedia": [
        4328
      ],
      "IAccessControl": [
        4391
      ],
      "IERC165": [
        7356
      ],
      "IERC20": [
        5557
      ],
      "IERC20Metadata": [
        5582
      ],
      "IERC721": [
        6516
      ],
      "IERC721Metadata": [
        6726
      ],
      "IERC721Receiver": [
        6534
      ],
      "Initializable": [
        4841
      ],
      "Media": [
        2578
      ],
      "MediaFractionalizeManager": [
        1001
      ],
      "MediaLibrary": [
        1423
      ],
      "MediaManager": [
        2120
      ],
      "MediaShare": [
        2618
      ],
      "Pausable": [
        4933
      ],
      "Pod": [
        4305
      ],
      "PodFundingTokenExtension": [
        2821
      ],
      "PodInfo": [
        4320
      ],
      "PodManager": [
        3647
      ],
      "PodToken": [
        3802
      ],
      "PodWithdrawManager": [
        4285
      ],
      "PriviAMM": [
        502
      ],
      "PriviNFT": [
        2531
      ],
      "ShareHolder": [
        2538
      ],
      "Strings": [
        7320
      ],
      "UpdateMediaProposal": [
        2611
      ],
      "UpdateMediaRequest": [
        2592
      ],
      "ViewInfo": [
        2558
      ],
      "WithdrawProposal": [
        4347
      ]
    },
    "id": 2822,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2764,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:8"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 2765,
        "nodeType": "ImportDirective",
        "scope": 2822,
        "sourceUnit": 5480,
        "src": "57:55:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ericng/Documents/PRIVI/Privi-Polygon/privi-media-pod/contracts/PodManager.sol",
        "file": "./PodManager.sol",
        "id": 2766,
        "nodeType": "ImportDirective",
        "scope": 2822,
        "sourceUnit": 3648,
        "src": "113:26:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 2768,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5479,
              "src": "372:5:8"
            },
            "id": 2769,
            "nodeType": "InheritanceSpecifier",
            "src": "372:5:8"
          }
        ],
        "contractDependencies": [
          5479,
          5557,
          5582,
          7043
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 2767,
          "nodeType": "StructuredDocumentation",
          "src": "141:184:8",
          "text": " @title pod contract bridge with funding tokens\n @author Eric Nordelo\n @notice a extension of an ERC20 to interact with pod contract in one transaction (approve and call)"
        },
        "fullyImplemented": false,
        "id": 2821,
        "linearizedBaseContracts": [
          2821,
          5479,
          5582,
          5557,
          7043
        ],
        "name": "PodFundingTokenExtension",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 2771,
            "mutability": "mutable",
            "name": "podManagerContractAddress",
            "nodeType": "VariableDeclaration",
            "scope": 2821,
            "src": "384:42:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 2770,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "384:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2781,
              "nodeType": "Block",
              "src": "730:61:8",
              "statements": [
                {
                  "expression": {
                    "id": 2779,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 2777,
                      "name": "podManagerContractAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2771,
                      "src": "740:25:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 2778,
                      "name": "_contractAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2774,
                      "src": "768:16:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "740:44:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 2780,
                  "nodeType": "ExpressionStatement",
                  "src": "740:44:8"
                }
              ]
            },
            "documentation": {
              "id": 2772,
              "nodeType": "StructuredDocumentation",
              "src": "433:211:8",
              "text": " @notice saves the Pod Manager contract address\n @dev IMPORTANT: override this method and set the onlyOwner modifier\n @param _contractAddress the address of the Pod Manager contract"
            },
            "functionSelector": "b4401e5f",
            "id": 2782,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setPodManagerContractAddress",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2775,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2774,
                  "mutability": "mutable",
                  "name": "_contractAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 2782,
                  "src": "687:24:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2773,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "687:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "686:26:8"
            },
            "returnParameters": {
              "id": 2776,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "730:0:8"
            },
            "scope": 2821,
            "src": "649:142:8",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2819,
              "nodeType": "Block",
              "src": "1098:259:8",
              "statements": [
                {
                  "assignments": [
                    2791
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2791,
                      "mutability": "mutable",
                      "name": "balance",
                      "nodeType": "VariableDeclaration",
                      "scope": 2819,
                      "src": "1108:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2790,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1108:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2796,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2793,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "1136:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2794,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1136:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 2792,
                      "name": "balanceOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5032,
                      "src": "1126:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view returns (uint256)"
                      }
                    },
                    "id": 2795,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1126:21:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1108:39:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2800,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2798,
                          "name": "balance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2791,
                          "src": "1165:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 2799,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2787,
                          "src": "1176:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1165:18:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420656e6f7567682066756e6473",
                        "id": 2801,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1185:18:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_38fc6ba06c924208472ab053d62249a6a0165c760c073089bf019af8c267f725",
                          "typeString": "literal_string \"Not enough funds\""
                        },
                        "value": "Not enough funds"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_38fc6ba06c924208472ab053d62249a6a0165c760c073089bf019af8c267f725",
                          "typeString": "literal_string \"Not enough funds\""
                        }
                      ],
                      "id": 2797,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1157:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2802,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1157:47:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2803,
                  "nodeType": "ExpressionStatement",
                  "src": "1157:47:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2805,
                        "name": "podManagerContractAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2771,
                        "src": "1223:25:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2806,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2787,
                        "src": "1250:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2804,
                      "name": "approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5092,
                      "src": "1215:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) returns (bool)"
                      }
                    },
                    "id": 2807,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1215:43:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2808,
                  "nodeType": "ExpressionStatement",
                  "src": "1215:43:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2813,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "1317:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2814,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1317:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2815,
                        "name": "_podAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2785,
                        "src": "1329:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2816,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2787,
                        "src": "1342:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 2810,
                            "name": "podManagerContractAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2771,
                            "src": "1280:25:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 2809,
                          "name": "PodManager",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3647,
                          "src": "1269:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_PodManager_$3647_$",
                            "typeString": "type(contract PodManager)"
                          }
                        },
                        "id": 2811,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1269:37:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_PodManager_$3647",
                          "typeString": "contract PodManager"
                        }
                      },
                      "id": 2812,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "investPod",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3252,
                      "src": "1269:47:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256) external"
                      }
                    },
                    "id": 2817,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1269:81:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2818,
                  "nodeType": "ExpressionStatement",
                  "src": "1269:81:8"
                }
              ]
            },
            "documentation": {
              "id": 2783,
              "nodeType": "StructuredDocumentation",
              "src": "797:230:8",
              "text": " @notice invest to a pod in the Pod Manager Contract\n @dev allows approve and call in one transaction\n @param _podAddress the address of the pod to invest in\n @param _amount the amount to invest"
            },
            "functionSelector": "99d3d801",
            "id": 2820,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "investPod",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2788,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2785,
                  "mutability": "mutable",
                  "name": "_podAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 2820,
                  "src": "1051:19:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2784,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1051:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2787,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 2820,
                  "src": "1072:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2786,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1072:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1050:38:8"
            },
            "returnParameters": {
              "id": 2789,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1098:0:8"
            },
            "scope": 2821,
            "src": "1032:325:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 2822,
        "src": "326:1033:8"
      }
    ],
    "src": "32:1328:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.1+commit.df193b15.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.1",
  "updatedAt": "2021-07-10T21:33:15.795Z",
  "devdoc": {
    "author": "Eric Nordelo",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "investPod(address,uint256)": {
        "details": "allows approve and call in one transaction",
        "params": {
          "_amount": "the amount to invest",
          "_podAddress": "the address of the pod to invest in"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "setPodManagerContractAddress(address)": {
        "details": "IMPORTANT: override this method and set the onlyOwner modifier",
        "params": {
          "_contractAddress": "the address of the Pod Manager contract"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "title": "pod contract bridge with funding tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "investPod(address,uint256)": {
        "notice": "invest to a pod in the Pod Manager Contract"
      },
      "setPodManagerContractAddress(address)": {
        "notice": "saves the Pod Manager contract address"
      }
    },
    "notice": "a extension of an ERC20 to interact with pod contract in one transaction (approve and call)",
    "version": 1
  }
}